[11.11.2024 06:18] Read previous papers.
[11.11.2024 06:18] Generating top page (month).
[11.11.2024 06:18] Writing top page (month).
[11.11.2024 08:07] Read previous papers.
[11.11.2024 08:07] Get feed.
[11.11.2024 08:07] Get page data from previous paper. URL: https://huggingface.co/papers/2411.05288
[11.11.2024 08:07] Get page data from previous paper. URL: https://huggingface.co/papers/2411.05738
[11.11.2024 08:07] Get page data from previous paper. URL: https://huggingface.co/papers/2411.02462
[11.11.2024 08:07] Extract page data from URL. URL: https://huggingface.co/papers/2411.05457
[11.11.2024 08:07] Get page data from previous paper. URL: https://huggingface.co/papers/2411.04425
[11.11.2024 08:07] ********************************************************************************
[11.11.2024 08:07] Abstract 0. Pipeline parallelism is widely used to scale the training of transformer-based large language models, various works have been done to improve its throughput and memory footprint. In this paper, we address a frequently overlooked issue: the vocabulary layers can cause imbalanced computation and memor...
[11.11.2024 08:07] ********************************************************************************
[11.11.2024 08:07] Abstract 1. We present StdGEN, an innovative pipeline for generating semantically decomposed high-quality 3D characters from single images, enabling broad applications in virtual reality, gaming, and filmmaking, etc. Unlike previous methods which struggle with limited decomposability, unsatisfactory quality, an...
[11.11.2024 08:07] ********************************************************************************
[11.11.2024 08:07] Abstract 2. The advent of large language models (LLMs) like GitHub Copilot has significantly enhanced programmers' productivity, particularly in code generation. However, these models often struggle with real-world tasks without fine-tuning. As LLMs grow larger and more performant, fine-tuning for specialized t...
[11.11.2024 08:07] ********************************************************************************
[11.11.2024 08:07] Abstract 3. Technical debt (TD) is a term used to describe the additional work and costs that emerge when developers have opted for a quick and easy solution to a problem, rather than a more effective and well-designed, but time-consuming approach. Self-Admitted Technical Debts (SATDs) are a specific type of te...
[11.11.2024 08:07] ********************************************************************************
[11.11.2024 08:07] Abstract 4. Fine-tuning large language models (LLMs) is essential for enhancing their performance on specific tasks but is often resource-intensive due to redundant or uninformative data. To address this inefficiency, we introduce DELIFT (Data Efficient Language model Instruction Fine-Tuning), a novel algorithm...
[11.11.2024 08:07] Read previous papers.
[11.11.2024 08:07] Generating reviews via LLM API.
[11.11.2024 08:07] Using data from previous issue: {"categories": ["#architecture", "#inference", "#open_source", "#optimization", "#training"], "emoji": "‚ö°", "ru": {"title": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–µ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π", "desc": "–°—Ç–∞—Ç—å—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ
[11.11.2024 08:07] Using data from previous issue: {"categories": ["#3d", "#diffusion", "#games"], "emoji": "üé≠", "ru": {"title": "StdGEN: –†–µ–≤–æ–ª—é—Ü–∏—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ 3D-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º", "desc": "StdGEN - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä
[11.11.2024 08:07] Using data from previous issue: {"categories": ["#optimization", "#training", "#benchmark", "#plp"], "emoji": "üß™", "ru": {"title": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤", "desc": "–≠—Ç–∞ —Å—Ç–∞—Ç—å—è –∏—Å—Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (PEFT) –¥–ª—è –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (LLM) –≤ –∑–∞
[11.11.2024 08:07] Querying the API.
[11.11.2024 08:07] Claude request. Model: claude-3-5-sonnet-20240620. Prompt: Read an abstract of the ML paper and return a JSON with fields: 'desc': explanation of the paper in Russian (4 sentences), use correct machine learning terms. 'emoji': emoji that will reflect the theme of an article somehow, only one emoji. 'title': a slogan of a main idea of the article in Russian. Return only JSON and nothing else.

Technical debt (TD) is a term used to describe the additional work and costs that emerge when developers have opted for a quick and easy solution to a problem, rather than a more effective and well-designed, but time-consuming approach. Self-Admitted Technical Debts (SATDs) are a specific type of technical debts that developers intentionally document and acknowledge, typically via textual comments. While these self-admitted comments are a useful tool for identifying technical debts, most of the existing approaches focus on capturing crucial tokens associated with various categories of TD, neglecting the rich information embedded within the source code itself. Recent research has focused on detecting SATDs by analyzing comments embedded in source code, and there has been little work dealing with technical debts contained in the source code. To fill such a gap, in this study, through the analysis of comments and their associated source code from 974 Java projects hosted in the Stack corpus, we curated the first ever dataset of TD identified by code comments, coupled with its associated source code. Through an empirical evaluation, we found out that the comments of the resulting dataset help enhance the prediction performance of state-of-the-art SATD detection models. More importantly, including the classified source code significantly improves the accuracy in predicting various types of technical debt. In this respect, our work is two-fold: (i) We believe that our dataset will catalyze future work in the domain, inspiring various research issues related to the recognition of technical debt; (ii) The proposed classifiers may serve as baselines for other studies on the detection of TD by means of the curated dataset.
[11.11.2024 08:07] Response: {
  "desc": "–≠—Ç–∞ —Å—Ç–∞—Ç—å—è –ø–æ—Å–≤—è—â–µ–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ (–¢–î) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –ê–≤—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø—Ä–∏–º–µ—Ä—ã –¢–î, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –∫–æ–¥—É, –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞. –†–∞–±–æ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –¢–î, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –±—É–¥—É—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.",
  "emoji": "üîç",
  "title": "–ù–æ–≤—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥: –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
}
[11.11.2024 08:07] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

DATASET: Papers that introduce new datasets or make significant modifications to existing ones
DATA: Papers focusing on data processing, cleaning, collection, or curation methodologies
BENCHMARK: Papers proposing or analyzing model evaluation frameworks and benchmarks
AGENTS: Papers exploring autonomous agents, web agents, or agent-based architectures
CV: Papers developing computer vision methods or visual processing systems
RL: Papers investigating reinforcement learning theory or applications
RLHF: Papers specifically about human feedback in RL (PPO, DPO, etc.)
RAG: Papers advancing retrieval-augmented generation techniques
PLP: Papers about Programming Language Processing models or programming benchmarks
INFERENCE: Papers optimizing model deployment (quantization, pruning, etc.)
3D: Papers on 3D content generation, processing, or understanding
AUDIO: Papers advancing speech/audio processing or generation
VIDEO: Papers on video analysis, generation, or understanding
MULTIMODAL: Papers combining multiple input/output modalities
MATH: Papers focused on mathematical theory and algorithms
MULTILINGUAL: Papers addressing multiple languages or cross-lingual capabilities, including all non English models
ARCHITECTURE: Papers proposing novel neural architectures or components
HEALTHCARE: Papers applying ML to medical/healthcare domains
TRAINING: Papers improving model training or fine-tuning methods
ROBOTICS: Papers on robotic systems and embodied AI
SMALL_MODELS: Papers that describe models considering small, below 1 billion parameters or similar 

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"Technical debt (TD) is a term used to describe the additional work and costs that emerge when developers have opted for a quick and easy solution to a problem, rather than a more effective and well-designed, but time-consuming approach. Self-Admitted Technical Debts (SATDs) are a specific type of technical debts that developers intentionally document and acknowledge, typically via textual comments. While these self-admitted comments are a useful tool for identifying technical debts, most of the existing approaches focus on capturing crucial tokens associated with various categories of TD, neglecting the rich information embedded within the source code itself. Recent research has focused on detecting SATDs by analyzing comments embedded in source code, and there has been little work dealing with technical debts contained in the source code. To fill such a gap, in this study, through the analysis of comments and their associated source code from 974 Java projects hosted in the Stack corpus, we curated the first ever dataset of TD identified by code comments, coupled with its associated source code. Through an empirical evaluation, we found out that the comments of the resulting dataset help enhance the prediction performance of state-of-the-art SATD detection models. More importantly, including the classified source code significantly improves the accuracy in predicting various types of technical debt. In this respect, our work is two-fold: (i) We believe that our dataset will catalyze future work in the domain, inspiring various research issues related to the recognition of technical debt; (ii) The proposed classifiers may serve as baselines for other studies on the detection of TD by means of the curated dataset."

[11.11.2024 08:07] Response: ```python
['DATASET', 'DATA', 'TRAINING']
```
[11.11.2024 08:07] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

AGI: Papers discussing artificial general intelligence concepts
GAMES: Papers applying ML to games or game development
INTERPRETABILITY: Papers analyzing model behavior and explanations
REASONING: Papers enhancing logical reasoning capabilities
TRANSFER_LEARNING: Papers on knowledge transfer between models/domains
GRAPHS: Papers advancing graph neural networks and applications
ETHICS: Papers addressing AI ethics, fairness, and bias
SECURITY: Papers on model security and adversarial robustness
OPTIMIZATION: Papers advancing training optimization methods
SURVEY: Papers comprehensively reviewing research areas
DIFFUSION: Papers on diffusion-based generative models
ALIGNMENT: Papers about aligning language models with human values, preferences, and intended behavior
STORY_GENERATION: Papers on story generation, including plot generation and author style adaptation
HALLUCINATIONS: Papers about the hallucinations, hallucinations analysis and mitigation
LONG_CONTEXT: Papers about long context handling, including techniques to extend context length
SYNTHETIC: Papers about using synthetic data for training, including methods for generating and leveraging artificial data
TRANSLATION: Papers on machine translation, including techniques, data and applications for translating between languages
LEAKAGE: Papers about data leakage, including issues of unintended data exposure and methods to detect or prevent it
OPEN_SOURCE: Papers that contribute to open-source projects by releasing models, datasets, or frameworks to the public
SCIENCE: Papers on scientific applications of LM including understanding of science articles and research automatization
LOW_RESOURCE: Papers that mention low-resource languages

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"Technical debt (TD) is a term used to describe the additional work and costs that emerge when developers have opted for a quick and easy solution to a problem, rather than a more effective and well-designed, but time-consuming approach. Self-Admitted Technical Debts (SATDs) are a specific type of technical debts that developers intentionally document and acknowledge, typically via textual comments. While these self-admitted comments are a useful tool for identifying technical debts, most of the existing approaches focus on capturing crucial tokens associated with various categories of TD, neglecting the rich information embedded within the source code itself. Recent research has focused on detecting SATDs by analyzing comments embedded in source code, and there has been little work dealing with technical debts contained in the source code. To fill such a gap, in this study, through the analysis of comments and their associated source code from 974 Java projects hosted in the Stack corpus, we curated the first ever dataset of TD identified by code comments, coupled with its associated source code. Through an empirical evaluation, we found out that the comments of the resulting dataset help enhance the prediction performance of state-of-the-art SATD detection models. More importantly, including the classified source code significantly improves the accuracy in predicting various types of technical debt. In this respect, our work is two-fold: (i) We believe that our dataset will catalyze future work in the domain, inspiring various research issues related to the recognition of technical debt; (ii) The proposed classifiers may serve as baselines for other studies on the detection of TD by means of the curated dataset."

[11.11.2024 08:07] Response: []
[11.11.2024 08:07] Response: ParsedChatCompletionMessage[Article](content='{"desc":"This paper addresses the issue of Technical Debt (TD) in software development, particularly focusing on Self-Admitted Technical Debts (SATDs) documented by developers. It highlights the limitations of existing methods that primarily analyze comment tokens, overlooking the valuable information within the source code itself. The authors present a novel dataset created from 974 Java projects, linking SATD comments to their corresponding source code, which enhances the detection of technical debts. Their empirical evaluation demonstrates that incorporating both comments and source code significantly improves the performance of SATD detection models, paving the way for future research in this area.","title":"Bridging Comments and Code: Enhancing Technical Debt Detection"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc='This paper addresses the issue of Technical Debt (TD) in software development, particularly focusing on Self-Admitted Technical Debts (SATDs) documented by developers. It highlights the limitations of existing methods that primarily analyze comment tokens, overlooking the valuable information within the source code itself. The authors present a novel dataset created from 974 Java projects, linking SATD comments to their corresponding source code, which enhances the detection of technical debts. Their empirical evaluation demonstrates that incorporating both comments and source code significantly improves the performance of SATD detection models, paving the way for future research in this area.', title='Bridging Comments and Code: Enhancing Technical Debt Detection'))
[11.11.2024 08:07] Response: ParsedChatCompletionMessage[Article](content='{"desc":"ÊäÄÊúØÂÄ∫Âä°ÔºàTDÔºâÊòØÊåáÂºÄÂèëËÄÖ‰∏∫‰∫ÜÂø´ÈÄüËß£ÂÜ≥ÈóÆÈ¢òËÄåÈÄâÊã©ÁöÑÁÆÄÂçïÊñπÊ°àÊâÄÂ∏¶Êù•ÁöÑÈ¢ùÂ§ñÂ∑•‰ΩúÂíåÊàêÊú¨„ÄÇËá™ÊàëÊâøËÆ§ÁöÑÊäÄÊúØÂÄ∫Âä°ÔºàSATDÔºâÊòØÂºÄÂèëËÄÖÈÄöËøáÊñáÊú¨Ê≥®Èáä‰∏ªÂä®ËÆ∞ÂΩïÂíåÊâøËÆ§ÁöÑ‰∏ÄÁßçÁâπÂÆöÁ±ªÂûãÁöÑÊäÄÊúØÂÄ∫Âä°„ÄÇÊú¨ÊñáÈÄöËøáÂàÜÊûêÊù•Ëá™974‰∏™JavaÈ°πÁõÆÁöÑÊ≥®ÈáäÂíåÁõ∏ÂÖ≥Ê∫ê‰ª£Á†ÅÔºåÂàõÂª∫‰∫ÜÈ¶ñ‰∏™Áî±‰ª£Á†ÅÊ≥®ÈáäËØÜÂà´ÁöÑÊäÄÊúØÂÄ∫Âä°Êï∞ÊçÆÈõÜÔºåÂπ∂ÂèëÁé∞Ëøô‰∫õÊ≥®ÈáäËÉΩÊòæËëóÊèêÈ´òÁé∞ÊúâSATDÊ£ÄÊµãÊ®°ÂûãÁöÑÈ¢ÑÊµãÊÄßËÉΩ„ÄÇÊàë‰ª¨ÁöÑÁ†îÁ©∂‰∏ç‰ªÖ‰∏∫ÊäÄÊúØÂÄ∫Âä°ÁöÑËØÜÂà´Êèê‰æõ‰∫ÜÊñ∞ÁöÑÊï∞ÊçÆÈõÜÔºåËøòÊèêÂá∫‰∫ÜÂèØ‰Ωú‰∏∫Âü∫Á∫øÁöÑÂàÜÁ±ªÂô®ÔºåÊé®Âä®Êú™Êù•Áõ∏ÂÖ≥Á†îÁ©∂ÁöÑÂèëÂ±ï„ÄÇ","title":"ÊäÄÊúØÂÄ∫Âä°ËØÜÂà´ÁöÑÊñ∞ËßÜËßí"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc='ÊäÄÊúØÂÄ∫Âä°ÔºàTDÔºâÊòØÊåáÂºÄÂèëËÄÖ‰∏∫‰∫ÜÂø´ÈÄüËß£ÂÜ≥ÈóÆÈ¢òËÄåÈÄâÊã©ÁöÑÁÆÄÂçïÊñπÊ°àÊâÄÂ∏¶Êù•ÁöÑÈ¢ùÂ§ñÂ∑•‰ΩúÂíåÊàêÊú¨„ÄÇËá™ÊàëÊâøËÆ§ÁöÑÊäÄÊúØÂÄ∫Âä°ÔºàSATDÔºâÊòØÂºÄÂèëËÄÖÈÄöËøáÊñáÊú¨Ê≥®Èáä‰∏ªÂä®ËÆ∞ÂΩïÂíåÊâøËÆ§ÁöÑ‰∏ÄÁßçÁâπÂÆöÁ±ªÂûãÁöÑÊäÄÊúØÂÄ∫Âä°„ÄÇÊú¨ÊñáÈÄöËøáÂàÜÊûêÊù•Ëá™974‰∏™JavaÈ°πÁõÆÁöÑÊ≥®ÈáäÂíåÁõ∏ÂÖ≥Ê∫ê‰ª£Á†ÅÔºåÂàõÂª∫‰∫ÜÈ¶ñ‰∏™Áî±‰ª£Á†ÅÊ≥®ÈáäËØÜÂà´ÁöÑÊäÄÊúØÂÄ∫Âä°Êï∞ÊçÆÈõÜÔºåÂπ∂ÂèëÁé∞Ëøô‰∫õÊ≥®ÈáäËÉΩÊòæËëóÊèêÈ´òÁé∞ÊúâSATDÊ£ÄÊµãÊ®°ÂûãÁöÑÈ¢ÑÊµãÊÄßËÉΩ„ÄÇÊàë‰ª¨ÁöÑÁ†îÁ©∂‰∏ç‰ªÖ‰∏∫ÊäÄÊúØÂÄ∫Âä°ÁöÑËØÜÂà´Êèê‰æõ‰∫ÜÊñ∞ÁöÑÊï∞ÊçÆÈõÜÔºåËøòÊèêÂá∫‰∫ÜÂèØ‰Ωú‰∏∫Âü∫Á∫øÁöÑÂàÜÁ±ªÂô®ÔºåÊé®Âä®Êú™Êù•Áõ∏ÂÖ≥Á†îÁ©∂ÁöÑÂèëÂ±ï„ÄÇ', title='ÊäÄÊúØÂÄ∫Âä°ËØÜÂà´ÁöÑÊñ∞ËßÜËßí'))
[11.11.2024 08:07] Using data from previous issue: {"categories": ["#data", "#optimization", "#training"], "emoji": "üîç", "ru": {"title": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –º–µ–Ω—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏", "desc": "–°—Ç–∞—Ç—å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º DELIFT –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ñ–∞–π–Ω-—Ç—é–Ω–∏–Ω–≥–µ –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (LLM). DELIFT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ø
[11.11.2024 08:07] Loading Chinese text from previous data.
[11.11.2024 08:07] Renaming data file.
[11.11.2024 08:07] Renaming previous data. hf_papers.json to ./d/2024-11-11.json
[11.11.2024 08:07] Saving new data file.
[11.11.2024 08:07] Generating page.
[11.11.2024 08:07] Renaming previous page.
[11.11.2024 08:07] Renaming previous data. index.html to ./d/2024-11-11.html
[11.11.2024 08:07] [Experimental] Generating Chinese page for reading.
[11.11.2024 08:07] Chinese vocab [{'word': 'ËÆ®ËÆ∫', 'pinyin': 't«éo l√πn', 'trans': 'discuss'}, {'word': 'Â§ßÂûã', 'pinyin': 'd√† x√≠ng', 'trans': 'large-scale'}, {'word': 'ËØ≠Ë®ÄÊ®°Âûã', 'pinyin': 'y«î y√°n m√≥ x√≠ng', 'trans': 'language model'}, {'word': '‰ª£Á†ÅÁîüÊàê', 'pinyin': 'd√†i m«é shƒìng ch√©ng', 'trans': 'code generation'}, {'word': 'Êé®ÁêÜ‰ªªÂä°', 'pinyin': 'tuƒ´ l«ê r√®n w√π', 'trans': 'reasoning tasks'}, {'word': '‰ª£ÁêÜÁ≥ªÁªü', 'pinyin': 'd√†i l«ê x√¨ t«íng', 'trans': 'proxy system'}, {'word': 'ÈáçË¶ÅÊÄß', 'pinyin': 'zh√≤ng y√†o x√¨ng', 'trans': 'importance'}, {'word': 'ÂºÄÊîæËÆøÈóÆ', 'pinyin': 'kƒÅi f√†ng f«éng w√®n', 'trans': 'open access'}, {'word': 'ÊÄßËÉΩ', 'pinyin': 'x√¨ng n√©ng', 'trans': 'performance'}, {'word': 'Êé•Ëøë', 'pinyin': 'jiƒì j√¨n', 'trans': 'close to'}, {'word': '‰∏ìÊúâÊ®°Âûã', 'pinyin': 'zhuƒÅn y«íu m√≥ x√≠ng', 'trans': 'proprietary model'}, {'word': 'ÈÄÇÂêà', 'pinyin': 'sh√¨ h√©', 'trans': 'suitable'}, {'word': '‰∏•Ê†º', 'pinyin': 'y√°n g√©', 'trans': 'strict'}, {'word': 'ÁßëÂ≠¶Á†îÁ©∂', 'pinyin': 'kƒì xu√© y√°n ji≈´', 'trans': 'scientific research'}, {'word': 'È´òË¥®Èáè', 'pinyin': 'gƒÅo zh√¨ li√†ng', 'trans': 'high quality'}, {'word': 'ÊúâÈôê', 'pinyin': 'y«íu xi√†n', 'trans': 'limited'}, {'word': 'Â°´Ë°•', 'pinyin': 'ti√°n b«î', 'trans': 'fill'}, {'word': 'Á©∫ÁôΩ', 'pinyin': 'k√≤ng b√°i', 'trans': 'gap'}, {'word': '‰ΩúËÄÖ', 'pinyin': 'zu√≤ zhƒõ', 'trans': 'author'}, {'word': '‰ªãÁªç', 'pinyin': 'ji√® sh√†o', 'trans': 'introduce'}, {'word': 'OpenCoder', 'pinyin': 'OpenCoder', 'trans': 'OpenCoder'}, {'word': 'È°∂Â∞ñ', 'pinyin': 'd«êng jiƒÅn', 'trans': 'top-notch'}, {'word': 'Â™≤Áæé', 'pinyin': 'p√¨ mƒõi', 'trans': 'rival'}, {'word': 'È¢ÜÂÖàÊ®°Âûã', 'pinyin': 'l«êng xiƒÅn m√≥ x√≠ng', 'trans': 'leading model'}, {'word': 'ËØ¶ÁªÜ', 'pinyin': 'xi√°ng x√¨', 'trans': 'detailed'}, {'word': 'ËÆ≠ÁªÉÊï∞ÊçÆ', 'pinyin': 'x√πn li√†n sh√π j√π', 'trans': 'training data'}, {'word': 'ÂçèËÆÆ', 'pinyin': 'xi√© y√¨', 'trans': 'protocol'}, {'word': 'ÂºÄÊîæÊÄß', 'pinyin': 'kƒÅi f√†ng x√¨ng', 'trans': 'openness'}, {'word': 'Âä†ÈÄü', 'pinyin': 'jiƒÅ s√π', 'trans': 'accelerate'}, {'word': 'ÂèØÈáçÂ§ç', 'pinyin': 'kƒõ ch√≥ng f√π', 'trans': 'reproducible'}, {'word': 'ËøõÂ±ï', 'pinyin': 'j√¨n zh«én', 'trans': 'progress'}]
[11.11.2024 08:07] Renaming previous Chinese page.
[11.11.2024 08:07] Renaming previous data. zh.html to ./d/2024-11-10_zh_reading_task.html
[11.11.2024 08:07] Writing Chinese reading task.
[11.11.2024 08:07] Writing result.
[11.11.2024 08:07] Renaming log file.
[11.11.2024 08:07] Renaming previous data. log.txt to ./logs/2024-11-11_last_log.txt
