[11.11.2024 02:44] Read previous papers.
[11.11.2024 02:44] Generating top page (month).
[11.11.2024 02:44] Writing top page (month).
[11.11.2024 04:14] Read previous papers.
[11.11.2024 04:14] Get feed.
[11.11.2024 04:14] Extract page data from URL. URL: https://huggingface.co/papers/2411.02462
[11.11.2024 04:14] Get page data from previous paper. URL: https://huggingface.co/papers/2411.05738
[11.11.2024 04:14] ********************************************************************************
[11.11.2024 04:14] Abstract 0. The advent of large language models (LLMs) like GitHub Copilot has significantly enhanced programmers' productivity, particularly in code generation. However, these models often struggle with real-world tasks without fine-tuning. As LLMs grow larger and more performant, fine-tuning for specialized t...
[11.11.2024 04:14] ********************************************************************************
[11.11.2024 04:14] Abstract 1. We present StdGEN, an innovative pipeline for generating semantically decomposed high-quality 3D characters from single images, enabling broad applications in virtual reality, gaming, and filmmaking, etc. Unlike previous methods which struggle with limited decomposability, unsatisfactory quality, an...
[11.11.2024 04:14] Read previous papers.
[11.11.2024 04:14] Generating reviews via LLM API.
[11.11.2024 04:14] Querying the API.
[11.11.2024 04:14] Claude request. Model: claude-3-5-sonnet-20240620. Prompt: Read an abstract of the ML paper and return a JSON with fields: 'desc': explanation of the paper in Russian (4 sentences), use correct machine learning terms. 'emoji': emoji that will reflect the theme of an article somehow, only one emoji. 'title': a slogan of a main idea of the article in Russian. Return only JSON and nothing else.

The advent of large language models (LLMs) like GitHub Copilot has significantly enhanced programmers' productivity, particularly in code generation. However, these models often struggle with real-world tasks without fine-tuning. As LLMs grow larger and more performant, fine-tuning for specialized tasks becomes increasingly expensive. Parameter-efficient fine-tuning (PEFT) methods, which fine-tune only a subset of model parameters, offer a promising solution by reducing the computational costs of tuning LLMs while maintaining their performance. Existing studies have explored using PEFT and LLMs for various code-related tasks and found that the effectiveness of PEFT techniques is task-dependent. The application of PEFT techniques in unit test generation remains underexplored. The state-of-the-art is limited to using LLMs with full fine-tuning to generate unit tests. This paper investigates both full fine-tuning and various PEFT methods, including LoRA, (IA)^3, and prompt tuning, across different model architectures and sizes. We use well-established benchmark datasets to evaluate their effectiveness in unit test generation. Our findings show that PEFT methods can deliver performance comparable to full fine-tuning for unit test generation, making specialized fine-tuning more accessible and cost-effective. Notably, prompt tuning is the most effective in terms of cost and resource utilization, while LoRA approaches the effectiveness of full fine-tuning in several cases.
[11.11.2024 04:15] Response: {
  "desc": "–≠—Ç–∞ —Å—Ç–∞—Ç—å—è –∏—Å—Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (PEFT) –¥–ª—è –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (LLM) –≤ –∑–∞–¥–∞—á–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –ê–≤—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç –ø–æ–ª–Ω—É—é —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ PEFT, –≤–∫–ª—é—á–∞—è LoRA, (IA)^3 –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤, –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞—Ö –∏ —Ä–∞–∑–º–µ—Ä–∞—Ö –º–æ–¥–µ–ª–µ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –º–µ—Ç–æ–¥—ã PEFT –º–æ–≥—É—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å—Ä–∞–≤–Ω–∏–º—É—é —Å –ø–æ–ª–Ω–æ–π —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –ø—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã. –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤, –∞ LoRA –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–π —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
  "emoji": "üß™",
  "title": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
}
[11.11.2024 04:15] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

DATASET: Papers that introduce new datasets or make significant modifications to existing ones
DATA: Papers focusing on data processing, cleaning, collection, or curation methodologies
BENCHMARK: Papers proposing or analyzing model evaluation frameworks and benchmarks
AGENTS: Papers exploring autonomous agents, web agents, or agent-based architectures
CV: Papers developing computer vision methods or visual processing systems
RL: Papers investigating reinforcement learning theory or applications
RLHF: Papers specifically about human feedback in RL (PPO, DPO, etc.)
RAG: Papers advancing retrieval-augmented generation techniques
PLP: Papers about Programming Language Processing models or programming benchmarks
INFERENCE: Papers optimizing model deployment (quantization, pruning, etc.)
3D: Papers on 3D content generation, processing, or understanding
AUDIO: Papers advancing speech/audio processing or generation
VIDEO: Papers on video analysis, generation, or understanding
MULTIMODAL: Papers combining multiple input/output modalities
MATH: Papers focused on mathematical theory and algorithms
MULTILINGUAL: Papers addressing multiple languages or cross-lingual capabilities, including all non English models
ARCHITECTURE: Papers proposing novel neural architectures or components
HEALTHCARE: Papers applying ML to medical/healthcare domains
TRAINING: Papers improving model training or fine-tuning methods
ROBOTICS: Papers on robotic systems and embodied AI
SMALL_MODELS: Papers that describe models considering small, below 1 billion parameters or similar 

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"The advent of large language models (LLMs) like GitHub Copilot has significantly enhanced programmers' productivity, particularly in code generation. However, these models often struggle with real-world tasks without fine-tuning. As LLMs grow larger and more performant, fine-tuning for specialized tasks becomes increasingly expensive. Parameter-efficient fine-tuning (PEFT) methods, which fine-tune only a subset of model parameters, offer a promising solution by reducing the computational costs of tuning LLMs while maintaining their performance. Existing studies have explored using PEFT and LLMs for various code-related tasks and found that the effectiveness of PEFT techniques is task-dependent. The application of PEFT techniques in unit test generation remains underexplored. The state-of-the-art is limited to using LLMs with full fine-tuning to generate unit tests. This paper investigates both full fine-tuning and various PEFT methods, including LoRA, (IA)^3, and prompt tuning, across different model architectures and sizes. We use well-established benchmark datasets to evaluate their effectiveness in unit test generation. Our findings show that PEFT methods can deliver performance comparable to full fine-tuning for unit test generation, making specialized fine-tuning more accessible and cost-effective. Notably, prompt tuning is the most effective in terms of cost and resource utilization, while LoRA approaches the effectiveness of full fine-tuning in several cases."

[11.11.2024 04:15] Response: ```python
['PLP', 'TRAINING', 'BENCHMARK']
```
[11.11.2024 04:15] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

AGI: Papers discussing artificial general intelligence concepts
GAMES: Papers applying ML to games or game development
INTERPRETABILITY: Papers analyzing model behavior and explanations
REASONING: Papers enhancing logical reasoning capabilities
TRANSFER_LEARNING: Papers on knowledge transfer between models/domains
GRAPHS: Papers advancing graph neural networks and applications
ETHICS: Papers addressing AI ethics, fairness, and bias
SECURITY: Papers on model security and adversarial robustness
OPTIMIZATION: Papers advancing training optimization methods
SURVEY: Papers comprehensively reviewing research areas
DIFFUSION: Papers on diffusion-based generative models
ALIGNMENT: Papers about aligning language models with human values, preferences, and intended behavior
STORY_GENERATION: Papers on story generation, including plot generation and author style adaptation
HALLUCINATIONS: Papers about the hallucinations, hallucinations analysis and mitigation
LONG_CONTEXT: Papers about long context handling, including techniques to extend context length
SYNTHETIC: Papers about using synthetic data for training, including methods for generating and leveraging artificial data
TRANSLATION: Papers on machine translation, including techniques, data and applications for translating between languages
LEAKAGE: Papers about data leakage, including issues of unintended data exposure and methods to detect or prevent it
OPEN_SOURCE: Papers that contribute to open-source projects by releasing models, datasets, or frameworks to the public
SCIENCE: Papers on scientific applications of LM including understanding of science articles and research automatization
LOW_RESOURCE: Papers that mention low-resource languages

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"The advent of large language models (LLMs) like GitHub Copilot has significantly enhanced programmers' productivity, particularly in code generation. However, these models often struggle with real-world tasks without fine-tuning. As LLMs grow larger and more performant, fine-tuning for specialized tasks becomes increasingly expensive. Parameter-efficient fine-tuning (PEFT) methods, which fine-tune only a subset of model parameters, offer a promising solution by reducing the computational costs of tuning LLMs while maintaining their performance. Existing studies have explored using PEFT and LLMs for various code-related tasks and found that the effectiveness of PEFT techniques is task-dependent. The application of PEFT techniques in unit test generation remains underexplored. The state-of-the-art is limited to using LLMs with full fine-tuning to generate unit tests. This paper investigates both full fine-tuning and various PEFT methods, including LoRA, (IA)^3, and prompt tuning, across different model architectures and sizes. We use well-established benchmark datasets to evaluate their effectiveness in unit test generation. Our findings show that PEFT methods can deliver performance comparable to full fine-tuning for unit test generation, making specialized fine-tuning more accessible and cost-effective. Notably, prompt tuning is the most effective in terms of cost and resource utilization, while LoRA approaches the effectiveness of full fine-tuning in several cases."

[11.11.2024 04:15] Response: ```python
["OPTIMIZATION"]
```
[11.11.2024 04:15] Response: ParsedChatCompletionMessage[Article](content='{"desc":"This paper explores the use of parameter-efficient fine-tuning (PEFT) methods for large language models (LLMs) in the context of unit test generation. It highlights the challenges of full fine-tuning, which can be costly and resource-intensive, especially as LLMs increase in size. The authors evaluate various PEFT techniques, such as LoRA and prompt tuning, to determine their effectiveness compared to full fine-tuning. The results indicate that PEFT methods can achieve performance similar to full fine-tuning, with prompt tuning being the most efficient option for resource utilization.","title":"Unlocking Cost-Effective Fine-Tuning for Unit Test Generation"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc='This paper explores the use of parameter-efficient fine-tuning (PEFT) methods for large language models (LLMs) in the context of unit test generation. It highlights the challenges of full fine-tuning, which can be costly and resource-intensive, especially as LLMs increase in size. The authors evaluate various PEFT techniques, such as LoRA and prompt tuning, to determine their effectiveness compared to full fine-tuning. The results indicate that PEFT methods can achieve performance similar to full fine-tuning, with prompt tuning being the most efficient option for resource utilization.', title='Unlocking Cost-Effective Fine-Tuning for Unit Test Generation'))
[11.11.2024 04:15] Response: ParsedChatCompletionMessage[Article](content='{"desc":"ËøôÁØáËÆ∫ÊñáÊé¢ËÆ®‰∫ÜÂ§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºàLLMsÔºâÂú®ÂçïÂÖÉÊµãËØïÁîüÊàê‰∏≠ÁöÑÂ∫îÁî®ÔºåÁâπÂà´ÊòØÂèÇÊï∞È´òÊïàÂæÆË∞ÉÔºàPEFTÔºâÊñπÊ≥ï„ÄÇ‰º†ÁªüÁöÑÂÖ®ÈáèÂæÆË∞ÉËôΩÁÑ∂ÊúâÊïàÔºå‰ΩÜÊàêÊú¨È´òÊòÇÔºåPEFTÊñπÊ≥ïÈÄöËøáÂè™ÂæÆË∞ÉÈÉ®ÂàÜÂèÇÊï∞Êù•Èôç‰ΩéËÆ°ÁÆóÂºÄÈîÄ„ÄÇÁ†îÁ©∂Ë°®ÊòéÔºåPEFTÊñπÊ≥ïÂú®ÂçïÂÖÉÊµãËØïÁîüÊàê‰∏≠ËÉΩÂ§üËææÂà∞‰∏éÂÖ®ÈáèÂæÆË∞ÉÁõ∏ÂΩìÁöÑÊÄßËÉΩÔºåÂ∞§ÂÖ∂ÊòØÊèêÁ§∫ÂæÆË∞ÉÂú®ÊàêÊú¨ÂíåËµÑÊ∫êÂà©Áî®‰∏äÊúÄ‰∏∫ÊúâÊïà„ÄÇËÆ∫ÊñáËøòÊØîËæÉ‰∫Ü‰∏çÂêåÊ®°ÂûãÊû∂ÊûÑÂíåÂ§ßÂ∞è‰∏ãÁöÑÂ§öÁßçPEFTÊñπÊ≥ïÔºåÂ±ïÁ§∫‰∫ÜÂÖ∂Âú®ÁâπÂÆö‰ªªÂä°‰∏≠ÁöÑÊúâÊïàÊÄß„ÄÇ","title":"ÂèÇÊï∞È´òÊïàÂæÆË∞ÉÔºöÊèêÂçáÂçïÂÖÉÊµãËØïÁîüÊàêÁöÑÁªèÊµéÊÄß‰∏éÊúâÊïàÊÄß"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc='ËøôÁØáËÆ∫ÊñáÊé¢ËÆ®‰∫ÜÂ§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºàLLMsÔºâÂú®ÂçïÂÖÉÊµãËØïÁîüÊàê‰∏≠ÁöÑÂ∫îÁî®ÔºåÁâπÂà´ÊòØÂèÇÊï∞È´òÊïàÂæÆË∞ÉÔºàPEFTÔºâÊñπÊ≥ï„ÄÇ‰º†ÁªüÁöÑÂÖ®ÈáèÂæÆË∞ÉËôΩÁÑ∂ÊúâÊïàÔºå‰ΩÜÊàêÊú¨È´òÊòÇÔºåPEFTÊñπÊ≥ïÈÄöËøáÂè™ÂæÆË∞ÉÈÉ®ÂàÜÂèÇÊï∞Êù•Èôç‰ΩéËÆ°ÁÆóÂºÄÈîÄ„ÄÇÁ†îÁ©∂Ë°®ÊòéÔºåPEFTÊñπÊ≥ïÂú®ÂçïÂÖÉÊµãËØïÁîüÊàê‰∏≠ËÉΩÂ§üËææÂà∞‰∏éÂÖ®ÈáèÂæÆË∞ÉÁõ∏ÂΩìÁöÑÊÄßËÉΩÔºåÂ∞§ÂÖ∂ÊòØÊèêÁ§∫ÂæÆË∞ÉÂú®ÊàêÊú¨ÂíåËµÑÊ∫êÂà©Áî®‰∏äÊúÄ‰∏∫ÊúâÊïà„ÄÇËÆ∫ÊñáËøòÊØîËæÉ‰∫Ü‰∏çÂêåÊ®°ÂûãÊû∂ÊûÑÂíåÂ§ßÂ∞è‰∏ãÁöÑÂ§öÁßçPEFTÊñπÊ≥ïÔºåÂ±ïÁ§∫‰∫ÜÂÖ∂Âú®ÁâπÂÆö‰ªªÂä°‰∏≠ÁöÑÊúâÊïàÊÄß„ÄÇ', title='ÂèÇÊï∞È´òÊïàÂæÆË∞ÉÔºöÊèêÂçáÂçïÂÖÉÊµãËØïÁîüÊàêÁöÑÁªèÊµéÊÄß‰∏éÊúâÊïàÊÄß'))
[11.11.2024 04:15] Using data from previous issue: {"categories": ["#3d", "#diffusion", "#games"], "emoji": "üé≠", "ru": {"title": "StdGEN: –†–µ–≤–æ–ª—é—Ü–∏—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ 3D-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º", "desc": "StdGEN - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä
[11.11.2024 04:15] Loading Chinese text from previous data.
[11.11.2024 04:15] Renaming data file.
[11.11.2024 04:15] Renaming previous data. hf_papers.json to ./d/2024-11-11.json
[11.11.2024 04:15] Saving new data file.
[11.11.2024 04:15] Generating page.
[11.11.2024 04:15] Renaming previous page.
[11.11.2024 04:15] Renaming previous data. index.html to ./d/2024-11-11.html
[11.11.2024 04:15] [Experimental] Generating Chinese page for reading.
[11.11.2024 04:15] Chinese vocab [{'word': 'ËÆ®ËÆ∫', 'pinyin': 't«éo l√πn', 'trans': 'discuss'}, {'word': 'Â§ßÂûã', 'pinyin': 'd√† x√≠ng', 'trans': 'large-scale'}, {'word': 'ËØ≠Ë®ÄÊ®°Âûã', 'pinyin': 'y«î y√°n m√≥ x√≠ng', 'trans': 'language model'}, {'word': '‰ª£Á†ÅÁîüÊàê', 'pinyin': 'd√†i m«é shƒìng ch√©ng', 'trans': 'code generation'}, {'word': 'Êé®ÁêÜ‰ªªÂä°', 'pinyin': 'tuƒ´ l«ê r√®n w√π', 'trans': 'reasoning tasks'}, {'word': '‰ª£ÁêÜÁ≥ªÁªü', 'pinyin': 'd√†i l«ê x√¨ t«íng', 'trans': 'proxy system'}, {'word': 'ÈáçË¶ÅÊÄß', 'pinyin': 'zh√≤ng y√†o x√¨ng', 'trans': 'importance'}, {'word': 'ÂºÄÊîæËÆøÈóÆ', 'pinyin': 'kƒÅi f√†ng f«éng w√®n', 'trans': 'open access'}, {'word': 'ÊÄßËÉΩ', 'pinyin': 'x√¨ng n√©ng', 'trans': 'performance'}, {'word': 'Êé•Ëøë', 'pinyin': 'jiƒì j√¨n', 'trans': 'close to'}, {'word': '‰∏ìÊúâÊ®°Âûã', 'pinyin': 'zhuƒÅn y«íu m√≥ x√≠ng', 'trans': 'proprietary model'}, {'word': 'ÈÄÇÂêà', 'pinyin': 'sh√¨ h√©', 'trans': 'suitable'}, {'word': '‰∏•Ê†º', 'pinyin': 'y√°n g√©', 'trans': 'strict'}, {'word': 'ÁßëÂ≠¶Á†îÁ©∂', 'pinyin': 'kƒì xu√© y√°n ji≈´', 'trans': 'scientific research'}, {'word': 'È´òË¥®Èáè', 'pinyin': 'gƒÅo zh√¨ li√†ng', 'trans': 'high quality'}, {'word': 'ÊúâÈôê', 'pinyin': 'y«íu xi√†n', 'trans': 'limited'}, {'word': 'Â°´Ë°•', 'pinyin': 'ti√°n b«î', 'trans': 'fill'}, {'word': 'Á©∫ÁôΩ', 'pinyin': 'k√≤ng b√°i', 'trans': 'gap'}, {'word': '‰ΩúËÄÖ', 'pinyin': 'zu√≤ zhƒõ', 'trans': 'author'}, {'word': '‰ªãÁªç', 'pinyin': 'ji√® sh√†o', 'trans': 'introduce'}, {'word': 'OpenCoder', 'pinyin': 'OpenCoder', 'trans': 'OpenCoder'}, {'word': 'È°∂Â∞ñ', 'pinyin': 'd«êng jiƒÅn', 'trans': 'top-notch'}, {'word': 'Â™≤Áæé', 'pinyin': 'p√¨ mƒõi', 'trans': 'rival'}, {'word': 'È¢ÜÂÖàÊ®°Âûã', 'pinyin': 'l«êng xiƒÅn m√≥ x√≠ng', 'trans': 'leading model'}, {'word': 'ËØ¶ÁªÜ', 'pinyin': 'xi√°ng x√¨', 'trans': 'detailed'}, {'word': 'ËÆ≠ÁªÉÊï∞ÊçÆ', 'pinyin': 'x√πn li√†n sh√π j√π', 'trans': 'training data'}, {'word': 'ÂçèËÆÆ', 'pinyin': 'xi√© y√¨', 'trans': 'protocol'}, {'word': 'ÂºÄÊîæÊÄß', 'pinyin': 'kƒÅi f√†ng x√¨ng', 'trans': 'openness'}, {'word': 'Âä†ÈÄü', 'pinyin': 'jiƒÅ s√π', 'trans': 'accelerate'}, {'word': 'ÂèØÈáçÂ§ç', 'pinyin': 'kƒõ ch√≥ng f√π', 'trans': 'reproducible'}, {'word': 'ËøõÂ±ï', 'pinyin': 'j√¨n zh«én', 'trans': 'progress'}]
[11.11.2024 04:15] Renaming previous Chinese page.
[11.11.2024 04:15] Renaming previous data. zh.html to ./d/2024-11-10_zh_reading_task.html
[11.11.2024 04:15] Writing Chinese reading task.
[11.11.2024 04:15] Writing result.
[11.11.2024 04:15] Renaming log file.
[11.11.2024 04:15] Renaming previous data. log.txt to ./logs/2024-11-11_last_log.txt
