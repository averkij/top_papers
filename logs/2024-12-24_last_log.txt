[24.12.2024 04:13] Read previous papers.
[24.12.2024 04:13] Generating top page (month).
[24.12.2024 04:13] Writing top page (month).
[24.12.2024 05:10] Read previous papers.
[24.12.2024 05:10] Get feed.
[24.12.2024 05:10] Get page data from previous paper. URL: https://huggingface.co/papers/2412.17256
[24.12.2024 05:10] Get page data from previous paper. URL: https://huggingface.co/papers/2412.17451
[24.12.2024 05:10] Get page data from previous paper. URL: https://huggingface.co/papers/2412.14922
[24.12.2024 05:10] Get page data from previous paper. URL: https://huggingface.co/papers/2412.16926
[24.12.2024 05:10] Extract page data from URL. URL: https://huggingface.co/papers/2412.17153
[24.12.2024 05:10] Get page data from previous paper. URL: https://huggingface.co/papers/2412.16686
[24.12.2024 05:10] Extract page data from URL. URL: https://huggingface.co/papers/2412.17747
[24.12.2024 05:10] Obtaining deleted papers (sometimes HF Daily Papers move some articles from today to past days).
[24.12.2024 05:10] No deleted papers detected.
[24.12.2024 05:10] Downloading and parsing papers (pdf, html). Total: 7.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.17256.
[24.12.2024 05:10] Extra JSON file exists (./assets/json/2412.17256.json), skip PDF parsing.
[24.12.2024 05:10] Paper image links file exists (./assets/img_data/2412.17256.json), skip HTML parsing.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.17451.
[24.12.2024 05:10] Extra JSON file exists (./assets/json/2412.17451.json), skip PDF parsing.
[24.12.2024 05:10] Paper image links file exists (./assets/img_data/2412.17451.json), skip HTML parsing.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.14922.
[24.12.2024 05:10] Extra JSON file exists (./assets/json/2412.14922.json), skip PDF parsing.
[24.12.2024 05:10] Paper image links file exists (./assets/img_data/2412.14922.json), skip HTML parsing.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.16926.
[24.12.2024 05:10] Extra JSON file exists (./assets/json/2412.16926.json), skip PDF parsing.
[24.12.2024 05:10] Paper image links file exists (./assets/img_data/2412.16926.json), skip HTML parsing.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.17153.
[24.12.2024 05:10] Downloading paper 2412.17153 from http://arxiv.org/pdf/2412.17153v1...
[24.12.2024 05:10] Extracting affiliations from text.
[24.12.2024 05:10] OpenAI request. Model: gpt-4o-mini. Prompt: I give you a contaminated text with start of ML paper. Extract all authors affiliations as a single institute, firm, company, etc. Return items as a Python plain list only with affiliations. Do not provide commentaries. If there are no affiliations return empty list.

Text:"4 2 0 2 2 2 ] . [ 1 3 5 1 7 1 . 2 1 4 2 : r a DISTILLED DECODING 1: ONE-STEP SAMPLING OF IMAGE AUTO-REGRESSIVE MODELS WITH FLOW MATCHING Enshu Liu, Xuefei Ning, Yu Wang, Department of EE, Tsinghua University les23@mails.tsinghua.edu.cn foxdoraame@gmail.com yu-wang@mail.tsinghua.edu.cn Zinan Lin Microsoft Research zinanlin@microsoft.com "
[24.12.2024 05:10] Response: ```python
["Department of EE, Tsinghua University", "Microsoft Research"]
```
[24.12.2024 05:10] Deleting PDF ./assets/pdf/2412.17153.pdf.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.16686.
[24.12.2024 05:10] Extra JSON file exists (./assets/json/2412.16686.json), skip PDF parsing.
[24.12.2024 05:10] Paper image links file exists (./assets/img_data/2412.16686.json), skip HTML parsing.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Downloading and parsing paper https://huggingface.co/papers/2412.17747.
[24.12.2024 05:10] Downloading paper 2412.17747 from http://arxiv.org/pdf/2412.17747v1...
[24.12.2024 05:10] Extracting affiliations from text.
[24.12.2024 05:10] OpenAI request. Model: gpt-4o-mini. Prompt: I give you a contaminated text with start of ML paper. Extract all authors affiliations as a single institute, firm, company, etc. Return items as a Python plain list only with affiliations. Do not provide commentaries. If there are no affiliations return empty list.

Text:"4 2 0 2 3 2 ] . [ 1 7 4 7 7 1 . 2 1 4 2 : r a Luyang Liu1, Jonas Pfeiffer1, Jiaxing Wu1, Jun Xie1 and Arthur Szlam1 1Google DeepMind Techniques enabling large language models (LLMs) to think more by generating and attending to intermediate reasoning steps have shown promise in solving complex problems. However, the standard approaches generate sequences of discrete tokens immediately before responding, and so they can incur significant latency costs and be challenging to optimize. In this work, we demonstrate that frozen LLM can be augmented with an offline coprocessor that operates on the models key-value (kv) cache. This coprocessor augments the cache with set of latent embeddings designed to improve the fidelity of subsequent decoding. We train this coprocessor using the language modeling loss from the decoder on standard pretraining data, while keeping the decoder itself frozen. This approach enables the model to learn, in an end-to-end differentiable fashion, how to distill additional computation into its kv-cache. Because the decoder remains unchanged, the coprocessor can operate offline and asynchronously, and the language model can function normally if the coprocessor is unavailable or if given cache is deemed not to require extra computation. We show experimentally that when cache is augmented, the decoder achieves lower perplexity on numerous subsequent tokens. Furthermore, even without any task-specific training, our experiments demonstrate that cache augmentation consistently reduces perplexity and improves performance across range of reasoning-intensive tasks. Keywords: Latent reasoning, Cache augmentation, LLM 1. Introduction Recent research (Kojima et al., 2022; Wei et al., 2022; Wu et al., 2024) has shown that enabling large language models (LLMs) to generate, or even search over, intermediate sequences of steps before producing final answer can significantly improve performance on reasoning tasks. More broadly, providing LLMs with the ability to all"
[24.12.2024 05:10] Response: ```python
["Google DeepMind"]
```
[24.12.2024 05:10] Deleting PDF ./assets/pdf/2412.17747.pdf.
[24.12.2024 05:10] Success.
[24.12.2024 05:10] Enriching papers with extra data.
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 0. In the absence of extensive human-annotated data for complex reasoning tasks, self-improvement -- where models are trained on their own outputs -- has emerged as a primary method for enhancing performance. However, the critical factors underlying the mechanism of these iterative self-improving metho...
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 1. Reasoning ability is essential for Large Multimodal Models (LMMs). In the absence of multimodal chain-of-thought annotated data, self-evolving training, where the model learns from its own outputs, has emerged as an effective and scalable approach for enhancing reasoning abilities. Despite its growi...
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 2. Supervised fine-tuning (SFT) plays a crucial role in adapting large language models (LLMs) to specific domains or tasks. However, as demonstrated by empirical experiments, the collected data inevitably contains noise in practical applications, which poses significant challenges to model performance ...
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 3. In-Context Learning (ICL) is a technique by which language models make predictions based on examples provided in their input context. Previously, their context window size imposed a limit on the number of examples that can be shown, making example selection techniques crucial for identifying the max...
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 4. Autoregressive (AR) models have achieved state-of-the-art performance in text and image generation but suffer from slow generation due to the token-by-token process. We ask an ambitious question: can a pre-trained AR model be adapted to generate outputs in just one or two steps? If successful, this ...
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 5. As a crucial step to enhance LLMs alignment with human intentions, Instruction Fine-Tuning (IFT) has a high demand on dataset quality. However, existing IFT datasets often contain knowledge that is inconsistent with LLMs' internal knowledge learned from the pre-training phase, which can greatly affe...
[24.12.2024 05:10] ********************************************************************************
[24.12.2024 05:10] Abstract 6. Techniques enabling large language models (LLMs) to "think more" by generating and attending to intermediate reasoning steps have shown promise in solving complex problems. However, the standard approaches generate sequences of discrete tokens immediately before responding, and so they can incur sig...
[24.12.2024 05:10] Read previous papers.
[24.12.2024 05:10] Generating reviews via LLM API.
[24.12.2024 05:10] Using data from previous issue: {"categories": ["#optimization", "#training", "#math", "#reasoning", "#rl"], "emoji": "üîÑ", "ru": {"title": "–ë–∞–ª–∞–Ω—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ò–ò", "desc": "–≠—Ç–∞ —Å—Ç–∞—Ç—å—è –ø–æ—Å–≤—è—â–µ–Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞
[24.12.2024 05:10] Using data from previous issue: {"categories": ["#benchmark", "#optimization", "#training", "#multimodal", "#reasoning", "#dataset"], "emoji": "üß†", "ru": {"title": "–°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è", "desc": "–°—Ç–∞—Ç—å—è –∏—Å—Å–ª–µ–¥—É–µ—Ç —Å–∞–º–æ—ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å
[24.12.2024 05:10] Using data from previous issue: {"categories": ["#data", "#training", "#optimization"], "emoji": "üßº", "ru": {"title": "–ß–∏—Å—Ç–∞—è –¥–æ–æ–±—É—á–∫–∞: RobustFT –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π", "desc": "–°—Ç–∞—Ç—å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ RobustFT –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–π –¥–æ–æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (LLM) –Ω–∞ –∑–∞—à—É–º–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. RobustFT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
[24.12.2024 05:10] Using data from previous issue: {"categories": ["#data", "#optimization", "#training", "#dataset", "#long_context"], "emoji": "üìè", "ru": {"title": "–ë–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ - –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–æ–≤—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π", "desc": "–°—Ç–∞—Ç—å—è –∏—Å—Å–ª–µ–¥—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ
[24.12.2024 05:10] Querying the API.
[24.12.2024 05:10] Claude request. Model: claude-3-5-sonnet-20240620. Prompt: Read an abstract of the ML paper and return a JSON with fields: 'desc': explanation of the paper in Russian (4 sentences), use correct machine learning terms. 'emoji': emoji that will reflect the theme of an article somehow, only one emoji. 'title': a slogan of a main idea of the article in Russian. Return only JSON and nothing else.

Autoregressive (AR) models have achieved state-of-the-art performance in text and image generation but suffer from slow generation due to the token-by-token process. We ask an ambitious question: can a pre-trained AR model be adapted to generate outputs in just one or two steps? If successful, this would significantly advance the development and deployment of AR models. We notice that existing works that try to speed up AR generation by generating multiple tokens at once fundamentally cannot capture the output distribution due to the conditional dependencies between tokens, limiting their effectiveness for few-step generation. To address this, we propose Distilled Decoding (DD), which uses flow matching to create a deterministic mapping from Gaussian distribution to the output distribution of the pre-trained AR model. We then train a network to distill this mapping, enabling few-step generation. DD doesn't need the training data of the original AR model, making it more practical.We evaluate DD on state-of-the-art image AR models and present promising results on ImageNet-256. For VAR, which requires 10-step generation, DD enables one-step generation (6.3times speed-up), with an acceptable increase in FID from 4.19 to 9.96. For LlamaGen, DD reduces generation from 256 steps to 1, achieving an 217.8times speed-up with a comparable FID increase from 4.11 to 11.35. In both cases, baseline methods completely fail with FID>100. DD also excels on text-to-image generation, reducing the generation from 256 steps to 2 for LlamaGen with minimal FID increase from 25.70 to 28.95. As the first work to demonstrate the possibility of one-step generation for image AR models, DD challenges the prevailing notion that AR models are inherently slow, and opens up new opportunities for efficient AR generation. The project website is at https://imagination-research.github.io/distilled-decoding.
[24.12.2024 05:10] Response: {
  "desc": "–°—Ç–∞—Ç—å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Distilled Decoding (DD) –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö (AR) –º–æ–¥–µ–ª–µ–π. DD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É flow matching –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π AR –º–æ–¥–µ–ª–∏. –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∏–ª–∏ –¥–≤–∞ —à–∞–≥–∞ –≤–º–µ—Å—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è—è —Ä–∞–±–æ—Ç—É AR –º–æ–¥–µ–ª–µ–π. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –Ω–∞ –∑–∞–¥–∞—á–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ DD –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 6-217 —Ä–∞–∑ —Å –ø—Ä–∏–µ–º–ª–µ–º—ã–º —É—Ö—É–¥—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ FID.",
  "emoji": "üöÄ",
  "title": "–†–µ–≤–æ–ª—é—Ü–∏—è –≤ —Å–∫–æ—Ä–æ—Å—Ç–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω —à–∞–≥"
}
[24.12.2024 05:10] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

DATASET: Papers that introduce new datasets or make significant modifications to existing ones
DATA: Papers focusing on data processing, cleaning, collection, or curation methodologies
BENCHMARK: Papers proposing or analyzing model evaluation frameworks and benchmarks
AGENTS: Papers exploring autonomous agents, web agents, or agent-based architectures
CV: Papers developing computer vision methods or visual processing systems
RL: Papers investigating reinforcement learning theory or applications
RLHF: Papers specifically about human feedback in RL (PPO, DPO, etc.)
RAG: Papers advancing retrieval-augmented generation techniques
PLP: Papers about Programming Language Processing models or programming benchmarks
INFERENCE: Papers optimizing model deployment (quantization, pruning, etc.)
3D: Papers on 3D content generation, processing, or understanding
AUDIO: Papers advancing speech/audio processing or generation
VIDEO: Papers on video analysis, generation, or understanding
MULTIMODAL: Papers combining multiple input/output modalities
MATH: Papers focused on mathematical theory and algorithms
MULTILINGUAL: Papers addressing multiple languages or cross-lingual capabilities, including all non English models
ARCHITECTURE: Papers proposing novel neural architectures or components
HEALTHCARE: Papers applying ML to medical/healthcare domains
TRAINING: Papers improving model training or fine-tuning methods
ROBOTICS: Papers on robotic systems and embodied AI
SMALL_MODELS: Papers that describe models considering small, below 1 billion parameters or similar 

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"Autoregressive (AR) models have achieved state-of-the-art performance in text and image generation but suffer from slow generation due to the token-by-token process. We ask an ambitious question: can a pre-trained AR model be adapted to generate outputs in just one or two steps? If successful, this would significantly advance the development and deployment of AR models. We notice that existing works that try to speed up AR generation by generating multiple tokens at once fundamentally cannot capture the output distribution due to the conditional dependencies between tokens, limiting their effectiveness for few-step generation. To address this, we propose Distilled Decoding (DD), which uses flow matching to create a deterministic mapping from Gaussian distribution to the output distribution of the pre-trained AR model. We then train a network to distill this mapping, enabling few-step generation. DD doesn't need the training data of the original AR model, making it more practical.We evaluate DD on state-of-the-art image AR models and present promising results on ImageNet-256. For VAR, which requires 10-step generation, DD enables one-step generation (6.3times speed-up), with an acceptable increase in FID from 4.19 to 9.96. For LlamaGen, DD reduces generation from 256 steps to 1, achieving an 217.8times speed-up with a comparable FID increase from 4.11 to 11.35. In both cases, baseline methods completely fail with FID>100. DD also excels on text-to-image generation, reducing the generation from 256 steps to 2 for LlamaGen with minimal FID increase from 25.70 to 28.95. As the first work to demonstrate the possibility of one-step generation for image AR models, DD challenges the prevailing notion that AR models are inherently slow, and opens up new opportunities for efficient AR generation. The project website is at https://imagination-research.github.io/distilled-decoding."

[24.12.2024 05:10] Response: ```python
['ARCHITECTURE', 'TRAINING']
```
[24.12.2024 05:10] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

AGI: Papers discussing artificial general intelligence concepts
GAMES: Papers applying ML to games or game development
INTERPRETABILITY: Papers analyzing model behavior and explanations
REASONING: Papers enhancing logical reasoning capabilities
TRANSFER_LEARNING: Papers on knowledge transfer between models/domains
GRAPHS: Papers advancing graph neural networks and applications
ETHICS: Papers addressing AI ethics, fairness, and bias
SECURITY: Papers on model security and adversarial robustness
OPTIMIZATION: Papers advancing training optimization methods
SURVEY: Papers comprehensively reviewing research areas
DIFFUSION: Papers on diffusion-based generative models
ALIGNMENT: Papers about aligning language models with human values, preferences, and intended behavior
STORY_GENERATION: Papers on story generation, including plot generation and author style adaptation
HALLUCINATIONS: Papers about the hallucinations, hallucinations analysis and mitigation
LONG_CONTEXT: Papers about long context handling, including techniques to extend context length
SYNTHETIC: Papers about using synthetic data for training, including methods for generating and leveraging artificial data
TRANSLATION: Papers on machine translation, including techniques, data and applications for translating between languages
LEAKAGE: Papers about data leakage, including issues of unintended data exposure and methods to detect or prevent it
OPEN_SOURCE: Papers that contribute to open-source projects by releasing models, datasets, or frameworks to the public
SCIENCE: Papers on scientific applications of LM including understanding of science articles and research automatization
LOW_RESOURCE: Papers that mention low-resource languages

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"Autoregressive (AR) models have achieved state-of-the-art performance in text and image generation but suffer from slow generation due to the token-by-token process. We ask an ambitious question: can a pre-trained AR model be adapted to generate outputs in just one or two steps? If successful, this would significantly advance the development and deployment of AR models. We notice that existing works that try to speed up AR generation by generating multiple tokens at once fundamentally cannot capture the output distribution due to the conditional dependencies between tokens, limiting their effectiveness for few-step generation. To address this, we propose Distilled Decoding (DD), which uses flow matching to create a deterministic mapping from Gaussian distribution to the output distribution of the pre-trained AR model. We then train a network to distill this mapping, enabling few-step generation. DD doesn't need the training data of the original AR model, making it more practical.We evaluate DD on state-of-the-art image AR models and present promising results on ImageNet-256. For VAR, which requires 10-step generation, DD enables one-step generation (6.3times speed-up), with an acceptable increase in FID from 4.19 to 9.96. For LlamaGen, DD reduces generation from 256 steps to 1, achieving an 217.8times speed-up with a comparable FID increase from 4.11 to 11.35. In both cases, baseline methods completely fail with FID>100. DD also excels on text-to-image generation, reducing the generation from 256 steps to 2 for LlamaGen with minimal FID increase from 25.70 to 28.95. As the first work to demonstrate the possibility of one-step generation for image AR models, DD challenges the prevailing notion that AR models are inherently slow, and opens up new opportunities for efficient AR generation. The project website is at https://imagination-research.github.io/distilled-decoding."

[24.12.2024 05:10] Response: ```python
["OPTIMIZATION"]
```
[24.12.2024 05:10] Response: ParsedChatCompletionMessage[Article](content='{"desc":"This paper introduces Distilled Decoding (DD), a novel approach to enhance the efficiency of autoregressive (AR) models in generating text and images. Traditional AR models generate outputs token-by-token, which can be slow, but DD aims to enable generation in just one or two steps by creating a deterministic mapping from a Gaussian distribution to the AR model\'s output distribution. By training a network to distill this mapping, DD allows for rapid generation without requiring the original training data, making it more practical for real-world applications. The results show significant speed-ups in generation times while maintaining acceptable quality, challenging the belief that AR models are inherently slow.","title":"Revolutionizing Autoregressive Generation: Fast and Efficient with Distilled Decoding!"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc="This paper introduces Distilled Decoding (DD), a novel approach to enhance the efficiency of autoregressive (AR) models in generating text and images. Traditional AR models generate outputs token-by-token, which can be slow, but DD aims to enable generation in just one or two steps by creating a deterministic mapping from a Gaussian distribution to the AR model's output distribution. By training a network to distill this mapping, DD allows for rapid generation without requiring the original training data, making it more practical for real-world applications. The results show significant speed-ups in generation times while maintaining acceptable quality, challenging the belief that AR models are inherently slow.", title='Revolutionizing Autoregressive Generation: Fast and Efficient with Distilled Decoding!'))
[24.12.2024 05:10] Response: ParsedChatCompletionMessage[Article](content='{"desc":"Ëá™ÂõûÂΩíÔºàARÔºâÊ®°ÂûãÂú®ÊñáÊú¨ÂíåÂõæÂÉèÁîüÊàêÊñπÈù¢Ë°®Áé∞Âá∫Ëâ≤Ôºå‰ΩÜÁî±‰∫éÈÄê‰∏™ÁîüÊàêÁöÑËøáÁ®ãÔºåÈÄüÂ∫¶ËæÉÊÖ¢„ÄÇÊú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßçÂêç‰∏∫Ëí∏È¶èËß£Á†ÅÔºàDDÔºâÁöÑÊñπÊ≥ïÔºåÊó®Âú®Â∞ÜÈ¢ÑËÆ≠ÁªÉÁöÑARÊ®°ÂûãÈÄÇÂ∫î‰∏∫‰ªÖÈúÄ‰∏ÄÊ≠•Êàñ‰∏§Ê≠•ÁîüÊàêËæìÂá∫„ÄÇDDÈÄöËøáÊµÅÂåπÈÖçÂàõÂª∫‰ªéÈ´òÊñØÂàÜÂ∏ÉÂà∞ARÊ®°ÂûãËæìÂá∫ÂàÜÂ∏ÉÁöÑÁ°ÆÂÆöÊÄßÊò†Â∞ÑÔºå‰ªéËÄåÂÆûÁé∞Âø´ÈÄüÁîüÊàê„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºåDDÂú®Â§ö‰∏™ÂõæÂÉèARÊ®°Âûã‰∏äÊòæËëóÊèêÈ´ò‰∫ÜÁîüÊàêÈÄüÂ∫¶ÔºåÂêåÊó∂‰øùÊåÅ‰∫ÜÂèØÊé•ÂèóÁöÑÁîüÊàêË¥®Èáè„ÄÇ","title":"Ëí∏È¶èËß£Á†ÅÔºöÂä†ÈÄüËá™ÂõûÂΩíÊ®°ÂûãÁîüÊàêÁöÑÈù©ÂëΩÊÄßÊñπÊ≥ï"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc='Ëá™ÂõûÂΩíÔºàARÔºâÊ®°ÂûãÂú®ÊñáÊú¨ÂíåÂõæÂÉèÁîüÊàêÊñπÈù¢Ë°®Áé∞Âá∫Ëâ≤Ôºå‰ΩÜÁî±‰∫éÈÄê‰∏™ÁîüÊàêÁöÑËøáÁ®ãÔºåÈÄüÂ∫¶ËæÉÊÖ¢„ÄÇÊú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßçÂêç‰∏∫Ëí∏È¶èËß£Á†ÅÔºàDDÔºâÁöÑÊñπÊ≥ïÔºåÊó®Âú®Â∞ÜÈ¢ÑËÆ≠ÁªÉÁöÑARÊ®°ÂûãÈÄÇÂ∫î‰∏∫‰ªÖÈúÄ‰∏ÄÊ≠•Êàñ‰∏§Ê≠•ÁîüÊàêËæìÂá∫„ÄÇDDÈÄöËøáÊµÅÂåπÈÖçÂàõÂª∫‰ªéÈ´òÊñØÂàÜÂ∏ÉÂà∞ARÊ®°ÂûãËæìÂá∫ÂàÜÂ∏ÉÁöÑÁ°ÆÂÆöÊÄßÊò†Â∞ÑÔºå‰ªéËÄåÂÆûÁé∞Âø´ÈÄüÁîüÊàê„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºåDDÂú®Â§ö‰∏™ÂõæÂÉèARÊ®°Âûã‰∏äÊòæËëóÊèêÈ´ò‰∫ÜÁîüÊàêÈÄüÂ∫¶ÔºåÂêåÊó∂‰øùÊåÅ‰∫ÜÂèØÊé•ÂèóÁöÑÁîüÊàêË¥®Èáè„ÄÇ', title='Ëí∏È¶èËß£Á†ÅÔºöÂä†ÈÄüËá™ÂõûÂΩíÊ®°ÂûãÁîüÊàêÁöÑÈù©ÂëΩÊÄßÊñπÊ≥ï'))
[24.12.2024 05:10] Using data from previous issue: {"categories": ["#dataset", "#training", "#optimization", "#data", "#alignment"], "emoji": "üß†", "ru": {"title": "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ LLM –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "desc": "–°—Ç–∞—Ç—å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ NILE –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π 
[24.12.2024 05:10] Querying the API.
[24.12.2024 05:10] Claude request. Model: claude-3-5-sonnet-20240620. Prompt: Read an abstract of the ML paper and return a JSON with fields: 'desc': explanation of the paper in Russian (4 sentences), use correct machine learning terms. 'emoji': emoji that will reflect the theme of an article somehow, only one emoji. 'title': a slogan of a main idea of the article in Russian. Return only JSON and nothing else.

Techniques enabling large language models (LLMs) to "think more" by generating and attending to intermediate reasoning steps have shown promise in solving complex problems. However, the standard approaches generate sequences of discrete tokens immediately before responding, and so they can incur significant latency costs and be challenging to optimize. In this work, we demonstrate that a frozen LLM can be augmented with an offline coprocessor that operates on the model's key-value (kv) cache. This coprocessor augments the cache with a set of latent embeddings designed to improve the fidelity of subsequent decoding. We train this coprocessor using the language modeling loss from the decoder on standard pretraining data, while keeping the decoder itself frozen. This approach enables the model to learn, in an end-to-end differentiable fashion, how to distill additional computation into its kv-cache. Because the decoder remains unchanged, the coprocessor can operate offline and asynchronously, and the language model can function normally if the coprocessor is unavailable or if a given cache is deemed not to require extra computation. We show experimentally that when a cache is augmented, the decoder achieves lower perplexity on numerous subsequent tokens. Furthermore, even without any task-specific training, our experiments demonstrate that cache augmentation consistently reduces perplexity and improves performance across a range of reasoning-intensive tasks.
[24.12.2024 05:10] Response: {
  "desc": "–°—Ç–∞—Ç—å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (LLM) —Å –ø–æ–º–æ—â—å—é –æ—Ñ–ª–∞–π–Ω-—Å–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞. –≠—Ç–æ—Ç —Å–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫—ç—à–µ–º –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –ª–∞—Ç–µ–Ω—Ç–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±—É—á–µ–Ω–∏–µ —Å–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Ç–µ—Ä—å —è–∑—ã–∫–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ–¥–µ—Ä–∞. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç –ø–µ—Ä–ø–ª–µ–∫—Å–∏—é –∏ —É–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∑–∞–¥–∞—á–∞—Ö, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏–∏ –ø–æ–¥ –∑–∞–¥–∞—á—É.",
  "emoji": "üß†",
  "title": "–û—Ñ–ª–∞–π–Ω-—Å–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: –£–ª—É—á—à–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ–¥–µ—Ä–∞"
}
[24.12.2024 05:10] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

DATASET: Papers that introduce new datasets or make significant modifications to existing ones
DATA: Papers focusing on data processing, cleaning, collection, or curation methodologies
BENCHMARK: Papers proposing or analyzing model evaluation frameworks and benchmarks
AGENTS: Papers exploring autonomous agents, web agents, or agent-based architectures
CV: Papers developing computer vision methods or visual processing systems
RL: Papers investigating reinforcement learning theory or applications
RLHF: Papers specifically about human feedback in RL (PPO, DPO, etc.)
RAG: Papers advancing retrieval-augmented generation techniques
PLP: Papers about Programming Language Processing models or programming benchmarks
INFERENCE: Papers optimizing model deployment (quantization, pruning, etc.)
3D: Papers on 3D content generation, processing, or understanding
AUDIO: Papers advancing speech/audio processing or generation
VIDEO: Papers on video analysis, generation, or understanding
MULTIMODAL: Papers combining multiple input/output modalities
MATH: Papers focused on mathematical theory and algorithms
MULTILINGUAL: Papers addressing multiple languages or cross-lingual capabilities, including all non English models
ARCHITECTURE: Papers proposing novel neural architectures or components
HEALTHCARE: Papers applying ML to medical/healthcare domains
TRAINING: Papers improving model training or fine-tuning methods
ROBOTICS: Papers on robotic systems and embodied AI
SMALL_MODELS: Papers that describe models considering small, below 1 billion parameters or similar 

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"Techniques enabling large language models (LLMs) to "think more" by generating and attending to intermediate reasoning steps have shown promise in solving complex problems. However, the standard approaches generate sequences of discrete tokens immediately before responding, and so they can incur significant latency costs and be challenging to optimize. In this work, we demonstrate that a frozen LLM can be augmented with an offline coprocessor that operates on the model's key-value (kv) cache. This coprocessor augments the cache with a set of latent embeddings designed to improve the fidelity of subsequent decoding. We train this coprocessor using the language modeling loss from the decoder on standard pretraining data, while keeping the decoder itself frozen. This approach enables the model to learn, in an end-to-end differentiable fashion, how to distill additional computation into its kv-cache. Because the decoder remains unchanged, the coprocessor can operate offline and asynchronously, and the language model can function normally if the coprocessor is unavailable or if a given cache is deemed not to require extra computation. We show experimentally that when a cache is augmented, the decoder achieves lower perplexity on numerous subsequent tokens. Furthermore, even without any task-specific training, our experiments demonstrate that cache augmentation consistently reduces perplexity and improves performance across a range of reasoning-intensive tasks."

[24.12.2024 05:10] Response: ```python
['INFERENCE', 'TRAINING', 'ARCHITECTURE']
```
[24.12.2024 05:10] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

AGI: Papers discussing artificial general intelligence concepts
GAMES: Papers applying ML to games or game development
INTERPRETABILITY: Papers analyzing model behavior and explanations
REASONING: Papers enhancing logical reasoning capabilities
TRANSFER_LEARNING: Papers on knowledge transfer between models/domains
GRAPHS: Papers advancing graph neural networks and applications
ETHICS: Papers addressing AI ethics, fairness, and bias
SECURITY: Papers on model security and adversarial robustness
OPTIMIZATION: Papers advancing training optimization methods
SURVEY: Papers comprehensively reviewing research areas
DIFFUSION: Papers on diffusion-based generative models
ALIGNMENT: Papers about aligning language models with human values, preferences, and intended behavior
STORY_GENERATION: Papers on story generation, including plot generation and author style adaptation
HALLUCINATIONS: Papers about the hallucinations, hallucinations analysis and mitigation
LONG_CONTEXT: Papers about long context handling, including techniques to extend context length
SYNTHETIC: Papers about using synthetic data for training, including methods for generating and leveraging artificial data
TRANSLATION: Papers on machine translation, including techniques, data and applications for translating between languages
LEAKAGE: Papers about data leakage, including issues of unintended data exposure and methods to detect or prevent it
OPEN_SOURCE: Papers that contribute to open-source projects by releasing models, datasets, or frameworks to the public
SCIENCE: Papers on scientific applications of LM including understanding of science articles and research automatization
LOW_RESOURCE: Papers that mention low-resource languages

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"Techniques enabling large language models (LLMs) to "think more" by generating and attending to intermediate reasoning steps have shown promise in solving complex problems. However, the standard approaches generate sequences of discrete tokens immediately before responding, and so they can incur significant latency costs and be challenging to optimize. In this work, we demonstrate that a frozen LLM can be augmented with an offline coprocessor that operates on the model's key-value (kv) cache. This coprocessor augments the cache with a set of latent embeddings designed to improve the fidelity of subsequent decoding. We train this coprocessor using the language modeling loss from the decoder on standard pretraining data, while keeping the decoder itself frozen. This approach enables the model to learn, in an end-to-end differentiable fashion, how to distill additional computation into its kv-cache. Because the decoder remains unchanged, the coprocessor can operate offline and asynchronously, and the language model can function normally if the coprocessor is unavailable or if a given cache is deemed not to require extra computation. We show experimentally that when a cache is augmented, the decoder achieves lower perplexity on numerous subsequent tokens. Furthermore, even without any task-specific training, our experiments demonstrate that cache augmentation consistently reduces perplexity and improves performance across a range of reasoning-intensive tasks."

[24.12.2024 05:10] Response: ```python
["OPTIMIZATION", "REASONING"]
```
[24.12.2024 05:10] Response: ParsedChatCompletionMessage[Article](content='{"desc":"This paper presents a method to enhance large language models (LLMs) by using an offline coprocessor that improves the model\'s key-value (kv) cache. The coprocessor adds latent embeddings to the cache, which helps the model generate better responses by refining its reasoning process. By training the coprocessor with language modeling loss while keeping the main decoder unchanged, the system can learn to optimize its computations without increasing latency. Experimental results show that this cache augmentation leads to lower perplexity and better performance on various reasoning tasks, even without specific training for those tasks.","title":"Enhancing LLMs with Offline Cache Augmentation for Better Reasoning"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc="This paper presents a method to enhance large language models (LLMs) by using an offline coprocessor that improves the model's key-value (kv) cache. The coprocessor adds latent embeddings to the cache, which helps the model generate better responses by refining its reasoning process. By training the coprocessor with language modeling loss while keeping the main decoder unchanged, the system can learn to optimize its computations without increasing latency. Experimental results show that this cache augmentation leads to lower perplexity and better performance on various reasoning tasks, even without specific training for those tasks.", title='Enhancing LLMs with Offline Cache Augmentation for Better Reasoning'))
[24.12.2024 05:10] Response: ParsedChatCompletionMessage[Article](content='{"desc":"Êú¨ÊñáÊé¢ËÆ®‰∫Ü‰∏ÄÁßçÂ¢ûÂº∫Â§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºàLLMÔºâÊé®ÁêÜËÉΩÂäõÁöÑÊñπÊ≥ï„ÄÇÈÄöËøáÂºïÂÖ•‰∏Ä‰∏™Á¶ªÁ∫øÂçèÂ§ÑÁêÜÂô®ÔºåËØ•ÂçèÂ§ÑÁêÜÂô®Âú®Ê®°ÂûãÁöÑÈîÆÂÄºÁºìÂ≠ò‰∏äÊìç‰ΩúÔºå‰ªéËÄåÊèêÈ´òÂêéÁª≠Ëß£Á†ÅÁöÑÂáÜÁ°ÆÊÄß„ÄÇÊàë‰ª¨ÁöÑÊñπÊ≥ïÂÖÅËÆ∏Ê®°Âûã‰ª•Á´ØÂà∞Á´ØÂèØÂæÆÂàÜÁöÑÊñπÂºèÂ≠¶‰π†Â¶Ç‰ΩïÂ∞ÜÈ¢ùÂ§ñÁöÑËÆ°ÁÆóÊèêÁÇºÂà∞ÂÖ∂ÁºìÂ≠ò‰∏≠„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºåÂ¢ûÂº∫ÁºìÂ≠òÂêéÔºåËß£Á†ÅÂô®Âú®Â§ö‰∏™ÂêéÁª≠Ê†áËÆ∞‰∏äË°®Áé∞Âá∫Êõ¥‰ΩéÁöÑÂõ∞ÊÉëÂ∫¶Ôºå‰∏îÂú®Êé®ÁêÜÂØÜÈõÜÂûã‰ªªÂä°‰∏≠ÊÄßËÉΩÊòæËëóÊèêÂçá„ÄÇ","title":"Â¢ûÂº∫ÁºìÂ≠òÔºåÊèêÂçáÊé®ÁêÜËÉΩÂäõÔºÅ"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=Article(desc='Êú¨ÊñáÊé¢ËÆ®‰∫Ü‰∏ÄÁßçÂ¢ûÂº∫Â§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºàLLMÔºâÊé®ÁêÜËÉΩÂäõÁöÑÊñπÊ≥ï„ÄÇÈÄöËøáÂºïÂÖ•‰∏Ä‰∏™Á¶ªÁ∫øÂçèÂ§ÑÁêÜÂô®ÔºåËØ•ÂçèÂ§ÑÁêÜÂô®Âú®Ê®°ÂûãÁöÑÈîÆÂÄºÁºìÂ≠ò‰∏äÊìç‰ΩúÔºå‰ªéËÄåÊèêÈ´òÂêéÁª≠Ëß£Á†ÅÁöÑÂáÜÁ°ÆÊÄß„ÄÇÊàë‰ª¨ÁöÑÊñπÊ≥ïÂÖÅËÆ∏Ê®°Âûã‰ª•Á´ØÂà∞Á´ØÂèØÂæÆÂàÜÁöÑÊñπÂºèÂ≠¶‰π†Â¶Ç‰ΩïÂ∞ÜÈ¢ùÂ§ñÁöÑËÆ°ÁÆóÊèêÁÇºÂà∞ÂÖ∂ÁºìÂ≠ò‰∏≠„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºåÂ¢ûÂº∫ÁºìÂ≠òÂêéÔºåËß£Á†ÅÂô®Âú®Â§ö‰∏™ÂêéÁª≠Ê†áËÆ∞‰∏äË°®Áé∞Âá∫Êõ¥‰ΩéÁöÑÂõ∞ÊÉëÂ∫¶Ôºå‰∏îÂú®Êé®ÁêÜÂØÜÈõÜÂûã‰ªªÂä°‰∏≠ÊÄßËÉΩÊòæËëóÊèêÂçá„ÄÇ', title='Â¢ûÂº∫ÁºìÂ≠òÔºåÊèêÂçáÊé®ÁêÜËÉΩÂäõÔºÅ'))
[24.12.2024 05:10] Loading Chinese text from previous data.
[24.12.2024 05:10] Renaming data file.
[24.12.2024 05:10] Renaming previous data. hf_papers.json to ./d/2024-12-24.json
[24.12.2024 05:10] Saving new data file.
[24.12.2024 05:10] Generating page.
[24.12.2024 05:10] Renaming previous page.
[24.12.2024 05:10] Renaming previous data. index.html to ./d/2024-12-24.html
[24.12.2024 05:10] [Experimental] Generating Chinese page for reading.
[24.12.2024 05:10] Chinese vocab [{'word': 'Ëá™ÂõûÂΩí', 'pinyin': 'z√¨ hu√≠ guƒ´', 'trans': 'autoregressive'}, {'word': 'ËßÜËßâ', 'pinyin': 'sh√¨ ju√©', 'trans': 'visual'}, {'word': 'ÁîüÊàê', 'pinyin': 'shƒìng ch√©ng', 'trans': 'generation'}, {'word': 'Ë°®Áé∞', 'pinyin': 'bi«éo xi√†n', 'trans': 'performance'}, {'word': 'Âº∫Â§ß', 'pinyin': 'qi√°ng d√†', 'trans': 'powerful'}, {'word': 'ÊÄßËÉΩ', 'pinyin': 'x√¨ng n√©ng', 'trans': 'performance'}, {'word': 'È°∫Â∫è', 'pinyin': 'sh√πn x√π', 'trans': 'sequential'}, {'word': 'ÈÄê', 'pinyin': 'zh√∫', 'trans': 'gradual'}, {'word': 'Ê†áËÆ∞', 'pinyin': 'biƒÅo j√¨', 'trans': 'token'}, {'word': 'È¢ÑÊµã', 'pinyin': 'y√π c√®', 'trans': 'prediction'}, {'word': 'Êé®ÁêÜ', 'pinyin': 'tuƒ´ l«ê', 'trans': 'inference'}, {'word': 'ÈÄüÂ∫¶', 'pinyin': 's√π d√π', 'trans': 'speed'}, {'word': 'ÊèêÂá∫', 'pinyin': 't√≠ ch≈´', 'trans': 'propose'}, {'word': 'Âπ∂Ë°å', 'pinyin': 'b√¨ng x√≠ng', 'trans': 'parallel'}, {'word': 'ÊúâÊïà', 'pinyin': 'y«íu xi√†o', 'trans': 'effective'}, {'word': 'ÊñπÊ≥ï', 'pinyin': 'fƒÅng f«é', 'trans': 'method'}, {'word': 'ÊèêÈ´ò', 'pinyin': 't√≠ gƒÅo', 'trans': 'improve'}, {'word': 'ÊïàÁéá', 'pinyin': 'xi√†o l«ú', 'trans': 'efficiency'}, {'word': '‰øùÁïô', 'pinyin': 'b«éo li√∫', 'trans': 'retain'}, {'word': '‰ºòÂäø', 'pinyin': 'y≈çu sh√¨', 'trans': 'advantage'}, {'word': 'ÂÖ≥ÈîÆ', 'pinyin': 'gu«én ji√†n', 'trans': 'key'}, {'word': 'Ê¥ûËßÅ', 'pinyin': 'd√≤ng ji√†n', 'trans': 'insight'}, {'word': '‰æùËµñ', 'pinyin': 'yƒ´ l√†i', 'trans': 'dependency'}, {'word': 'ÂÖ≥Á≥ª', 'pinyin': 'guƒÅn x√¨', 'trans': 'relationship'}, {'word': 'Âº±', 'pinyin': 'ru√≤', 'trans': 'weak'}, {'word': 'Âº∫', 'pinyin': 'qi√°ng', 'trans': 'strong'}, {'word': 'Áõ∏ÈÇª', 'pinyin': 'xiƒÅng l√≠n', 'trans': 'adjacent'}, {'word': 'Èöæ‰ª•', 'pinyin': 'n√°n y«ê', 'trans': 'difficult'}, {'word': 'Áã¨Á´ã', 'pinyin': 'd√∫ l√¨', 'trans': 'independent'}, {'word': 'ÈááÊ†∑', 'pinyin': 'c«éi y√†ng', 'trans': 'sampling'}, {'word': '‰∏ç‰∏ÄËá¥', 'pinyin': 'b√π yƒ´ zh√¨', 'trans': 'inconsistency'}, {'word': 'Á≠ñÁï•', 'pinyin': 'c√® l√º√®', 'trans': 'strategy'}, {'word': 'ËøúË∑ùÁ¶ª', 'pinyin': 'yu«én j√π l√≠', 'trans': 'long-distance'}, {'word': 'Â±ÄÈÉ®', 'pinyin': 'j√∫ b√π', 'trans': 'local'}, {'word': 'Êó†Áºù', 'pinyin': 'w√∫ f√®ng', 'trans': 'seamless'}, {'word': 'ÈõÜÊàê', 'pinyin': 'j√≠ ch√©ng', 'trans': 'integrate'}, {'word': 'Ê†áÂáÜ', 'pinyin': 'biƒÅo zh«în', 'trans': 'standard'}, {'word': 'Êû∂ÊûÑ', 'pinyin': 'ji√† g√≤u', 'trans': 'architecture'}, {'word': '‰øÆÊîπ', 'pinyin': 'xi≈´ g«éi', 'trans': 'modify'}, {'word': 'ÂÆûÈ™å', 'pinyin': 'sh√≠ y√†n', 'trans': 'experiment'}, {'word': 'ÂõæÂÉè', 'pinyin': 't√∫ xi√†ng', 'trans': 'image'}, {'word': 'ËßÜÈ¢ë', 'pinyin': 'sh√¨ p√≠n', 'trans': 'video'}, {'word': '‰ªªÂä°', 'pinyin': 'r√®n w√π', 'trans': 'task'}, {'word': 'ÂÆûÁé∞', 'pinyin': 'sh√≠ xi√†n', 'trans': 'achieve'}, {'word': 'Âä†ÈÄü', 'pinyin': 'jiƒÅ s√π', 'trans': 'acceleration'}, {'word': 'Ë¥®Èáè', 'pinyin': 'zh√¨ li√†ng', 'trans': 'quality'}, {'word': 'ÊçüÂ§±', 'pinyin': 's«în shƒ´', 'trans': 'loss'}, {'word': 'ÊøÄÂèë', 'pinyin': 'jƒ´ fƒÅ', 'trans': 'inspire'}, {'word': 'Êú™Êù•', 'pinyin': 'w√®i l√°i', 'trans': 'future'}, {'word': 'È´òÊïà', 'pinyin': 'gƒÅo xi√†o', 'trans': 'efficient'}, {'word': 'Áªü‰∏Ä', 'pinyin': 't«íng yƒ´', 'trans': 'unified'}, {'word': 'È°πÁõÆ', 'pinyin': 'xi√†ng m√π', 'trans': 'project'}, {'word': 'È°µÈù¢', 'pinyin': 'y√® mi√†n', 'trans': 'page'}]
[24.12.2024 05:10] Renaming previous Chinese page.
[24.12.2024 05:10] Renaming previous data. zh.html to ./d/2024-12-23_zh_reading_task.html
[24.12.2024 05:10] Writing Chinese reading task.
[24.12.2024 05:10] Writing result.
[24.12.2024 05:10] Renaming log file.
[24.12.2024 05:10] Renaming previous data. log.txt to ./logs/2024-12-24_last_log.txt
