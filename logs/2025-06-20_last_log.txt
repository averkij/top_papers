[20.06.2025 04:19] Read previous papers.
[20.06.2025 04:19] Generating top page (month).
[20.06.2025 04:19] Writing top page (month).
[20.06.2025 05:13] Read previous papers.
[20.06.2025 05:13] Get feed.
[20.06.2025 05:13] Extract page data from URL. URL: https://huggingface.co/papers/2506.14837
[20.06.2025 05:13] Obtaining deleted papers (sometimes HF Daily Papers move some articles from today to past days).
[20.06.2025 05:13] Downloading and parsing papers (pdf, html). Total: 1.
[20.06.2025 05:13] Downloading and parsing paper https://huggingface.co/papers/2506.14837.
[20.06.2025 05:13] Failed to download and parse paper https://huggingface.co/papers/2506.14837: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))
[20.06.2025 05:13] Enriching papers with extra data.
[20.06.2025 05:13] ********************************************************************************
[20.06.2025 05:13] Abstract 0. ChartIR uses structured instruction and iterative refinement to improve MLLM performance in chart-to-code generation by separating visual understanding and code translation tasks.  					AI-generated summary 				 Recently, multimodal large language models (MLLMs) have attracted increasing research at...
[20.06.2025 05:13] Read previous papers.
[20.06.2025 05:13] Generating reviews via LLM API.
[20.06.2025 05:13] Querying the API.
[20.06.2025 05:13] Claude request. Model: claude-3-5-sonnet-20240620. Prompt: Read an abstract of the ML paper and return a JSON with fields: 'desc': explanation of the paper in Russian (4 sentences), use correct machine learning terms. 'emoji': emoji that will reflect the theme of an article somehow, only one emoji. 'title': a slogan of a main idea of the article in Russian. Return only JSON and nothing else.

ChartIR uses structured instruction and iterative refinement to improve MLLM performance in chart-to-code generation by separating visual understanding and code translation tasks.  					AI-generated summary 				 Recently, multimodal large language models (MLLMs) have attracted increasing research attention due to their powerful visual understanding capabilities. While they have achieved impressive results on various vision tasks, their performance on chart-to-code generation remains suboptimal. This task requires MLLMs to generate executable code that can reproduce a given chart, demanding not only precise visual understanding but also accurate translation of visual elements into structured code. Directly prompting MLLMs to perform this complex task often yields unsatisfactory results. To address this challenge, we propose {ChartIR}, an iterative refinement method based on structured instruction. First, we distinguish two tasks: visual understanding and code translation. To accomplish the visual understanding component, we design two types of structured instructions: description and difference. The description instruction captures the visual elements of the reference chart, while the difference instruction characterizes the discrepancies between the reference chart and the generated chart. These instructions effectively transform visual features into language representations, thereby facilitating the subsequent code translation process. Second, we decompose the overall chart generation pipeline into two stages: initial code generation and iterative refinement, enabling progressive enhancement of the final output. Experimental results show that, compared to other method, our method achieves superior performance on both the open-source model Qwen2-VL and the closed-source model GPT-4o.
[20.06.2025 05:13] Response: {
  "desc": "ChartIR - —ç—Ç–æ –º–µ—Ç–æ–¥ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (MLLM) –≤ –∑–∞–¥–∞—á–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞. –ú–µ—Ç–æ–¥ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤. ChartIR –ø—Ä–∏–º–µ–Ω—è–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –Ω–∞—á–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ ChartIR –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –Ω–∞ –º–æ–¥–µ–ª—è—Ö Qwen2-VL –∏ GPT-4.",
  "emoji": "üìä",
  "title": "–¢–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è"
}
[20.06.2025 05:13] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

DATASET: Papers that introduce new datasets or make significant modifications to existing ones
DATA: Papers focusing on data processing, cleaning, collection, or curation methodologies
BENCHMARK: Papers proposing or analyzing model evaluation frameworks and benchmarks
AGENTS: Papers exploring autonomous agents, web agents, or agent-based architectures
CV: Papers developing computer vision methods or visual processing systems
RL: Papers investigating reinforcement learning theory or applications
RLHF: Papers specifically about human feedback in RL (PPO, DPO, etc.)
RAG: Papers advancing retrieval-augmented generation techniques
PLP: Papers about Programming Language Processing models or programming benchmarks
INFERENCE: Papers optimizing model deployment (quantization, pruning, etc.)
3D: Papers on 3D content generation, processing, or understanding
AUDIO: Papers advancing speech/audio processing or generation
VIDEO: Papers on video analysis, generation, or understanding
MULTIMODAL: Papers combining multiple input/output modalities
MATH: Papers focused on mathematical theory and algorithms
MULTILINGUAL: Papers addressing multiple languages or cross-lingual capabilities, including all non English models
ARCHITECTURE: Papers proposing novel neural architectures or components
HEALTHCARE: Papers applying ML to medical/healthcare domains
TRAINING: Papers improving model training or fine-tuning methods
ROBOTICS: Papers on robotic systems and embodied AI
SMALL_MODELS: Papers that describe models considering small, below 1 billion parameters or similar 

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"ChartIR uses structured instruction and iterative refinement to improve MLLM performance in chart-to-code generation by separating visual understanding and code translation tasks.  					AI-generated summary 				 Recently, multimodal large language models (MLLMs) have attracted increasing research attention due to their powerful visual understanding capabilities. While they have achieved impressive results on various vision tasks, their performance on chart-to-code generation remains suboptimal. This task requires MLLMs to generate executable code that can reproduce a given chart, demanding not only precise visual understanding but also accurate translation of visual elements into structured code. Directly prompting MLLMs to perform this complex task often yields unsatisfactory results. To address this challenge, we propose {ChartIR}, an iterative refinement method based on structured instruction. First, we distinguish two tasks: visual understanding and code translation. To accomplish the visual understanding component, we design two types of structured instructions: description and difference. The description instruction captures the visual elements of the reference chart, while the difference instruction characterizes the discrepancies between the reference chart and the generated chart. These instructions effectively transform visual features into language representations, thereby facilitating the subsequent code translation process. Second, we decompose the overall chart generation pipeline into two stages: initial code generation and iterative refinement, enabling progressive enhancement of the final output. Experimental results show that, compared to other method, our method achieves superior performance on both the open-source model Qwen2-VL and the closed-source model GPT-4o."

[20.06.2025 05:13] Response: ```python
['MULTIMODAL', 'CV', 'TRAINING']
```
[20.06.2025 05:13] OpenAI request. Model: gpt-4o-mini. Prompt: Analyze the following research paper text and classify it into one or more relevant topics from the list below. Consider only information from the provided text. Don't add a tag if the topic is not directly related to the article.

Topics:

AGI: Papers discussing artificial general intelligence concepts
GAMES: Papers applying ML to games or game development
INTERPRETABILITY: Papers analyzing model behavior and explanations
REASONING: Papers enhancing logical reasoning capabilities
TRANSFER_LEARNING: Papers on knowledge transfer between models/domains
GRAPHS: Papers advancing graph neural networks and applications
ETHICS: Papers addressing AI ethics, fairness, and bias
SECURITY: Papers on model security and adversarial robustness
OPTIMIZATION: Papers advancing training optimization methods
SURVEY: Papers comprehensively reviewing research areas
DIFFUSION: Papers on diffusion-based generative models
ALIGNMENT: Papers about aligning language models with human values, preferences, and intended behavior
STORY_GENERATION: Papers on story generation, including plot generation and author style adaptation
HALLUCINATIONS: Papers about the hallucinations, hallucinations analysis and mitigation
LONG_CONTEXT: Papers about long context handling, including techniques to extend context length
SYNTHETIC: Papers about using synthetic data for training, including methods for generating and leveraging artificial data
TRANSLATION: Papers on machine translation, including techniques, data and applications for translating between languages
LEAKAGE: Papers about data leakage, including issues of unintended data exposure and methods to detect or prevent it
OPEN_SOURCE: Papers that contribute to open-source projects by releasing models, datasets, or frameworks to the public
SCIENCE: Papers on scientific applications of LM including understanding of science articles and research automatization
LOW_RESOURCE: Papers that mention low-resource languages

Return only a Python flat list of topics that match the given text.

Paper text to classify:

"ChartIR uses structured instruction and iterative refinement to improve MLLM performance in chart-to-code generation by separating visual understanding and code translation tasks.  					AI-generated summary 				 Recently, multimodal large language models (MLLMs) have attracted increasing research attention due to their powerful visual understanding capabilities. While they have achieved impressive results on various vision tasks, their performance on chart-to-code generation remains suboptimal. This task requires MLLMs to generate executable code that can reproduce a given chart, demanding not only precise visual understanding but also accurate translation of visual elements into structured code. Directly prompting MLLMs to perform this complex task often yields unsatisfactory results. To address this challenge, we propose {ChartIR}, an iterative refinement method based on structured instruction. First, we distinguish two tasks: visual understanding and code translation. To accomplish the visual understanding component, we design two types of structured instructions: description and difference. The description instruction captures the visual elements of the reference chart, while the difference instruction characterizes the discrepancies between the reference chart and the generated chart. These instructions effectively transform visual features into language representations, thereby facilitating the subsequent code translation process. Second, we decompose the overall chart generation pipeline into two stages: initial code generation and iterative refinement, enabling progressive enhancement of the final output. Experimental results show that, compared to other method, our method achieves superior performance on both the open-source model Qwen2-VL and the closed-source model GPT-4o."

[20.06.2025 05:13] Response: ```python
["OPTIMIZATION", "INTERPRETABILITY"]
```
[20.06.2025 05:13] Response: ParsedChatCompletionMessage[Article](content='{"desc":"ChartIR is a novel approach that enhances the performance of multimodal large language models (MLLMs) in generating code from charts by separating the tasks of visual understanding and code translation. It employs structured instructions to guide the model in accurately interpreting visual elements and translating them into executable code. The method involves two main stages: initial code generation followed by iterative refinement, which allows for progressive improvements in the output. Experimental results demonstrate that ChartIR significantly outperforms existing methods on both open-source and closed-source models.","title":"ChartIR: Refining Code Generation from Charts with Structured Instructions"}', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None, parsed=Article(desc='ChartIR is a novel approach that enhances the performance of multimodal large language models (MLLMs) in generating code from charts by separating the tasks of visual understanding and code translation. It employs structured instructions to guide the model in accurately interpreting visual elements and translating them into executable code. The method involves two main stages: initial code generation followed by iterative refinement, which allows for progressive improvements in the output. Experimental results demonstrate that ChartIR significantly outperforms existing methods on both open-source and closed-source models.', title='ChartIR: Refining Code Generation from Charts with Structured Instructions'))
[20.06.2025 05:13] Response: ParsedChatCompletionMessage[Article](content='{"desc":"ChartIRÊòØ‰∏ÄÁßçÈÄöËøáÁªìÊûÑÂåñÊåá‰ª§ÂíåËø≠‰ª£‰ºòÂåñÊù•ÊèêÂçáÂ§öÊ®°ÊÄÅÂ§ßËØ≠Ë®ÄÊ®°ÂûãÔºàMLLMÔºâÂú®ÂõæË°®Âà∞‰ª£Á†ÅÁîüÊàê‰ªªÂä°‰∏≠ÁöÑË°®Áé∞ÁöÑÊñπÊ≥ï„ÄÇËØ•ÊñπÊ≥ïÂ∞ÜËßÜËßâÁêÜËß£Âíå‰ª£Á†ÅÁøªËØë‰ªªÂä°ÂàÜÂºÄÔºåÈ¶ñÂÖàÈÄöËøáÊèèËø∞ÂíåÂ∑ÆÂºÇ‰∏§ÁßçÁªìÊûÑÂåñÊåá‰ª§Êù•ÊçïÊçâÂõæË°®ÁöÑËßÜËßâÂÖÉÁ¥†„ÄÇÊé•ÁùÄÔºåChartIRÂ∞ÜÊï¥‰ΩìÂõæË°®ÁîüÊàêÊµÅÁ®ãÂàÜ‰∏∫ÂàùÂßã‰ª£Á†ÅÁîüÊàêÂíåËø≠‰ª£‰ºòÂåñ‰∏§‰∏™Èò∂ÊÆµÔºå‰ªéËÄåÈÄêÊ≠•ÊèêÂçáÊúÄÁªàËæìÂá∫ÁöÑË¥®Èáè„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºå‰∏éÂÖ∂‰ªñÊñπÊ≥ïÁõ∏ÊØîÔºåChartIRÂú®ÂºÄÊ∫êÊ®°ÂûãQwen2-VLÂíåÈó≠Ê∫êÊ®°ÂûãGPT-4o‰∏äÂùáË°®Áé∞Âá∫Êõ¥‰ºòÁöÑÊÄßËÉΩ„ÄÇ","title":"ChartIRÔºöÊèêÂçáÂõæË°®Âà∞‰ª£Á†ÅÁîüÊàêÁöÑÊô∫ËÉΩÊñπÊ≥ï"}', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None, parsed=Article(desc='ChartIRÊòØ‰∏ÄÁßçÈÄöËøáÁªìÊûÑÂåñÊåá‰ª§ÂíåËø≠‰ª£‰ºòÂåñÊù•ÊèêÂçáÂ§öÊ®°ÊÄÅÂ§ßËØ≠Ë®ÄÊ®°ÂûãÔºàMLLMÔºâÂú®ÂõæË°®Âà∞‰ª£Á†ÅÁîüÊàê‰ªªÂä°‰∏≠ÁöÑË°®Áé∞ÁöÑÊñπÊ≥ï„ÄÇËØ•ÊñπÊ≥ïÂ∞ÜËßÜËßâÁêÜËß£Âíå‰ª£Á†ÅÁøªËØë‰ªªÂä°ÂàÜÂºÄÔºåÈ¶ñÂÖàÈÄöËøáÊèèËø∞ÂíåÂ∑ÆÂºÇ‰∏§ÁßçÁªìÊûÑÂåñÊåá‰ª§Êù•ÊçïÊçâÂõæË°®ÁöÑËßÜËßâÂÖÉÁ¥†„ÄÇÊé•ÁùÄÔºåChartIRÂ∞ÜÊï¥‰ΩìÂõæË°®ÁîüÊàêÊµÅÁ®ãÂàÜ‰∏∫ÂàùÂßã‰ª£Á†ÅÁîüÊàêÂíåËø≠‰ª£‰ºòÂåñ‰∏§‰∏™Èò∂ÊÆµÔºå‰ªéËÄåÈÄêÊ≠•ÊèêÂçáÊúÄÁªàËæìÂá∫ÁöÑË¥®Èáè„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºå‰∏éÂÖ∂‰ªñÊñπÊ≥ïÁõ∏ÊØîÔºåChartIRÂú®ÂºÄÊ∫êÊ®°ÂûãQwen2-VLÂíåÈó≠Ê∫êÊ®°ÂûãGPT-4o‰∏äÂùáË°®Áé∞Âá∫Êõ¥‰ºòÁöÑÊÄßËÉΩ„ÄÇ', title='ChartIRÔºöÊèêÂçáÂõæË°®Âà∞‰ª£Á†ÅÁîüÊàêÁöÑÊô∫ËÉΩÊñπÊ≥ï'))
[20.06.2025 05:13] Renaming data file.
[20.06.2025 05:13] Renaming previous data. hf_papers.json to ./d/2025-06-20.json
[20.06.2025 05:13] Saving new data file.
[20.06.2025 05:13] Generating page.
[20.06.2025 05:13] Renaming previous page.
[20.06.2025 05:13] Renaming previous data. index.html to ./d/2025-06-20.html
[20.06.2025 05:13] Writing result.
[20.06.2025 05:13] Renaming log file.
[20.06.2025 05:13] Renaming previous data. log.txt to ./logs/2025-06-20_last_log.txt
