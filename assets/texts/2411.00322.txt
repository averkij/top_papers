Title: Constant Acceleration Flow

Authors: Dogyun Park, Sojin Lee, Sihyeon Kim, Taehoon Lee, Youngjoon Hong, Hyunwoo J. Kim


================================================================================

Abstract
========

Rectified flow and reflow procedures have significantly advanced fast generation by progressively straightening ordinary differential equation (ODE) flows. They operate under the assumption that image and noise pairs, known as couplings, can be approximated by straight trajectories with constant velocity. However, we observe that modeling with constant velocity and using reflow procedures have limitations in accurately learning straight trajectories between pairs, resulting in suboptimal performance in few-step generation. To address these limitations, we introduce Constant Acceleration Flow (CAF), a novel framework based on a simple constant acceleration equation. CAF introduces acceleration as an additional learnable variable, allowing for more expressive and accurate estimation of the ODE flow. Moreover, we propose two techniques to further improve estimation accuracy: initial velocity conditioning for the acceleration model and a reflow process for the initial velocity. Our comprehensive studies on toy datasets, CIFAR-10, and ImageNet 64x64 demonstrate that CAF outperforms state-of-the-art baselines for one-step generation. We also show that CAF dramatically improves few-step coupling preservation and inversion over Rectified flow. Code is available at \href{https://github.com/mlvlab/CAF}{https://github.com/mlvlab/CAF}.

Start
=====

4 2 0 2 1 ] . [ 1 2 2 3 0 0 . 1 1 4 2 : r a

Constant Acceleration Flow
==========================

Dogyun Park Korea University gg933@korea.ac.kr Sojin Lee Korea University sojin_lee@korea.ac.kr Sihyeon Kim Korea University sh_bs15@korea.ac.kr Taehoon Lee Korea University 98hoon@korea.ac.kr Youngjoon Hong KAIST hongyj@kaist.ac.kr Hyunwoo J. Kim Korea University hyunwoojkim@korea.ac.kr

Abstract
========

Rectified flow and reflow procedures have significantly advanced fast generation by progressively straightening ordinary differential equation (ODE) flows. They operate under the assumption that image and noise pairs, known as couplings, can be approximated by straight trajectories with constant velocity. However, we observe that modeling with constant velocity and using reflow procedures have limitations in accurately learning straight trajectories between pairs, resulting in suboptimal performance in few-step generation. To address these limitations, we introduce Constant Acceleration Flow (CAF), novel framework based on simple constant acceleration equation. CAF introduces acceleration as an additional learnable variable, allowing for more expressive and accurate estimation of the ODE flow. Moreover, we propose two techniques to further improve estimation accuracy: initial velocity conditioning for the acceleration model and reflow process for the initial velocity. Our comprehensive studies on toy datasets, CIFAR-10, and ImageNet 6464 demonstrate that CAF outperforms state-of-the-art baselines for one-step generation. We also show that CAF dramatically improves few-step coupling preservation and inversion over Rectified flow. Code is available at https://github.com/mlvlab/CAF.

Introduction
============

Diffusion models [1, 2] learn the probability flow between target data distribution and simple Gaussian distribution through an iterative process. Starting from Gaussian noise, they gradually denoise to approximate the target distribution via series of learned local transformations. Due to their superior generative capabilities compared to other models such as GANs and VAEs, diffusion models have become the go-to choice for high-quality image generation. However, their multi-step generation process entails slow generation and imposes significant computational burden. To address this issue, two main approaches have been proposed: distillation models [3, 4, 5, 6, 7, 8, 9] and methods that simplify the flow trajectories [10, 11, 12, 13, 14] to achieve fewer-step generation. An example of the latter is rectified flow [10, 11, 13], which focuses on straightening ordinary differential equation (ODE) trajectories. Through repeated applications of the rectification process, called reflow, the trajectories become progressively straighter by addressing the flow crossing problem. Straighter flows reduce discretization errors, enabling fewer steps in the numerical solution and, thus, faster generation. Rectified flow [10, 13] defines the straight ODE flow over time with drift force v, where each sample xt transforms from x0 π0 to x1 π1 under constant velocity = x1 x0. It Corresponding authors. 38th Conference on Neural Information Processing Systems (NeurIPS 2024). (a) Rectified Flow (b) Constant Acceleration Flow Figure 1: Initial Velocity Conditioning (IVC). We illustrate the importance of IVC to address the flow crossing problem, which hinders the learning of straight ODE trajectories during training. In Fig. 1a, Rectified flow suffers from approximation errors at the overlapping point xt (where x1 = x2 ), resulting in curved sampling trajectories due to flow crossing. Conversely, Fig. 1b demonstrates that CAF, utilizing IVC, successfully estimates ground-truth trajectories by minimizing the ambiguity at xt. approximates the underlying velocity with neural network vθ. Then, it iteratively applies the reflow process to avoid flow crossing by rewiring the flow and building deterministic data coupling. However, constant velocity modeling may limit the expressiveness needed for approximating complex couplings between π0 and π1. This results in sampling trajectories that fail to converge optimally to the target distribution. Moreover, the interpolation paths after the reflow may still intersecta phenomenon known as flow crossingwhich leads to curved rectified flows because the model estimates different targets for the same input. As illustrated in Fig. 1a, instead of following the intended path from x1 1, sampling trajectory from Rectified flow erroneously diverts towards x2 1 due to the flow crossing. Such flow crossing can make the accurate learning of straight ODE trajectories more challenging. 0 to x1 In this paper, we introduce the Constant Acceleration Flow (CAF), novel ODE framework based on constant acceleration equation, as outlined in (4). Our CAF generalizes Rectified flow by introducing acceleration as an additional learnable variable. This constant acceleration modeling offers the ability to control flow characteristics by manipulating the acceleration magnitude and enables direct closed-form solution of the ODE, supporting precise and efficient sampling in just few steps. Additionally, we propose two strategies to address the flow crossing problem. The first one is initial velocity conditioning (IVC) for the acceleration model, and the second one is to employ reflow to enhance the learning of initial velocity. Fig. 1b presents that CAF, with the proposed strategies, can accurately predict the ground-truth path from x1 1, even when flow crossing occurs. Through extensive experiments, from toy datasets to real-world image generation on CIFAR-10 [15] and ImageNet 6464, we demonstrate that our CAF exhibits superior performance over Rectified flow and state-of-the-art baselines. Notably, CAF achieves superior Fréchet Inception Distance (FID) scores on CIFAR-10 and ImageNet 6464 in conditional settings, recording FIDs of 1.39 and 1.69, respectively, thereby surpassing recent strong methods. Moreover, we show that CAF provides more accurate flow estimation than Rectified flow by assessing the straightness and coupling preservation of the learned ODE flow. CAF is also capable of few-step inversion, making it effective for real-world applications such as box inpainting. 0 to x1 To summarize, our contributions are as follows: We propose Constant Acceleration Flow (CAF), novel ODE framework that integrates acceleration as controllable variable, enhancing the precision of ODE flow estimation compared to the constant velocity framework. We propose two strategies to address the flow crossing problem: initial velocity conditioning for the acceleration model and reflow procedure to improve initial velocity learning. These strategies ensure more accurate trajectory estimation even in the presence of flow crossings. Through extensive experiments on synthetic and real datasets, CAF demonstrates remarkable performance, especially achieving the superior FID on CIFAR-10 and ImageNet 6464 over strong baselines. We also demonstrate that CAF learns more accurate flow than Rectified flow by assessing the straightness, coupling preservation, and inversion. 2 Figure 2: 2D synthetic dataset. We compare results between 2-Rectified flow and our Constant Acceleration Flow (CAF) on 2D synthetic data. π0 (blue) and π1 (green) are source and target distributions parameterized by Gaussian mixture models. Here, the number of sampling steps is = 1. While 2-Rectified flow frequently generates samples that deviate from π1, CAF more accurately estimates the target distribution π1. The generated samples (orange) from CAF form more similar distribution as the target distribution π1.

2 Related work
==============

Generative models. Learning generative models involves finding nonlinear transformation between two distributions, typically denoted as π0 and π1, where π0 is simple distribution like Gaussian, and π1 is the complex data distribution. Various approaches have been developed to achieve this transformation. For example, variational autoencoders (VAE) [16, 17] optimize the Evidence Lower Bound (ELBO) to learn nonlinear mapping from the latent space distribution π0 to the data distribution π1. Normalizing flows [18, 19, 20] construct series of invertible and differentiable mappings to transform π0 into π1. Similarly, GANs [21, 22, 23, 24, 25] earn generator that transforms π0 into π1 through an adversarial process involving discriminator. These models typically perform one-step generation from π0 to π1. In contrast, diffusion models [2, 26, 27, 28, 29, 30] propose learning the probability flow between the two distributions through an iterative process. This iterative process ensures stability and precision, as the model incrementally learns to reverse diffusion process that adds noise to data. Diffusion models have demonstrated superior performance across various domains, including images [12, 31, 32, 33], 3D [34, 35, 36, 37], and video [38, 39, 40]. Few-step diffusion models Addressing the slow generation speed of diffusion models has become major focus in recent research: Distillation methods [3, 4, 5, 6, 7, 8, 9] seek to optimize the inference steps of pre-trained diffusion models by amortizing the integration of ODE flow. Consistency models [6, 7, 8] train model to map any point on the pre-trained diffusion trajectory back to the data distribution, enabling fast generation. Rectified flow [10, 11, 13] is another direction, which focuses on straightening ODE trajectories under constant velocity field. By straightening the flow and reducing path complexity, it allows for fast generation through efficient and accurate numerical solutions with fewer Euler steps. Recent methods such as AGM [41] also introduce acceleration modeling based on Stochastic Optimal Control (SOC) theory instead of relying solely on velocity. However, AGM predicts time-varying acceleration, which still requires multiple iterative steps to solve the differential equations. In contrast, our proposed CAF ODE assumes that the acceleration term is constant with respect to time. Therefore, there is no need to iteratively solve complex timedependent differential equations. This simplification allows for direct closed-form solution that supports efficient and accurate sampling in just few steps.

3 Preliminary
=============

Rectified flow [10, 13] is an ordinary differential equation-based framework for learning mapping between two distributions π0 and π1. Typically, in image generation, π0 is simple tractable distribution, e.g., the standard normal distribution, defined in the latent space and π1 is the image distribution. Given empirical observations of x0 π0 and x1 π1 over time [0, 1], flow is defined as dxt dt = v(xt, t), 3 (1) Figure 3: Sampling trajectories of CAF with different h. The sampling trajectories of CAF are displayed for different values of h, which determines the initial velocity and acceleration. π0 and π1 are mixtures of Gaussian distributions. We sample across sampling steps of = 7 to show how sampling trajectories change with h. where xt = I(x0, x1, t) is time-differentiable interpolation between x0 and x1, and : Rd [0, 1] Rd is velocity field defined on data-time domain. Rectified flow learns the velocity field with neural network vθ by minimizing the following mean square objective: min θ Ex0,x1γ,tp(t) v(xt, t) vθ(xt, t)2(cid:105) (cid:104) , (2) where γ represents coupling of (π0, π1) and p(t) is time distribution defined on [0, 1]. The choice of interpolation leads to various algorithms, such as Rectified flow [10], ADM [30], EDM [29], and LDM [42]. Specifically, Rectified flow proposes simple linear interpolation between x0 and x1 as xt = (1 t)x0 + tx1, which induces the velocity field in the direction of (x1 x0), i.e., v(xt, t) = x1 x0. This means the Rectified flow transports x0 to x1 along straight trajectory with constant velocity. After training vθ, we can generate sample x1 using off-the-shelf ODE solvers Φ, such as the Euler method: xt+t = xt + vθ(xt, t), {0, t, . . . , (N 1) t}, (3) where = 1 and is the total number of steps. To achieve faster generation with fewer steps without sacrificing accuracy, it is crucial to learn straight ODE flow. Straight ODE flow minimize numerical errors encountered by the ODE solver. Reflow and flow crossing. The trajectories of interpolants xt may intersecta phenomenon known as flow crossingdue to stochastic coupling between π0 and π1 (e.g., random pairing of x0 and x1). These intersections introduce approximation errors in the neural network, leading to curved sampling trajectories [10]. Our toy experiment, illustrated in Fig. 1a, clearly demonstrates this issue: the simulated sampling trajectories become curved due to flow crossing, rendering one-step simulation inaccurate. To address this problem, Rectified flow [10] introduces reflow procedure. This procedure iteratively straightens the trajectories by reconstructing more deterministic and direct pairing of x0 and x1 without altering the marginal distributions. Specifically, the reflow procedure involves θ )) using pre-trained Rectified flow model vk generating new coupling γ of (x0, x1 = Φ(x0; vk θ , θ ) = x0 + (cid:82) 1 where denotes the iteration of the reflow procedure, and Φ(x0; vk θ (xt, t)dt. By iteratively refining the coupling and the velocity field, the reflow procedure reduces flow crossing, resulting in straighter trajectories and improved accuracy in fewer steps. 0 vk

4 Method
========

We aim to develop generative model based on the ODE framework that enables faster generation without compromising quality. To achieve this, we propose novel approach called Constant Acceleration Flow (CAF). Specifically, CAF formulates an ODE trajectory that transports xt with constant acceleration, offering more expressive and precise estimation of the ODE flow compared to constant velocity models. Additionally, we propose two novel techniques that address the problem of flow crossing: 1) initial velocity conditioning and 2) reflow procedure for learning initial velocity. The overall training pipeline is presented in Alg. 1. 4.1 Constant Acceleration Flow We propose novel ODE framework based on the constant acceleration equation, which is driven by the empirical observations x0 π0 and x1 π1 over time [0, 1] as: dxt = v(x0, 0)dt + a(xt, t)tdt, (4) where : Rd [0] Rd is the initial velocity field and : Rd [0, 1] Rd is the acceleration field. We abbreviate time variable for notation simplicity, i.e., v(x0, 0) = v(x0), a(xt, t) = a(xt). By integrating both sides of (4) with respect to and assuming constant acceleration field, i.e., a(xt1) = a(xt2 ), t1, t2 [0, 1], we derive the following equation: xt = x0 + v(x0)t + 1 a(xt)t2. (5) Given the initial velocity field v, the acceleration field can be derived as a(xt) = 2(x1 x0) 2v(x0), (6) by setting = 1 and the constant acceleration assumption. Then, we propose time-differentiable interpolation as: xt = I(x0, x1, t, v(x0)) = (1 t2)x0 + t2x1 + v(x0)(t t2), (7) by substituting (6) to (5). Using this result, we can easily simulate an intermediate sample xt on our CAF ODE trajectory. Learning initial velocity field. Selecting an appropriate initial velocity field is crucial, as different initial velocities lead to distinct flow dynamics. Here, we define the initial velocity field as scaled displacement vector between x1 and x0: v(x0) = h(x1 x0), (8) where is hyperparameter that adjusts the scale of the initial velocity. This configuration enables straight ODE trajectories between distributions π0 and π1, similar to those in Rectified flow. However, varying changes the flow characteristics: 1) = 1 simulates constant velocity flows, 2) < 1 leads to model with positive acceleration, and 3) > 1 results in negative acceleration, as illustrated in Fig. 3. Empirically, we observe that the negative acceleration model is more effective for image sampling, possibly due to its ability to finely tune step sizes near data distribution. The initial velocity field is learned using neural network vθ, which is optimized by minimizing the distance metric d(, ) between the target and estimated velocities as min θ Ex0,x1γ,tp(t),xtI [d(v(x0), vθ(xt))] , (9) where p(t) is time distribution defined on [0, 1]. Note that our velocity model learns target initial velocity defined at = 0. This differs from Rectified flow, which learns target velocity field defined over [0, 1]. Learning acceleration field. Under the assumption of constant acceleration, the acceleration field is derived from (6) as a(xt) = 2(x1 x0) 2v(x0). (10) We learn the acceleration field using neural network aϕ by minimizing the distance metric d(, ) as: (11) Ex0,x1γ,tp(t),xtI [d(a(xt), aϕ(xt))] . min ϕ In Sec. C, we theoretically show that CAF ODE preserves the marginal data distribution. x0, x1 γ, Unif([0, 1]) v(x0) = h(x1 x0) xt = I(x0, x1, t, v(x0)) Lvel = d(v(x0), vθ(xt)) θ θ Lvel Algorithm 1 Training process of Constant Acceleration Flow Require: deterministic coupling γ, initial velocity scale h, vθ, aϕ. 1: while not converge do 2: 3: 4: 5: 6: 7: end while 8: while not converge do 9: 10: 11: 12: 13: 14: end while 15: return vθ, aϕ x0, x1 γ, Unif([0, 1]), ˆvθ = vθ(x0) a(xt) = 2(x1 x0) 2ˆvθ xt = I(x0, x1, t, ˆvθ) Lacc = d(sg[a(xt)], aϕ(xt, ˆvθ)) ϕ ϕ Lacc Target initial velocity Eq. (7) update θ using SGD with gradient Target acceleration Eq. (7) update ϕ using SGD with gradient 4.2 Addressing flow crossing Rectified flow addresses the issue of flow crossing by reflow procedure. However, even after the procedure, trajectories may still intersect each other. Such intersections hinder learning straight ODE trajectories, as demonstrated in Fig. 1a. Similarly, our acceleration model also encounters the flow crossing problem. This leads to inaccurate estimation, as the model struggles to predict estimation on these intersections correctly. To further address the flow crossing, we propose two techniques. Initial velocity conditioning (IVC). We propose conditioning the estimated initial velocity ˆvθ = v(x0) as the input of the acceleration model, i.e., aϕ(xt, ˆvθ). This approach provides the acceleration model with auxiliary information on the flow direction, enhancing its capability to distinguish correct estimations and mitigate ambiguity at the intersections of trajectories, as illustrated in Fig. 1. Our IVC circumvents the non-intersecting condition required in Rectified flow (see Theorem 3.6 in [10]), which is key assumption for achieving straight coupling γ. By reducing the ambiguity arising from intersections, CAF can learn straight trajectories with less constrained couplings, which is quantitatively assessed in Tab. 4. To incorporate IVC into learning the acceleration model, we reformulate (11) as: min ϕ Ex0,x1γ,tp(t),xtI [d (sg[a(xt)], aϕ(xt, ˆvθ))] . (12) where sg[] indicates stop-gradient operation. Since our velocity model learns to predict the initial velocity (see (9)), we ensure that the model can handle both forward and reverse CAF ODEs, which start from x0 and x1, respectively. Thus, our acceleration model can generalize across different flow directions, enabling inversion as demonstrated in Sec. B.2. Reflow for initial velocity. It is also important to improve the accuracy of the initial velocity model. Following [10], we address the inaccuracy caused by stochastic pairing of x0 and x1 by employing pre-trained generative model ψ, which constructs more deterministic coupling γ of x0 and x1. We subsequently use this new coupling γ to train the initial velocity and acceleration models. 4.3 Sampling After training the initial velocity and acceleration models, we generate samples using the CAF ODE introduced in (4). The discrete sampling process is given by: xt+t = xt + vθ(x0) + t aϕ(xt, t, vθ(x0)), (13) where is the total number of steps, = 1 where {0, ..., 1} (See Alg. 2). We adopt since it empirically improves accuracy, especially in the small regime. Notably, when = 1 (one-step generation), simplifies to 1 2 , leading to the closed-form solution in (5). See Alg. 3 for inversion algorithm. , = it, and = (2i+1) 2 Algorithm 2 Sampling process of Constant Acceleration Flow Require: velocity model vθ, acceleration model aϕ, sampling steps , π0. 1: x0 π0 2: ˆvθ vθ(x0) 3: for = 0 to 1 do 4: 5: 6: t 2i+1 2N ˆaϕ aϕ(xt, vθ) xt + 1 xt+ 1 7: 8: end for 9: return x1 ˆvθ + ˆaϕ

5 Experiment
============

We evaluate the proposed Constant Acceleration Flow (CAF) across various scenarios, including both synthetic and real-world datasets. In Sec. 5.1, our investigation begins with simple twodimensional synthetic dataset, where we compare the performance of Rectified flow and CAF to clearly demonstrate the effectiveness of our model. Next, we extend our experiments to real-world image datasets, specifically CIFAR-10 (3232) and ImageNet (6464), in Sec. 5.2. These experiments highlight CAFs ability to generate high-quality images with single sampling step. Furthermore, we conduct an in-depth analysis of CAF through evaluations of coupling preservation, straightness, inversion tasks, and an ablation study in Sec. 5.3. 5.1 Synthetic experiments We demonstrate the advantages of the Constant Acceleration Flow (CAF) over the constant velocity flow model, Rectified Flow [10], through synthetic experiments. For the neural networks, we use multilayer perceptrons (MLPs) with five hidden layers and 128 units per layer. Initially, we train 1-Rectified flow on 2D synthetic data to establish deterministic coupling. We then train both CAF and 2-Rectified flow. For CAF, we incorporate the initial velocity into the acceleration model by concatenating it with the input, ensuring that the model capacities of both CAF and 2-Rectified flow remain comparable. We set as l2 distance. Fig. 2 presents samples generated from CAF in one step and from 2-Rectified flow in two steps. Our CAF more accurately approximates the target distribution π1 than 2-Rectified flow. In particular, CAF with = 2 (negative acceleration) learns the most accurate distribution. In contrast, 2-Rectified flow frequently generates samples that significantly deviate from π1, indicating its difficulty in accurately estimating straight ODE trajectories. This experiment shows that reflowing alone may not overcome the flow crossing problem, leading to poor estimations, whereas our proposed acceleration modeling and IVC effectively address this issue. Moreover, Fig. 3 shows sampling trajectories from CAF trained with different hyperparameters h. It clearly demonstrates that controls the flow dynamics as we intended: > 1 indicates negative acceleration, = 1 represents constant velocity, and < 1 corresponds to positive acceleration flows. Additional synthetic examples are provided in Fig. 6. 5.2 Real-data experiments To further validate the effectiveness of our approach, we train CAF on real-world image datasets, specifically CIFAR-10 at 3232 resolution and ImageNet at 6464 resolution. To create deterministic coupling γ, we utilize the pre-trained EDM models [29] and adopt the U-Net architecture of ADM [30] for the initial velocity and acceleration models. In the acceleration model, we double the input dimension of first layer to concatenate the initial velocity to the input xt of the acceleration model, which marginally increases the total number of parameters. We set = 1.5 and as LPIPS-Huber loss [43] for all real-data experiments. Baselines and evaluation. We evaluate state-of-the-art diffusion models [1, 2, 7, 28, 29], GANs [22, 23, 24], and few-step generation approaches [6, 7]. We primarily assess the image generation quality of our method using the Fréchet Inception Distance (FID) [50] and Inception Score (IS) [51]. Additionally, we evaluate diversity using the recall metric following [6, 7, 10]. 7 Table 1: Performance on CIFAR-10. Unconditional Conditional FID FID Model GAN Models BigGAN [22] StyleGAN-Ada [23] StyleGAN-XL [24] Diffusion/Consistency Models Score SDE [1] DDPM [2] VDM [27] LSGM [28] DDIM [26] EDM [29] CT [6] 1 1 1 2000 1000 1000 138 10 35 5 2 1 Diffusion/Consistency Models Distillation Diff-Instruct [9] DMD [44] DFNO [5] TRACT [45] KD [46] CD [6] CTM [7] Rectified Flow Models 2-Rectified Flow [10] 2-Rectified Flow + Distill [10] CAF (Ours) CAF + GAN (Ours) 1 1 1 1 1 2 1 2 2 1 1 1 1 8.51 2.92 - 2.20 3.17 7.41 2.10 13.36 2.01 37.75 5.83 8.70 4.53 3.77 3.78 3.78 9.36 2.93 3.55 1.87 1.98 7.89 11.81 4. 4.81 1.48 - 2.42 1.85 - - - - - 1.82 35.54 - - - - - - - - - 1.63 1.73 3.74 6.88 - 2.68 1. Table 2: Performance on ImageNet 64 64. Model FID Rec IS GAN Models BigGAN-deep [22] StyleGAN-XL [24] Diffusion/Consistency Models 1 1 4.06 2.09 - 82.35 EDM [29] DDIM [26] DDPM [2] iDDPM [47] ADM [30] - - - - - 48.88 - - - - - - - Diffusion/Consistency Models Distillation 13.7 18.3 11.0 2.92 2.07 2.44 55.3 3.42 7.93 3.10 6.65 11.1 13.0 50 10 250 250 250 79 5 20 10 20 10 2 1 DPM-solver [48] DEIS [49] CT [6] Diff-Instruct [9] DMD [44] TRACT [45] DFNO [5] PD [3] CD [6] CTM [7] Rectified Flow Models CAF (Ours) CAF + GAN (Ours) 1 1 1 1 1 2 1 2 1 1 1 5.57 2.62 7.43 7.83 15.39 4.70 6.20 1.73 1.92 - - - - - - 40.08 64.29 70.38 6.52 1.69 37.45 62. 0.48 0.52 0.56 0.49 0.58 0.62 0.63 0.67 - - - - - 0.56 0.47 - - - 0.61 0.62 0.64 0.57 0.57 0.57 0.62 0.64 Distillation. Distilling few-step student model from pre-trained teacher model has recently become essential for high-quality few-step generation [6, 7, 10, 11]. InstaFlow [11] has observed that learning straighter trajectories and achieving good coupling significantly enhance distillation performance. Moreover, CTM [7] and DMD [44] incorporate an adversarial loss as an auxiliary loss to facilitate the training of the student model. We empirically found that incorporating the adversarial loss alone was sufficient to achieve superior performance for one-step sampling without introducing instability. For training details, please refer to Sec. A. CIFAR-10. We present the experimental results on CIFAR-10 in Tab. 1. Our base unconditional CAF model (4.81 FID, = 1) significantly improves the FID compared to recent state-of-the-art diffusion models (without distillation), including DDIM [26] (13.36 FID, = 10), EDM (37.75 FID, = 5), and 2-Rectified flow (7.89 FID, = 2) in few-step generation (e.g., < 10). We retrained 2-Rectified flow using the official codes of [10], achieving slightly better performance than the officially reported performance (12.21 FID) for one-step generation [10]. CAFs remarkable 3.08 FID improvement over 2-Rectified flow (N = 2) highlights the effectiveness of acceleration modeling in fast generation. Our approach is also effective in class-conditional generation, where the base CAF model (2.68 FID, = 1) shows significant FID improvement over EDM (35.54 FID, = 5) and 2-Rectified flow (3.74 FID, = 2). Additionally, after adversarial training, CAF achieves superior FID of 1.48 for unconditional generation and 1.39 for conditional generation with = 1. Lastly, we qualitatively compare the 2-Rectified flow and our CAF in Fig. 4, where CAF generates more vivid samples with intricate details than 2-Rectified flow. ImageNet. We extend our evaluation to the ImageNet dataset at 6464 resolution to demonstrate the scalability and effectiveness of our CAF model on more complex and higher-resolution images. Similar to the results on CIFAR-10, our base conditional CAF model significantly improves the FID compared to recent state-of-the-art diffusion models (without distillation) in the small regime (e.g., < 10). Specifically, CAF (6.52 FID, = 1) outperforms models such as DPM-solver [48] (7.93 FID, = 10), CT [6] (11.1 FID, = 2), and EDM [29] (55.3 FID, = 5). This validates that the superior performance of CAF can be effectively generalized to complex and large-scale datasets. Additionally, after adversarial training, CAF outperforms or is competitive with state-of-the-art distillation baselines in one-step generation. Notably, CAF achieves the best FID performance of 1.69, surpassing strong baselines. We also demonstrate one-step qualitative results in Fig. 14. (a) (b) Figure 4: Qualitative results on CIFAR-10. We compare the quality of generated images from 2-Rectified flow and CAF (Ours) with = 1 and 10. Each image x1 is generated from the same x0 for both models. CAF generates more vivid images with intricate details than 2-RF for both . Table 3: Coupling preservation. Table 5: Ablation study on CIFAR-10 (N = 1). Metric 2-Rectified Flow CAF (ours) LPIPS PSNR 0.092 29.79 0.041 33.16 Table 4: Flow straightness comparison. Dataset 2-Rectified Flow CAF (ours) 2D CIFAR-10 0.065 0.043 0.058 0.034 Config Constant acceleration v0 condition Reflow procedure D (h=1.5) (h=1.5) (h=1) (h=0.5) FID 378 6.88 3.82 2.68 3.02 2.73 5.3 Analysis Coupling preservation. We evaluate how accurately CAF and Rectified flow approximate the deterministic coupling obtained from pre-trained models via reflow procedure. To analyze this, we first conduct synthetic experiments where the interpolant paths are crossed, as illustrated in Fig. 5a. Due to the flow crossing, the sampling trajectory of Rectified flow fails to preserve the ground-truth coupling (interpolation path I), leading to curved sampling trajectory. In contrast, our CAF learns the straight interpolation paths by incorporating acceleration, demonstrating superior coupling preservation ability. Moreover, we evaluate the coupling preservation ability on real data from CIFAR-10. We randomly sample 1K training pairs (x0, x1) from the deterministic coupling γ and measure the similarity between x1 and ˆx1, where ˆx1 is generated sample from x0. In other words, we measure the distance between ground truth image and generated image corresponding to the same noise. If the coupling is well-preserved, the distance should be small. We use PSNR and LPIPS [52] as distance measures. The result in Tab. 3 demonstrates that CAF better preserves coupling. In terms of PSNR, CAF outperforms Rectified flow by 3.37. This is consistent with the qualitative result in Fig. 5b, where ˆx1 from CAF resembles more to x1 (ground truth) than ˆx1 from Rectified flow. Flow straightness. To evaluate the straightness of learned trajectories, we introduce the Normalized Flow Straightness Score (NFSS). Similar to previous works [10, 11], we measure flow straightness by the L2distance between the normalized displacement vector (x0 x1) and the normalized velocity vector xt as below: = Ex0,x1,t (cid:34)(cid:13) (cid:13) (cid:13) (cid:13) x1 x0 x1 x02 xt xt (cid:13) 2 (cid:13) (cid:13) (cid:13) 2 (cid:35) . (14) Here, smaller value of indicates straighter trajectory. We compare between CAF and Rectified flow using synthetic and real-world datasets, as presented in Tab. 4. For Rectified flow, we use xt = vθ(xt), while for CAF, we use xt = vθ(x0) + aϕ(xt)t. The results show that CAF outperforms Rectified flow in flow straightness. (a) (b) Figure 5: Experiments for coupling preservation. (a) We plot the sampling trajectories during training where their interpolation paths are crossed. Due to the flow crossing, RF (top) rewires the coupling, whereas CAF (bottom) preserves the coupling of training data. (b) CAF accurately generates target images from the given noise (e.g., car from the car noise), while RF often fails (e.g., frog from the car noise). LPIPS [52] values are in parentheses. Inversion We further demonstrate CAFs capability in real-world applications by conducting zeroshot tasks such as reconstruction and box inpainting using inversion. We provide implemenetation details and algorithms in Sec. B.2. As shown in the Tab. 6 and 7, our method achieves lower reconstruction errors (CAF: 46.68 PSNR vs. RF: 33.34 PSNR) and better zero-shot inpainting capabilities even with fewer steps compared to baselines. These improvements are attributed to CAFs superior coupling preservation capability. Moreover, we present qualitative comparisons between CAF and the baselines in Fig. 12 and 13, which further validates the quantitative results. Ablation study. We conduct an ablation study to evaluate the effectiveness of components in our framework under the one-step generation setting (N = 1). We examine the improvements achieved by 1) constant acceleration modeling, 2) initial velocity (v0) conditioning, and 3) the reflow procedure for v0. The configurations and results are outlined in Tab. 5. Specifically, and correspond to 1-Rectified flow and 2-Rectified flow, respectively. Configurations to represent our CAF frameworks, with being our CAF without IVC. By comparing A,B,C, and F, we demonstrate that all three components in our framework substantially improve the performance. In addition, we analyze the final model across various acceleration scales controlled by h. The performance difference between and is relatively small, indicating that our framework is robust to the choice of hyperparameters. Empirically, we observe that configuration F, i.e., CAF (h = 1.5) with negative acceleration, achieves the best FID of 2.68. Notably, our CAF without v0 conditioning, still outperforms rectified flow (configuration B) by 3.06 FID. This highlights the critical role of constant acceleration modeling in enhancing the quality of few-step generation. Also, we verify the significance of reflowing by comparing configurations and B, which achieve 378 FID and 6.88 FID, respectively.

6 Conclusion
============

In this paper, we have introduced the Constant Acceleration Flow (CAF) framework, which enhances precise ODE trajectory estimation by incorporating controllable acceleration variable into the ODE framework. To address the flow crossing problem, we proposed two strategies: initial velocity conditioning and reflow procedure. Our experiments on toy datasets, real-world dataset demonstrate CAFs capabilities and scalability, achieving state-of-the-art FID scores. Furthermore, we conducted extensive ablation studies and analysesincluding assessments of flow straightness, coupling preservation, and real-world applicationsto validate and deepen our understanding of the effectiveness of our proposed components in learning accurate ODE trajectories. We believe that CAF offers promising direction for efficient and accurate generative modeling, and we look forward to exploring its applications in more diverse settings such as 3D and video.

Acknowledgement
===============

This work was supported by ICT Creative Consilience Program through the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (IITP-2024-RS-2020-II201819, 10%), the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT) (NRF-2023R1A2C2005373, 45%), and the Virtual Engineering Platform Project (Grant No. P0022336, 45%), funded by the Ministry of Trade, Industry & Energy (MoTIE, South Korea).

References
==========

[1] Yang Song, Jascha Sohl-Dickstein, Diederik Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. Score-based generative modeling through stochastic differential equations. In International Conference on Learning Representations, ICLR, 2021. [2] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. In Advances in Neural Information Processing Systems, NeurIPS, 2020. [3] Tim Salimans and Jonathan Ho. Progressive distillation for fast sampling of diffusion models. In International Conference on Learning Representations, ICLR, 2022. [4] Chenlin Meng, Robin Rombach, Ruiqi Gao, Diederik Kingma, Stefano Ermon, Jonathan Ho, and Tim Salimans. On distillation of guided diffusion models. In Conference on Computer Vision and Pattern Recognition, CVPR, 2023. [5] Hongkai Zheng, Weili Nie, Arash Vahdat, Kamyar Azizzadenesheli, and Anima Anandkumar. Fast sampling of diffusion models via operator learning. In International Conference on Machine Learning, ICML, 2023. [6] Yang Song, Prafulla Dhariwal, Mark Chen, and Ilya Sutskever. Consistency models. In International Conference on Machine Learning, ICML, 2023. [7] Dongjun Kim, Chieh-Hsin Lai, Wei-Hsiang Liao, Naoki Murata, Yuhta Takida, Toshimitsu Uesaka, Yutong He, Yuki Mitsufuji, and Stefano Ermon. Consistency trajectory models: Learning probability flow ode trajectory of diffusion. In International Conference on Learning Representations, ICLR, 2024. [8] Simian Luo, Yiqin Tan, Longbo Huang, Jian Li, and Hang Zhao. Latent consistency models: Synthesizing high-resolution images with few-step inference. arXiv preprint arXiv:2310.04378, 2023. [9] Weijian Luo, Tianyang Hu, Shifeng Zhang, Jiacheng Sun, Zhenguo Li, and Zhihua Zhang. Diff-instruct: universal approach for transferring knowledge from pre-trained diffusion models. In Advances in Neural Information Processing Systems, NeurIPS, 2024. [10] Xingchao Liu, Chengyue Gong, and Qiang Liu. Flow straight and fast: Learning to generate and transfer data with rectified flow. In International Conference on Learning Representations, ICLR, 2023. [11] Xingchao Liu, Xiwen Zhang, Jianzhu Ma, Jian Peng, et al. Instaflow: One step is enough for high-quality diffusion-based text-to-image generation. In International Conference on Learning Representations, ICLR, 2023. [12] Patrick Esser, Sumith Kulal, Andreas Blattmann, Rahim Entezari, Jonas Müller, Harry Saini, Yam Levi, Dominik Lorenz, Axel Sauer, Frederic Boesel, et al. Scaling rectified flow transformers for high-resolution image synthesis. arXiv preprint arXiv:2403.03206, 2024. [13] Qiang Liu. Rectified flow: marginal preserving approach to optimal transport. arXiv preprint arXiv:2209.14577, 2022. [14] Yaron Lipman, Ricky TQ Chen, Heli Ben-Hamu, Maximilian Nickel, and Matt Le. Flow matching for generative modeling. In International Conference on Learning Representations, ICLR, 2022. [15] Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images. 2009. [16] Diederik Kingma and Max Welling. Auto-encoding variational bayes. In International Conference on Learning Representations, ICLR, 2014. [17] Aaron Van Den Oord, Oriol Vinyals, and Koray Kavukcuoglu. Neural discrete representation learning. In Advances in Neural Information Processing Systems, NeurIPS, 2017. 11 [18] Laurent Dinh, Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using real nvp. In International Conference on Learning Representations, ICLR, 2017. [19] Durk Kingma and Prafulla Dhariwal. Glow: Generative flow with invertible 1x1 convolutions. In Advances in Neural Information Processing Systems, NeurIPS, 2018. [20] Derek Onken, Samy Wu Fung, Xingjian Li, and Lars Ruthotto. Ot-flow: Fast and accurate continuous normalizing flows via optimal transport. In Association for the Advancement of Artificial Intelligence, AAAI, 2021. [21] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in Neural Information Processing Systems, NeurIPS, 2014. [22] Andrew Brock, Jeff Donahue, and Karen Simonyan. Large scale gan training for high fidelity natural image synthesis. In International Conference on Learning Representations, ICLR, 2018. [23] Tero Karras, Miika Aittala, Janne Hellsten, Samuli Laine, Jaakko Lehtinen, and Timo Aila. Training generative adversarial networks with limited data. In Advances in Neural Information Processing Systems, NeurIPS, 2020. [24] Axel Sauer, Katja Schwarz, and Andreas Geiger. Stylegan-xl: Scaling stylegan to large diverse datasets. In SIGGRAPH, 2022. [25] Yujin Kim, Dogyun Park, Dohee Kim, and Suhyun Kim. Naturalinversion: Data-free image synthesis improving real-world consistency. In Association for the Advancement of Artificial Intelligence, AAAI, 2022. [26] Jiaming Song, Chenlin Meng, and Stefano Ermon. Denoising diffusion implicit models. In International Conference on Learning Representations, ICLR, 2020. [27] Diederik Kingma, Tim Salimans, Ben Poole, and Jonathan Ho. Variational diffusion models. In Advances in Neural Information Processing Systems, NeurIPS, 2021. [28] Arash Vahdat, Karsten Kreis, and Jan Kautz. Score-based generative modeling in latent space. In Advances in Neural Information Processing Systems, NeurIPS, 2021. [29] Tero Karras, Miika Aittala, Timo Aila, and Samuli Laine. Elucidating the design space of diffusion-based generative models. In Advances in Neural Information Processing Systems, NeurIPS, 2022. [30] Prafulla Dhariwal and Alexander Nichol. Diffusion models beat gans on image synthesis. In Advances in Neural Information Processing Systems, NeurIPS, 2021. [31] James Betker, Gabriel Goh, Li Jing, Tim Brooks, Jianfeng Wang, Linjie Li, Long Ouyang, Juntang Zhuang, Joyce Lee, Yufei Guo, et al. Improving image generation with better captions. Computer Science. https://cdn. openai. com/papers/dall-e-3. pdf, 2023. [32] Sojin Lee, Dogyun Park, Inho Kong, and Hyunwoo Kim. Diffusion prior-based amortized variational inference for noisy inverse problems. In European Conference on Computer Vision, ECCV, 2024. [33] Juyeon Ko, Inho Kong, Dogyun Park, and Hyunwoo Kim. Stochastic conditional diffusion models for robust semantic image synthesis. In International Conference on Machine Learning, ICML, 2024. [34] Ruoshi Liu, Rundi Wu, Basile Van Hoorick, Pavel Tokmakov, Sergey Zakharov, and Carl Vondrick. Zero-1-to-3: Zero-shot one image to 3d object. In International Conference on Computer Vision, ICCV, 2023. [35] Jiaxiang Tang, Jiawei Ren, Hang Zhou, Ziwei Liu, and Gang Zeng. Dreamgaussian: Generative gaussian splatting for efficient 3d content creation. In International Conference on Learning Representations, ICLR, 2024. [36] Vikram Voleti, Chun-Han Yao, Mark Boss, Adam Letts, David Pankratz, Dmitry Tochilkin, Christian Laforte, Robin Rombach, and Varun Jampani. Sv3d: Novel multi-view synthesis and 3d generation from single image using latent video diffusion. arXiv preprint arXiv:2403.12008, 2024. [37] Dogyun Park, Sihyeon Kim, Sojin Lee, and Hyunwoo Kim. Ddmi: Domain-agnostic latent diffusion models for synthesizing high-quality implicit neural representations. In International Conference on Learning Representations, ICLR, 2024. 12 [38] RunwayML Team. Runwayml - gen2. 2023. [39] Pika Art. Pika art home. 2023. [40] Tim Brooks, Bill Peebles, Connor Holmes, Will DePue, Yufei Guo, Li Jing, David Schnurr, Joe Taylor, Troy Luhman, Eric Luhman, Clarence Ng, Ricky Wang, and Aditya Ramesh. Video generation models as world simulators. 2024. [41] Tianrong Chen, Jiatao Gu, Laurent Dinh, Evangelos Theodorou, Joshua Susskind, and Shuangfei Zhai. Generative modeling with phase stochastic bridges. In International Conference on Learning Representations, ICLR, 2024. [42] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Björn Ommer. High-resolution image synthesis with latent diffusion models. In Conference on Computer Vision and Pattern Recognition, CVPR, 2022. [43] Sangyun Lee, Zinan Lin, and Giulia Fanti. Improving the training of rectified flows. In arXiv preprint arXiv:2405.20320, 2024. [44] Tianwei Yin, Michaël Gharbi, Richard Zhang, Eli Shechtman, Fredo Durand, William Freeman, and Taesung Park. One-step diffusion with distribution matching distillation. In Conference on Computer Vision and Pattern Recognition, CVPR, 2024. [45] David Berthelot, Arnaud Autef, Jierui Lin, Dian Ang Yap, Shuangfei Zhai, Siyuan Hu, Daniel Zheng, Walter Talbott, and Eric Gu. Tract: Denoising diffusion models with transitive closure time-distillation. In arXiv preprint arXiv:2303.04248, 2023. [46] Eric Luhman and Troy Luhman. Knowledge distillation in iterative generative models for improved sampling speed. In arXiv preprint arXiv:2101.02388, 2021. [47] Alexander Quinn Nichol and Prafulla Dhariwal. Improved denoising diffusion probabilistic models. In International Conference on Machine Learning, ICML, 2021. [48] Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver: fast ode solver for diffusion probabilistic model sampling in around 10 steps. In Advances in Neural Information Processing Systems, NeurIPS, 2022. [49] Qinsheng Zhang and Yongxin Chen. Fast sampling of diffusion models with exponential integrator. In arXiv preprint arXiv:2204.13902, 2022. [50] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter. Gans trained by two time-scale update rule converge to local nash equilibrium. In Advances in Neural Information Processing Systems, NeurIPS, 2017. [51] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen. Improved techniques for training gans. In Advances in Neural Information Processing Systems, NeurIPS, 2016. [52] Richard Zhang, Phillip Isola, Alexei Efros, Eli Shechtman, and Oliver Wang. The unreasonable effectiveness of deep features as perceptual metric. In Conference on Computer Vision and Pattern Recognition, CVPR, 2018. [53] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. In International Conference on Learning Representations, ICLR, 2019. [54] Jiahui Yu, Xin Li, Jing Yu Koh, Han Zhang, Ruoming Pang, James Qin, Alexander Ku, Yuanzhong Xu, Jason Baldridge, and Yonghui Wu. Vector-quantized image modeling with improved vqgan. In International Conference on Learning Representations, ICLR, 2022. [55] Mingxing Tan and Quoc Le. Efficientnet: Rethinking model scaling for convolutional neural networks. In International Conference on Machine Learning, ICML, 2023. [56] Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, and Hervé Jégou. Training data-efficient image transformers & distillation through attention. In International Conference on Machine Learning, ICML, 2023. [57] Ron Mokady, Amir Hertz, Kfir Aberman, Yael Pritch, and Daniel Cohen-Or. Null-text inversion for editing real images using guided diffusion models. In Conference on Computer Vision and Pattern Recognition, CVPR, 2023. [58] Inbar Huberman-Spiegelglas, Vladimir Kulikov, and Tomer Michaeli. An edit friendly ddpm noise space: Inversion and manipulations. In Conference on Computer Vision and Pattern Recognition, 2024.

A Implementation details
========================

We utilize the pre-trained EDM model [29] to build the deterministic coupling γ for training our models. To construct deterministic couplings for CIFAR-10 and ImageNet, we select = 18 and = 40, respectively, using deterministic sampling following the protocol in [29]. For CIFAR-10 and ImageNet, we generate 1M and 3M pairs, respectively. We use the batch size of 2048 and train for 700K/700K iterations on ImageNet. For CIFAR-10, we use the batch size of 512 and train for 500K/500K iterations. For all experiments, we use AdamW [53] optimizer with learning rate of 0.0001 and apply an Exponential Moving Average (EMA) with 0.999 decay rate. For training acceleration model, we initialize it with initial velocity model for faster convergence. For adversarial training, we employ adversarial loss Lgan using real data x1,real from [24]: Lgan,η(ϕ) = Ex1,real [log dη(x1,real)] + Ex0 [log(1 dη(ˆx1))] , (15) where dη is discriminator and ˆx1 = x0 + vθ(x0) + 1 following combined loss to update the acceleration model: 2 aϕ(x0, vθ(x0)). In the end, we use the L(ϕ, η) = Lacc(ϕ) + λganLgan(ϕ, η), (16) where Lacc corresponds to (12) and λ are weight hyperparameters. Following [42, 54], we employ adaptive weighting as λgan = ϕl Lacc(ϕ) ϕl Lgan(ϕ,η) , where ϕl is the last layer of the acceleration model. Without Lacc, we found the training unstable and frequently exhibit mode collapse issue, which is common problem with adversarial training. We follow the training configuration from StyleGANXL [24]. We bilinearly upscale the image to 224224 resolution and use EfficientNet [55] and DeiTbase [56] for extracting features. During the adversarial training, we only optimize the acceleration model and discriminator with the learning rate of 2e-5 and 1e-3, respectively. We keep the parameters of the initial velocity model fixed for stable training. The total training takes about 21 days with 8 NVIDIA A100 GPUs for ImageNet, and takes 10 days 8 NVIDIA RTX3090 GPUs for CIFAR-10.

B Additional results
====================

B.1 Additional qualitative results 2D toy dataset. In Fig. 6, we provide additional generation results and sampling trajectories on various 2D synthetic datasets with = 1, demonstrating the effectiveness of our approach for fast generation. Fig. 7 provides additional examples of coupling preservation on 2-RF and CAF. Real-world dataset. In Fig. 8 and 9, we show additional generation results from our base CAF model on CIFAR-10 with = 1, 10, and 50. In Fig. 10, we compare the generation result between 2-RF and CAF distilled versions. Fig. 11 shows sampling results from our base CAF models with different hyperparameters h. Lastly, Fig. 14 shows the generation results on ImageNet with = 1. B.2 Real-world applications Inversion techniques are essential for real-world applications such as image and video editing [57, 58]. However, existing methods typically require 25100 steps for accurate inversion, which can be computationally intensive. In contrast, our method significantly reduces the inference time by enabling inversion in just few steps (e.g., < 20). We demonstrate this efficiency in two tasks: reconstruction and box inpainting. To reconstruct x1, we first invert x1 to obtain ˆx0, as described in Alg. 3. We then use the generation process (Alg. 2) with ˆx0 and same initial velocity vθ(x1) used in Alg. 3 to generate ˆx1. For box inpainting, we inject conditional informationthe non-masked image regioninto the iterative inversion and generation procedures, as detailed in Alg. 4. As demonstrated in Tab. 6 and 7, our method achieves better reconstruction quality (CAF: 46.68 PSNR vs. RF: 33.34 PSNR) and zeroshot inpainting capability even with fewer steps compared to baseline methods. Qualitative results are presented in Fig. 12 and 13, which further illustrate the effectiveness of our approach. This demonstrate that our method can be efficiently used for real-world applications, offering both speed and accuracy advantages over existing techniques. 14 Algorithm 3 Inversion process of Constant Acceleration Flow Require: velocity model vθ, acceleration model aϕ, sampling steps , π1. 1: x1 π1 2: ˆvθ vθ(x1) 3: for = to 1 do 4: 2i1 5: 2N ˆaϕ aϕ(xt, ˆvθ) 6: xt 1 xt 1 7: 8: end for 9: return x0 ˆvθ ˆaϕ Algorithm 4 Box inpainting of Constant Acceleration Flow Require: velocity model vθ, acceleration model aϕ, sampling steps , reference image x1, binary image mask Ω where 1 indicates the missing pixels. Create image with missing pixels and add noise σ Inversion steps ˆvθ (1 Ω) + (1 t)σ Ω, σ (0, I) ˆaϕ 1: σ (0, I) 2: x1 (1 Ω) + σ Ω 3: ˆvθ vθ(x) 4: for = to 1 do , 2i1 5: 2N ˆaϕ aϕ(xt, ˆvθ) 6: xt 1 xt 1 7: xt 1 xt 1 8: 9: end for 10: ˆvθ vθ(x0) 11: for = 0 to 1 do , 2j+1 12: 2N ˆaϕ aϕ(xt, ˆvθ) 13: ˆvθ + xt + 1 xt+ 1 14: x1 (1 Ω) + xt+ 1 xt+ 1 15: 16: end for 17: return inpainted image x1 ˆaϕ N Generation steps Ω B.3 Comparison with previous acceleration modeling literatures Here, we elaborate on the crucial differences between AGM [41] and CAF. The main distinction is that CAF assumes constant acceleration, whereas AGM predicts time-dependent acceleration. Since the CAF ODE assumes that the acceleration term is constant with time, there is no need to solve time-dependent differential equations iteratively. This allows for closed-form solution that supports efficient and accurate sampling, given that the learned velocity and acceleration models are accurate. Specifically, the solution for CAF ODE is given by: x1 = x0 + (cid:90) 1 0 v(x0) + a(xt) tdt = x0 + v(x0) + (cid:90) 1 0 a(xt) tdt = x0 + v(x0) + a(xt) (cid:90) 1 0 tdt = x0 + v(x0) + 1 2 a(xt) (17) (18) The integral simplifies thanks to the constant acceleration assumption, leading to one-step sampling. In contrast, AGMs acceleration is time-varying, meaning that the differential equation cannot be reduced in an analytic form. It requires multiple steps to approximate the true solution accurately. In Tab. 8, we systemically compare AGM with our CAF, where CAF consistently outperforms AGM. Moreover, we conducted additional experiments where AGM was trained with deterministic couplings as in our reflow setting. Incorporating reflow into AGM did not improve its performance in the few-step regime, which further highlights the distinct advantage of CAF over AGM. 15 Table 6: Reconstruction error. Table 7: Box inpainting. Model CM CTM EDM 2-RF 2-RF CAF (Ours) CAF (+GAN) (Ours) PSNR LPIPS - - 4 2 1 1 N/A N/A 13.85 33.34 29.33 46.68 40.84 N/A N/A 0.447 0.094 0.204 0.007 0.028 Model CM CTM EDM 2-RF CAF (Ours) CAF (+GAN) (Ours) NFE FID 18 - - 12 12 12 13.16 N/A N/A 16.41 10.39 10. Table 8: Comparison between AGM and CAF. Model Acceleration Closed-form solution Reflow for velocity FID on CIFAR-10 AGM [41] Time-varying AGM (enhanced ver.) Time-varying CAF (Ours) Constant No No Yes No Yes Yes 11.88 (N = 5) 15.23 (N = 5) 4.81 (N = 1)

C Marginal preserving property of Constant Acceleration Flow
============================================================

We demonstrate that the flow generated by our Constant Acceleration Flow (CAF) ordinary differential equation (ODE) maintains the marginal of the data distribution, as established by the definitions and theorem in [10]. Definition C.1. For path-wise continuously differentiable process = {xt : [0, 1]}, we define its expected velocity vx and acceleration ax as follow: (cid:20) dxt dt dt2 xt = , supp(xt). , ax(x, t) = vx(x, t) = xt = (cid:20) d2xt (19) (cid:21) (cid:21) For / supp(xt), the conditional expectation is not defined and we set vx and ax arbitrarily, for example vx(x, t) = 0 and ax(x, t) = 0. Definition C.2. [10] We denote that is rectifiable if vx is locally bounded and the solution to the integral equation of the form zt = z0 + (cid:90) 0 vx(zt, t)dt, [0, 1], z0 = x0, (20) exists and is unique. In this case, = {zt : [0, 1]} is called the rectified flow induced by x. Theorem 1. [10] Assume is rectifiable and is its rectified flow. Then Law(zt) = Law(xt), [0, 1]. Refer to [10] for the proof of Theorem 1. We will now show that our CAF ODE satisfies Theorem 1 by proving that our proposed ODE (4) induces z, which is the rectified flow as defined in Definition C.2. In (4), we define the CAF ODE as d2xt dt2 t. By taking the conditional expectation on both sides, we obtain dxt dt dxt dt = + (cid:12) (cid:12) (cid:12) (cid:12)t=0 (21) vx(x, t) = vx(x, 0) + ax(x, t) t, from Definition C.1. Then, the solution of the integral equation of CAF ODE is identical to the solution in Definition C.2 by (22): (22) zt = z0 + = z0 + (cid:90) 0 (cid:90) 0 vx(z0, 0) + ax(zt, t) tdt vx(zt, t)dt. (23) (24) This indicates that induced by CAF ODE is also rectified flow. Therefore, the CAF ODE satisfies the marginal preserving property, i.e., Law(zt) = Law(xt), as stated in Theorem 1.

D Limitation and Broader impacts
================================

D.1 Limitations One limitation of our model is the increased number of function evaluations (NFE) required for -step generation. While Rectified flow achieves an NFE of by only computing the velocity at each step, our method necessitates an additional computation, resulting in total NFE of + 1. This is because we compute the initial velocity at the beginning and the acceleration at each step. Although this extra evaluation slightly increases the computational burden, it is relatively minor in terms of overall performance and still enables efficient few-step generation. Moreover, this additional step can be reduced by jointly predicting velocity and acceleration terms with single model, which we leave for future work. Another limitation is the additional effort required to generate supplementary data. We utilize generated data to create deterministic coupling of noise and data samples for training CAF. While generating more data enhances our models performance, it can increase GPU usage, leading to higher carbon emissions. D.2 Broader Impacts Recent advancements in generative models hold significant potential for societal benefits across wide array of applications, such as image and video generation and editing, medical imaging analysis, molecular design, and audio synthesis. Our CAF framework contributes to enhancing the efficiency and performance of existing diffusion models, offering promising directions for positive impacts across multiple domains. This suggests that in practical applications, users can utilize generative models more rapidly and accurately, enabling broad spectrum of activities. However, it is crucial to acknowledge potential risks that must be carefully managed. The increased accessibility of generative models also broadens the potential for misuse. As these technologies become more widespread, the possibility of their exploitation for fraudulent activities, privacy breaches, and criminal behavior increases. It is vital to ensure their ethical and responsible use to prevent negative impacts. Establishing regulated ethical standards for developing and deploying generative AI technologies is necessary to prevent such misuse. Additionally, imposing restricted access protocols or verification systems to trace and authenticate generated contents will help ensure their responsible use. 17 (a) Generation results (b) Sampling trajectories with different (c) Generation results (d) Sampling trajectories with different Figure 6: Experiments on various 2D synthetic dataset. We compare results between 2-Rectified Flow and our Constant Acceleration Flow (CAF) on 2D synthetic data. π0 (blue) and π1 (green) are source and target distributions parameterized by Gaussian mixture models. The generated samples (orange) from CAF form more similar distribution as the target distribution π1. 18 Figure 7: Additional visualizations of coupling preservation on CIFAR-10. CAF accurately generates target images (x1) from the given noise (x0), while Rectified Flow often fails to preserve coupling of x0 and x1 . 19 Figure 8: Qualitative results on unconditional generation (CIFAR-10). We illustrate generating images with varying sampling steps, demonstrating consistency quality even for one-step generation. 20 Figure 9: Qualitative results on conditional generation (CIFAR-10). We illustrate generating images with varying sampling steps, demonstrating consistency quality even for one-step generation. 21 Figure 10: Comparisons on unconditional generation (CIFAR-10). We compare distilled model from 2-Rectified Flow (2-RF+Distill+GAN) and CAF (CAF+Distill+GAN) with qualitative results. 22 Figure 11: Unconditional generation for different on CIFAR-10. We display qualitative results of CAF for different values of h, indicating that our framework is robust to the choice of h. 23 Figure 12: Reconstruction results using inversion. Figure 13: Zero-shot box inpainting results. We use 1616 size mask for masked images in (a). For consistency model in (d), we followed their official code for inpainting. Figure 14: Qualitative results on conditional generation for ImageNet 6464 (N = 1, FID=1.69).

