{
    "paper_title": "Large Language Diffusion Models",
    "authors": [
        "Shen Nie",
        "Fengqi Zhu",
        "Zebin You",
        "Xiaolu Zhang",
        "Jingyang Ou",
        "Jun Hu",
        "Jun Zhou",
        "Yankai Lin",
        "Ji-Rong Wen",
        "Chongxuan Li"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Autoregressive models (ARMs) are widely regarded as the cornerstone of large language models (LLMs). We challenge this notion by introducing LLaDA, a diffusion model trained from scratch under the pre-training and supervised fine-tuning (SFT) paradigm. LLaDA models distributions through a forward data masking process and a reverse process, parameterized by a vanilla Transformer to predict masked tokens. By optimizing a likelihood bound, it provides a principled generative approach for probabilistic inference. Across extensive benchmarks, LLaDA demonstrates strong scalability, outperforming our self-constructed ARM baselines. Remarkably, LLaDA 8B is competitive with strong LLMs like LLaMA3 8B in in-context learning and, after SFT, exhibits impressive instruction-following abilities in case studies such as multi-turn dialogue. Moreover, LLaDA addresses the reversal curse, surpassing GPT-4o in a reversal poem completion task. Our findings establish diffusion models as a viable and promising alternative to ARMs, challenging the assumption that key LLM capabilities discussed above are inherently tied to ARMs."
        },
        {
            "title": "Start",
            "content": "Shen Nie 1 * Fengqi Zhu 1 * Zebin You 1 Xiaolu Zhang 2 Jingyang Ou 1 Jun Hu 2 Jun Zhou 2 Yankai Lin 1 Ji-Rong Wen 1 Chongxuan Li 1 5 2 0 2 4 1 ] . [ 1 2 9 9 9 0 . 2 0 5 2 : r a"
        },
        {
            "title": "Abstract",
            "content": "Autoregressive models (ARMs) are widely regarded as the cornerstone of large language models (LLMs). We challenge this notion by introducing LLaDA, diffusion model trained from scratch under the pre-training and supervised finetuning (SFT) paradigm. LLaDA models distributions through forward data masking process and reverse process, parameterized by vanilla Transformer to predict masked tokens. By optimizing likelihood bound, it provides principled generative approach for probabilistic inference. Across extensive benchmarks, LLaDA demonstrates strong scalability, outperforming our self-constructed ARM baselines. Remarkably, LLaDA 8B is competitive with strong LLMs like LLaMA3 8B in in-context learning and, after SFT, exhibits impressive instruction-following abilities in case studies such as multi-turn dialogue. Moreover, LLaDA addresses the reversal curse, surpassing GPT-4o in reversal poem completion task. Our findings establish diffusion models as viable and promising alternative to ARMs, challenging the assumption that key LLM capabilities discussed above are inherently tied to ARMs. Project page and codes: https: //ml-gsai.github.io/LLaDA-demo/. Figure 1. Zero/Few-Shot Benchmarks. We scale LLaDA to an unprecedented size of 8B parameters from scratch, achieving competitive performance with strong LLMs (Dubey et al., 2024). distribution pdata() by optimizing model distribution pθ() through maximum likelihood estimation, or equivalently KL divergence minimization between the two distributions: max θ (cid:124) Epdata(x) log pθ(x) min θ (cid:123)(cid:122) Generative modeling principles KL(pdata(x)pθ(x)) (cid:125) . (1) 1. Introduction What is now proved was once only imagined. placeholder,placeholder,placehoWilliam Blake Large language models (LLMs) (Zhao et al., 2023) fall entirely within the framework of generative modeling. Specifically, LLMs aim to capture the true but unknown language *Equal contribution Work done during an internship at Ant Group Project leaders 1Gaoling School of Artificial Intelligence, Renmin University of China; Beijing Key Laboratory of Big Data Management and Analysis Methods 2Ant Group. Correspondence to: Chongxuan Li <chongxuanli@ruc.edu.cn>. Preprint. The predominant approach relies on the autoregressive modeling (ARM)commonly referred to as the next-token prediction paradigmto define the model distribution: pθ(x) = pθ(x1) (cid:89) pθ(xi x1, . . . , xi1) , (2) (cid:124) i=2 (cid:123)(cid:122) Autoregressive formulation (cid:125) where is sequence of length L, and xi is the i-th token. This paradigm has proven remarkably effective (Radford, 2018; Radford et al., 2019; Brown, 2020; OpenAI, 2022) and has become the foundation of current LLMs. Despite its widespread adoption, fundamental question remains unanswered: Is the autoregressive paradigm the only viable path to achieving the intelligence exhibited by LLMs? 1 Large Language Diffusion Models We argue that the answer is not simple yes. The key insight overlooked previously is: it is the generative modeling principles (i.e., Eq. (1)), rather than the autoregressive formulation (i.e., Eq. (2)) itself, that fundamentally underpin the essential properties of LLMs, as detailed below. However, certain inherent limitations of LLMs can be directly traced to their autoregressive nature. In particular, we argue that scalability is primarily consequence of the interplay between Transformers (Vaswani, 2017), model and data size, and Fisher consistency1 (Fisher, 1922) induced by the generative principles in Eq. (1), rather than unique result of ARM. The success of diffusion transformers (Bao et al., 2023; Peebles & Xie, 2023) on visual data (Brooks et al., 2024) supports this claim. Furthermore, the capabilities of instruction-following and in-context learning (Brown, 2020) appear to be intrinsic properties of all proper conditional generative models on structurally consistent linguistic tasks, rather than exclusive advantages of ARMs. In addition, while ARMs can be interpreted as lossless data compressor (Deletang et al.; Huang et al., 2024b), any sufficiently expressive probabilistic model can achieve similar capabilities (Shannon, 1948). Nevertheless, the autoregressive nature of LLMs presents notable challenges. For example, sequential token-by-token generation incurs high computational costs, and the leftto-right modeling limits effectiveness in reversal reasoning tasks (Berglund et al., 2023). These inherent limitations constrain LLMs in handling longer and more complex tasks. Motivated by these insights, we introduce LLaDA, Large Language Diffusion with mAsking, to investigate whether the capabilities exhibited by LLMs can emerge from generative modeling principles beyond ARMs in Eq. (2), thereby addressing the fundamental question posed earlier. In contrast to traditional ARMs, LLaDA leverages masked diffusion model (MDM) (Austin et al., 2021a; Ou et al., 2024), which incorporates discrete random masking process and trains mask predictor to approximate its reverse process. This design enables LLaDA to construct model distribution with bidirectional dependencies and optimize lower bound of its log-likelihood, offering an unexplored and principled alternative to existing LLMs. We adopt the standard pipeline of data preparation, pretraining, supervised fine-tuning (SFT), and evaluation, scaling LLaDA to an unprecedented language diffusion of size 8B. In particular, LLaDA 8B was pre-trained from scratch on 2.3 trillion tokens using 0.13 million H800 GPU hours, followed by SFT on 4.5 million pairs. Across diverse tasks, including language understanding, math, code, and Chinese, LLaDA demonstrates the following contributions: 1It suggests the ability to recover the true data distribution with infinite data, sufficiently large network and optimal training. Scalability. LLaDA scales effectively up to computational budget of 1023 FLOPs, achieving comparable results to selfconstructed ARM baselines trained on the same data across six tasks, e.g., MMLU and GSM8K. In-Context Learning. Remarkably, LLaDA 8B surpasses LLaMA2 7B (Touvron et al., 2023) on nearly all 15 standard zero/few-shot learning tasks while performing on par with LLaMA3 8B (Dubey et al., 2024). Instruction-Following. LLaDA significantly enhances the ability to follow instructions after SFT, as demonstrated in case studies such as multi-turn dialogue. Reversal Reasoning. LLaDA effectively breaks the reversal curse (Berglund et al., 2023) with consistent performance across forward and reversal tasks. Notably, it outperforms GPT-4o in reversal poem completion task. 2. Approach In this section, we introduce the probabilistic formulation2, along with the pre-training, supervised fine-tuning, and inference procedures for LLaDA, as illustrated in Fig. 2. 2.1. Probabilistic Formulation Unlike ARMs in Eq. (2), LLaDA defines model distribution pθ(x0) through forward process and reverse process (Austin et al., 2021a; Ou et al., 2024). The forward process gradually masks tokens independently in x0 until the sequence is fully masked at = 1. For (0, 1), the sequence xt is partially masked, with each being masked with probability or remaining unmasked with probability 1 t. The reverse process recovers the data distribution by iteratively predicting masked tokens as moves from 1 to 0. The core of LLaDA is mask predictor, parametric model pθ(xt) that takes xt as input and predicts all masked tokens (denoted M) simultaneously. It is trained using crossentropy loss computed only on the masked tokens: L(θ) Et,x0,xt (cid:34) 1 L (cid:88) i=1 1[xi = M] log pθ(xi (cid:35) 0xt) , (3) where x0 is sampled from the training data, is sampled uniformly from [0, 1], and xt is sampled from the forward process. The indicator function 1[] ensures that the loss is computed only for masked tokens. Once trained, we can simulate reverse process (see Sec. 2.4 for details) parameterized by the mask predictor and define the model distribution pθ(x0) as the marginal distribution induced at = 0. Notably, the loss function in Eq. (3) has been proven to be an upper bound on the negative log2Here, we focus on the approach of LLaDA. rigorous formulation of MDM is provided in Appendix for interested readers. 2 Large Language Diffusion Models Figure 2. Conceptual Overview of LLaDA. (a) Pre-training. LLaDA is trained on text with random masks applied independently to all tokens at the same ratio [0, 1]. (b) SFT. Only response tokens are possibly masked. (c) Sampling. LLaDA simulates diffusion process from = 1 (fully masked) to = 0 (unmasked), predicting all masks simultaneously at each step with flexible remask strategies. likelihood of the model distribution (Ou et al., 2024): Epdata(x0) [log pθ(x0)] L(θ), (4) making it principled objective for generative modeling. Notably, LLaDA employs masking ratio that varies randomly between 0 and 1 while masked language models (Devlin, 2018) use fixed ratio. The subtly differences have significant implications, especially at scale: as shown in Eq. (4), LLaDA is principled generative model with the potential to perform in-context learning naturally, akin to LLMs. Moreover, its generative perspective ensures Fisher consistency (Fisher, 1922) in extreme cases, suggesting strong scalability with large data and models. 2.2. Pre-training LLaDA employs Transformer (Vaswani, 2017) as the mask predictor, whose architecture is similar to existing LLMs. However, LLaDA does not use causal mask, as its formulation allows it to see the entire input for predictions. We trained two variants of LLaDA with different sizes: 1 billion (B) and 8B. We summarize the model architecture of LLaDA 8B and LLaMA3 8B (Dubey et al., 2024) here and details are provided in Appendix B.2. We have ensured consistency in most hyperparameters while making several necessary modifications. We use vanilla multi-head attention instead of grouped query attention (Ainslie et al., 2023) for simplicity, as LLaDA is incompatible with KV caching, resulting in different number of key and value heads. Consequently, the attention layer has more parameters, and we reduce the FFN dimension to maintain comparable model size. Additionally, the vocabulary size differs slightly due to tokenizer (Brown, 2020) adapted on our data. The LLaDA model is pre-trained on dataset comprising 2.3 trillion (T) tokens, adhering to data protocol that aligns closely with existing large language models (LLMs) (Touvron et al., 2023; Chu et al., 2024), without the incorporation of any special techniques. The data are derived from online corpora, with low-quality content filtered through manually designed rules and LLM-based approaches. Beyond general text, the dataset encompasses high-quality code, math, and multilingual data. The mixing of data sources and domains is guided by scaled-down ARMs. The pre-training process utilizes fixed sequence length of 4096 tokens, incurring total computational cost of 0.13 million H800 GPU hours, similar to ARMs of the same scale and dataset size. For training sequence x0, we randomly sample [0, 1], mask each token independently with the same probability to obtain xt (see Fig. 2 (a)) and estimate Eq. (3) via the Monte Carlo method for stochastic gradient descent training. In addition, following Nie et al. (2024), to enhance the ability of LLaDA to handle variable-length data, we set 1% of the pre-training data to random length that is uniformly sampled from the range [1, 4096]. We adopted the Warmup-Stable-Decay (Hu et al., 2024) learning rate scheduler to monitor the training progress without interrupting continuous training. Specifically, we linearly increased the learning rate from 0 to 4 104 over the first 2000 iterations and maintained it at 4 104. After processing 1.2T tokens, we decayed the learning rate to 1 104 and held it constant for the next 0.8T tokens to ensure stable training. Finally, we linearly reduced the learning rate from 1 104 to 1 105 for the last 0.3T tokens. Furthermore, we utilized the AdamW optimizer (Loshchilov, 2017) with weight decay of 0.1, batch size of 1280, and local batch size of 4 per GPU. The 8B experiment was executed once, without any hyperparameter tuning. 2.3. Supervised Fine-Tuning We enhance the capability of LLaDA to follow instructions by supervised fine-tuning (SFT) with paired data (p0, r0), where p0 is the prompt and r0 denotes the response. This is the simplest and most basic post-training method for 3 Large Language Diffusion Models LLMs. Technically, this requires to model the conditional distribution pθ(r0p0) instead of pθ(x0) in pre-training. The implementation is similar to pre-training. As shown in Fig. 2 (b), we leave the prompt unchanged and mask the tokens in the response independently, as done for x0. Then, we feed both the prompt and the masked response rt to the pre-trained mask predictor to compute the loss for SFT: Et,p0,r0,rt 1 (cid:88) i= 1[ri = M] log pθ(ri 0p0, rt) , (5) where denotes dynamic length specified later, and all other notations remain the same as before. Note that this approach is fully compatible with pre-training. Essentially, the concatenation of p0 and r0 can be treated as clean pre-training data x0, while the concatenation of p0 and rt serves as the masked version xt. The process is identical to pre-training, with the only difference being that all masked tokens happen to appear in the r0 portion. The LLaDA 8B model undergoes SFT on dataset comprising 4.5 million pairs. Consistent with the pre-training process, both data preparation and training follow the SFT protocols utilized in existing LLMs (Chu et al., 2024; Yang et al., 2024), without introducing any additional techniques to optimize LLaDAs performance. The dataset spans multiple domains, including code, mathematics, instructionfollowing, and structured data understanding. We append EOS tokens to the end of short pairs in each mini-batch to ensure equal lengths across all data. We treat EOS as normal token during training and remove it during sampling, enabling LLaDA to control the response length automatically. Please refer to Appendix B.1 for more details. We train for 3 epochs on the SFT data using similar schedule to the pre-training phase. The learning rate is linearly increased from 0 to 2.5 105 over the first 50 iterations and then kept constant. During the final 10% of iterations, it is linearly reduced to 2.5 106. Additionally, we set the weight decay to 0.1, the global batch size to 256, and the local batch size to 2 per GPU. The SFT experiment was executed once, without any hyperparameter tuning. default. In addition, the generation length is also treated as hyperparameter, specifying the length of the fully masked sentence at the beginning of the sampling process. As detailed in Appendix B.4, since both pre-training and SFT are conducted using datasets with variable lengths, the final results are insensitive to this length hyperparameter. At an intermediate step from time (0, 1] to [0, t), we feed both p0 and rt into the mask predictor and predict all masked tokens simultaneously. Subsequently, we remask of the predicted tokens in expectation to obtain rs, ensuring that the transition of the reverse process aligns with the forward process for accurate sampling (Austin et al., 2021a). In principle, the remasking strategy should be purely random. However, inspired by the annealing tricks of sampling in LLMs (Holtzman et al., 2019; Brown, 2020), we explore two deterministic yet effective remasking strategies. Specifically, similarly to Chang et al. (2022), we remask the of predicted tokens with the lowest confidence based on the predictions, called low-confidence remasking. Additionally, for LLaDA after SFT, we can divide the sequence into several blocks and generate them from left to right, called semi-autoregressive remasking. Within each block, we apply the reverse process to perform sampling. We provide more details and ablation studies in Appendix. B.3. For conditional likelihood evaluation, we can naturally utilize the upper bound in Eq. (5). However, we find that the following equivalent form (Ou et al., 2024) exhibits lower variance and is more stable for evaluation: El,r0,rl (cid:34) (cid:88) i=1 1[ri = M] log pθ(ri (cid:35) 0p0, rl) , (6) where is uniformly sampled from {1, 2, . . . , L}, and rl is obtained by uniformly sampling tokens from r0 without replacement for masking. In addition, we employ the unsupervised classifier-free guidance (Nie et al., 2024). We refer the readers to more details in Appendix A.2. We present the training, sampling, and likelihood evaluation algorithms, along with theoretical details, in Appendix A. 3. Experiments 2.4. Inference As generative model, LLaDA is capable of both sampling new text and evaluating the likelihood of candidate text. We begin with the sampling. As illustrated in Fig. 2 (c), given prompt p0, we discretize the reverse process to sample from the model distribution pθ(r0p0), starting from fully masked response. The total number of sampling steps is hyperparameter, which naturally provides LLaDA with trade-off between efficiency and sample quality, as analyzed in Sec. 3.3. We employ uniformly distributed timesteps by We evaluate the scalability, instruction-following, and incontext learning capabilities of LLaDA on standard benchmarks, followed by analyses and case studies on more controlled datasets to provide comprehensive assessment. 3.1. Scalability of LLaDA on Language Tasks We first investigate the scalability of LLaDA on downstream tasks in comparison with the ARM baselines we constructed. Specifically, at the 1B scale, we ensured that LLaDA and ARM shared the same architecture, data, and all other config4 Large Language Diffusion Models Figure 3. Scalability of LLaDA. We evaluate the performance of LLaDA and our ARM baselines trained on the same data across increasing computational FLOPs. LLaDA exhibits strong scalability, matching the overall performance of ARMs on six tasks. urations. At larger scales, we also report results for LLaDA and ARM models of slightly different sizes trained on the same data due to resource limit, as detailed in Appendix B.2. We use the computational cost as unified scaling metric. For evaluation, we focused on six standard and diverse tasks. As shown in Fig. 3, LLaDA demonstrates impressive scalability, with its overall trend being highly competitive with that of ARM. Notably, in tasks such as MMLU and GSM8K, LLaDA exhibits even stronger scalability. Even on tasks like PIQA, where performance lags, LLaDA narrows the gap with ARMs at larger scales. To account for the significant influence of outliers, we opted not to fit quantitative scaling curves, avoiding potential misinterpretation. Nevertheless, the results clearly demonstrate the scalability of LLaDA. Nie et al. (2024) suggests that MDM requires 16 times more computation than ARM to achieve the same likelihood. However, there are key differences that make the conclusions of this study more broadly applicable. In particular, likelihood is relatively indirect metric for downstream task performance, and diffusion optimizes bound of the likelihood, making it not directly comparable to ARM. Additionally, we extended the scaling range from 1018 1020 in Nie et al. (2024) to 1020 1023 in this work. 3.2. Benchmark Results To comprehensively evaluate the in-context learning and instruction-following capabilities of LLaDA 8B, we conducted detailed comparisons with existing LLMs (Touvron et al., 2023; Dubey et al., 2024; Chu et al., 2024; Yang et al., 2024; Bi et al., 2024; Jiang et al., 2023) of similar scale. The selection of tasks and evaluation protocols was aligned with existing studies, encompassing 15 popular benchmarks in general tasks, mathematics, code, and Chinese. Further details are provided in Appendix B.5. For more direct comparison, we re-evaluated representative LLMs (Touvron et al., 2023; Dubey et al., 2024) in our implementation. As shown in Tab. 1, after pretraining on 2.3T tokens, LLaDA 8B demonstrates remarkable performance, surpassing LLaMA2 7B on nearly all tasks, and is overall competitive with LLaMA3 8B. LLaDA shows advantages in math and Chinese tasks. We conjecture that the strengths stem from the same factors as its relatively weaker performance in some tasksdifferences in data quality and distribution, largely due to the closed-source situation of LLM datasets. Notably, we have carefully ruled out the possibility of data leakage by taking GSM8K as an example. First, as shown in Fig. 3, LLaDA outperformed ARM baselines regarding GSM8K. Moreover, the conclusion remains on fully unseen GSM8K-like task (Ye et al., 2024) in Appendix B.7. Further, Tab. 2 compares the performance of LLaDA 8B Instruct with existing LLMs. We observed that SFT improved LLaDAs performance on most downstream tasks. few metrics, such as MMLU, showed declines, and we conjecture may be due to the suboptimal quality of the SFT data. Overall, since we did not perform alignment with reinforcement learning (RL), our results are slightly behind LLaMA3 8B Instruct, though the gaps in many metrics remain small. Notably, even with only SFT, LLaDA demonstrates impressive instruction-following abilities, as detailed in Sec. 3.4. We leave RL-based alignment for future work. 5 Large Language Diffusion Models Table 1. Benchmark Results of Pre-trained LLMs. indicates that LLaDA 8B Base, LLaMA2 7B Base, and LLaMA3 8B Base are evaluated under the same protocol, detailed in Appendix B.5. Results indicated by and are sourced from Chu et al. (2024); Yang et al. (2024) and Bi et al. (2024) respectively. The numbers in parentheses represent the number of shots used for evaluation. - indicates unknown data. LLaDA 8B LLaMA3 8B LLaMA2 7B Qwen2 7B Qwen2.5 7B Mistral 7B Deepseek 7B Model Training tokens Diffusion 2.3T AR 15T AR 2T AR 7T AR 18T AR - AR 2T MMLU BBH ARC-C Hellaswag TruthfulQA WinoGrande PIQA GSM8K Math GPQA 65.9 (5) 49.8 (3) 47.9 (0) 72.5 (0) 46.4 (0) 74.8 (5) 74.4 (0) 70.7 (4) 27.3 (4) 26.1 (5) HumanEval HumanEval-FIM MBPP 33.5 (0) 73.8 (2) 38.2 (4) 65.4 (5) 57.6 (3) 53.1 (0) 79.1 (0) 44.0 (0) 77.3 (5) 80.6 (0) 53.1 (4) 15.1 (4) 25.9 (5) 34.2 (0) 73.3 (2) 47.4 (4) General Tasks 45.9 (5) 37.3 (3) 46.3 (0) 76.0 (0) 39.0 (0) 72.5 (5) 79.1 (0) 70.3 (5) 62.3 (3) 60.6 (25) 80.7 (10) 54.2 (0) 77.0 (5) - Mathematics & Science 14.3 (4) 3.2 (4) 25.7 (5) Code 12.8 (0) 26.9 (2) 18.4 (4) Chinese 80.2 (4) 43.5 (4) 30.8 (5) 51.2 (0) - 64.2 (0) 74.2 (5) 70.4 (3) 63.7 (25) 80.2 (10) 56.4 (0) 75.9 (5) - 85.4 (4) 49.8 (4) 36.4 (5) 57.9 (0) - 74.9 (0) 64.2 (5) 56.1 (3) 60.0 (25) 83.3 (10) 42.2 (0) 78.4 (5) - 36.2 (4) 10.2 (4) 24.7 (5) 29.3 (0) - 51.1 (0) CMMLU C-Eval 69.9 (5) 70.5 (5) 50.7 (5) 51.7 (5) 32.5 (5) 34.0 (5) 83.9 (5) 83.2 (5) - - - - 48.2 (5) 39.5 (3) 48.1 (0) 75.4 (0) - 70.5 (0) 79.2 (0) 17.4 (8) 6.0 (4) - 26.2 (0) - 39.0 (3) 47.2 (5) 45.0 (5) Table 2. Benchmark Results of Post-trained LLMs. LLaDA only employs an SFT procedure while other models have extra reinforcement learning (RL) alignment. indicates that LLaDA 8B Instruct, LLaMA2 7B Instruct, and LLaMA3 8B Instruct are evaluated under the same protocol, detailed in Appendix B.5. Results indicated by and are sourced from Yang et al. (2024) and Bi et al. (2024) respectively. The numbers in parentheses represent the number of shots used for in-context learning. - indicates unknown data. LLaDA 8B LLaMA3 8B LLaMA2 7B Qwen2 7B Qwen2.5 7B Gemma2 9B Deepseek 7B Model Training tokens Diffusion 2.3T Post-training Alignment pairs SFT 4.5M MMLU MMLU-pro Hellaswag ARC-C GSM8K Math GPQA 65.5 (5) 37.0 (0) 74.6 (0) 88.5 (0) 78.6 (4) 26.6 (0) 31.8 (5) AR 15T SFT+RL - 68.4 (5) 41.9 (0) 75.5 (0) 82.4 (0) 78.3 (4) 29.6 (0) 31.9 (5) AR 2T AR 7T AR 18T AR 8T AR 2T SFT+RL - SFT+RL 0.5M + - SFT+RL 1M + 0.15M SFT+RL - SFT+RL 1.5M + - General Tasks 44.1 (5) 4.6 (0) 51.5 (0) 57.3 (0) - 44.1 (5) - - Mathematics & Science 29.0 (4) 3.8 (0) 28.4 (5) 85.7 (0) 52.9 (0) 34.3 (0) Code - 56.3 (5) - - 91.6 (0) 75.5 (0) 36.4 (0) - 52.1 (5) - - 76.7 (0) 44.3 (0) 32.8 (0) 68.9 (0) 74.9 (0) 49.4 (0) - 68.5 (-) 49.4 (-) 63.0 (0) 15.8 (0) - 48.2 (-) 35.2 (-) HumanEval MBPP 47.6 (0) 34.2 (4) 59.8 (0) 57.6 (4) 16.5 (0) 20.6 (4) 79.9 (0) 67.2 (0) 84.8 (0) 79.2 (0) 6 Large Language Diffusion Models Table 3. Comparison in the Poem Completion Task."
        },
        {
            "title": "Forward Reversal",
            "content": "GPT-4o (2024-08-06) Qwen2.5 7B Instruct LLaDA 8B Instruct 82.7 75.9 48.8 34.3 38.0 42.4 Overall, despite the lack of data transparency, we have made every effort to adopt standardized procedures and introduce diverse tasks, we believe they sufficiently demonstrate the extraordinary capabilities of LLaDA, which is the only competitive non-autoregressive model to our knowledge. 3.3. Reversal Reasoning and Analyses To quantify the reversal reasoning ability of models (Berglund et al., 2023), we follow the protocol established in Allen-Zhu & Li (2023). Specifically, we construct dataset of 496 famous Chinese poem sentence pairs. Given sentence from poem, models are tasked with generating the subsequent line (forward) or the preceding line (reversal) without additional fine-tuning. Examples can be found in Appendix B.8. This setting provides straightforward and more realistic evaluation compared to previous studies (Nie et al., 2024; Kitouni et al., 2024). As shown in Tab. 3, LLaDA effectively addresses the reversal curse (Berglund et al., 2023), demonstrating consistent zero-shot performance across both forward and reversal tasks. In contrast, both Qwen 2.5 and GPT-4o exhibit significant gap between the two. The results on forward generation confirm that both ARMs are strong, benefiting from significantly larger datasets and greater computational resources than LLaDA. However, LLaDA outperforms both by large margin in the reversal task. We emphasize that we did not design anything special for reversal tasks. Intuitively, LLaDA treats tokens uniformly without inductive bias, leading to balanced performance. See more details in Appendix A.2. We also analyze the effect of remasking strategies and sampling steps, as detailed in Appendix B.3 and Appendix B.6. 3.4. Case Studies We present samples generated by LLaDA 8B Instruct in Tab. 4, showcasing its instruction-following capabilities. First, the table illustrates LLaDAs ability to generate coherent, fluent, and extended text in non-autoregressive manner. Second, it highlights the models multi-turn dialogue capability, effectively retaining conversation history and producing contextually appropriate responses across multiple languages. Such chat capabilities of LLaDA are impressive, as it departs from conventional ARMs for the first time, to the best of our knowledge. See more case studies on remasking and reasoning tasks in Appendix B.9. 4. Related Work Diffusion models (Sohl-Dickstein et al., 2015; Ho et al., 2020; Song et al., 2020) have excelled in visual domains but remain unverified for LLMs despite extensive efforts. simple approach is to continuousize text data and apply diffusion models directly (Li et al., 2022; Gong et al., 2022; Han et al., 2022; Strudel et al., 2022; Chen et al., 2022; Dieleman et al., 2022; Richemond et al., 2022; Wu et al., 2023; Mahabadi et al., 2024). Alternatively, some methods model continuous parameters of discrete distributions instead (Lou & Ermon, 2023; Graves et al., 2023; Lin et al., 2023; Xue et al., 2024). However, scalability remains challenge, as 1B parameter model requires 64 times the compute of an ARM to achieve comparable performance (Gulrajani & Hashimoto, 2024). Another approach replaces continuous diffusion with discrete processes featuring new forward and reverse dynamics (Austin et al., 2021a), leading to numerous variants (Hoogeboom et al., 2021b;a; He et al., 2022; Campbell et al., 2022; Meng et al., 2022; Reid et al., 2022; Sun et al., 2022; Zheng et al., 2023; Chen et al., 2023; Gat et al., 2024; Zheng et al., 2024; Sahoo et al., 2024; Shi et al., 2024). Notably, Lou et al. (2023) showed that masked diffusion, as special case of discrete diffusion, achieves perplexity comparable to or surpassing ARMs at GPT-2 scale. Ou et al. (2024) established fundamental theoretical results, which motivated our model design, training, and inference (see Appendix A). Nie et al. (2024) explored how MDM can be leveraged for language tasks such as question answering at GPT-2 scale. Gong et al. (2024) fine-tune ARMs in the MDM formulation. However, improvements are confined to certain metrics, and it remains unclear whether this approach can yield foundation model comparable to strong LLMs under comprehensive evaluation. In comparison, this study scales MDM to an unprecedented size of 8B parameters from scratch, achieving performance comparable to leading LLMs such as LLaMA 3. Notably, parallel line of work on image generation (Chang et al., 2022; 2023) aligns with MDMs applied to text data. 5. Conclusion and Discussion In the middle of difficulty lies opportunity. placeholder,placeholder,placehAlbert Einstein We introduce LLaDA, principled and previously unexplored approach to large language modeling based on diffusion models. LLaDA demonstrates strong capabilities in 7 Large Language Diffusion Models Table 4. Visualization of the Sampling Process and Generated Multi-round Dialogue. In the response of LLaDA, darker colors indicate tokens predicted in the later stages of sampling, while lighter colors correspond to earlier predictions."
        },
        {
            "title": "LLaDA",
            "content": "Lily can run 12 kilometers per hour for 4 hours. After that, she runs 6 kilometers per hour. How many kilometers can she run in 8 hours? Multi-round Dialogue Case"
        },
        {
            "title": "LLaDA",
            "content": "User LLaDA User LLaDA User LLaDA Could you please share with me what the initial two lines of the renowned poem The Road Not Taken? Certainly! The initial two lines of the renowned poem The Road Not Taken by Robert Frost are: Two roads diverged in yellow wood, And sorry could not travel both. These lines set the stage for the poem, introducing the idea of speaker facing choice between two paths. Please help me translate into Chinese. Sure! The first two lines of The Road Not Taken by Robert Frost can be translated into Chinese as: 两条路分岔在黄色的树林中遗憾我不能同时走 Please translate into German. Sure! The first two lines of The Road Not Taken by Robert Frost can be translated into German as: Zwei Wege trennten sich im gelben Wald, und leider konnte ich nicht beide tun. Please also write poem about life choices. require 5 sentences, and the first word of each sentence starts with as the first letter. Certainly! Heres poem about life choices, with each sentence starting with the letter C: Choices cascade through lifes journey, Creating connections with each decision, Careful consideration leads to better paths, Courageous choices shape our destiny, Choosing wisely guides us through the years. scalability, in-context learning, and instruction-following, achieving performance comparable to strong LLMs. In addition, LLaDA offers unique advantages such as bidirectional modeling and enhanced robustness, effectively addressing several inherent limitations of existing LLMs. Our findings not only establish diffusion models as viable and promising alternative but also challenge the prevailing assumption that these essential capabilities are inherently tied to ARMs. While promising, the full potential of diffusion models remains to be fully explored. Several limitations of this work present significant opportunities for future research. Due to computational constraints, direct comparisons between LLaDA and ARMssuch as training on identical datasetswere restricted to computational budget of less than 1023 FLOPs. To allocate resources for training the largest possible LLaDA model and showcasing its potential, we were unable to scale the ARM baseline to the same extent. Moreover, no specialized attention mechanisms or position embeddings were designed for LLaDA, nor were any system-level architectural optimizations applied. On the inference side, our exploration of guidance mechanisms (Dhariwal & Nichol, 2021; Ho & Salimans, 2022) remains preliminary, and LLaDA currently exhibits sensitivity to inference hyperparameters. Furthermore, LLaDA has yet to undergo alignment with reinforcement learning (Ouyang et al., 2022; Rafailov et al., 2024), which is crucial for improving its performance and alignment with human intent. Looking forward, the scale of LLaDA is still smaller than leading counterparts (Achiam et al., 2023; Dubey et al., 2024; Google, 2024; Anthropic, 2024; Yang et al., 2024; Liu et al., 2024), highlighting the need for further scaling to fully assess its capabilities. In addition, LLaDAs ability to handle multi-modal data remains unexplored. The impact of LLaDA on prompt tuning techniques (Wei et al., 2022) and its integration into agent-based systems (Park et al., 2023; Wang et al., 2024) is yet to be fully under8 Large Language Diffusion Models stood. Finally, systematic investigation into post-training for LLaDA could facilitate the development of O1-like systems (OpenAI, 2024; Guo et al., 2025). International Conference on Learning Representations, 2025. URL https://openreview.net/forum? id=tyEyYT267x."
        },
        {
            "title": "Impact Statement",
            "content": "This work challenges the prevailing dominance of autoregressive modeling in LLMs by proposing diffusion-based alternative. Our findings open new avenues for exploring alternative probabilistic paradigms in natural language processing, with potential applications in conversational AI, code generation, and complex reasoning tasks. However, diffusion-based models, like traditional LLMs, raise similar societal concerns. These include the environmental impact of large-scale training, the potential misuse for generating harmful or misleading content, and the amplification of biases present in training data. Addressing these challenges is critical to ensuring the responsible development and deployment of diffusion-based language models."
        },
        {
            "title": "Acknowledgements",
            "content": "This work was supported by the National Natural Science Foundation of China (No. 92470118); Beijing Natural Science Foundation (No. L247030); Beijing Nova Program (No. 20220484044); Major Innovation & Planning Interdisciplinary Platform for the Double-First Class Initiative, Renmin University of China; the Fundamental Research Funds for the Central Universities, the Research Funds of Renmin University of China (22XNKJ13); Ant Group Research Fund. The work was partially done at the Engineering Research Center of Next-Generation Intelligent Search and Recommendation, Ministry of Education."
        },
        {
            "title": "References",
            "content": "Achiam, J., Adler, S., Agarwal, S., Ahmad, L., Akkaya, I., Aleman, F. L., Almeida, D., Altenschmidt, J., Altman, S., Anadkat, S., et al. Gpt-4 technical report. arXiv preprint arXiv:2303.08774, 2023. Ainslie, J., Lee-Thorp, J., de Jong, M., Zemlyanskiy, Y., Lebron, F., and Sanghai, S. Gqa: Training generalized multi-query transformer models from multi-head checkpoints. In Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, pp. 48954901, 2023. Allen-Zhu, Z. and Li, Y. Physics of Language Models: Part 3.2, Knowledge Manipulation. ArXiv e-prints, abs/2309.14402, September 2023. Full version available at http://arxiv.org/abs/2309.14402. Anonymous. Interpolating autoregressive and discrete denoising diffusion language models. In The Thirteenth Anthropic. Claude 3.5 sonnet, 2024. URL https://www. anthropic.com/news/claude-3-5-sonnet. Austin, J., Johnson, D. D., Ho, J., Tarlow, D., and Van Den Berg, R. Structured denoising diffusion models in discrete state-spaces. Advances in Neural Information Processing Systems, 34:1798117993, 2021a. Austin, J., Odena, A., Nye, M., Bosma, M., Michalewski, H., Dohan, D., Jiang, E., Cai, C., Terry, M., Le, Q., et al. Program synthesis with large language models. arXiv preprint arXiv:2108.07732, 2021b. Bao, F., Nie, S., Xue, K., Cao, Y., Li, C., Su, H., and Zhu, J. All are worth words: vit backbone for diffusion models. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 22669 22679, 2023. Bavarian, M., Jun, H., Tezak, N., Schulman, J., McLeavey, C., Tworek, J., and Chen, M. Efficient training of language models to fill in the middle. arXiv preprint arXiv:2207.14255, 2022. Berglund, L., Tong, M., Kaufmann, M., Balesni, M., Stickland, A. C., Korbak, T., and Evans, O. The reversal curse: Llms trained on is fail to learn is a. arXiv preprint arXiv:2309.12288, 2023. Bi, X., Chen, D., Chen, G., Chen, S., Dai, D., Deng, C., Ding, H., Dong, K., Du, Q., Fu, Z., et al. Deepseek llm: Scaling open-source language models with longtermism. arXiv preprint arXiv:2401.02954, 2024. Bisk, Y., Zellers, R., Gao, J., Choi, Y., et al. Piqa: Reasoning about physical commonsense in natural language. In Proceedings of the AAAI conference on artificial intelligence, 2020. Brooks, T., Peebles, B., Holmes, C., DePue, W., Guo, Y., Jing, L., Schnurr, D., Taylor, J., Luhman, T., Luhman, E., Ng, C., Wang, R., and Ramesh, A. Video generation models as world simulators. 2024. URL https://openai.com/research/ video-generation-models-as-world-simulators. Brown, T. B. Language models are few-shot learners. arXiv preprint arXiv:2005.14165, 2020. Campbell, A., Benton, J., De Bortoli, V., Rainforth, T., Deligiannidis, G., and Doucet, A. continuous time framework for discrete denoising models. Advances in Neural Information Processing Systems, 35:2826628279, 2022. 9 Large Language Diffusion Models Chang, H., Zhang, H., Jiang, L., Liu, C., and Freeman, W. T. Maskgit: Masked generative image transformer. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 1131511325, 2022. Dubey, A., Jauhri, A., Pandey, A., Kadian, A., Al-Dahle, A., Letman, A., Mathur, A., Schelten, A., Yang, A., Fan, A., et al. The llama 3 herd of models. arXiv preprint arXiv:2407.21783, 2024. Chang, H., Zhang, H., Barber, J., Maschinot, A., Lezama, J., Jiang, L., Yang, M.-H., Murphy, K., Freeman, W. T., Rubinstein, M., et al. Muse: Text-to-image generation via masked generative transformers. arXiv preprint arXiv:2301.00704, 2023. Chen, M., Tworek, J., Jun, H., Yuan, Q., Pinto, H. P. D. O., Kaplan, J., Edwards, H., Burda, Y., Joseph, N., Brockman, G., et al. Evaluating large language models trained on code. arXiv preprint arXiv:2107.03374, 2021. Chen, T., Zhang, R., and Hinton, G. Analog bits: Generating discrete data using diffusion models with selfconditioning. arXiv preprint arXiv:2208.04202, 2022. Chen, Z., Yuan, H., Li, Y., Kou, Y., Zhang, J., and Gu, Q. Fast sampling via de-randomization for discrete diffusion models. arXiv preprint arXiv:2312.09193, 2023. Chu, Y., Xu, J., Yang, Q., Wei, H., Wei, X., Guo, Z., Leng, Y., Lv, Y., He, J., Lin, J., et al. Qwen2-audio technical report. arXiv preprint arXiv:2407.10759, 2024. Clark, P., Cowhey, I., Etzioni, O., Khot, T., Sabharwal, A., Schoenick, C., and Tafjord, O. Think you have solved question answering? try arc, the ai2 reasoning challenge. arXiv preprint arXiv:1803.05457, 2018. Cobbe, K., Kosaraju, V., Bavarian, M., Chen, M., Jun, H., Kaiser, L., Plappert, M., Tworek, J., Hilton, J., Nakano, R., et al. Training verifiers to solve math word problems. arXiv preprint arXiv:2110.14168, 2021. Deletang, G., Ruoss, A., Duquenne, P.-A., Catt, E., Genewein, T., Mattern, C., Grau-Moya, J., Wenliang, L. K., Aitchison, M., Orseau, L., et al. Language modeling is compression. In The Twelfth International Conference on Learning Representations. Devlin, J. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018. Dhariwal, P. and Nichol, A. Diffusion models beat gans on image synthesis. Advances in neural information processing systems, 34:87808794, 2021. Fisher, R. A. On the mathematical foundations of theoretical statistics. Philosophical transactions of the Royal Society of London. Series A, containing papers of mathematical or physical character, 222(594-604):309368, 1922. Gao, L., Tow, J., Abbasi, B., Biderman, S., Black, S., DiPofi, A., Foster, C., Golding, L., Hsu, J., Le Noach, A., Li, H., McDonell, K., Muennighoff, N., Ociepa, C., Phang, J., Reynolds, L., Schoelkopf, H., Skowron, A., Sutawika, L., Tang, E., Thite, A., Wang, B., Wang, K., and Zou, A. framework for few-shot language model evaluation, 07 2024. URL https://zenodo.org/records/ 12608602. Gat, I., Remez, T., Shaul, N., Kreuk, F., Chen, R. T., Synnaeve, G., Adi, Y., and Lipman, Y. Discrete flow matching. arXiv preprint arXiv:2407.15595, 2024. Gong, S., Li, M., Feng, J., Wu, Z., and Kong, L. Diffuseq: Sequence to sequence text generation with diffusion models. arXiv preprint arXiv:2210.08933, 2022. Gong, S., Agarwal, S., Zhang, Y., Ye, J., Zheng, L., Li, M., An, C., Zhao, P., Bi, W., Han, J., et al. Scaling diffusion language models via adaptation from autoregressive models. arXiv preprint arXiv:2410.17891, 2024. Google. Our next-generation model: Gemini 1.5, 2024. URL https://blog.google/technology/ai/ google-gemini-next-generation-model-february-2024. Graves, A., Srivastava, R. K., Atkinson, T., and Gomez, F. Bayesian flow networks. arXiv preprint arXiv:2308.07037, 2023. Gulrajani, I. and Hashimoto, T. B. Likelihood-based diffusion language models. Advances in Neural Information Processing Systems, 36, 2024. Guo, D., Yang, D., Zhang, H., Song, J., Zhang, R., Xu, R., Zhu, Q., Ma, S., Wang, P., Bi, X., et al. Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning. arXiv preprint arXiv:2501.12948, 2025. Han, X., Kumar, S., and Tsvetkov, Y. Ssd-lm: Semiautoregressive simplex-based diffusion language model for text generation and modular control. arXiv preprint arXiv:2210.17432, 2022. Dieleman, S., Sartran, L., Roshannai, A., Savinov, N., Ganin, Y., Richemond, P. H., Doucet, A., Strudel, R., Dyer, C., Durkan, C., et al. Continuous diffusion for categorical data. arXiv preprint arXiv:2211.15089, 2022. He, Z., Sun, T., Wang, K., Huang, X., and Qiu, X. Diffusionbert: Improving generative masked language models with diffusion models. arXiv preprint arXiv:2211.15029, 2022. 10 Large Language Diffusion Models Hendrycks, D., Burns, C., Basart, S., Zou, A., Mazeika, M., Song, D., and Steinhardt, J. Measuring massive multitask language understanding. arXiv preprint arXiv:2009.03300, 2020. Hendrycks, D., Burns, C., Kadavath, S., Arora, A., Basart, S., Tang, E., Song, D., and Steinhardt, J. Measuring mathematical problem solving with the math dataset. arXiv preprint arXiv:2103.03874, 2021. Ho, J. and Salimans, T. Classifier-free diffusion guidance. arXiv preprint arXiv:2207.12598, 2022. Ho, J., Jain, A., and Abbeel, P. Denoising diffusion probabilistic models. Advances in neural information processing systems, 33:68406851, 2020. Hoffmann, J., Borgeaud, S., Mensch, A., Buchatskaya, E., Cai, T., Rutherford, E., Casas, D. d. L., Hendricks, L. A., Welbl, J., Clark, A., et al. Training compute-optimal large language models. arXiv preprint arXiv:2203.15556, 2022. Holtzman, A., Buys, J., Du, L., Forbes, M., and Choi, Y. The curious case of neural text degeneration. arXiv preprint arXiv:1904.09751, 2019. Hoogeboom, E., Gritsenko, A. A., Bastings, J., Poole, B., Berg, R. v. d., and Salimans, T. Autoregressive diffusion models. arXiv preprint arXiv:2110.02037, 2021a. Hoogeboom, E., Nielsen, D., Jaini, P., Forre, P., and Welling, M. Argmax flows and multinomial diffusion: Learning categorical distributions. Advances in Neural Information Processing Systems, 34:1245412465, 2021b. Hu, S., Tu, Y., Han, X., He, C., Cui, G., Long, X., Zheng, Z., Fang, Y., Huang, Y., Zhao, W., et al. Minicpm: Unveiling the potential of small language models with scalable training strategies. arXiv preprint arXiv:2404.06395, 2024. Huang, Y., Bai, Y., Zhu, Z., Zhang, J., Zhang, J., Su, T., Liu, J., Lv, C., Zhang, Y., Fu, Y., et al. C-eval: multi-level multi-discipline chinese evaluation suite for foundation models. Advances in Neural Information Processing Systems, 36, 2024a. Huang, Y., Zhang, J., Shan, Z., and He, J. CompresarXiv preprint sion represents intelligence linearly. arXiv:2404.09937, 2024b. Jiang, A. Q., Sablayrolles, A., Mensch, A., Bamford, C., Chaplot, D. S., Casas, D. d. l., Bressand, F., Lengyel, G., Lample, G., Saulnier, L., et al. Mistral 7b. arXiv preprint arXiv:2310.06825, 2023. Kaplan, J., McCandlish, S., Henighan, T., Brown, T. B., Chess, B., Child, R., Gray, S., Radford, A., Wu, J., and Amodei, D. Scaling laws for neural language models. arXiv preprint arXiv:2001.08361, 2020. Kitouni, O., Nolte, N., Bouchacourt, D., Williams, A., Rabbat, M., and Ibrahim, M. The factorization curse: Which tokens you predict underlie the reversal curse and more. arXiv preprint arXiv:2406.05183, 2024. Li, H., Zhang, Y., Koto, F., Yang, Y., Zhao, H., Gong, Y., Duan, N., and Baldwin, T. Cmmlu: Measuring massive multitask language understanding in chinese. arXiv preprint arXiv:2306.09212, 2023. Li, X., Thickstun, J., Gulrajani, I., Liang, P. S., and Hashimoto, T. B. Diffusion-lm improves controllable text generation. Advances in Neural Information Processing Systems, 35:43284343, 2022. Lin, S., Hilton, J., and Evans, O. Truthfulqa: Measuring how models mimic human falsehoods. arXiv preprint arXiv:2109.07958, 2021. Lin, Z., Gong, Y., Shen, Y., Wu, T., Fan, Z., Lin, C., Duan, N., and Chen, W. Text generation with diffusion language models: pre-training approach with continuous paragraph denoise. In International Conference on Machine Learning, pp. 2105121064. PMLR, 2023. Liu, A., Feng, B., Xue, B., Wang, B., Wu, B., Lu, C., Zhao, C., Deng, C., Zhang, C., Ruan, C., et al. Deepseek-v3 technical report. arXiv preprint arXiv:2412.19437, 2024. Loshchilov, I. Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101, 2017. Lou, A. and Ermon, S. Reflected diffusion models, 2023. Lou, A., Meng, C., and Ermon, S. Discrete diffusion language modeling by estimating the ratios of the data distribution. arXiv preprint arXiv:2310.16834, 2023. Mahabadi, R. K., Ivison, H., Tae, J., Henderson, J., Beltagy, I., Peters, M. E., and Cohan, A. Tess: Text-to-text selfconditioned simplex diffusion, 2024. Meng, C., Choi, K., Song, J., and Ermon, S. Concrete score matching: Generalized score matching for discrete data. Advances in Neural Information Processing Systems, 35: 3453234545, 2022. Nie, S., Zhu, F., Du, C., Pang, T., Liu, Q., Zeng, G., Lin, M., and Li, C. Scaling up masked diffusion models on text. arXiv preprint arXiv:2410.18514, 2024. OpenAI. ChatGPT: Optimizing Language Models for Dialogue. OpenAI blog, November 2022. URL https: //openai.com/blog/chatgpt/. 11 Large Language Diffusion Models Learning to reason with llms, OpenAI. URL learning-to-reason-with-llms/. 2024. https://openai.com/index/ Ou, J., Nie, S., Xue, K., Zhu, F., Sun, J., Li, Z., and Li, C. Your absorbing discrete diffusion secretly models the conditional distributions of clean data. arXiv preprint arXiv:2406.03736, 2024. Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., et al. Training language models to follow instructions with human feedback. Advances in neural information processing systems, 35:2773027744, 2022. Park, J. S., OBrien, J., Cai, C. J., Morris, M. R., Liang, P., and Bernstein, M. S. Generative agents: Interactive simulacra of human behavior. In Proceedings of the 36th annual acm symposium on user interface software and technology, pp. 122, 2023. Shannon, C. E. mathematical theory of communication. The Bell system technical journal, 27(3):379423, 1948. Shazeer, N. Glu variants improve transformer. arXiv preprint arXiv:2002.05202, 2020. Shi, J., Han, K., Wang, Z., Doucet, A., and Titsias, M. K. Simplified and generalized masked diffusion for discrete data. arXiv preprint arXiv:2406.04329, 2024. Shih, A., Sadigh, D., and Ermon, S. Training and inference on any-order autoregressive models the right way. In Proceedings of the 31th International Conference on Machine Learning, 2022. Sohl-Dickstein, J., Weiss, E., Maheswaranathan, N., and Ganguli, S. Deep unsupervised learning using nonequilibrium thermodynamics. In International conference on machine learning, pp. 22562265. PMLR, 2015. Peebles, W. and Xie, S. Scalable diffusion models with transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 41954205, 2023. Song, Y., Sohl-Dickstein, J., Kingma, D. P., Kumar, A., Ermon, S., and Poole, B. Score-based generative modeling through stochastic differential equations. arXiv preprint arXiv:2011.13456, 2020. Radford, A. Improving language understanding by generative pre-training, 2018. Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et al. Language models are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019. Rafailov, R., Sharma, A., Mitchell, E., Manning, C. D., Ermon, S., and Finn, C. Direct preference optimization: Your language model is secretly reward model. Advances in Neural Information Processing Systems, 36, 2024. Reid, M., Hellendoorn, V. J., and Neubig, G. Diffuser: Discrete diffusion via edit-based reconstruction, 2022. Rein, D., Hou, B. L., Stickland, A. C., Petty, J., Pang, R. Y., Dirani, J., Michael, J., and Bowman, S. R. Gpqa: graduate-level google-proof q&a benchmark. arXiv preprint arXiv:2311.12022, 2023. Richemond, P. H., Dieleman, S., and Doucet, A. Categorical sdes with simplex diffusion, 2022. Sahoo, S. S., Arriola, M., Schiff, Y., Gokaslan, A., Marroquin, E., Chiu, J. T., Rush, A., and Kuleshov, V. Simple and effective masked diffusion language models. arXiv preprint arXiv:2406.07524, 2024. Sakaguchi, K., Bras, R. L., Bhagavatula, C., and Choi, Y. Winogrande: An adversarial winograd schema challenge at scale. Communications of the ACM, 64(9):99106, 2021. Strudel, R., Tallec, C., Altche, F., Du, Y., Ganin, Y., Mensch, A., Grathwohl, W., Savinov, N., Dieleman, S., Sifre, L., et al. Self-conditioned embedding diffusion for text generation. arXiv preprint arXiv:2211.04236, 2022. Su, J., Ahmed, M., Lu, Y., Pan, S., Bo, W., and Liu, Y. Roformer: Enhanced transformer with rotary position embedding. Neurocomputing, 568:127063, 2024. Sun, H., Yu, L., Dai, B., Schuurmans, D., and Dai, H. Scorebased continuous-time discrete diffusion models. arXiv preprint arXiv:2211.16750, 2022. Suzgun, M., Scales, N., Scharli, N., Gehrmann, S., Tay, Y., Chung, H. W., Chowdhery, A., Le, Q. V., Chi, E. H., Zhou, D., et al. Challenging big-bench tasks and whether chain-of-thought can solve them. arXiv preprint arXiv:2210.09261, 2022. Touvron, H., Martin, L., Stone, K., Albert, P., Almahairi, A., Babaei, Y., Bashlykov, N., Batra, S., Bhargava, P., Bhosale, S., et al. Llama 2: Open foundation and finetuned chat models. arXiv preprint arXiv:2307.09288, 2023. Uria, B., Murray, I., and Larochelle, H. deep and tractable density estimator. In Proceedings of the 31th International Conference on Machine Learning, 2014. Vaswani, A. Attention is all you need. arXiv preprint arXiv:1706.03762, 2017. 12 Large Language Diffusion Models Wang, L., Ma, C., Feng, X., Zhang, Z., Yang, H., Zhang, J., Chen, Z., Tang, J., Chen, X., Lin, Y., et al. survey on large language model based autonomous agents. Frontiers of Computer Science, 18(6):186345, 2024. Wei, J., Wang, X., Schuurmans, D., Bosma, M., Xia, F., Chi, E., Le, Q. V., Zhou, D., et al. Chain-of-thought prompting elicits reasoning in large language models. Advances in neural information processing systems, 35:2482424837, 2022. Wu, T., Fan, Z., Liu, X., Gong, Y., Shen, Y., Jiao, J., Zheng, H.-T., Li, J., Wei, Z., Guo, J., Duan, N., and Chen, W. Ar-diffusion: Auto-regressive diffusion model for text generation, 2023. Xue, K., Zhou, Y., Nie, S., Min, X., Zhang, X., Zhou, J., and Li, C. Unifying bayesian flow networks and diffusion models through stochastic differential equations. arXiv preprint arXiv:2404.15766, 2024. Yang, A., Yang, B., Zhang, B., Hui, B., Zheng, B., Yu, B., Li, C., Liu, D., Huang, F., Wei, H., Lin, H., Yang, J., Tu, J., Zhang, J., Yang, J., Yang, J., Zhou, J., Lin, J., Dang, K., Lu, K., Bao, K., Yang, K., Yu, L., Li, M., Xue, M., Zhang, P., Zhu, Q., Men, R., Lin, R., Li, T., Xia, T., Ren, X., Ren, X., Fan, Y., Su, Y., Zhang, Y., Wan, Y., Liu, Y., Cui, Z., Zhang, Z., and Qiu, Z. Qwen2.5 technical report. arXiv preprint arXiv:2412.15115, 2024. Ye, T., Xu, Z., Li, Y., and Allen-Zhu, Z. Physics of Language Models: Part 2.1, Grade-School Math and the Hidden Reasoning Process. ArXiv e-prints, abs/2407.20311, July 2024. Full version available at http://arxiv. org/abs/2407.20311. Zellers, R., Holtzman, A., Bisk, Y., Farhadi, A., and Choi, Y. Hellaswag: Can machine really finish your sentence? arXiv preprint arXiv:1905.07830, 2019. Zhang, B. and Sennrich, R. Root mean square layer normalization. Advances in Neural Information Processing Systems, 32, 2019. Zhao, W. X., Zhou, K., Li, J., Tang, T., Wang, X., Hou, Y., Min, Y., Zhang, B., Zhang, J., Dong, Z., et al. survey of large language models. arXiv preprint arXiv:2303.18223, 2023. Zheng, K., Chen, Y., Mao, H., Liu, M.-Y., Zhu, J., and Zhang, Q. Masked diffusion models are secretly timeagnostic masked models and exploit inaccurate categorical sampling, 2024. URL https://arxiv.org/ abs/2409.02908. Zheng, L., Yuan, J., Yu, L., and Kong, L. reparameterized discrete diffusion model for text generation. ArXiv, abs/2302.05737, 2023. 13 Large Language Diffusion Models Algorithm 1 Pre-training of LLaDA Require: mask predictor pθ, data distribution pdata 1: repeat 2: 3: x0 pdata, U(0, 1] xt qt0(xtx0) Calculate = 1 tL Calculate θL and run optimizer. i=1 1[xi (cid:80)L 4: 5: 6: until Converged 7: Return pθ # with probability of 1%, the sequence length of x0 follows U[1, 4096] # qt0 is defined in Eq. (7) # is the sequence length of x0 = M] log pθ(xi 0xt) Algorithm 2 Supervised Fine-Tuning of LLaDA Require: mask predictor pθ, pair data distribution pdata 1: repeat 2: 3: p0, r0 pdata, U(0, 1] rt qt0(rtr0) Calculate = 1 tL Calculate θL and run optimizer. = M] log pθ(ri i=1 1[ri (cid:80)L 4: 5: 6: until Converged 7: Return pθ # please refer to Appendix B.1 for details on the SFT data processing. # qt0 is defined in Eq. (7) # is the sequence length of 0p0, rt) Algorithm 3 Conditional Log-likelihood Evaluation of LLaDA Require: mask predictor pθ, prompt p0, response r0, the number of Monte Carlo estimations nmc 1: log likelihood = 0 2: for 1 to nmc do {1, 2, . . . , L} 3: Obtain rl by uniformly sampling tokens from r0 without replacement for masking 4: log likelihood = log likelihood + 5: 6: end for 7: log likelihood = log likelihood/nmc 8: Return log likelihood = M] log pθ(ri i=1 1[ri 0p0, rl) (cid:80)L # is the sequence length of r0 A. Formulation of Masked Diffusion Models A.1. Training Masked diffusion models (MDMs) (Austin et al., 2021a; Lou et al., 2023; Ou et al., 2024) define the model distribution pθ(x0) in manner distinct from autoregressive models. These models introduce forward process {xt} indexed by time [0, 1]. This process gradually and independently masks all tokens in the sequence x0. At time = 0, the data point x0 is fully observed with no masks, while for (0, 1], xt represents latent variables with varying mask ratios in expectation. Formally, the conditional distribution of xt given x0 is defined by fully factorized form: qt0(xtx0) = (cid:89) i=1 qt0(xi txi 0), where the conditional distribution for each token is given by: (cid:40) qt0(xi txi 0) = 1 t, xi = xi 0, xi t, = M. (7) (8) Here, denotes the mask token. Intuitively, each token either remains unchanged or is masked, with the probability of 14 Large Language Diffusion Models do step = 1 r0 = arg maxr0 pθ(r0p0, rt) for 1 to do if rt = then 0 = ri ri else Algorithm 4 Reverse Process of LLaDA Require: mask predictor pθ, prompt p0, answer length L, sampling steps 1: Set r1 is fully masked sequence of length L. 2: for 1 down to 1 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: end for 14: Return r0 end if end for rs = r"
        },
        {
            "title": "With probability s",
            "content": "0 is set to , ri # we employ greedy sampling when predicting masked tokens being masked increasing linearly as progresses from 0 to 1. At = 1, all tokens are guaranteed to be masked, meaning that x1 follows Dirac distribution concentrated on sequence of fully masked tokens. Notably, the linear masking probability is analogous to but distinct from, the noise schedule in continuous diffusion models (Sohl-Dickstein et al., 2015; Ho et al., 2020; Song et al., 2020). This linearity is motivated by the assumption that the information in the text is proportional to the number of tokens on average, making it reasonable to lose information linearly during the forward process. The forward process is not only reversible but also corresponds to reverse process that is fully factorized across all tokens (Austin et al., 2021a). The reverse process, from time = 1 to 0, generates new data from sequences of fully masked tokens. The conditional distribution for the reverse process, for 0 < 1, is factorized as: qst(xsxt) = (cid:89) i=1 qst(xi sxt), where the conditional distribution for each token is: qst(xi sxt) = 1, , ts q0t(xi 0, = M, xi xi = M, xi xi = M, xi sxt), xi otherwise. = xi t, = M, = M, (9) (10) Thus, the key function to estimate is the conditional distribution q0t(xi in the input xt. This is analogous to the data prediction form in continuous diffusion models. sxt), which predicts the original token if it is masked As proven in (Ou et al., 2024), an equivalent yet time-free parameterization can be derived as: q0t(xi sxt) = pdata(xi 0xUM ), such that xi = M, (11) where xUM denotes the collection of unmasked tokens in xt, which is identical to the corresponding tokens in the original data x0 since unmasked tokens are solely determined by x0 and are independent of time t. Intuitively, this implies that estimating the data prediction function is equivalent to estimating the conditional distributions on clean data, which is time-invariant. Consequently, the time need not be provided as input to the parametric model. Although the development of masked diffusion is nontrivial, the implementation is straightforward. We first introduce the mask predictor, parametric model pθ(xt) (e.g., Transformer without causal mask), which takes xt for any as input and predict all masked tokens simultaneously. Then, we define the model distribution pθ(x0) as follows: starting with x1 as sequence of fully masked tokens, we simulate an approximate reverse process parameterized by pθ(xt) from = 1 to 0. The marginal distribution induced at = 0 then represents the model distribution pθ(x0). 15 Large Language Diffusion Models do step Algorithm 5 Low-confidence Remasking Strategy of LLaDA Require: mask predictor pθ, prompt p0, answer length L, sampling steps 1: Set r1 is fully masked sequence of length L. 2: for 1 down to 1 3: 4: 5: 6: 7: 8: = 1 for 1 to do if ri = then 0 = ri ri else ri 0 = arg maxri ci = pθ(ri t, ci = 1 0p0, rt) pθ(ri 0p0, rt)ri 0 0 if ci Lowest nun end if end for nun = L(1 s) for 1 to do 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: end for 20: Return r0 ri 0 = end if end for rs = # the number of unmasked tokens is nun in timestep (cid:0){ci}L 1 (cid:1) then # the nun positions with the least confidence are selected for remasking. Formally, the mask predictor is trained using cross-entropy loss with masking: L(θ) Et,x0,xt (cid:34) 1 (cid:88) i=1 1[xi = M] log pθ(xi (cid:35) 0xt) , (12) where x0 is sampled from the training data, is sampled uniformly from [0, 1], and xt is sampled from qt0(xtx0). The indicator function 1[] ensures that the cross-entropy loss is computed only for masked tokens. In Ou et al. (2024), it has been proven that the loss function L(θ) is an upper bound on the negative log-likelihood of the model distribution: Ex0pdata(x0) [log pθ(x0)] L(θ). In summary, this principled approach trains generative model by progressively masking tokens during forward process and learning to recover the data distribution during reverse process, all under the (approximate) maximum likelihood estimation framework. (13) A.2. Inference The cross-entropy loss in Eq. (12) has several equivalent forms (Ou et al., 2024). The first one is given by El{1,2,...,L},x0,xl (cid:34) L (cid:88) i=1 1[xi = M] log pθ(xi (cid:35) 0xl) , (14) where is uniformly sampled from {1, 2, . . . , L}, and xl is obtained by uniformly sampling tokens from x0 without replacement for masking. Despite masking exactly tokens is different from masking each token independently with probability t, these two masking methods lead to equivalent results in expectation (Ou et al., 2024). While Eq. (12) and Eq. (14) share the same expectation, their variances differ. Intuitively, in Eq. (12), we expect xt to have fraction of tokens masked. However, the randomness of the forward process (i.e., Eq. (7)) often causes deviations, especially when xt contains few tokens. In contrast, in Eq. (14), the fraction of masked tokens in xl is deterministically . While theoretical analysis depends on the data distribution, empirical results show that Eq. (12) requires over 1000 Monte Carlo estimates for stable results, whereas Eq. (14) achieves stability with only 128 estimates. In addition, we can simply modify Eq. (14) to its conditional version (i.e., Eq. (6)) based on Eq. (5). 16 Large Language Diffusion Models Figure 4. Conceptual Overview of the Semi-autoregressive Sampling. Any-order autoregressive models (AO-ARM) (Uria et al., 2014; Hoogeboom et al., 2021a; Shih et al., 2022) characterize the joint distribution autoregressively for all possible orders π of the variables. To learn such distribution, an AO-ARM utilizes weight-sharing neural network to model all univariate conditionals and employs mask tokens to represent absent variables. During training, the expected negative log-likelihood over the uniform distribution of all orders Uπ is minimized: Ex0,πUπ log pθ(xπ(i) 0 xπ(<i) 0 ; π) . (cid:35) (cid:34) (cid:88) i=1 (15) Intuitively, xπ(<i) can be understood as masked token xt with index in π( i) being masked. It can be further proved that Eq. (15) is equivalent to Eq. (12). This connection explains the bidirectional reasoning capabilities of LLaDA, even though it was never used explicitly in the inference procedure. 0 Nie et al. (2024) introduce unsupervised classifier-free guidance, plug-and-play technique that balances alignment with prompts and text diversity. Specifically, unsupervised classifier-free guidance employs the following modified mask predictor for inference: pθ(r0p0, rt) pθ(r0p0, rt)1+w pθ(r0m, rt)w , (16) where is mask sequence of the same length as p0 and is hyperparameter that controls the strength of p0. We employ unsupervised classifier-free guidance in the downstream tasks, as detailed in Appendix B.5. A.3. Algorithms In this section, we present the training and inference algorithms. Specifically, we introduce the pre-training and supervised fine-tuning algorithms in Algorithm 1 and Algorithm 2, respectively. In addition, the likelihood evaluation algorithm is provided in Algorithm 3. Finally, we present the sampling algorithms in Algorithm 4 and Algorithm 5, which correspond to the original reverse process (i.e., random remasking) and the low-confidence remasking strategy (Chang et al., 2022) of LLaDA, respectively. Furthermore, we apply semi-autoregressive remasking strategy for the instruct model. Specifically, the sequence is divided into several blocks and generated from left to right. Within each block, we apply the random remasking or the low-confidence remasking strategy for sampling. For clarity and better visualization, we illustrate the semi-autoregressive sampling process in Fig. 4. Our semi-autoregressive remasking strategy is inspired by the prior work of Anonymous (2025). However, it is important to note that Anonymous (2025) and LLaDA have entirely different training objectives and network architectures. Specifically, the pre-training objective of Anonymous (2025) differs from Eq. (3). Moreover, their approach incorporates causal mask in the Transformer attention block, whereas LLaDA employs bidirectional Transformer. 17 Large Language Diffusion Models Table 5. Model Architecture. We provide the configurations of our 1B and 7B ARM baselines, as well as the 1B and 8B LLaDA and the 8B LLaMA3 models. Our ARM Baseline 1B LLaDA 1B Our ARM Baseline 7B LLaDA 8B LLaMA3 8B 22 2048 32 2048 32 126,464 126,464 5634 1.49 0.97 5634 4 1.49 0.97 28 4096 32 126,464 13,440 6.83 5.80 32 4096 32 126, 12,288 32 8.02 6.98 32 32 128,000 14,336 8 8.03 6.98 Layers Model dimension Attention heads Vocabulary size FFN dimension Key/Value heads Total parameters Non-embedding parameters B. Experiments B.1. Details of SFT Data dynamic sequence length is employed during supervised SFT, where EOS tokens are appended to the end of short pairs to ensure equal sequence lengths across all data in each mini-batch. Notably, the padding EOS tokens are treated as part of the response, i.e., masked and included in the training objective. The EOS tokens are removed from the generated outputs during sampling. This strategy is crucial for LLaDA and ensures that the model learns to control the length of its responses by generating EOS, enabling the response length to align effectively with the given prompt. In addition, for n-turn dialogues (p0 (p0 equips LLaDA with multi-turn dialogue capabilities but also aligns with the padding strategy. ), we treat it as single-turn dialogue pairs, i.e., ) and randomly sample one. This data partitioning strategy not only 0, p1 0, r0 0 . . . pn1 0 0, r1 , rn1 0 0), . . . , (p0 0), (p0 0, . . . , pn , rn1 0 0, r1 0, r0 0p1 0p1 0r 0r0 0r1 0 B.2. Architectures and Scaling Experiments This section provides detailed information about the models we trained and the scalability experiments described in Sec. 3.1. Firstly, for efficiency, we trained an ARM and MDM, both with 1.5B parameters and identical architectures. Additionally, we scaled the MDM to 8B parameters. Due to computational resource constraints, we did not train an 8B autoregressive model with the same architecture. Instead, we utilized our previously trained 7B autoregressive model for comparison. These four models are utilized in the scalability analysis in Sec. 3.1. We adopted Transformer architecture similar to LLaMA (Touvron et al., 2023; Dubey et al., 2024) for the ARMs and MDMs we trained. Specifically, we employ RMSNorm (Zhang & Sennrich, 2019) to stabilize training, used SwiGLU (Shazeer, 2020) as the activation function to enhance non-linearity, and integrate RoPE (Su et al., 2024) for more expressive positional encoding. Tab. 5 provides an overview of the model architectures. Additionally, we employ the widely used 6N formulation (Kaplan et al., 2020; Hoffmann et al., 2022) to calculate the training FLOPs in Fig. 3, where represents the number of non-embedding parameters, and denotes the total number of training tokens. B.3. Details and Ablation on Remasking This section first explains the inference methods in detail, followed by ablation studies on various remasking strategies. For instruct model, since our training includes large number of EOS tokens, directly applying the lowest confidence remasking strategy would result in an excessively high and unnatural occurrence of EOS tokens in the generated sentences. Therefore, we divide the entire generation length into several blocks. Each block is generated from left to right, and within each block, we apply the reverse process to perform sampling. However, for the base model, since EOS tokens are not padded during training, using the semi-autoregressive remasking strategy makes little difference in the results. Large Language Diffusion Models Table 6. Ablation on Remasking. We use GSM8K accuracy as the evaluation metric. The lowest-confidence & semi-autoregressive remasking strategy refers to generating each block from left to right, while applying the lowest-confidence remasking strategy within each block. Randomly remasking Lowest confidence remasking Lowest confidence & semi-autoregressive remasking 52.3 64.7 64.4 72.0 12.9 73.8 LLaDA 8B Base LLaDA 8B Instruct Table 7. Ablation on Generated Length. We use the GSM8K accuracy as the evaluation metric and set the number of sampling steps to half of the generated length. Length LLaDA 8B Base LLaDA 8B Instruct 256 512 1024 62.5 64.7 65.9 75.3 73.8 75.3 For efficiency, we set the answer length to 512 and the number of sampling steps to 256 in our ablation studies. For the semi-autoregressive remasking strategy, we set the block length to 32. To simplify the evaluation, we use GSM8K accuracy as the performance metric. As shown in Table 6, for the base model, applying the lowest confidence remasking strategy significantly improves performance, whereas the semi-autoregressive remasking strategy does not yield any noticeable benefits. In contrast, for the instruct model, directly applying the lowest confidence remasking strategy leads to substantial performance drop. However, combining the lowest confidence remasking strategy with the semi-autoregressive remasking strategy results in the best performance for the instruct model. We provide the specific remasking strategies and hyperparameters used for each benchmark in Appendix B.5. B.4. Ablation on Generated Length In this section, we conduct ablation studies on the generated length. For simplicity, we use GSM8K as the evaluation metric. To ensure efficiency and fairness, for each setting, we set the number of sampling steps to half of the generated length, ensuring that in each sampling step, two tokens are transferred from the mask to the text. For the LLaDA 8B Base model, we employ the lowest-confidence remasking strategy (i.e., Algorithm 5). For the LLaDA 8B Instruct model, we adopt semi-autoregressive sampling with block length of 32. As reported in Tab. 7, both the Base model and the Instruct model exhibit minimal sensitivity to the length hyperparameter. B.5. Standard Benchmarks and Evaluation In this section, we briefly introduce the benchmarks used in our study and describe the details of our evaluation process. Following standard LLM (Chu et al., 2024; Yang et al., 2024) evaluation practices, we assess LLaDA across four dimensions: General ability: MMLU (Hendrycks et al., 2020), BBH (Suzgun et al., 2022), ARC-C (Clark et al., 2018), Hellaswag (Zellers et al., 2019), TruthfulQA (Lin et al., 2021), WinoGrande (Sakaguchi et al., 2021) and PIQA (Bisk et al., 2020). Math and science ability: GSM8K (Cobbe et al., 2021), Math (Hendrycks et al., 2021) and GPQA (Rein et al., 2023). Code generation: HumanEval (Chen et al., 2021), HumanEval-FIM (Bavarian et al., 2022) and MBPP (Austin et al., 2021b). Chinese understanding: CMMLU (Li et al., 2023) and C-Eval (Huang et al., 2024a). For all the aforementioned benchmarks, we follow the widely adopted evaluation process (Gao et al., 2024) used in LLM assessments, primarily employing conditional likelihood estimation and conditional generation. Specifically, for certain benchmarks, prompt and multiple candidate answers are provided, and the model is required to compute each candidates 19 Large Language Diffusion Models Table 8. Inference Configuration for LLaDA 8B Instruct. We apply the low-confidence remasking strategy across all datasets. block length smaller than the answer length indicates the use of the semi-autoregressive remasking strategy; otherwise, it is not applied. The shorter answer lengths for MMLU and HellaSwag result from their requirement to generate only single token (i.e., A, B, C, or D) and two special end tokens (i.e., end of the model response and end of the sentence)."
        },
        {
            "title": "Answer length Block length",
            "content": "MMLU Hellaswag GPQA GSM8K HumanEval MBPP Math MMLU-pro ARC-C 3 3 128 256 512 512 256 256 512 3 3 64 8 32 32 256 256 512 Table 9. Comparison on iGSM Dataset. 4 steps 5 steps 6 steps LLaMA3 8B Base LLaDA 8B Base 38.0 64.0 35.0 41.0 34.0 44.0 conditional likelihood. The candidate with the highest likelihood is then selected as the models final answer, and accuracy is used as the evaluation metric. For the remaining benchmarks, the model generates responses based on the given prompt, and performance is evaluated using metrics such as exact match and other relevant criteria. For the base model, we use conditional likelihood estimation for MMLU, CMMLU, C-Eval, ARC-C, Hellaswag, TruthfulQA, WinoGrande, PIQA, and GPQA, while the remaining benchmarks are evaluated using conditional generation. For the instruct model, we evaluate all benchmarks using conditional generation. For datasets evaluated with conditional likelihood estimation, we adopt the widely used lm-evaluation-harness (Gao et al., 2024) framework. However, for datasets evaluated with conditional generation, we rely on an internal library for evaluation, as lm-evaluation-harness lacks implementations for certain key metrics (e.g., HumanEval-FIM). For benchmarks evaluated using conditional likelihood estimation, we use Monte Carlo estimation to approximate Eq. (6) for conditional likelihood estimation. Since MMLU, CMMLU, and C-EVAL only require the likelihood of single token, single Monte Carlo estimate is sufficient for these benchmarks. For all other benchmarks, we find that 128 Monte Carlo samples are adequate to produce stable results. For ARC-C, Hellaswag, TruthfulQA, WinoGrande, PIQA, and GPQA, we report the results with the optimal unsupervised classifier-free guidance scale searched in {0, 0.5, 1, 1.5, 2}. For benchmarks evaluated using conditional generation, we apply the lowest confidence remasking strategy to the base model, setting both the response length and the number of sampling steps to 1024. For the instruct model, we set the sampling steps equal to the answer length and provide the inference hyperparameters in Table 8. Due to computational resource constraints, we do not use the unsupervised classifier-free guidance for these benchmarks evaluated using conditional generation. B.6. Analysis of Sampling Steps In this section, we analyze the impact of sampling steps. For simplicity, we use the LLaDA 8B Base model and evaluate it on the GSM8K and HumanEval datasets. Additionally, we fix the answer length at 1024. As shown in Fig. 5, as the number of sampling steps increases to match the answer length, the models accuracy improves accordingly. B.7. Evaluation on iGSM Dataset To further assess the mathematical capabilities of LLaDA, we test its performance on iGSM (Ye et al., 2024), an infinite, synthetic GSM8K-like dataset. iGSM is generated via specific rules, with parameters that control the difficulty of problems (i.e., the number of solution steps). For evaluation consistency, we append #### $answer to the final solution, adhering to 20 Large Language Diffusion Models Figure 5. Analysis of Sampling Steps. the GSM8K format. Below is an example with solution steps set to 4: (Question) The number of each North Star Elementarys Cultural Studies Classroom equals 1. The number of each Westridge Elementarys Dance Studio equals 3 times as much as the sum of each North Star Elementarys Classroom and each North Star Elementarys Cultural Studies Classroom. How many Dance Studio does Westridge Elementary have? (Solution) Define North Star Elementarys Cultural Studies Classroom as x; so = 1. Define North Star Elementarys Classroom as m; so = = 1. Define Westridge Elementarys Dance Studio as n; = + = 1 + 1 = 2; so = 3 * = 3 * 2 = 1 #### Since there are slight differences between GSM8K and iGSM (e.g., the use of mod 5 algorithmic system), we follow (Ye et al., 2024) and provide system prompt along with four-shot question-answer pairs for each problem. (Prompt) Youre an expert at solving elementary math problems involving addition, subtraction, and multiplication. You solve all the problems in uniform format. All calculations are done modulo 5. For example, 4 + 4 equals 3, 2 + 4 equals 1, 3 + 3 + 3 equals 4, 3 * 3 equals 4, and 2 * 2 equals 4. When providing your solution, please end with #### x. where is your final answer, an integer between 0 and 4. You must solve all the problems using the same solution format. Our scenarios involve up to four categories of objects: schools, classrooms, backpacks and stationeries. Each school may contain classrooms, each classroom may contain backpacks, and each backpack may contain stationeries. We can specify quantities, such as the number of dance studios at each Lakeshore High. Assume that every entity with the same name has an identical configuration; for example, each Lakeshore High contains the same number of dance studios. Another guiding principle is that what is not mentioned does not exist: when we refer to classrooms at Lakeshore High, we are only discussing the classrooms explicitly mentioned in our scenario. Furthermore, if Lakeshore High is not even mentioned, any classroom within it is automatically considered to be non-existent (i.e. 0). For solution steps ranging from 4 to 6, we generate 100 questions for each case and report the corresponding accuracy in Table 9. As shown in the table, LLaDA Base demonstrates significant and consistent advantages over LLaMA3 on unseen mathematical problems, aligning with the results in Table 1. B.8. Poem Completion Tasks In this section, we present examples from our poem completion dataset as follows. Example 1: Prompt: 窈窕淑女的下一句是什么直接输出句子即可 Answer: 君子好逑 21 Large Language Diffusion Models Table 10. Visualization of the Semi-Autoregressive Sampling Process. In the response of LLaDA, darker colors indicate tokens predicted in the later stages of sampling, while lighter colors correspond to earlier predictions."
        },
        {
            "title": "User\nLLaDA",
            "content": "What are the benefits of regular exercise for physical and mental health? Table 11. Visualization of the Multi-turn Dialogue. We employ random remasking strategy. In the response of LLaDA, darker colors indicate tokens predicted in the later stages of sampling, while lighter colors correspond to earlier predictions."
        },
        {
            "title": "User",
            "content": "LLaDA User LLaDA want to have pet, but dont know whether to get cat or dog. Do you have any suggestions? Im very busy at work, so it seems like cat would be more suitable option. Do you have any suggestions for getting cat? Example 2: Prompt: 不拘一格降人才的上一句是什么直接输出句子即可 Answer: 我劝天公重抖擞 B.9. More Case Studies In this section, we present additional case studies of LLaDA 8B Instruct. First, Tab. 10 illustrates the sampling process of semi-autoregressive remasking, while Tab. 11 depicts the sampling process for multi-turn dialogues with random remasking. Additionally, Tab. 12 and Tab. 13 provide further examples of single-turn and multi-turn dialogues. Finally, Tab. 14 presents examples of poem reversal completions where the LLaDA 8B Instruct model succeeds, in contrast to the failure of GPT-4o. 22 Large Language Diffusion Models"
        },
        {
            "title": "Daily life\nUser\nLLaDA",
            "content": "Table 12. Single-turn Dialogue Cases of LLaDA 8B Instruct. Whats piece of advice youve received that youve found helpful? One helpful piece of advice Ive received is to always be open to learning and growth. Ive found that being willing to explore new ideas and experiences has helped me become more resilient and adaptable. By embracing growth mindset, Ive been able to identify opportunities for improvement and development, both personally and professionally. Please recommend me three famous movies Certainly! Here are three famous movies that have achieved widespread popularity and critical acclaim: 1. **The Shawshank Redemption** (1994) - Inspired by novella and directed by Frank Darabont, this film tells the story of Andy Dufresne, man convicted of murdering his wife, dealing with his harsh life in Shawshank Prison and forming an unlikely friendship with fellow inmate. 2. **The Godfather** (1972) - Directed by Francis Ford Coppola, this film is based on Mario Puzos novel of the same name. It follows the story of the Corleone family, particularly Michael Corleone, who rises to power and takes over the familys criminal empire. 3. **The Empire Strikes Back** (1980) - Directed by George Lucas, this film continues the story of young Skywalker in the Star Wars saga. It follows Luke Skywalker as he helps the Rebel Alliance fight against the Galactic Empire and destroy the powerful weapon, the Death Star. All of these films are celebrated for their cinematic achievements, powerful storytelling, and memorable characters. Translation User LLaDA 现在被证明的曾经只是想象 Please help me translate into Chinese: What is now proved was once only imagined Translation User LLaDA Wer heute bestatigt ist, war einst nur immaginiert. Please help me translate into German: What is now proved was once only imagined Math User LLaDA Code User LLaDA Emma decides to run 4 sprints 5 times week. She runs 75 meters each sprint. How many total meters does she run week? Emma runs 4 sprints each time, so she runs total of 4 5 = 20 sprints week. Each sprint is 75 meters long, so Emma runs total of 20 75 = 1500 meters week. The final result is 1500 am writing python code, have an array, please help me sort it from largest to smallest Certainly! You can sort an array from the largest to smallest in Python using the sort() method or the sorted() function. Heres an example: ### Using sort() method: my array = [3, 1, 4, 1, 5, 2] my array.sort(reverse=True) print(my array) 23 Large Language Diffusion Models Table 13. Multi-turn Dialogue Cases of LLaDA 8B Instruct. Daily life User LLaDA To prepare for job interview, you should research the company and the job, practice How do prepare for job interview? common interview questions, and dress appropriately. What are some common interview questions? User LLaDA Some common interview questions include Tell me about yourself and Why do you want to work for us? Daily life User LLaDA To learn programming, you can start by choosing programming language that you are How do start learning programming? interested in. Some popular languages include Python, Java, and C++. Which programming language should learn first? User LLaDA It depends on your interests and goals. Python is great language for beginners for its simplicity and versatility. How long does it take to learn Python? User LLaDA It can take anywhere from few weeks to several months to learn Python. User LLaDA Some good Python projects for beginners include building simple calculator, game, and What are some good Python projects for beginners? web application. Math User Natalia sold clips to 48 of her friends in April, and then she sold half as many clips in May. How many clips did Natalia sell altogether in April and May? LLaDA Natalia sold clips to 48 friends in April. She sold half as many clips in May, so she sold 48/2 = 24 clips in May. Altogether, Natalia sold 48 + 24 = 72 clips in April and May. The final result is 72. Natalia sold three times as many items in June as she did in May. How many clips did Natalia sell altogether in these three months? User LLaDA Natalia sold clips to 48 friends in April. She sold half as many clips in May, so she sold 48/2 = 24 clips in May. Natalia sold three times as many items in June as she did in May, so she sold 24 * 3 = 72 clips in June. Altogether, Natalia sold 48 + 24 + 72 = 144 clips in these three months. The final result is 144. Table 14. Poem Reversal Completion Cases where LLaDA 8B Instruct Succeeds but GPT-4o Fails. Question1 User GPT-4o 但闻人语响的上一句是什么? 但闻人语响的上一句是无可奈何花落去,这两句出自唐代词人李清照的武陵 春春晚: 无可奈何花落去但闻人语响这首词表达了作者在春天时节的孤独与 感伤借花落和人语声的描写反映出词人内心的无亲与失落 LLaDA 但闻人语响的上一句是空山不见人 Question2 User GPT-4o 夜静春山空的上一句是什么? 夜静春山空的上一句是空山新雨后.这两句出自唐代诗人王维的山居秋 膜:空山新雨后夜静春山空这首诗描绘了春天山中雨后的寂静与空灵 表现出自然的宁静与和谐美 LLaDA 夜静春山空的上一句是人闲桂花落"
        }
    ],
    "affiliations": [
        "Ant Group",
        "Beijing Key Laboratory of Big Data Management and Analysis Methods",
        "Gaoling School of Artificial Intelligence, Renmin University of China"
    ]
}