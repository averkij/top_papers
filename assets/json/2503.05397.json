{
    "paper_title": "Multi Agent based Medical Assistant for Edge Devices",
    "authors": [
        "Sakharam Gawade",
        "Shivam Akhouri",
        "Chinmay Kulkarni",
        "Jagdish Samant",
        "Pragya Sahu",
        "Aastik",
        "Jai Pahal",
        "Saswat Meher"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Large Action Models (LAMs) have revolutionized intelligent automation, but their application in healthcare faces challenges due to privacy concerns, latency, and dependency on internet access. This report introduces an ondevice, multi-agent healthcare assistant that overcomes these limitations. The system utilizes smaller, task-specific agents to optimize resources, ensure scalability and high performance. Our proposed system acts as a one-stop solution for health care needs with features like appointment booking, health monitoring, medication reminders, and daily health reporting. Powered by the Qwen Code Instruct 2.5 7B model, the Planner and Caller Agents achieve an average RougeL score of 85.5 for planning and 96.5 for calling for our tasks while being lightweight for on-device deployment. This innovative approach combines the benefits of ondevice systems with multi-agent architectures, paving the way for user-centric healthcare solutions."
        },
        {
            "title": "Start",
            "content": "Sakharam Gawade*, Shivam Akhouri*, Chinmay Kulkarni*, Jagdish Samant*, Pragya Sahu*, Aastik, Jai Pahal, Saswat Meher Samsung Research Institute Bangalore, India Team Name: Agent Lite 5 2 0 2 7 ]"
        },
        {
            "title": "A\nM",
            "content": ". [ 1 7 9 3 5 0 . 3 0 5 2 : r a"
        },
        {
            "title": "Abstract",
            "content": "Large Action Models (LAMs) have revolutionized intelligent automation, but their application in healthcare faces challenges due to privacy concerns, latency, and dependency on internet access. This report introduces an ondevice, multi-agent healthcare assistant that overcomes these limitations. The system utilizes smaller, task-specific agents to optimize resources, ensure scalability and high performance. Our proposed system acts as one-stop solution for health care needs with features like appointment booking, health monitoring, medication reminders, and daily health reporting. Powered by the Qwen Code Instruct 2.5 7B model, the Planner and Caller Agents achieve an average RougeL score of 85.5 for planning and 96.5 for calling for our tasks while being lightweight for on-device deployment. This innovative approach combines the benefits of ondevice systems with multi-agent architectures, paving the way for user-centric healthcare solutions. Check our code here."
        },
        {
            "title": "Introduction",
            "content": "Large Action Models (LAMs) have emerged as groundbreaking paradigm in intelligent automation, enabling systems to execute complex tasks by dividing them into modular, agent-specific components. These systems excel in domains like ecommerce and logistics, where cloud-based architectures leverage vast computational resources to deliver high precision and scalability. However, applying this framework to healthcare poses unique challenges that cloud-centric systems are ill-suited to address. Healthcare applications require handling sensitive personal data, ensuring real-time responsiveness, and maintaining uninterrupted functionality, even in offline scenarios. Cloud-based solutions, while powerful, are often constrained by privacy *Equal Contribution risks, latency issues, and dependency on continuous internet access. These challenges necessitate shift toward on-device implementations, where user data remains private, and operations are optimized for local execution. The computational limitations of edge devices pose an additional challenge when deploying large, monolithic models. This is where the power of multi-agent systems comes into play. By utilizing smaller, task-specific agents, we can effectively distribute workloads. This leads to optimized resource allocation, where compact models are designed to operate within the constraints of edge devices, ensuring efficient use of available computational resources. Moreover, the systems functionality can be easily scaled by introducing additional agents, allowing for incremental growth and adaptation. This setup fosters modular collaboration, where each agent functions independently, focusing on its specific task, while also working in harmony with others to manage more complex workflows. Our solution uses multi-agent architecture with on-device data and specialized models for intelligent diagnosis, appointment booking, emergency services, etc. It is integrated with user-friendly application, enabling seamless interaction and personalized data retrieval, enhancing agent capabilities through retrieval augmented generation. In this project, we contribute the following: 1. multi-agent healthcare assistant designed for edge devices, ensuring privacy and scalability (refer section 4). 2. data creation pipeline that generates synthetic data and enhances it to address challenges relevant to AI agents (refer section 6). 3. The fine-tuned planner and caller agents that achieve an average RougeL score of 85.5 for planning and 96.5 for calling using our generated data, demonstrating effectiveness for our target use cases (refer to section 7). 4. An application that connects users with the multi-agent system, enabling personalized data interaction (refer section 5)."
        },
        {
            "title": "2 Motivation",
            "content": "In the midst of todays hectic lifestyle, staying on top of ones health can feel like an uphill battle. Juggling medications, monitoring vital signs, and keeping track of appointments can easily become overwhelming, especially for vulnerable groups such as children and the elderly, who often require more frequent medical attention. Our multi-agent healthcare assistant is designed to simplify and streamline this process, empowering users of all ages to take charge of their health journey while ensuring the utmost privacy. By harnessing the power of local, on-device processing and seamless integration with smartwatches, we offer secure, userfriendly solution that makes health management efficient and accessible for everyone, regardless of age or technological expertise."
        },
        {
            "title": "3 Problem Statement and Use-cases",
            "content": "We develop multi-agent system that manages personal health data securely and efficiently while providing users with timely reminders, monitoring vitals, and handling appointment requests based on symptoms. It operates locally on the users device, ensuring data privacy and seamless integration with smart watches for enhanced user experience. The primary usecases for the project are: Intelligent Diagnosis and Appointment Scheduling: The healthcare assistant engages in multi-turn conversations with the user, allowing for intelligent diagnosis by gathering comprehensive information about the users health concerns. This iterative questioning process is key to accurately identifying the most appropriate medical specialist, ensuring targeted and effective care. It also uses past interactions and profile information to identify the right specialist. The aim is not to diagnose or provide remedies, but to identify the most suitable specialist based on the users needs and availability. This end-to-end functionality reduces user burden and ensures timely consultations without unnecessary hassle. Emergency SOS: The system is equipped to handle critical emergency situations where immediate assistance is required. Users can manually trigger an SOS signal, which prompts the system to take swift action. We call this as Hard SOS where we are sure of an emergency situation. These actions may include notifying emergency services (e.g., calling an ambulance), contacting the users designated emergency contacts, and providing realtime updates to responders. The system is designed to ensure prompt escalation of emergencies, enhancing the users safety and response time during life-threatening scenarios. Vitals Tracking and Abnormality Detection: The system continuously monitors the users vital signs through smart devices like wearable health trackers or smartphones. This feature ensures proactive health management by identifying anomalies or irregularities in real time, such as abnormal heart rate, irregular blood oxygen levels, or deviations in other key health metrics. When abnormal situation is detected, SOS is triggered, alerting the user and providing actionable recommendations. We call it Soft SOS as unlike Hard SOS, it only alerts the user. For this project, we integrate with simulator smart watch. Schedule Reminders: Managing healthcare routines can be challenging, especially for users with multiple prescriptions or treatment plans. The system automates this process by extracting relevant details from prescriptions or user inputs and setting personalized reminders. Daily Health Report: The system generates comprehensive daily report to enhance health tracking, summarizing the users essential health metrics and any detected anomalies throughout the day. This report is provided to the user each evening, presenting clear overview of their health status. Furthermore, the reports are stored long-term, allowing users and healthcare providers to review historical data for well-informed decisions and trend analysis."
        },
        {
            "title": "4 System Architecture",
            "content": "In our proposed architecture, three key components collaborate to deliver comprehensive healthcare assistance experience: the Action Manager, Health Manager, and Memory Unit. Figure 1a show the interaction between these three modules. The Health Managers agents independently handle scheduling reminders, monitoring vitals, and generating reports. It connects with the Action Manager for user interaction and tool execution, utilizing the (a) Communication in the multi-agent system (b) Communication between the planner and caller in Action Manager Figure 1: Multi-Agent Design for Healthcare Assistant Action Managers agents for planning and execution. The Memory Unit enables user-agent and agent-agent interaction, personalizing the system. We chose the Qwen 2.5-Coder-7B-Instruct model 1 as the backbone model for our architecture due to its size which can fit in flash memory and performance(Alizadeh et al., 2023). The following subsections delve into the details of each component."
        },
        {
            "title": "4.1 Health Manager",
            "content": "The Health Manager is crucial component of our multi-agent healthcare system that uses multiple agents to monitor user health, generate reports, and manage medication schedules. It consists of three key sub-components: the Report Generator, Health Monitor, and Scheduler."
        },
        {
            "title": "4.1.1 Report Generator",
            "content": "The Report Generator creates comprehensive summary of each session using Qwen7B. It processes session data, including user queries, executed actions, vital health data, medicine prescriptions, and key insights gathered during the session, to generate detailed and coherent report. This ensures that the sessions key details are accurately captured and presented in user-friendly format, enhancing the overall effectiveness and reliability of the system."
        },
        {
            "title": "4.1.2 Health Monitor",
            "content": "The Health Monitor continuously analyzes vital signs from the users wearable devices, such as smartwatches or smart rings, which provide realtime data on key health metrics like heart rate, blood pressure, and oxygen saturation. If the vitals deviate significantly from normal ranges, the system automatically triggers soft SOS alert, serving 1Qwen2.5-Coder-7B-Instruct: https://huggingface.co/Qwen/Qwen2.5-Coder-7B-Instruct as an early warning mechanism and ensuring that appropriate measures can be taken promptly."
        },
        {
            "title": "4.1.3 Scheduler",
            "content": "The Scheduler assists users in managing their medication schedules effectively by analyzing the users prescription and automatically extracting essential details such as medicine names, dosage timing, frequency, and duration. Using this information, the Scheduler creates personalized reminders that are sent to the user, helping them adhere to their prescribed treatment plan."
        },
        {
            "title": "4.2 Action Manager",
            "content": "The role of Action Manager is to execute task using available tools. This task is accomplished by two agent models, planner and caller. Since model trained on code has function knowledge and improved reasoning (Ma et al., 2023; Zhang et al., 2024b), we choose an instruct finetuned model which has been also finetuned on coding tasks. We LoRA finetune it for planning and calling to incorporate planning and function calling abilities into the model and align with our usecases."
        },
        {
            "title": "4.2.1 Planner",
            "content": "The planner takes the users query and based on the information of the tools, it generates an action along with its reasoning (ReAct framework (Yao et al., 2022)). After the action is executed, the result along with the trajectory is passed to the planner, and the subsequent action and its reasoning is generated. Based on the results of the actions, next action is generated until the task is completed. This style of planning is called interleaved planning ((Huang et al., 2024)). We chose this over generating plan in single-go for robustness in task execution. We LoRA finetune the Instruct-LLM model using our synthetic planning data (refer section 6)."
        },
        {
            "title": "4.3 Memory",
            "content": "The Memory Component is crucial element in our multi-agent healthcare system, enabling personalized user experience by storing and managing both long-term and short-term information. This component allows the system to tailor its interactions and provide more accurate, context-aware assistance (Sumers et al., 2024; Zhang et al., 2024c)."
        },
        {
            "title": "4.3.2 Long-Term Memory\nThe Long-Term Memory (LTM) stores the user’s\npersonal information, previous symptoms, and\nother relevant data that can be retrieved by the Plan-\nner agent for improved decision-making. By lever-\naging this historical information, the Planner can\nbetter identify underlying issues and make more\ninformed decisions when generating plans for the\nuser’s healthcare needs (Jiang et al., 2024). For\nexample, knowing a patient’s past complaints and\nvital history can help the Planner refer to the correct\nspecialist, resulting in more targeted and effective\ncare.\nFor",
            "content": "information from the Long-Term Memory (LTM), we employ the retrieval model from the Spacy librarys en_core_web_trf 2 to extract pertinent data based retrieving relevant on user queries and context. To parse the retrieved information, we utilize the EasyOCR library3, which enables text recognition and extraction from various documents such as prescription."
        },
        {
            "title": "5 Application Design",
            "content": "Figure 2: System flow diagram of the E2E application Our application follows three-tier architecture, as illustrated in Figure 2. The user interacts with the system through the frontend, which serves as the topmost layer of the application. All user actions are processed at the backend, where appropriate responses are generated based on the specific action. The data layer, which consists of SQLite database, handles data storage and retrieval for various queries and functionalities. Following are the main components of app architecture: Frontend provides UI interface to the user for app interaction Backend Intermediate processor between application services and frontend SQLite SQL db to store necessary data Celery Task queue to process async tasks Twilio Sending messages to ambulance and emergency contacts 2Spacys en_core_web_trf 3EasyOCR: https://github.com/JaidedAI/EasyOCR"
        },
        {
            "title": "5.1 Backend",
            "content": "The Django backend serves as the core of the application, handling various tasks such as processing user queries, managing user data, creating reminders based on uploaded prescriptions, triggering SOS calls, and interacting with the agent models. User interactions and histories are stored in SQLite database, with Django ORM facilitating seamless data operations. The backend provides several key endpoints, including: Receiving user input for the agent model Presenting summary of tracked vitals and suggestions"
        },
        {
            "title": "The functional components present in the UI are",
            "content": "as follows: real-time chat-like setup for users to interact with the planner model. Powered by httpx and websockets for live updates and responsiveness. Utilizes Fetch API to call Django REST endpoints. Triggering SOS calls in case of abnormality detection Error handling and loading states ensure smooth user experience. Reminding users to take medication based on their prescription Watch and SOS simulator have been included for demo purpose. The primary responsibilities of the backend include: Agent logs are added to help understand the logic behind agents inference for user input. Hosting multiple large action models"
        },
        {
            "title": "5.2.2 State Management",
            "content": "Managing API endpoints for model interactions Providing secure and scalable backend for the chat system and managing each users history State is managed using React Context API for lightweight and efficient state sharing. Server-side rendering (SSR) for initial page load and client-side fetching for subsequent interactions to save on data and improve response time. Analyzing recorded user vitals and providing suggestions based on the analysis"
        },
        {
            "title": "6 Data Creation",
            "content": "Sending SMS to friends and ambulance services based on the severity of the detected abnormality"
        },
        {
            "title": "5.2 Frontend\nThe frontend leverages Next.js4 for dynamic and\nresponsive user interactions, managed under a Tur-\nborepo structure to streamline development across\nteams. Next.js, a React-based framework provides\nserver-side rendering and client-side interactions\nfor optimal user experience and at the same time\nprovides room for scalability and improvement\nwith well defined structure. Turborepo is used to\nmanage multiple repositories under a single struc-\nture, optimizing builds and deployments, reducing\ndevelopment overhead for future.",
            "content": "4Next.js - https://nextjs.org/ We curate synthetic dataset to LoRA finetune the planner and caller (refer table 1). We present our data generation process in the following subsections. Figure 3: Data Creation Process"
        },
        {
            "title": "Train Combined",
            "content": "374,000 328,"
        },
        {
            "title": "Soft SOS",
            "content": "Hard SOS - Start Hard SOS - End 700 876 492 976 589 1,273 1,423 200 600 100 600 500 Table 1: Statistics of Synthetic Data Created for Planner and Caller agents. Combined indicates mixture of appointment usecases (general, counter, negative, dietician), hard SOS (start and end) and soft SOS. General: Appointment booked after finding specialist for the symptoms, Counter: Follow-up questions asked to understand symptoms better, Negative: User declines the appointment, Dietician: Use is referred to dietician based on the symptoms"
        },
        {
            "title": "6.1 Data Gathering",
            "content": "We first begin by standardizing the format of the data. We create trajectory containing communication between the planner and caller to complete the task. The planner uses the ReAct framework where based on the task the next action and its reasoning is generated. The caller generates the function call along with appropriate parameters. After finalizing format of trajectory, we generate data using OpenAIs gpt-4o-mini."
        },
        {
            "title": "6.1.1 Data Format",
            "content": "This section introduces the data format used in our multi-agent healthcare system. trajectory represents an interleaved history of the interaction between the user, multiple agents, and the environment to complete task. Following is the format of each state in the trajectory: 1. System { \" from \": \" system \", \" value \": { \" user_details \": { \" user_id \": \" BKYA569367 \", \" name \": \" John Doe \", \" timestamp \": \"2024 -12 -17 :59:59\" } } } 2. User { } \" from \": \" user \", \" value \": \" Natural language input from user \" 3. Planner { \" from \": \" planner \", \" value \": { \" reason \": \" Reasoning Generated by LLM based on previous actions \", \" action \": \" Next action based on LLM ' reasoning . <END > for completed task \" } } 4. Caller { \" from \": \" caller \" , \" value \": { \" tool \": \" function_name \" , \" parameters \": { \" param1 \": \" value1 \" , \" param2 \": \" value2 \" , ... \" paramN \": \" valueN \" } } } 5. Observation { \" from \": \" observation \", \" value \": { \" result \": Object_returned_by_function } } Consolidating the states, the format of trajectory looks as follows: { \" from \": \" system \" , \" value \": {...} }, { \" from \": \" user \", \" value \": \"\" }, { \" from \": \" planner \", \" value \": {...} }, { \" from \": \" caller \" , \" value \": {...} }, { \" from \": \" observation \", \" value \": {...} } ... { \" from \": \" planner \", \" value \": { \" reason \": \" The task is sucessfully completed .\" , \" action \": \"< END >\" } } For our usecases, examples of trajectories are shown in section D."
        },
        {
            "title": "6.1.2 Data Generation",
            "content": "To generate data for our multi-agent healthcare system, we use 1-shot prompt with OpenAIs gpt-4o-mini, providing list of tools, description of the use case, and an example trajectory. For instance, when generating appointment data, we want the Planner to suggest specialist without diagnosing disease while maintaining data diversity. To achieve this, we include specific disease in the prompt and instruct the LLM to generate symptoms for that disease and suggest specialist accordingly."
        },
        {
            "title": "6.2 Data Enhancement",
            "content": "After generating the data, we noticed that it had repetitive names, dates, and times. To fix this, we replaced them with random values. Since the input and output formats of tools for the named entities are standard (e.g. YYYY-MM-DD for date), we used regular expressions to find these entities. For dates and times, we made sure that in cases like appointments, the date of past symptoms comes before the users query date, and the suggested appointment is within reasonable time after the users query. The tools and their descriptions in the input to the Planner serve as premises for reasoning and generating the next action. As demonstrated by (Chen et al., 2024), shuffling the premises can hinder the models reasoning ability. Therefore, we shuffle the tools for each sample to enhance the models robustness and adaptability.."
        },
        {
            "title": "6.3 Data Verification",
            "content": "We analyze the generated data for each usecase and identify the scope of improvements. Apart from data augmentation, we check cases where the trained models might fail with the current data and adapt it for such exigencies. For example, when user gives few symptoms and planner might select an incorrect specialist for appointment. To tackle this, we allow the planner to counter questions and prompt gpt-4o-mini to generate data where user inputs vague symptoms at first."
        },
        {
            "title": "6.4 Data Interleaving",
            "content": "The trajectory consists of sequence of states that include system, user, planner, and caller interactions. To create datasets for the Planner and Caller agents, we employ data interleaving. For each Planner state in the trajectory, we select the tools, previous interactions, and observations from function calls as input, while the reason and action are chosen as output. Similarly, for each Caller state, the function call and its parameters are set as output. In simpler terms, we extract relevant information from the trajectory to create training data for the Planner and Caller agents. This process involves identifying the appropriate input and output for each agent based on their specific roles within the sequence of states. By creating these datasets, we enable the fine-tuning of the Planner and Caller models to improve their performance in generating accurate reasoning, actions, and function calls. We enclose the reason, action, function and parameters in tags for convenient post-processing. We also add these as special tokens in the model. For example, the output of planner for booking specialist for the user: < reason > Dr . Gabriel Lopez ( Neurologist ) is available on the user ' preferred date and time . </ reason > < action > Suggest the appointment to the user and proceed with booking if confirmed . Dr . Gabriel Lopez ( Neurologist ) on 2024 -12 -01 between 10:00 -10:30 </ action >"
        },
        {
            "title": "7 Experimental Setup and Results",
            "content": "We fine-tuned the Qwen2.5-Coder-7B-Instruct model for our multi-agent healthcare assistant using synthetic data and LoRA adaptation with rank 8 and alpha 16. Context length was set to 4,096 tokens. The model was trained for 5,000 steps with batch size of 64. By fine-tuning on separate Planner and Caller datasets, we achieved modular system for edge device deployment, with each LoRA adapter taking only 10MB before compression. We evaluate the performance of our multi-agent healthcare system using distinct metrics for the Planner and Caller agents. For the Planner, we assess the correctness of its reasoning and action using BLEU and ROUGE scores. ROUGE and BLEU scores are apt for checking the correctness of the Planners reasoning and action as they quantitatively assess the similarity between the generated text and reference text, providing standardized way to evaluate the quality of the Planners Category BLEU Rouge1 Rouge2 RougeL 0.97 General 0.84 Counter 0.86 Negative 0.80 Dietician 94.79 78.97 78.05 74.44 0.97 0.83 0.84 0.78 0.95 0.76 0.76 0. Table 2: Evaluation results of Planner for appointment usecase. General: Appointment booked after finding specialist for the symptoms, Counter: Follow-up questions asked to understand symptoms better, Negative: User declines the appointment, Dietician: Use is referred to dietician based on the symptoms Category BLEU Rouge1 Rouge2 RougeL ToolAcc ParamAcc ValuesAcc General Counter Negative Dietician 98.88 96.95 89.64 96.06 0.99 0.96 0.88 0.95 1.0 0.98 0.92 0.98 0.9 0.77 0.57 0. 1.0 0.99 0.93 1.0 0.99 0.98 0.92 0.97 1.0 1.0 1.0 1.0 Table 3: Evaluation results of Caller for appointment usecase. General: Appointment booked after finding specialist for the symptoms, Counter: Follow-up questions asked to understand symptoms better, Negative: User declines the appointment, Dietician: Use is referred to dietician based on the symptoms responses. In the case of the Caller, we measure the accuracy of the tool called (ToolAcc), parameters passed to the tool (ParamAcc) and values of the parameters (ValuesAcc). We also employ BLEU and ROUGE scores for the Caller, as they prove valuable when natural language sentence is provided as input to the tool. On our test set, we achieve an average RougeL score of 85.5 for planner and 96.5 for caller for the appointment usecase. Notably, the Caller consistently predicts the correct tool. For detailed scores for appointment usecase, refer to Table 2 and Table 3. For SOS usecases, we observe 100% scores for both planner and caller because of fixed sequence of actions."
        },
        {
            "title": "8 Conclusion",
            "content": "Our multi-agent healthcare system demonstrates the potential for AI-powered assistants to revolutionize personal health management. By leveraging the power of large language models and fine-tuning them for specific tasks, we have created modular and efficient system that can effectively support users in managing their health and well-being. The Action Manager, Health Manager, and Memory Unit work together to provide personalized healthcare experience. The Action Manager coordinates tasks, the Health Manager monitors health and manages schedules, while the Memory Unit stores and retrieves user-specific information for context-aware assistance. ment, and fine-tuning, we have achieved RougeL scores of 85.5 for planning and 96.5 for calling. This demonstrates the systems ability to generate relevant and accurate responses, while the Callers consistent prediction of the correct tool showcases its reliability in executing tasks."
        },
        {
            "title": "9 Future Work",
            "content": "We plan to enhance our multi-agent system by converting the trained modules into on-device compatible formats like ONNX/GGUF, enabling smooth system integration into mobile devices and lower latency. Well also integrate the system with various health monitoring devices and provide support for user onboarding of additional devices like smart rings and smart weighing scales. To enhance healthcare capabilities, well extend the system into multimodal understanding engine, empowering it to perform image-based diagnosis. Furthermore, we aim to expand the system to cover additional targeted scenarios, such as womens health tracking and post hospitalization care."
        },
        {
            "title": "References",
            "content": "Keivan Alizadeh, Iman Mirzadeh, Dmitry Belenko, Karen Khatamifard, Minsik Cho, Carlo Del Mundo, Mohammad Rastegari, and Mehrdad Farajtabar. 2023. Llm in flash: Efficient large language model arXiv preprint inference with limited memory. arXiv:2312.11514. Through extensive data generation, enhanceXinyun Chen, Ryan A. Chi, Xuezhi Wang, and Denny Zhou. 2024. Premise order matters in reasoning with large language models. Preprint, arXiv:2402.08939. Xu Huang, Weiwen Liu, Xiaolong Chen, Xingmei Wang, Hao Wang, Defu Lian, Yasheng Wang, Ruiming Tang, and Enhong Chen. 2024. Understanding the planning of llm agents: survey. Preprint, arXiv:2402.02716. Xun Jiang, Feng Li, Han Zhao, Jiaying Wang, Jun Shao, Shihao Xu, Shu Zhang, Weiling Chen, Xavier Tang, Yize Chen, Mengyue Wu, Weizhi Ma, Mengdi Wang, and Tianqiao Chen. 2024. Long term memory: The foundation of ai self-evolution. Preprint, arXiv:2410.15665. Yingwei Ma, Yue Liu, Yue Yu, Yuanliang Zhang, Yu Jiang, Changjian Wang, and Shanshan Li. 2023. At which training stage does code data help llms reasoning? Preprint, arXiv:2309.16298. Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Luke Zettlemoyer, Nicola Cancedda, and Thomas Scialom. 2023. Toolformer: Language models can teach themselves to use tools. Preprint, arXiv:2302.04761. Theodore R. Sumers, Shunyu Yao, Karthik Narasimhan, Cognitive Preprint, and Thomas L. Griffiths. 2024. architectures for language agents. arXiv:2309.02427. Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. 2022. React: Synergizing reasoning and acting in language models. arXiv preprint arXiv:2210.03629. Jianguo Zhang, Tian Lan, Ming Zhu, Zuxin Liu, Thai Hoang, Shirley Kokane, Weiran Yao, Juntao Tan, Akshara Prabhakar, Haolin Chen, Zhiwei Liu, Yihao Feng, Tulika Awalgaonkar, Rithesh Murthy, Eric Hu, Zeyuan Chen, Ran Xu, Juan Carlos Niebles, Shelby Heinecke, Huan Wang, Silvio Savarese, and Caiming Xiong. 2024a. xlam: family of large action models to empower ai agent systems. Preprint, arXiv:2409.03215. Xinlu Zhang, Zhiyu Zoey Chen, Xi Ye, Xianjun Yang, Lichang Chen, William Yang Wang, and Linda Ruth Petzold. 2024b. Unveiling the impact of coding data instruction fine-tuning on large language models reasoning. Preprint, arXiv:2405.20535. Zeyu Zhang, Xiaohe Bo, Chen Ma, Rui Li, Xu Chen, Quanyu Dai, Jieming Zhu, Zhenhua Dong, and JiRong Wen. 2024c. survey on the memory mechanism of large language model based agents. Preprint, arXiv:2404.13501."
        },
        {
            "title": "A Snapshots of Application",
            "content": "In this section, we present snapshots showcasing the key features of our application. These include intelligent appointment scheduling based on user symptoms, reminder scheduling by extracting prescription information, soft SOS triggers for abnormal vitals, and user-initiated hard SOS with location tracking and emergency notifications. A."
        },
        {
            "title": "Intelligent Appointment Scheduling",
            "content": "Figure 4 shows the appointment booking use case where the user complains about having abdominal pain and feeling feverish. The Planner and Caller ask follow-up questions and find specialist that fits the users schedule. A.2 Reminder Scheduling from Prescription As shown in figure 5a, the user can upload prescription. The prescription is parsed and analyzed by LLM to extract information about medication such as medicine name, time, and duration. This information is then added to the users list of reminders, as shown in figure 5b. A.3 Soft Trigger from Abnormal Vitals If users vitals are abnormal, the monitor agent triggers soft SOS. At that time, the users vitals are fetched (simulated for our demo) and small report is displayed to the user (refer to figure 6). A.4 Hard SOS Triggered by User The user can trigger Hard SOS as shown in figure 7a. The users location is fetched and the nearest ambulance is identified. The location is then sent to the nearest ambulance and emergency contacts. sample of the message sent to an emergency contact is shown in figure 7b."
        },
        {
            "title": "B Experimentation with function calling",
            "content": "models We conducted experiments with xLAM 1B and 7B models to assess their suitability for planning and calling tasks. As illustrated in Figure 10, we provided list of 28 tools for the task of finding good movies in nearby theaters. However, both the 1B and 7B models failed to identify the correct function calls in steps 1 and 2, respectively (refer figure 8 and 9). Specifically, the 7B model attempted to check movie availability before fetching the list of movies. To address these issues, we fine-tuned the Qwen model to improve its performance and avoid such situations."
        },
        {
            "title": "C List of Diseases",
            "content": "During data generation, the prompt instructs to generate symptoms based on given disease. We Figure 4: Appointment Booking (a) Medication Uploaded schedule Reminders (b) Reminder Added Figure 5: Adding Reminder from Prescription (a) Soft SOS triggered due to abnormal vitals (simulated) (b) Users vitals analyzed Figure 6: Soft SOS triggered and vitals analyzed (a) Hard SOS-Interface (b) Hard SOS-SMS Figure 7: Triggering Hard SOS and notifying emergency contacts with GPS Figure 8: Planning and function calling using xLAM 1b Figure 9: Planning and function calling using xLAM 7b Figure 10: Prompt to xLAM 7b randomly sample from list of 153 diseases. The list was created based on different specialization such as orthologist, cardiologist, gastroenterologists, etc. They are as follows: Influenza, Diabetes Mellitus, Hypertension, Asthma, Coronary Artery Disease, Stroke, HIV/AIDS, Tuberculosis, Hepatitis B, Hepatitis C, Dengue Fever, Malaria, Chickenpox, Measles, Mumps, Rubella, Zika Virus, Ebola, COVID-19, Cancer, Alzheimers Disease, Parkinsons Disease, Arthritis, Lupus, Multiple Sclerosis, Crohns Disease, Ulcerative Colitis, Gastroesophageal Reflux Disease (GERD), Celiac Disease, Anemia, Bronchitis, Pneumonia, Sinusitis, Chlamydia, Gonorrhea, Syphilis, Herpes, Human Papillomavirus (HPV), Tetanus, Rabies, Polio, Yellow Fever, Smallpox, Typhoid Fever, Leprosy, Plague, Hemophilia, Sickle Cell Disease, Thalassemia, Hemochromatosis, Meningitis, Encephalitis, Glaucoma, Cataracts, Macular Degeneration, Otitis Media, Tonsillitis, Appendicitis, Hemorrhoids, Diverticulitis, Irritable Bowel Syndrome (IBS), Kidney Stones, Chronic Kidney Disease, Renal Failure, Osteoporosis, Osteopenia, Rheumatoid Arthritis, Gout, Psoriasis, Eczema, Vitiligo, Alopecia, Hypothyroidism, Hyperthyroidism, Cushings Syndrome, Addisons Disease, Prostate Cancer, Breast Cancer, Lung Cancer, Colorectal Cancer, Pancreatic Cancer, Liver Cancer, Skin Cancer, Melanoma, Leukemia, Lymphoma, Myeloma, Basal Cell Carcinoma, Squamous Cell Carcinoma, Esophageal Cancer, Gastric Cancer, Ovarian Cancer, Cervical Cancer, Endometrial Cancer, Bladder Cancer, Kidney Cancer, Testicular Cancer, Thyroid Cancer, Mesothelioma, Brain Tumors, Spinal Cord Tumors, Heart Failure, Atrial Fibrillation, Cardiomyopathy, Angina, Atherosclerosis, Pericarditis, Myocarditis, Endocarditis, Congenital Heart Disease, Valvular Heart Disease, Peripheral Artery Disease, Deep Vein Thrombosis, Pulmonary Embolism, Varicose Veins, Hypertensive Heart Disease, Coronary Microvascular Disease, Dyslipidemia, Familial Hypercholesterolemia, Hypertrophic Cardiomyopathy, Dilated Cardiomyopathy, Restrictive Cardiomyopathy, Takotsubo Cardiomyopathy, Sleep Apnea, Insomnia, Narcolepsy, Restless Leg Syndrome, Epilepsy, Migraine, Cluster Headache, Tension Headache, Trigeminal Neuralgia, Multiple System Atrophy, Amyotrophic Lateral Sclerosis (ALS), Huntingtons Disease, Dystonia, Myasthenia Gravis, Guillain-Barre Syndrome, Spinal Muscular Atrophy, Muscular Dystrophy, Fibromyalgia, Chronic Fatigue Syndrome, Complex Regional Pain Syndrome, Temporomandibular Joint Disorders, Sjogrens Syndrome, Raynauds Disease, Scleroderma, Mixed Connective Tisse Disease, Behcets Disease, Wegeners Granulomatosis, Giant Cell Arteritis, Polyarteritis Nodosa and Sarcoidosis."
        },
        {
            "title": "D Example of Trajectory",
            "content": "D.1 Appointment - Generic \" action \": \" Use the get_available_specialists tool to find general physician available for an appointment .\" { \" interaction_trajectory \": [ { \" from \": \" system \", \" value \": { \" user_details \": { \" user_id \": \" JICC571413 \", \" name \": \" Sakura Tominaga \", \" timestamp \": \"2024 -09 -02 T10 :57:00\" } } }, { \" from \": \" user \", \" value \": \"I ' ve been feeling extremely fatigued with chills , body aches , and sore throat . It ' becoming hard to get through the day .\" }, { \" from \": \" planner \", \" value \": { \" reason \": \" User reports fatigue , chills , body aches , and sore throat which could indicate viral infection such as influenza .\" , \" action \": \" Check for past similar complaints using the retrieve_past_complaints tool .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" retrieve_past_complaints \" , \" parameters \": { \" user_id \": \" JICC571413 \", \" symptoms \": \" fatigue , chills , body aches , sore throat \" } } }, { \" from \": \" observation \", \" value \": { \" result \": [ { \" date \": \"2024 -06 -02\" , \" symptoms \": \" mild body aches , slight fever \" } ] } }, { \" from \": \" planner \", \" value \": { \" reason \": \" Past records indicate mild common cold , but the current symptoms are more severe . consultation with general physician is advisable .\" , } }, { \" from \": \" caller \", \" value \": { \" tool \": \" get_available_specialists \", \" parameters \": { \" symptoms \": \" fatigue , chills , body aches , sore throat \", \" specialization \": \" general physician \" } } }, { \" from \": \" observation \", \" value \": { \" result \": { \" specialist_id \": \" AECJ317777 \", \" name \": \" Dr . Diego Arroyo ( General Physician )\", \" available_slot \": { \" date \": \"2024 -11 -30\" , \" time \": \"11:00 -11:30\" } } } }, { \" from \": \" planner \" , \" value \": { \" reason \": \" Dr . Diego Arroyo ( General Physician ) is available on the user 's preferred date and time .\" , \" action \": \" Suggest the appointment to the user and proceed with booking if confirmed . Dr . Diego Arroyo ( General Physician ) on 2024 -11 -30 between 11:00 -11:30\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" get_input_from_user \", \" parameters \": { \" user_id \": \" JICC571413 \", \" questions \": \" Dr . Diego Arroyo ( General Physician ) has an opening at 11:00 AM on November 30 th . Would you like to schedule an appointment ?\" } } }, { \" from \": \" observation \", \" value \": { \" result \": \" Yes , please \" } }, { \" from \": \" planner \" , \" value \": { \" reason \": \" User has confirmed the \" symptoms \": \" fatigue , chills , body appointment \" , aches , sore throat \" , \" action \": \"I should confirm the \" timestamp \": \"2024 -09 -02 T10 :57:00\" appointment \" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" confirm_appointment \", \" parameters \": { \" user_id \": \" JICC571413 \", \" specialist_id \": \" AECJ317777 \", \" appointment_time_date \": \"11:00 -11:30 , 30/11/2024\" } } }, { } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" reason \": \" Appointment confirmed and symptoms stored .\" , \" action \": \" Inform the user of the successful booking .\" \" from \": \" observation \", \" value \": { \" result \": true } }, { } }, { \" from \": \" planner \", \" value \": { \" reason \": \" Appointment confirmed . Next , should save the appointment history .\" , \" action \": \" Save the appointment history .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" save_appointment_history \", \" parameters \": { \" user_id \": \" JICC571413 \", \" symptoms \": \" fatigue , chills , body aches , sore throat \", \" specialist_id \": \" AECJ317777 \", \" appointment_time_date \": \"11:00 -11:30 , 30/11/2024\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" from \": \" caller \" , \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" JICC571413 \" , \" message \": \" Your appointment with Dr . Diego Arroyo ( General Physician ) is confirmed for 11:00 AM on November 30 th . Your symptoms have been recorded for future reference .\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The task is completed successfully .\" , \" action \": \"< END >\" } } ] } D.2 Appointment - Reject Appointment \" reason \": \" Appointment confirmed and stored .\" , \" action \": \" Also store the current symptoms for future reference .\" { } }, { \" from \": \" caller \", \" value \": { \" tool \": \" store_symptoms \", \" parameters \": { \" user_id \": \" JICC571413 \", \" interaction_trajectory \": [ { \" from \": \" system \" , \" value \": { \" user_details \": { \" user_id \": \" BKYA569367 \", \" name \": \" Tomomi Gao \", \" timestamp \": \"2023 -11 -08 T10 :54:00\" } } }, { \" from \": \" user \", \" value \": \"I ' ve been feeling very unwell with high fever , body aches , constant coughing , and sore throat for the past few days .\" }, ... ( similar to Appointment Trajectory ) { \" from \": \" observation \", \" value \": { \" result \": { \" specialist_id \": \" CXAE230642 \", \" name \": \" Dr . Diego Perez ( General Practitioner )\", \" available_slot \": { \" date \": \"2024 -11 -30\" , \" time \": \"10:00 -10:30\" } } } }, { \" from \": \" planner \", \" value \": { \" reason \": \" Dr . Diego Perez ( General Practitioner ) is available on the user ' preferred date and time .\" , \" action \": \" Suggest the appointment to the user and check if they want to schedule it . Dr . Diego Perez ( General Practitioner ) on 2024 -11 -30 between 10:00 -10:30\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" get_input_from_user \", \" parameters \": { \" user_id \": \" BKYA569367 \", \" questions \": \" Dr . Diego Perez ( General Practitioner ) has an opening at 10:00 AM on November 30 th . Would you like to schedule an appointment ?\" } } }, { \" from \": \" observation \", \" value \": { \" result \": \"No , not at this time .\" } }, { \" from \": \" planner \", \" value \": { \" reason \": \" User has declined the appointment .\" , \" action \": \" Proceed to store the symptoms for future reference without scheduling an appointment .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" store_symptoms \", \" parameters \": { \" user_id \": \" BKYA569367 \", \" symptoms \": \" high fever , body aches , cough , sore throat \" , \" timestamp \": \"2023 -11 -08 T10 :54:00\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \" , \" value \": { \" reason \": \" Symptoms stored successfully .\" , \" action \": \" Inform the user that the symptoms have been recorded for future reference .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" BKYA569367 \", \" message \": \" Your symptoms have been recorded for future reference . Please don ' hesitate to reach out if you decide to see doctor .\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \" , \" value \": { \" reason \": \" The process is completed with symptoms stored and user notified .\" , \" action \": \"< END >\" } } ] } D.3 Appointment - Follow-up for Unclear"
        },
        {
            "title": "Symptoms",
            "content": "{ \" interaction_trajectory \": [ { \" from \": \" system \", \" value \": { \" user_details \": { \" user_id \": \" BLTA888285 \", \" name \": \" Juan Martinez \", \" timestamp \": \"2024 -08 -05 T04 :20:00\" { \" from \": \" observation \", \" value \": { \" result \": { } } }, { \" from \": \" user \", \" value \": \"I ' ve been having some trouble with my movement lately .\" }, { \" from \": \" planner \", \" value \": { \" reason \": \" User reports movement issues , but need to clarify if it 's weakness , stiffness , or something else .\" , \" action \": \" Ask user if they are experiencing weakness , stiffness , or difficulties in coordination .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" get_input_from_user \", \" parameters \": { \" user_id \": \" BLTA888285 \", \" questions \": \" Could you describe if you ' re feeling weakness , stiffness , or issues with coordination ?\" } } }, { \" from \": \" observation \", \" value \": { \" result \": { \" user \": \"I feel bit weak and sometimes my hand shakes .\" } } }, { \" from \": \" planner \", \" value \": { \" reason \": \" User mentions weakness and hand shaking , which could indicate need for rehabilitation .\" , \" action \": \" Ask if they are experiencing any pain or if the weakness is constant .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" get_input_from_user \", \" parameters \": { \" user_id \": \" BLTA888285 \", \" questions \": \" Are you experiencing any pain , or is the weakness constant throughout the day ?\" } } }, \" user \": \" There ' no pain , but the weakness seems to come and go .\" } } }, .... ( Rest similar to Appointment Trajectory ) ] } D.4 Soft SOS { \" interaction_trajectory \": [ { \" from \": \" system \" , \" value \": { \" user_details \": { \" user_id \": \" PKFG301655 \", \" name \": \" Aaliyah Sousa \", \" timestamp \": \"2025 -02 -01 T08 :11:00\" } } }, { \" from \": \" user \", \" value \": \" Soft SOS triggered . Abnormal Vitals : { ' oxygen ': 85 , ' heart_rate ': 41 , ' sleep ': {' deep ': 75 , ' light ': 238 , 'rem ': 94 , ' awake ': 44}}\" }, { \" from \": \" planner \", \" value \": { \" reason \": \" User has triggered soft SOS , so the system needs to notify the user about abnormal vitals \", \" action \": \" Call notify_user to inform the user that the SOS process is being triggered .\" } }, { \" from \": \" caller \" , \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" PKFG301655 \", \" symptoms \": \" Soft SOS triggered . Abnormal vitals detected . nIf you are feeling unwell , contact emergency services or book an appointment . nYour Vitals - nHeart Rate : 41 bps nOxygen : 85% nDeep Sleep : 75 minutes nLight Sleep : 238 minutes nREM : 94 minutes nAwake : 44 minutes \" } } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The user has been informed about the abnormal vitals . The Soft SOS process is completed successfully .\" , \" action \": \"< END >\" } } ] } D.5 Hard SOS - Start { \" interaction_trajectory \": [ { \" from \": \" system \", \" value \": { \" user_details \": { \" user_id \": \" HNNT232992 \", \" name \": \" Jace Cardoso \", \" timestamp \": \"2024 -03 -13 T06 :59:00\" } } }, { \" from \": \" user \", \" value \": \" Hard SOS triggered \" }, { \" from \": \" planner \", \" value \": { \" reason \": \" User has triggered hard SOS , so the system needs to notify the user that the SOS process is starting .\" , \" action \": \" Call notify_user to inform the user that the SOS process is being triggered .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" HNNT232992 \", \" symptoms \": \" Hard SOS triggered . We are initiating emergency response procedures .\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The user has been notified about the SOS initiation . The system now needs to retrieve the user ' location to proceed with the emergency response .\" , \" action \": \" Call get_location to fetch the user ' current coordinates .\" } }, { \" from \": \" caller \" , \" value \": { \" tool \": \" get_location \", \" parameters \": {} } }, { \" from \": \" observation \", \" value \": { \" result \": { \" latitude \": 23.5326 , \" longitude \": 139.7524 } } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The user ' current location has been retrieved . Next , the system needs to find the nearest ambulance based on this location .\" , \" action \": \" Call search_ambulance with the location to find the nearest available ambulance .\" } }, { \" from \": \" caller \" , \" value \": { \" tool \": \" search_ambulance \" , \" parameters \": { \" location \": { \" latitude \": 23.5326 , \" longitude \": 139.7524 } } } }, { \" from \": \" observation \", \" value \": { \" result \": { \" ambulance_id \": \" AMBpF0E \" , \" phone_no \": \"+146910850030\" } } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The nearest ambulance has been identified . The system needs to notify the ambulance about the user ' location and details .\" , \" action \": \" Call send_message to notify the ambulance with the user ' location and details .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" send_message \", \" parameters \": { \" phone_no \": \"+146910850030\" , \" text \": \" Ambulance needed at location { latitude : 23.5326 , longitude : 139.7524} by user HNNT232992 - Jace Cardoso \" } } }, { \" symptoms \": \" Ambulance ( AMBpF0E ) with contact HNNT232992 has been informed and is on its way . Your emergency contacts have also been notified .\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true \" from \": \" observation \", \" value \": { \" result \": true } }, { } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The ambulance has been notified . Next , the system needs to alert the user ' emergency contacts about the SOS .\" , \" action \": \" Call send_message to notify emergency contacts about the SOS and user ' location .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" send_message \", \" parameters \": { \" text \": \" SOS triggered by Jace Cardoso at location { latitude : 23.5326 , longitude : 139.7524}\" , \" to_emergency_contacts \": true } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The emergency contacts have been notified . The system now needs to inform the user about the actions taken , including ambulance and emergency contact notifications .\" , \" action \": \" Call notify_user to inform the user about the completion of the SOS process .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" HNNT232992 \", \" from \": \" planner \" , \" value \": { \" reason \": \" The user has been informed about the actions taken . The SOS process is completed successfully .\" , \" action \": \"< END >\" } } ] } D.6 Hard SOS - End { \" interaction_trajectory \": [ { \" from \": \" system \", \" value \": { \" user_details \": { \" user_id \": \" EORZ618635 \", \" name \": \" Leah Lima \", \" timestamp \": \"2023 -11 -29 T01 :52:00\" } } }, { \" from \": \" user \", \" value \": \" End SOS triggered \" }, { \" from \": \" planner \" , \" value \": { \" reason \": \" User has triggered an End SOS . The system needs to notify the user that the End SOS process is being initiated .\" , \" action \": \" Call notify_user to inform the user about the initiation of the End SOS process .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" EORZ618635 \", \" symptoms \": \" End SOS triggered . We are notifying all relevant parties .\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The user has been informed about the initiation of the End SOS process . The system now needs to get the assigned ambulance details .\" , \" action \": \" Call get_assigned_ambulance to retrieve the ambulance details .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" get_assigned_ambulance \", \" parameters \": { \" user_id \": \" EORZ618635 \" } } }, { \" from \": \" observation \", \" value \": { \" result \": { \" ambulance_id \": \" AMBUaTg \", \" phone_no \": \"+235135781046\" } } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The assigned ambulance details have been retrieved . The system now needs to notify the ambulance about the SOS being ended .\" , \" action \": \" Call send_message to inform the ambulance about the End SOS .\" } }, { \" from \": \" caller \", \" value \": { \" tool \": \" send_message \", \" parameters \": { \" phone_no \": \"+235135781046\" , \" text \": \" The SOS triggered by user EORZ618635 - Leah Lima has been resolved . Ambulance services are no longer required .\" } } }, { \" result \": true } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The ambulance has been notified about the End SOS . Next , the system needs to notify the user ' emergency contacts about the resolution .\" , \" action \": \" Call send_message to inform emergency contacts about the SOS resolution .\" } }, { \" from \": \" caller \" , \" value \": { \" tool \": \" send_message \", \" parameters \": { \" text \": \" The SOS triggered by Leah Lima has been resolved . No further assistance is required .\" , \" to_emergency_contacts \": true } } }, { \" from \": \" observation \", \" value \": { \" result \": true } }, { \" from \": \" planner \" , \" value \": { \" reason \": \" The emergency contacts have been notified about the SOS resolution . The system now needs to inform the user that the End SOS process is completed .\" , \" action \": \" Call notify_user to inform the user about the successful completion of the End SOS process .\" } }, { \" from \": \" caller \" , \" value \": { \" tool \": \" notify_user \", \" parameters \": { \" user_id \": \" EORZ618635 \", \" symptoms \": \" The SOS process has been successfully ended . Ambulance and emergency contacts have been informed .\" } } }, { \" from \": \" observation \", \" value \": { \" result \": true \" from \": \" observation \", \" value \": { } }, { \" from \": \" planner \", \" value \": { \" reason \": \" The user has been informed about the successful completion of the End SOS process . The task is completed .\" , \" action \": \"< END >\" } } ] }"
        },
        {
            "title": "E List of Tools",
            "content": "Following is list of tools for which planner and caller is trained: [ { \" Name \": \" get_location \", \" Description \": \" Fetches the GPS coordinates of the user ' current location .\" , \" Parameters \": [] , \" Required Parameters \": [] , \" Returns \": { \" type \": \" dictionary \", \" description \": \" Returns the user ' current location as { latitude : float , longitude : float }.\" } }, { \" Name \": \" search_ambulance \", \" Description \": \" Finds the nearest available ambulance based on the given location .\" , \" Parameters \": [ { \" param_name \": \" location \", \" type \": \" dictionary \", \" default \": \" None \", \" description \": \" The user ' current location as { latitude : float , longitude : float }.\" } ], \" Required Parameters \": [ \" location \" ], \" Returns \": { \" type \": \" dictionary \", \" description \": \" Returns the ambulance details { ambulance_id : string , phone_no : string }.\" } }, { \" Name \": \" send_message \", \" Description \": \" Sends text message to specified phone number or emergency contacts .\" , \" Parameters \": [ { \" param_name \": \" phone_no \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The phone number to send the message to .\" }, { \" param_name \": \" text \", \" type \": \" string \" , \" default \": \" None \", \" description \": \" The message text to send .\" }, { \" param_name \": \" to_emergency_contacts \", \" type \": \" boolean \", \" default \": \" False \", \" description \": \" Whether to send the message to all emergency contacts .\" } ], \" Required Parameters \": [ \" text \" ], \" Returns \": { \" type \": \" boolean \", \" description \": \" Returns True if the message was sent successfully .\" } }, { \" Name \": \" get_available_specialists \", \" Description \": \" Fetches list of specialists and their availability .\" , \" Parameters \": [ { \" param_name \": \" symptoms \", \" type \": \" string \", \" default \": \" None \", \" description \": \" List of symptoms derived from user input .\" }, { \" param_name \": \" specialization \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Specialization name for the appointment .\" }, { \" param_name \": \" user_schedule \", \" type \": \" object \", \" default \": \" None \", \" description \": \" User ' preferred schedule for appointments in key - value pairs (e.g., { ' date ': ' YYYY -MM -DD ' , ' time_range ': ' HH : MM - HH :MM '}) .\" } ], \" Required Parameters \": [ \" symptoms \", \" user_schedule \" ], \" Returns \": { \" type \": \" dictionary \", \" description \": \" Returns single best schedule { specialist_id : string , name : string , available_slot : string , date : string }.\" } }, { \" Name \": \" confirm_appointment \", \" Description \": \" Confirms an appointment slot and stores it in the hospital ' database .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" specialist_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the chosen specialist .\" }, { \" description \": \" Unique identifier for the chosen specialist .\" }, { \" param_name \": \" appointment_time_date \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The selected time slot for the appointment as time in HH :MM - HH : MM format and date in DD / MM / YY format .\" } ], \" Required Parameters \": [ \" user_id \", \" symptoms \", \" specialist_id \", \" appointment_time_date \" ], \" Returns \": { \" type \": \" boolean \" , \" description \": \" Always returns True \" param_name \": \" appointment_time_date .\" \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The selected time slot for the appointment as time in HH :MM - HH : MM format and date in DD / MM / YY format .\" } ], \" Required Parameters \": [ \" user_id \", \" specialist_id \", \" appointment_time_date \" ], \" Returns \": { \" type \": \" boolean \", \" description \": \" Always returns True .\" } }, { \" Name \": \" save_appointment_history \" , \" Description \": \" Saves appointment information in the user ' database for later reference and recurring use cases .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" symptoms \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The symptoms described by the user .\" }, { \" param_name \": \" specialist_id \", \" type \": \" string \", \" default \": \" None \", } }, { \" Name \": \" get_available_specialists \", \" Description \": \" Fetches list of specialists and their availability .\" , \" Parameters \": [ { \" param_name \": \" symptoms \", \" type \": \" string \" , \" default \": \" None \", \" description \": \" List of symptoms derived from user input .\" }, { \" param_name \": \" specialization \", \" type \": \" string \" , \" default \": \" None \", \" description \": \" specialization name for the appointment \" }, { \" param_name \": \" user_schedule \", \" type \": \" object \" , \" default \": \" None \", \" description \": \" User ' preferred schedule for appointments in key - value pairs (e.g., { ' date ': ' YYYY -MM -DD ' , ' time_range ': ' HH : MM - HH :MM '}) .\" } ], \" Required Parameters \": [ \" symptoms \", \" specialization \" ], \" Returns \": { \" type \": \" dictionary \", \" description \": \" returns single best schedule { specialist_id , name , available_slot including time in HH :MM - HH : MM format and date in DD / MM / YY format }.\" } }, { { \" Name \": \" confirm_appointment \", \" Description \": \" Confirms an appointment slot and stores it in the hospital ' database .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" specialist_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the chosen specialist .\" }, { \" param_name \": \" appointment_time_date \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The selected time slot for the appointment as time in HH :MM - HH : MM format and date in DD / MM / YY format .\" } ], \" Required Parameters \": [ \" user_id \", \" specialist_id \", \" appointment_time \" ], \" Returns \": { \" type \": \" boolean \", \" description \": \" Always returns True .\" } }, { \" Name \": \" save_appointment_history \" , \" Description \": \" Saves appointment information in the user ' database for later reference and recurring use cases .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" symptoms \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The symptoms described by the user .\" }, { \" param_name \": \" specialist_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the chosen specialist .\" }, \" param_name \": \" appointment_time_date \", \" type \": \" string \", \" default \": \" None \", \" description \": \" The selected time slot for the appointment as time in HH :MM - HH : MM format and date in DD / MM / YY format .\" } ], \" Required Parameters \": [ \" user_id \", \" symptoms \", \" specialist_id \", \" appointment_time_date \" ], \" Returns \": { \" type \": \" boolean \" , \" description \": \" Always true \" } }, { \" Name \": \" get_appointment_history \" , \" Description \": \" Retrieves the user ' appointment history for analysis and reminders .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" } ], \" Required Parameters \": [ \" user_id \" ], \" Returns \": { \" type \": \" array \", \" description \": \" Array containing past appointment records .\" } }, { \" Name \": \" retrieve_past_complaints \", \" Description \": \" Fetches the user ' past complaints matching the given symptoms for analysis and reference .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" symptoms \", \" type \": \" string \", \" default \": \" None \", \" description \": \" List of symptoms to search for in past complaints .\" }, { \" param_name \": \" date_range \" , \" type \": \" object \", \" default \": \" None \", \" description \": \" Optional date range \" Description \": \" Sends notification filter in the format { ' start_date ': ' YYYY -MM -DD ' , ' end_date ': ' YYYY -MM -DD '}.\" to the user \", \" Parameters \": [ { } ], \" Required Parameters \": [ \" user_id \", \" symptoms \" ], \" Returns \": { \" type \": \" array \", \" description \": \" Array of past complaints related to the specified symptoms .\" } }, { \" Name \": \" follow_up_with_user \", \" Description \": \" Initiates follow - up interaction with the user based on their past complaints and current symptoms .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" past_complaints \", \" type \": \" array \", \" default \": \"[]\" , \" description \": \" List of past complaints to reference during the follow - up .\" }, { \" param_name \": \" current_symptoms \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Current symptoms reported by the user .\" }, { \" param_name \": \" preferred_contact_method \", \" type \": \" string \", \" default \": \" None \", \" description \": \" User ' preferred method for follow - up (e.g., ' call ' , ' email ' , ' chat ') .\" } ], \" Required Parameters \": [ \" user_id \", \" current_symptoms \" ], \" Returns \": { \" type \": \" object \", \" description \": \" Details of the follow - up initiated , including method and next steps .\" } }, { \" Name \": \" notify_user \", \" param_name \": \" user_id \" , \" type \": \" string \" , \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" message \" , \" type \": \" string \" , \" default \": \" None \", \" description \": \" The notification message to send .\" } ], \" Required Parameters \": [ \" user_id \", \" message \" ], \" Returns \": { \" type \": \" boolean \", \" description \": \" Always returns status as True \" } }, { \" Name \": \" get_input_from_user \", \" Description \": \" Collects input from the user for specified parameters .\" , \" Parameters \": [ { \" param_name \": \" user_id \" , \" type \": \" string \" , \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" questions \", \" type \": \" string \" , \" default \": \"[]\" , \" description \": \" Question to ask the user .\" } ], \" Required Parameters \": [ \" user_id \", \" questions \" ], \" Returns \": { \" type \": \" string \" , \" description \": \" User ' response to the specified questions .\" } }, { \" Name \": \" store_symptoms \", \" Description \": \" Stores the symptoms reported by the user and initiates follow - up process to gather additional details for more accurate analysis .\" , \" Parameters \": [ { \" param_name \": \" user_id \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Unique identifier for the user .\" }, { \" param_name \": \" symptoms \", \" type \": \" string \", \" default \": \" None \", \" description \": \" Symptoms of user .\" }, { \" param_name \": \" timestamp \", \" type \": \" object \", \" default \": \" None \", \" description \": \" Save date and time of the event \", \" Required Parameters \": [ \" user_id \", \" symptoms \", \" timestamp \" ], \" Returns \": { \" type \": \" boolean \", \" description \": \" Status always true \" } } ] } ]"
        }
    ],
    "affiliations": [
        "Samsung Research Institute Bangalore, India"
    ]
}