{
    "paper_title": "CAMS: A CityGPT-Powered Agentic Framework for Urban Human Mobility Simulation",
    "authors": [
        "Yuwei Du",
        "Jie Feng",
        "Jian Yuan",
        "Yong Li"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Human mobility simulation plays a crucial role in various real-world applications. Recently, to address the limitations of traditional data-driven approaches, researchers have explored leveraging the commonsense knowledge and reasoning capabilities of large language models (LLMs) to accelerate human mobility simulation. However, these methods suffer from several critical shortcomings, including inadequate modeling of urban spaces and poor integration with both individual mobility patterns and collective mobility distributions. To address these challenges, we propose \\textbf{C}ityGPT-Powered \\textbf{A}gentic framework for \\textbf{M}obility \\textbf{S}imulation (\\textbf{CAMS}), an agentic framework that leverages the language based urban foundation model to simulate human mobility in urban space. \\textbf{CAMS} comprises three core modules, including MobExtractor to extract template mobility patterns and synthesize new ones based on user profiles, GeoGenerator to generate anchor points considering collective knowledge and generate candidate urban geospatial knowledge using an enhanced version of CityGPT, TrajEnhancer to retrieve spatial knowledge based on mobility patterns and generate trajectories with real trajectory preference alignment via DPO. Experiments on real-world datasets show that \\textbf{CAMS} achieves superior performance without relying on externally provided geospatial information. Moreover, by holistically modeling both individual mobility patterns and collective mobility constraints, \\textbf{CAMS} generates more realistic and plausible trajectories. In general, \\textbf{CAMS} establishes a new paradigm that integrates the agentic framework with urban-knowledgeable LLMs for human mobility simulation."
        },
        {
            "title": "Start",
            "content": "5 2 0 2 6 1 ] . [ 1 9 9 5 3 1 . 6 0 5 2 : r CAMS: CityGPT-Powered Agentic Framework for Urban Human Mobility Simulation Yuwei Du, Jie Feng, Jian Yuan, Yong Li Department of Electronic Engineering, BRNist, Tsinghua University, Beijing, China {fengjie,liyong07}@tsinghua.edu.cn"
        },
        {
            "title": "Abstract",
            "content": "Human mobility simulation plays crucial role in various real-world applications. Recently, to address the limitations of traditional data-driven approaches, researchers have explored leveraging the commonsense knowledge and reasoning capabilities of large language models (LLMs) to accelerate human mobility simulation. However, these methods suffer from several critical shortcomings, including inadequate modeling of urban spaces and poor integration with both individual mobility patterns and collective mobility distributions. To address these challenges, we propose CityGPT-Powered Agentic framework for Mobility Simulation (CAMS), an agentic framework that leverages the language based urban foundation model to simulate human mobility in urban space. CAMS comprises three core modules, including MobExtractor to extract template mobility patterns and synthesize new ones based on user profiles, GeoGenerator to generate anchor points considering collective knowledge and generate candidate urban geospatial knowledge using an enhanced version of CityGPT, TrajEnhancer to retrieve spatial knowledge based on mobility patterns and generate trajectories with real trajectory preference alignment via DPO. Experiments on real-world datasets show that CAMS achieves superior performance without relying on externally provided geospatial information. Moreover, by holistically modeling both individual mobility patterns and collective mobility constraints, CAMS generates more realistic and plausible trajectories. In general, CAMS establishes new paradigm that integrates the agentic framework with urban-knowledgeable LLMs for human mobility simulation."
        },
        {
            "title": "Introduction",
            "content": "Human mobility simulation is critical real-world task with widespread applications across many domains [27], such as supporting the implementation of the 15-minute city concept in urban development by modeling residents daily activities [45], optimizing transportation strategies through travel behavior simulation, and validating intervention policies in epidemic prevention and control. Given its significant value, the research community has studied this problem extensively for many years, resulting in range of effective solutions. Early efforts, such as mechanism-based models like TimeGeo [16], have gradually been supplementedand surpassedby recent deep learning approaches, such as MoveSim [9], ActSTD [43], and DSTPP [44] and on. Despite remarkable progress, key challenges remainparticularly concerning the spatial transferability of methods, as well as the controllability and interpretability of the generated mobility behaviors. To address these challenges, recent research has explored integrating LLMs into mobility simulation, leveraging their role-playing [13, 35, 12, 28], commonsense knowledge [25, 32, 7] and reasoning capabilities [38, 39] to achieve promising results. The most crucial and challenging aspect of applying LLMs to mobility simulation lies in effectively incorporating spatial information. Existing work [15, 31] has shown that simply utilizing general-purpose LLMs is insufficient for accurately Preprint. Under review. Figure 1: CAMS: CityGPT-powered Agentic framework for urban human Mobility Simulation, including MobExtractor, GeoGenerator and TrajEnhancer. understanding urban space. As result, studies such as CoPB [31] and LLM-Mob [37] have proposed specific mechanisms within their frameworks to mitigate this limitation and harness the strengths of LLMs for sequential modeling and reasoning. However, these approaches typically combine spatial knowledge and LLMs in relatively independent manner, fusing information in an ad hoc fashion. Moreover, spatial knowledge is often simplified to facilitate model comprehension, and the integration process remains largely unidirectional, lacking feedback-driven optimization or iterative reasoning updates. Recently, urban LLMs such as CityGPT [10] and LAMP [1] have emerged, directly enhancing general LLMs with urban spatial knowledge through post-training and achieving impressive results on geospatial tasks such as urban spatial knowledge question answering. In these works, they convert the urban spatial knowledge into the language format and train the general model to enhance the urban spatial knowledge. This progress offers new perspective on incorporating spatial knowledge into LLMs and enables deeper collaboration between spatial knowledge and spatial reasoning. In this paper, we propose an agentic mobility simulation framework, CAMS, built upon CityGPT, by integrating native urban spatial knowledge into the reasoning process of large language models, enabling more controllable, accurate, and generalizable human mobility simulation. CAMS comprises three core components that work in synergy to enable accurate and generalizable urban human mobility simulation. First, MobExtractor is designed to extract and summarize general mobility patterns from raw trajectory data, capturing diverse high-level behavioral regularities. Second, GeoGenerator leverages an enhanced version of CityGPT to generate synthetic mobility trajectories, using the activity sequence from MobExtractor as input, and incorporates rich geospatial knowledge into the mobility simulation process. Third, TrajEnhancer improves spatial-temporal consistency by aligning generated trajectories with real-world trajectory data through direct preference optimization, ensuring realism and coherence. Built upon this unified framework, multi-dimensional feedback mechanisms are naturally introduced to iteratively refine the mobility generation procedure, enhancing both the fidelity and adaptability of simulated human mobility. In summary, our contributions are: To the best of our knowledge, this work introduces the first agentic framework that integrates urban foundation model with rich geospatial knowledge and multi-dimensional feedback signals, embedding urban structure constraints into LLM reasoning for controllable and generalizable mobility simulation. 2 We propose dual-phase architecture that first condenses template users mobility patterns into compact linguistic representation, then generates synthetic patterns for new users through profile-aware feature fusion and variational encoding. Through geospatial information alignment and fine-grained urban geographic knowledge finetuning, we enhance CityGPTs capability to extract urban geospatial knowledge relevant to user profile and mobility patterns. Through iterated DPO training, we progressively enhance the spatiotemporal continuity of generated trajectories, strengthening the models ability to capture the intrinsic connections between mobility patterns and urban geospatial knowledge. Experimental results on real-world datasets show that the proposed CAMS framework, enhanced by incorporating an urban-knowledgeable large language model for geospatial reasoning and agentic simulation framework for mobility behavior reasoning, significantly outperforms existing methods in human mobility simulation."
        },
        {
            "title": "2 Methodology",
            "content": "In this paper, we propose CAMS, an agentic framework for generating trajectories in real urban spaces based on an urban-knowledgeable LLM, CityGPT [10]. To align with the existing spatial knowledge in LLM effectively, we express urban structure in hierarchical address system, which is similar to human spatial cognition [11]. In addition, we inject fine-grained urban mobility information into CityGPT to more thoroughly explore the information of each POI in urban space. The whole framework is shown in Figure 1, which comprises three central components: MobExtractor, GeoGenerator and TrajEnhancer. First, we present MobExtractor in section 2.1, which is designed to extract and synthesize mobility patterns in linguistic representations. Subsequently, we introduce the GeoGenerator capable of generating candidate urban geospatial knowledge related to user profile and mobility patterns in section 2.2. Finally, we detail the TrajEnhancer in section 2.3, which generates trajectories in real urban spaces via integrated reasoning, and enhance trajectory generation with aligning the real-world preference. 2.1 MobExtractor: Semantic Mobility Pattern Extraction from Raw Trajectory MobExtractor employs dual-phase architecture that first condenses template users mobility patterns into compact linguistic representation, then generates synthetic patterns for new users through profileaware feature fusion and variational encoding. User mobility patterns can be decomposed into shared generic patterns(common across populations) and special individual patterns(profile-specific variations). Data-driven approaches typically require massive high-quality trajectory datasets to effectively capture above mobility patterns, facing data scarcity problems. In contrast, LLM agents leverage their inherent knowledge to identify generic patterns by analyzing trajectories of small set of users, and synthesize individual patterns for other users through semantic profiling of user attributes. To enhance the models capability to identify mobility patterns, we employ two-step compression-recovery process in reconstruction stage. For test users, we employ an embedding-based method to synthesize movement patterns in generation stage. Mobility pattern recovery. As shown in Figure 1, in the mobility patterns reconstruction phase, the model learns high-level correlations between user profiles, semantic trajectory descriptions, and raw mobility patterns through dual-phase compression-reconstruction process. The model automatically distill observed patterns and correlations into interpretable natural language rules, including c1, c2 in compression stage and r1, r2 in reconstruction stage. Compression In compression stage, the model learns compression patterns that map raw trajectory data to user profile representations, i.e., (1) How to derive users behavioral habits and motivations by analyzing statistical patterns in their historical trajectories, (2) How to identify users mobility pattern from raw trajectory, habits, motivations and address information, (3) How to identify profile-influencing features from trajectory descriptions. Above compression patterns, denoted as c1 and c2, are preserved to guide the subsequent generation of r1 and r2. Reconstruction During reconstruction, the model acquires reconstruction patterns that map user profiles back to raw trajectories, i.e., (1) How to identify components most predictive of trajectory description from user profile based on key profile determinants identified in c1, (2) How to generate users raw trajectory from trajectory description and candidate POIs based on 3 c2. Above compression patterns, denoted as r1 and r2, are preserved to condition the trajectory generation process for new users. Mobility pattern generation. As shown in Figure 1, in the generation phase, the model generates mobility patterns for any users with only profile information. To enhance the models generalization capability, we retrieve the top most similar template users (training users) for each new user (test user). We compare following two strategies for retrieving similarity individuals. LLM-based: Use LLM to select the top most similar users based on semantic user profile characteristics, then directly output the ID and similarity score of each selected user. Embedding-based: Find similar users based on similarity scores of user profile embeddings[42]. First, we construct template user profile embedding matrix Etemplate Rmd, using the profiles of template users. Then we encode user profile of new user into an embedding e1d, computing cosine similarities simibetween e1d and Etemplate. Finally, we retrieve the top users with highest similarity scores. After acquiring similar users, we sequentially perform the following steps: (1) c1 Feature Fusion: Use LLM to integrate key profile factors and high-order mobility characteristics in c1 of the similar template users. (2) Trajectory Description Generation: Using the fused features, generate trajectory descriptions by referencing r1 and r2 in compression stage. (3) c2 Feature Fusion: Use LLM to integrate both the unique movement patterns and universal movement patterns in c2 of the similar template users. 2.2 GeoGenerator: Integrating Urban Geospatial Knowledge into Trajectory Generation This section describes how to generate candidate geospatial information related to user profiles and mobility patterns. To fully leverage urban geospatial knowledge, we employ CityGPT [10] as the foundation model for our agent framework, which possesses fine-grained urban spatial knowledge. Initially, Anchor Location Extractor generates critical anchor points based on user profiles, collective distributions, and geographic knowledge, which are then converted into intent-composed trajectories by incorporating mobility patterns extracted in the first stage. Subsequently, an enhanced CityGPT maps these intent-composed trajectories in real urban spaces. Finally, we employ further alignment CAMS with the real trajectory with the help of directly preference optimization (DPO) to further enhance the spatial continuity of generated trajectories. 2.2.1 Anchor Location Extractor The locations of homes and workplaces serve as the most important anchor points in human mobility trajectories, significantly shaped by individual user profiles and regional characteristics. To effectively identify these critical anchor locations, we propose two-step extraction method built upon the foundation of CityGPT. Macro-to-micro cascaded generation. We propose macro-to-micro cascaded generation system with iterative reasoning-execution-reflection cycles[41, 8] to progressively refine spatial distributions. First, we transfer coordinates of all homes and workplaces into hierarchical address representation, namely administrative area > subdistrict > street > POI. For regions in each hierarchy, we calculate user profile distributions and generate descriptive summaries. Then, from coarse (administrative area) to fine (street) spatial scales, the model hierarchically generates home/workplace assignments by propagating upper hierarchy outputs as contextual constraints for finer-grained reasoning. In reasoning stage, model consider descriptive summaries and geographical knowledge of child regions contained within each parent regions extent (upper hierarchy) and user profile characteristics. In execution stage, the model select region that best matches user profile characteristics guided by the reasoning stage. In reflection stage, the model performs periodic distribution-aware reflection. Finally, in POI spatial scale, the model directly generate the precise location of home/workplace. Reflection with collective distribution. We incorporate collective knowledge as feedback in reflection stage, progressively aligning generated results with distribution in real urban spaces. Upon completing execution stage of all users, we compute spatial distribution of generated locations. Then, in reflection stage, the model does comparative analysis against ground-truth distribution and adjusts generation strategies for subsequent iterations. Finally, in execution stage, model dynamically adjust individual output to minimize distributional divergence. 4 2.2.2 Urban Structure Mapper To generate the remaining location points in mobility trajectory beyond the two anchor locations (home and workplace), we introduce an Urban Structure Mapper (referred to as UrbanMapper). Given the anchor points and activity sequences, this module flexibly integrates urban spatial structure information to synthesize the remaining trajectory points. Enhancing CityGPT To demonstrate the effectiveness of urban spatial knowledge, UrbanMapper leverages CityGPT injected with fine-grained urban spatial knowledge to directly generate candidate locations based on current location, user profiles, mobility patterns and intention. To mitigate geographic hallucinations and improve spatial precision when generating specific location in real urban space, we augmented the knowledge embedded in CityGPT through fine-tuning with fine-grained urban spatial data. At finer granularity, we posit that urban space is composed of three fundamental elements: points (POIs), lines (streets), and polygons (AOIs)[6]. Among these, points (POIs) constitute the most basic building blocks, which also serve as the foundational components of trajectories. Therefore, we construct our training data based on POI-level granularity. To simulate human cognitive and exploratory processes in urban spaces, we generate navigation paths between population-weighted randomly sampled origin-destination (OD) POIs, recording all traversed POIs along the pathways, and subsequently identifying specified-category POIs within defined radius around each recorded waypoint. The radius is determined by the average jump distance between consecutive trajectory points and is correlated with the users mobility pattern, while the category is related to users intention at each time point. We construct fine-tuning dataset comprising 10,000 question-answer pairs, encompassing all POIs of specified categories within certain radius around every sampled POI. To activate the geospatial knowledge embedded in CityGPT, we enhance user profiles with address information to infer user approximate activity ranges in real urban spaces. Furthermore, we represent the geographic elements in datasets with semantically rich addresses rather than coordinates or grid-ID. We also investigate how different address representation formats impact the models comprehension of geographical information: (1) Hierarchical address representation: Use structured address hierarchies (e.g., adminsubdistrictstreetPOI) to guide the model in recalling location names and attributes within specific region, reducing hallucinations and generating more realistic, specific locations. (2) Human-intuitive geospatial representations: Leverage human-intuitive geospatial representations (e.g., 100 meters from the intersection of Road and Road C) to prompt the model to associate nearby locations and their attributes. Other alternative solutions. (1) Social Graph. To model the influence of social relationships, we propose graph-based method to provide candidate locations in real urban spaces. First, we construct global transition graph using all historical trajectory data from training users. Let = (V, E) be the undirected graph. For each edge eij E, the weight wij is computed as: wij = nij ij +ϵ , where nij dα means transition frequency between locations and j, while dα ij means network distance (Haversine distance). higher wij indicates greater transiting probability between two locations. Then, we identify similar users following the methodology proposed in section 2.1. Candidate locations for user to visit next are determined by the most likely next locations visited by similar users, which are reasoned on the graph. (2) Map Tools. To evaluate the effectiveness of commercial geospatial APIs, we construct mapping between intentions and location categories and get candidate locations for user to visit next through map queries. The radius and the mapping relationship are fixed regardless of variation of mobility patterns. 2.3 TrajEnhancer: Enhanced Trajectory Generation with Preference Alignment TrajEnhancer performs integrated reasoning by synthesizing the urban spatial knowledge generated in section 2.2 and mobility patterns extracted in section 2.1. It first generates daily activity plans for target users based on their profiles and mobility patterns, which consists of intentions and temporal constraints. Subsequently, it synthesizes realistic movement trajectories by holistically considering user profiles, mobility patterns, activity plans, anchors points, and urban geospatial knowledge. To enhance the spatiotemporal continuity of the model-generated trajectories, we apply iterated DPO training to further enrich the models urban geographic knowledge and enhance its ability to identify mobility patterns. We construct the training dataset using the corpus output by CAMS and Table 1: Basic information of the trajectory datasets Datasets Tencent ChinaMobile Duration City #Users #Trajectory Points October 1, 2019 December 31, 2019 Beijing 100,000 297,363, July 1, 2017 August 31, 2017 Beijing 1,246 4,163,651 corresponding individuals real trajectories. We execute multiple cycles of training deployment testing data collection retraining. Through these progressive multi-phase training iterations, we aim to progressively enhance CityGPTs comprehension of the relationship between user mobility patterns and the spatiotemporal attributes of trajectory points in real urban spaces, thereby fully activating its spatiotemporal reasoning ability for mobility simulation."
        },
        {
            "title": "3 Experiments",
            "content": "3.1 Experimental Setup Datasets We carry out experiment using two real-world mobility datasets, ChinaMobile and Tencent. The basic information of the datasets is shown in Table 1. To test CAMSs performance on public datasets, we employ open street maps road network data and AOI data along with global POI data from Foursquare to jointly represent urban spaces. This does not compromise the overall experimental results. This confirms the transferability of CAMS across different datasets, and can achieve reasonably good performance even on smaller, lower-quality datasets. Metrics. Following previous work [9, 31], we evaluate the quality of generated mobility data from three dimensions, including statistical evaluation, aggregation evaluation and semantics evaluation. We also use Toponym Valid Ratio (TVR) to measure geographic knowledge hallucination, and Composite Mean Reciprocal Rank (CMRR) to measure overall performance across all metrics. Individual evaluation. We calculate JensenShannon Divergence (JSDs) on the following metrics of per user: Distance, Radius, Step Interval (SI), Step Distance (SD) and Spatial-temporal Visits Distribution (STVD). Collective evaluation. We evaluate the quality of all generated data from collective perspective, calculating JSDs on following metric of all users: Frequently visited locations (FVLoc), which is defined as the overall distributions of top 40 most frequently visited locations across all users. Semantics evaluation. To evaluate the plausibility of generated mobility data, we map venue categories to user intents (e.g., Food dining) and compute JSDs on following category-related metrics at both individual and collective levels: Daily Activity Routine Distribution (DARD) and Activity Probability (ActProb). Hallucination evaluation. We define Toponym Valid Ratio (TVR), which is the ratio of valid generated toponyms to total generated toponyms, to assess the degree of hallucination in the models candidate geospatial knowledge generation. Comprehensive evaluation. To holistically assess model performance, we propose the Composite Mean Reciprocal Rank (CMRR) metric, computed through two-stage process: (1) calculating the reciprocal rank of each metric relative to all comparable models, then (2) computing the arithmetic mean of these reciprocal ranks across all metrics. Methods. We compared our model against several state-of-the-art approaches: three deep-learningbased models including ActSTD[43], DSTPP[44] and MoveSim[9], two LLM-based models including CoPB[31] and LLMob[37], and classic mechanistic model TimeGeo[16]. 3.2 Main Results 3.2.1 Mobility generation in real urban space We want to validate the models ability to generate geospatially accurate trajectories in real-world urban space using only minimal user profile data. To ensure fair comparison, for LLM-based models, we employ llama3.1-8b as LLM core, while removing all specific location names (except anchor Table 2: Performance comparison of mobility simulation methods across datasets. Best and secondbest results are highlighted in bold and underline, respectively. Generation Metrics Dataset Model CMRR Tencent ChinaMobile FVLoc ActProb Distance Radius SI SD DARD STVD TimeGeo ActSTD DSTPP MoveSim COPB LLMob CAMS TimeGeo ActSTD DSTPP MoveSim COPB LLMob CAMS 0.3671 0.3518 0.3115 0.3650 0.2744 0.5044 0.3213 0.3825 0.4025 0.3895 0.3776 0.2724 0.5130 0.2994 0.5915 0.6972 0.5236 0.2647 0.3907 0.3723 0.2769 0.6793 0.6900 0.6794 0.2413 0.2097 0.4198 0.1244 0.3053 0.2815 0.1599 0.3876 0.1997 0.5266 0. 0.4009 0.4577 0.3991 0.5117 0.2690 0.5387 0.1867 0.3267 0.1007 0.1589 0.3192 0.2394 0.1723 0.0517 0.5466 0.3400 0.2553 0.3810 0.1948 0.1690 0.0507 0.2312 0.6880 0.6880 0.2309 0.4131 0.1618 0.3362 0.5139 0.5749 0.5320 0.3720 0.4794 0.1207 0.2524 0.3414 0.0907 0.0308 0.1716 0.1915 0.0752 0. 0.3065 0.0452 0.0989 0.1063 0.2282 0.0839 0.0473 0.6972 0.6946 0.6863 0.4946 0.4089 0.4400 0.3832 0.5762 0.6891 0.6774 0.5264 0.4997 0.3976 0.3544 0.6899 0.6371 0.6742 0.5271 0.5660 0.6639 0.6540 0.6907 0.6947 0.6613 0.5775 0.5817 0.6585 0.6776 0.1798 0.2574 0.4458 0.4354 0.4146 0.3420 0. 0.1940 0.2673 0.2229 0.3479 0.4479 0.4003 0.7125 points) and manually extracted user-specific trajectory features from prompts; for deep-learning-based methods, we apply uniform time-interval interpolation to sparse trajectory points, and reduce training set size to 3 test set to simulate limited urban context. The experimental results demonstrate that CAMS exhibits more pronounced advantages in trajectory generation phase, achieving superior performance on 11 out of 16 metrics with the highest CMRR score. It performs exceptionally well on metrics related to spatial distributions (Distance, Radius, and SD), which can be attributed to its effective utilization of built-in urban spatial knowledge. Furthermore, CAMS maintains its leading performance on individual mobility pattern metrics (DARD), indicating its strong generalization capability to infer new users mobility patterns accurately based solely on profile information. The model also shows competitive results on collective distribution metrics (FVLoc, ActProb), suggesting its effective consideration of how trajectories with different user profiles distribute in real urban spaces. Compared to mobility recovery results , CAMS maintains consistent performance while other models experience significant performance degradation under limited input information, further highlighting its remarkable transfer learning capability in zero-shot scenarios. To demonstrate that CityGPT effectively captures the relationships between user profiles, mobility patterns, and trajectories in real urban spaces, we visualized the anchor points and single-day trajectory point distributions for different user profiles generated by the model in Figure 6. We conduct comparative analysis of trajectory points distribution characteristics across different user profiles generated by the model (see Appendix A.4 for details). 3.2.2 Semantic-based mobility recovery First we want to validate the effectiveness of MobExtractor. During compression, CAMS extracts the relationships between original trajectories and user profiles. In the reconstruction phase, these user profiles are utilized to reconstruct the original trajectories under the guidance of mobility patterns extracted from relationships. Lower Jensen-Shannon Divergence(JSD) scores between recovered trajectories and original trajectories indicates better performance of recovery stage of MobExtractor. The results of evaluating performance are detailed in Table 3. The results demonstrate that despite using only user profiles as external input, CAMS achieves superior performance on 7 of 16 metrics in both data sets, with particularly outstanding advantages in metrics evaluating individual mobility capability (Radius) and behavioral habits (DARD). CAMS also exhibits commendable performance in terms of spatial continuity within trajectories (Distance and SD). Comparative analysis revealed that LLMob performs best on features related to collective distribution and semantics (FVLoc) as well as individual routine patterns (SD), while MoveSim shows better results on metrics measuring collective distribution (FVLoc and ActProb). CAMS does not demonstrate significant advantages in these particular aspects. We attribute LLMobs strengths to its model architectures emphasis on its explicit incorporation of personal movement characteristics as external input, whereas MoveSims advantages stem from its inherent data-driven approach that better fits overall distributions. However, both methods underperform significantly compared to CAMS on metrics evaluating individual mobility behaviors in real urban spaces (Distance, Radius). This superior performance of CAMS 7 Table 3: Performance comparison of trajectory recovery methods across datasets. Best and secondbest results are highlighted in bold and underline, respectively. Recovery Metrics Dataset Model CMRR Tencent ChinaMobile FVLoc ActProb Distance Radius SI SD DARD STVD TimeGeo ActSTD DSTPP MoveSim COPB LLMob CAMS TimeGeo ActSTD DSTPP MoveSim COPB LLMob CAMS 0.3555 0.2007 0.1975 0.1966 0.1981 0.1213 0.3421 0.3766 0.2985 0.2136 0.1776 0.2677 0.1560 0.3055 0.6673 0.6737 0.3582 0.1647 0.3592 0.0891 0.2444 0.6862 0.6862 0.3722 0.1496 0.2287 0.1590 0. 0.1506 0.0841 0.1346 0.3176 0.1322 0.1822 0.2087 0.3779 0.4336 0.1570 0.3300 0.1415 0.1654 0.1339 0.2749 0.0581 0.2611 0.3189 0.2270 0.1330 0.0340 0.2908 0.2816 0.2705 0.2619 0.1948 0.0763 0.0717 0.2010 0.6880 0.3960 0.2009 0.3858 0.1618 0.2945 0.4517 0.5321 0.2941 0.4514 0.4735 0.1207 0. 0.3362 0.0606 0.0775 0.1315 0.1885 0.0630 0.0443 0.3057 0.0324 0.1537 0.0950 0.1945 0.0718 0.0484 0.6895 0.6910 0.4824 0.4456 0.3930 0.3961 0.2681 0.6874 0.6905 0.5692 0.4346 0.4790 0.3795 0.3248 0.6921 0.6746 0.4233 0.4141 0.5474 0.5923 0.6284 0.6845 0.6907 0.4350 0.4617 0.5474 0.6560 0. 0.1890 0.3494 0.2792 0.4045 0.3000 0.5563 0.5146 0.1619 0.2631 0.3708 0.4104 0.2917 0.5417 0.5563 can be attributed to its comprehensive consideration of the alignment between urban geographical knowledge and user mobility patterns. For instance, when analyzing low-income migrant worker with more constrained and fixed mobility patterns, the model preferentially considers workplace locations (areas with concentrated large factories), residential areas (neighborhoods with lower living costs), and nearby dining and entertainment venues during the generation process. Table 4: Performance comparison of different LLMs within the CAMS framework. Best and secondbest results are highlighted in bold and underline, respectively. Dataset Base Model Generation Metrics FVLoc ActProb Distance Radius SI SD DARD STVD TVR Tencent ChinaMobile LLaMA3.1-8B LLaMA3-70B Qwen2-72B Qwen3-235B GPT-4o-mini Gemma3-27B Mistral7Bv3 CityGPT LLaMA3.1-8B LLaMA3-70B Qwen2-72B Qwen3-235B GPT-4o-mini Gemma3-27B Mistral7Bv3 CityGPT 0.4315 0.4342 0.4119 0.4089 0.4119 0.3994 0.4089 0. 0.3992 0.4059 0.4027 0.3992 0.4027 0.3994 0.4059 0.2994 0.4649 0.3102 0.3421 0.2738 0.2499 0.3903 0.3547 0.2769 0.4434 0.4120 0.4414 0.5140 0.4493 0.3903 0.4344 0.1244 0.3109 0.2985 0.4384 0.3582 0.3753 0.4160 0.3064 0.2596 0.4045 0.3452 0.3770 0.4254 0.4894 0.4160 0.3806 0.1867 0.0920 0.0529 0.1028 0.1015 0.1143 0.0695 0.0811 0. 0.0640 0.0638 0.0618 0.0937 0.0714 0.0695 0.0913 0.0507 0.2751 0.2053 0.2128 0.2899 0.1874 0.1717 0.3101 0.3362 0.2521 0.2031 0.2164 0.2976 0.2802 0.1717 0.2035 0.2524 0.0883 0.0460 0.1072 0.1725 0.1218 0.0506 0.0980 0.0457 0.0731 0.0517 0.0479 0.0949 0.0630 0.0506 0.0822 0.0473 0.3810 0.2896 0.3203 0.3569 0.3046 0.3265 0.3574 0. 0.3987 0.3372 0.3525 0.3791 0.3689 0.3265 0.3608 0.3544 0.6672 0.6573 0.6601 0.6416 0.6624 0.6570 0.6677 0.6540 0.6788 0.6792 0.6780 0.6586 0.6644 0.6570 0.6821 0.6776 0.9570 0.9560 0.8420 0.8247 0.8672 0.8252 0.8854 1.0000 0.9684 0.9650 0.8535 0.8228 0.7836 0.8252 0.9007 1.0000 3.3 Ablation Studies In this section, we perform analysis on varying model designs to further demonstrate the rationality and effectiveness of the model design. We also compared the task performance of CityGPT with other open-source/closed-source LLMs, further demonstrating the effectiveness of CityGPT in providing user-relevant urban geospatial knowledge. Impact of reflection in Anchor Location Extractor. As we introduce in section 2.2, we incorporate collective knowledge as feedback in reflection stage of Anchor Location Extractor. By analysing recovery results in Table 6 and generation results in Figure 3, we observe that the reflective version consistently outperforms its non-reflective counterpart(w/o C) across all metrics. This improvement confirms that by integrating collective knowledge, the model can more accurately infer the relationship between user profiles and real-world urban spatial patterns, consequently generating trajectories that better align with actual urban mobility distributions. Impact of TrajEnhancer. We evaluate overall performance of trajectory enhancement module in Table 6. As visually confirmed in Figure 4b, there is an overall reduction in JSDs across successive DPO iterations, indicating that TrajEnhancer progressively enhances the spatiotemporal continuity 8 Figure 2: Methodological comparisons in UrbanMapper using Tencent dataset Figure 3: Ablation study on model designs(generation phase). (a) Variations in metrics (b) Overall performance (c) Trajectory visualization Figure 4: DPO result analysis of TrajEnhancer. of generated trajectories to approximate real-world mobility patterns. Variations of each metric are visualized in Figure 4a. Comparison of different methodologies in UrbanMapper. By comparing results of using CityGPTenhanced(CAMS-E), map tools(CAMS-M) and social networks(CAMS-S) in Figure 2, we find that CAMS-E outperforms other methods with visibly lower JSDs. This suggests that implicitly incorporating geographic knowledge in trajectory generation tasks is reasonable, and CityGPT offers greater advantages over traditional GIS tools and social relationships. Performance comparison between enhanced CityGPT and other LLMs. We test the performance of multiple open-source and closed-source LLMs in experimental scenarios. The results in Table 4 demonstrate that CityGPT, based on the Llama3.1-8B pre-trained model, can provide more authentic and fine-grained urban geospatial knowledge compared to other larger-parameter models. Additionally, CityGPT achieves the highest CMRR, indicating its superior ability to capture the connections between user profiles, mobility patterns and geospatial knowledge."
        },
        {
            "title": "4 Related Work\nMobility simulation. On the basis of macroscopic statistical laws [4, 30, 19], researchers proposed a\nseries of mobility simulation models to depict individual behavior mechanism [26, 33, 26, 16]. While\nthese mechanism models are concise but fail to capture complex human mobility patterns and model\nthe impact of urban structure. With the rapid development of deep learning, different model structures\nwere designed to model the complex dynamics of mobility behaviors [9, 21, 20]. However, these\ndeep learning methods face challenges of data sparsity, poor transferability and low explainability.",
            "content": "LLM for geospatial tasks. Since LLMs are geospatially knowledgeable [25, 3, 32], researchers pay attention to leverage LLM in geography and urban science field by solving domain-specific tasks like geospatial understanding tasks [5, 22, 29, 10] and geospatial prediction tasks [36, 2, 11, 14]. LLMs can achieve good results in global-scale or national-scale tasks with simple prompt engineering [23, 24] or trained linear layer [15]. However, when breaks down to city scale, well-designed agentic frameworks and fine-tuning approaches are required to enable LLMs to acquire urban structural knowledge [10, 1] and enhance task-specific performance via geospatial knowledge alignment. LLM for mobility simulation. With the successful application of LLM in geospatial tasks, researchers are exploring the potential of applying LLMs to human mobility simulation [34, 31, 37, 9 18, 17, 40]. They extract individual knowledge from the user profile and historical trajectories, then synthesize simulated data [37], map simulated data to real urban spaces using mechanistic models [31, 18], or generate real-world trajectories based on the given urban spatial information [34]. They perform well in few-shot scenarios and exhibit good transferability. However, they insufficiently model real urban structures, and fail to effectively capture collective mobility patterns."
        },
        {
            "title": "5 Conclusion",
            "content": "In this paper, we propose CAMS, an innovative agentic framework for generating realistic urban mobility trajectories by building upon CityGPT. CAMS utilizes urban foundation models inherent geospatial knowledge while incorporating advanced commonsense reasoning techniques to capture underlying movement patterns. We design MobExtractor that synthesize mobility patterns via semantic comprehension, encoding and feature fusion mechanisms. We develop GeoGenerator to enhance CityGPTs urban spatial intelligence, and TrajEnhancer to improve spatiotemporal continuity in trajectory generation. Extensive experiments on real-world trajectory datasets demonstrate the frameworks capability to directly generate realistic trajectories from new user profiles."
        },
        {
            "title": "References",
            "content": "[1] Pasquale Balsebre, Weiming Huang, and Gao Cong. Lamp: language model on the map. arXiv preprint arXiv:2403.09059, 2024. [2] Ciro Beneduce, Bruno Lepri, and Massimiliano Luca. Large language models are zero-shot next location predictors. arXiv preprint arXiv:2405.20962, 2024. [3] Prabin Bhandari, Antonios Anastasopoulos, and Dieter Pfoser. Are large language models geospatially knowledgeable? In Proceedings of the 31st ACM International Conference on Advances in Geographic Information Systems, pages 14, 2023. [4] Dirk Brockmann, Lars Hufnagel, and Theo Geisel. The scaling laws of human travel. Nature, 439(7075):462465, 2006. [5] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:18771901, 2020. [6] Nicola Dempsey, Caroline Brown, Shibu Raman, Sergio Porta, Mike Jenks, Colin Jones, and Glen Bramley. Elements of urban form. Dimensions of the sustainable city, pages 2151, 2010. [7] Jingtao Ding, Yunke Zhang, Yu Shang, Yuheng Zhang, Zefang Zong, Jie Feng, Yuan Yuan, Hongyuan Su, Nian Li, Nicholas Sukiennik, et al. Understanding world or predicting future? comprehensive survey of world models. arXiv preprint arXiv:2411.14499, 2024. [8] Yuwei Du, Jie Feng, Jie Zhao, and Yong Li. Trajagent: An agent framework for unified trajectory modelling. arXiv preprint arXiv:2410.20445, 2024. [9] Jie Feng, Zeyu Yang, Fengli Xu, Haisu Yu, Mudan Wang, and Yong Li. Learning to simulate In Proceedings of the 26th ACM SIGKDD international conference on human mobility. knowledge discovery & data mining, pages 34263433, 2020. [10] Jie Feng, Tianhui Liu, Yuwei Du, Siqi Guo, Yuming Lin, and Yong Li. Citygpt: Empowering urban spatial cognition of large language models. arXiv preprint arXiv:2406.13948, 2024. [11] Jie Feng, Yuwei Du, Jie Zhao, and Yong Li. Agentmove: large language model based agentic framework for zero-shot next location prediction. In Proceedings of the 2025 Conference of the Nations of the Americas Chapter of the Association for Computational Linguistics: Human Language Technologies (Volume 1: Long Papers), pages 13221338, 2025. [12] Chen Gao, Xiaochong Lan, Zhihong Lu, Jinzhu Mao, Jinghua Piao, Huandong Wang, Depeng Jin, and Yong Li. S3: Social-network simulation system with large language model-empowered agents. arXiv preprint arXiv:2307.14984, 2023. [13] Chen Gao, Xiaochong Lan, Nian Li, Yuan Yuan, Jingtao Ding, Zhilun Zhou, Fengli Xu, and Yong Li. Large language models empowered agent-based modeling and simulation: survey and perspectives. Humanities and Social Sciences Communications, 11(1):124, 2024. [14] Letian Gong, Yan Lin, Yiwen Lu, Xuedi Han, Yichen Liu, Shengnan Guo, Youfang Lin, Huaiyu Wan, et al. Mobility-llm: Learning visiting intentions and travel preference from human mobility data with large language models. Advances in Neural Information Processing Systems, 37: 3618536217, 2024. [15] Wes Gurnee and Max Tegmark. Language models represent space and time. arXiv preprint arXiv:2310.02207, 2023. [16] Shan Jiang, Yingxiang Yang, Siddharth Gupta, Daniele Veneziano, Shounak Athavale, and Marta González. The timegeo modeling framework for urban mobility without travel surveys. Proceedings of the National Academy of Sciences, 113(37):E5370E5378, 2016. [17] Song Jiang, Da JU, Andrew Cohen, Sasha Mitts, Aaron Foss, Justine Kao, Xian Li, and Yuandong Tian. Towards full delegation: Designing ideal agentic behaviors for travel planning. arXiv preprint arXiv:2411.13904, 2024. [18] Xuchuan Li, Fei Huang, Jianrong Lv, Zhixiong Xiao, Guolong Li, and Yang Yue. Be more real: Travel diary generation using llm agents and individual profiles. arXiv preprint arXiv:2407.18932, 2024. [19] Xiao Liang, Xudong Zheng, Weifeng Lv, Tongyu Zhu, and Ke Xu. The scaling of human mobility by taxis is exponential. Physica A: Statistical Mechanics and its Applications, 391(5): 21352144, 2012. [20] Kang Liu, Xin Jin, Shifen Cheng, Song Gao, Ling Yin, and Feng Lu. Act2loc: synthetic trajectory generation method by combining machine learning and mechanistic models. International Journal of Geographical Information Science, 38(3):407431, 2024. [21] Qingyue Long, Huandong Wang, Tong Li, Lisi Huang, Kun Wang, Qiong Wu, Guangyu Li, Yanping Liang, Li Yu, and Yong Li. Practical synthetic human trajectories generation based on variational point processes. In Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, pages 45614571, 2023. [22] Gengchen Mai, Weiming Huang, Jin Sun, Suhang Song, Deepak Mishra, Ninghao Liu, Song Gao, Tianming Liu, Gao Cong, Yingjie Hu, et al. On the opportunities and challenges of foundation models for geospatial artificial intelligence. arXiv preprint arXiv:2304.06798, 2023. [23] Rohin Manvi, Samar Khanna, Gengchen Mai, Marshall Burke, David Lobell, and Stefano Ermon. Geollm: Extracting geospatial knowledge from large language models. arXiv preprint arXiv:2310.06213, 2023. [24] Rohin Manvi, Samar Khanna, Marshall Burke, David Lobell, and Stefano Ermon. Large language models are geographically biased. arXiv preprint arXiv:2402.02680, 2024. [25] OpenAI. Introducing chatgpt. https://openai.com/blog/chatgpt/, 2022. [26] Luca Pappalardo and Filippo Simini. Data-driven generation of spatio-temporal routines in human mobility. Data Mining and Knowledge Discovery, 32(3):787829, 2018. [27] Luca Pappalardo, Ed Manley, Vedran Sekara, and Laura Alessandretti. Future directions in human mobility science. Nature computational science, 3(7):588600, 2023. [28] Jinghua Piao, Yuwei Yan, Jun Zhang, Nian Li, Junbo Yan, Xiaochong Lan, Zhihong Lu, Zhiheng Zheng, Jing Yi Wang, Di Zhou, et al. Agentsociety: Large-scale simulation of llmdriven generative agents advances understanding of human behaviors and society. arXiv preprint arXiv:2502.08691, 2025. [29] Jonathan Roberts, Timo Lüddecke, Sowmen Das, Kai Han, and Samuel Albanie. Gpt4geo: How language model sees the worlds geography. arXiv preprint arXiv:2306.00020, 2023. 11 [30] Camille Roth, Soong Moon Kang, Michael Batty, and Marc Barthélemy. Structure of urban movements: polycentric activity and entangled hierarchical flows. PloS one, 6(1):e15923, 2011. [31] Chenyang Shao, Fengli Xu, Bingbing Fan, Jingtao Ding, Yuan Yuan, Meng Wang, and Yong Li. Beyond imitation: Generating human mobility from context-aware reasoning with large language models. arXiv e-prints, pages arXiv2402, 2024. [32] Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288, 2023. [33] Jianying Wang, Lei Dong, Ximeng Cheng, Weijun Yang, and Yu Liu. An extended exploration and preferential return model for human mobility simulation at individual and collective levels. Physica A: Statistical Mechanics and Its Applications, 534:121921, 2019. [34] Jiawei Wang, Renhe Jiang, Chuang Yang, Zengqing Wu, Ryosuke Shibasaki, Noboru Koshizuka, Chuan Xiao, et al. Large language models as urban residents: An llm agent framework for personal mobility generation. Advances in Neural Information Processing Systems, 37:124547 124574, 2024. [35] Lei Wang, Chen Ma, Xueyang Feng, Zeyu Zhang, Hao Yang, Jingsen Zhang, Zhiyuan Chen, Jiakai Tang, Xu Chen, Yankai Lin, et al. survey on large language model based autonomous agents. Frontiers of Computer Science, 18(6):186345, 2024. [36] Xinglei Wang, Meng Fang, Zichao Zeng, and Tao Cheng. Where would go next? large language models as human mobility predictors. arXiv preprint arXiv:2308.15197, 2023. [37] Yiding Wang, Yuxuan Chen, Fangwei Zhong, Long Ma, and Yizhou Wang. Simulating humanlike daily activities with desire-driven autonomy. arXiv preprint arXiv:2412.06435, 2024. [38] Jason Wei, Yi Tay, Rishi Bommasani, Colin Raffel, Barret Zoph, Sebastian Borgeaud, Dani Yogatama, Maarten Bosma, Denny Zhou, Donald Metzler, et al. Emergent abilities of large language models. arXiv preprint arXiv:2206.07682, 2022. [39] Fengli Xu, Qianyue Hao, Zefang Zong, Jingwei Wang, Yunke Zhang, Jingyi Wang, Xiaochong Lan, Jiahui Gong, Tianjian Ouyang, Fanjin Meng, et al. Towards large reasoning models: survey of reinforced reasoning with large language models. arXiv preprint arXiv:2501.09686, 2025. [40] Yuwei Yan, Qingbin Zeng, Zhiheng Zheng, Jingzhe Yuan, Jie Feng, Jun Zhang, Fengli Xu, and Yong Li. Opencity: scalable platform to simulate urban activities with massive llm agents. arXiv preprint arXiv:2410.21286, 2024. [41] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. In International Conference on Learning Representations (ICLR), 2023. [42] Xiaoyan Yu, Tongxu Luo, Yifan Wei, Fangyu Lei, Yiming Huang, Hao Peng, and Liehuang Zhu. Neeko: Leveraging dynamic lora for efficient multi-character role-playing agent. arXiv preprint arXiv:2402.13717, 2024. [43] Yuan Yuan, Jingtao Ding, Huandong Wang, Depeng Jin, and Yong Li. Activity trajectory generation via modeling spatiotemporal dynamics. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, pages 47524762, 2022. [44] Yuan Yuan, Jingtao Ding, Chenyang Shao, Depeng Jin, and Yong Li. Spatio-temporal diffusion point processes. In Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, pages 31733184, 2023. [45] Yu Zheng, Yuming Lin, Liang Zhao, Tinghai Wu, Depeng Jin, and Yong Li. Spatial planning of urban communities via deep reinforcement learning. Nature Computational Science, 3(9): 748762, 2023."
        },
        {
            "title": "A Appendix",
            "content": "A.1 Data preprocessing Trajectory data preprocessing Among the 100,000 users in the Tencent dataset, 44,313 users have both complete user profiles and accurate coordinates for their home and workplace. We conduct Collective Knowledge Extractor experiment using this subset of data. For each mobility dataset, we select the top 150 users with the highest average daily trajectory points for Geographic Knowledge Extraction, among which we randomly assign 100 users for trajectory recovery and the remaining 50 users for trajectory generation. We utilize the top 1,500 users with relatively higher average daily trajectory points for Individual Knowledge Extractor. We aligned the private dataset with public datasets by replacing the private datasets urban elements (including AOIs, POIs and roads) with relevant elements in OSM and Foursquare. Notably, while the aligned mobility dataset becomes sparser, this does not compromise the overall experimental results. This confirms the transferability of CAMS accross different datasets, and can achieve reasonably good performance even on smaller, lower-quality datasets. DPO training data construction We construct the training dataset using the corpus output by CAMS. We employ Qwen2-72B, large language model primarily trained on Chinese corpora, to extract mobility patterns while leveraging CityGPT for urban geographical knowledge. Our experimental setup involves 300 training users and 1200 test users, with all textual outputs from CAMS being collected for analysis. Using Qwen2.5-72B, we evaluate the quality of mobility pattern extraction from this corpus by assigning quality scores on 0-10 scale, where we select textual outputs scoring above 5 as negative samples while using the corresponding individuals real trajectories as positive samples for our training data construction. A.2 Baselines Deep-learning-based models (1) ActSTD[43]: It adopts GAIL framework, combining continuous spatio-temporal dynamics modeling with generative adversarial training to generate mobility data. (2) DSTPP[44]: It employs diffusion model to learn the joint spatio-temporal distribution, incorporating spatio-temporal co-attention module for modeling Spatio-Temporal Point Processes (STPP). (3) MoveSim[9]: It adopts generative-adversarial framework in which the generator utilizes self-attention-based sequence modeling network to capture temporal transitions and the discriminator distinguishes synthetic trajectories by incorporating key mobility patterns. LLM-based models (1) CoPB[31]: It leverages LLM to infer mobility-related habits and motivations from user profiles, then apply mechanistic models to map these patterns to real urban spaces. (2)LLMob[37] : It derives mobility patterns from predefined trajectory features using LLM, then selects positive/negative training samples from historical mobility data for adversarial learning. Mechanistic model (1) TimeGeo[16]: It uses statistical methods to model temporal patterns while leveraging the r-EPR mechanism to model spatial patterns of user mobility data. A.3 Ablation studies The hierarchical address representation is designed to activate geographic knowledge in CityGPT by associating location names with their attributes across defined regional hierarchies, resulting in generating more accurate locations with reduced hallucinations. In comparison, the human-centric address representation directly prompt the model to recall neighborhood geographic information from the training corpus. Results in Table 7 demonstrate that the second one performs better, likely because training corpus of CityGPT has been pre-aligned with OSM data. A.4 Generated mobility patterns of different user profiles We compared the distributions of anchor points and trajectory points generated by the model for three types of user profiles in Figure 6. The first row in the left panel represents to the user profiles of 20-year-old, moderately-income male with bachelors degree working as an IT engineer(Profile 0). Generated work locations (Figure 5b)of this group show higher degree of clustering in city 13 Table 5: Performance comparison of different LLMs in trajectory recovery within the CAMS framework. Best and second-best results are highlighted in bold and underline, respectively. Dataset Base Model Recovery Tencent ChinaMobile FVLoc ActProb Distance Radius SI SD DARD STVD TVR LLaMA3.1-8B LLaMA3-70B Qwen2-72B Qwen3-235B GPT-4o-mini Gemma3-27B Mistral7Bv3 CityGPT-E LLaMA3.1-8B LLaMA3-70B Qwen2-72B Qwen3-235B GPT-4o-mini Gemma3-27B Mistral7Bv3 CityGPT-E 0.3468 0.4468 0.4421 0.4468 0.4468 0.4468 0.4468 0.3421 0.3176 0.4118 0.4118 0.4118 0.4118 0.4118 0.4118 0.3055 0.2776 0.3180 0.3567 0.3152 0.3682 0.3134 0.2799 0. 0.3964 0.3826 0.4025 0.4242 0.4666 0.4752 0.5327 0.3664 0.1913 0.1770 0.2177 0.1646 0.2737 0.3243 0.2273 0.2087 0.2930 0.2746 0.3616 0.2852 0.3737 0.3390 0.2345 0.1339 0.0362 0.0529 0.0785 0.0687 0.1022 0.0887 0.0639 0.0340 0.0987 0.0753 0.1050 0.0770 0.1285 0.0871 0.0876 0.0717 0.3070 0.1697 0.1682 0.2819 0.1650 0.1637 0.2030 0. 0.2400 0.1953 0.2190 0.3615 0.2175 0.1684 0.2598 0.3464 0.0794 0.0383 0.0881 0.0895 0.1038 0.0964 0.0865 0.0443 0.0612 0.0501 0.0864 0.0564 0.0803 0.0883 0.0665 0.0484 0.3300 0.2684 0.2848 0.3255 0.2628 0.2789 0.2886 0.2681 0.3760 0.3333 0.3373 0.4550 0.3276 0.3346 0.3582 0.3248 0.6774 0.6310 0.6091 0.6178 0.6170 0.5967 0.6265 0. 0.6769 0.6615 0.6535 0.6595 0.6468 0.6480 0.6488 0.6601 0.9697 0.9541 0.8224 0.9040 0.7844 0.8477 0.9035 1.0000 0.9815 0.9690 0.8306 0.9310 0.8561 0.8436 0.9164 1.0000 Table 6: Performance comparison of different methodology variants in UrbanMapper. Best and second-best results are highlighted in bold and underline, respectively. Recovery Metrics Dataset Variant Tencent ChinaMobile FVLoc ActProb Distance Radius SI SD DARD STVD CAMS-E CAMS-E w/o CAMS-E w/o CAMS-E w/o I&C CAMS-M CAMS-M w/o CAMS-M w/o CAMS-M w/o I&C CAMS-S CAMS-S w/o CAMS-S w/o CAMS-S w/o I&C CAMS-E CAMS-E w/o CAMS-E w/o CAMS-E w/o I&C CAMS-M CAMS-M w/o CAMS-M w/o CAMS-M w/o I&C CAMS-S CAMS-S w/o CAMS-S w/o CAMS-S w/o I&C 0.3421 0.3761 0.3421 0.3421 0.3680 0.3421 0.3468 0.3568 0.3421 0.3421 0.3421 0.3468 0.3055 0.3055 0.3118 0.3118 0.3055 0.3118 0.3055 0.3118 0.3055 0.3055 0.3118 0.3055 0.2444 0.2721 0.3721 0.3887 0.2458 0.3108 0.3248 0.3794 0.2136 0.3240 0.3504 0. 0.3664 0.3784 0.3771 0.3742 0.3780 0.3971 0.4141 0.4100 0.3687 0.3869 0.4006 0.3926 0.2087 0.2285 0.1995 0.1563 0.1838 0.1828 0.1735 0.1746 0.1699 0.2058 0.1655 0.1783 0.1339 0.2162 0.1956 0.2117 0.1468 0.1934 0.2122 0.1846 0.1669 0.1795 0.1713 0.2303 0.0340 0.0688 0.0267 0.0660 0.0266 0.0790 0.0469 0.0305 0.0195 0.0412 0.0596 0.0790 0.0717 0.0975 0.0676 0.0654 0.0340 0.0704 0.0454 0.0874 0.0601 0.0775 0.0377 0.0871 0.2945 0.3431 0.2985 0.3342 0.3215 0.2963 0.2722 0.3147 0.3790 0.3001 0.2655 0. 0.3464 0.3330 0.3207 0.3500 0.3106 0.3482 0.3198 0.3643 0.2896 0.2973 0.3081 0.3371 0.0443 0.0614 0.0229 0.0377 0.0334 0.0390 0.0330 0.0467 0.0378 0.0435 0.0513 0.0543 0.0484 0.0592 0.0451 0.0490 0.0633 0.0532 0.0396 0.0796 0.0578 0.0567 0.0643 0.0708 0.2681 0.2814 0.3221 0.3166 0.3066 0.3271 0.3150 0.2937 0.3161 0.3178 0.3115 0.3151 0.3248 0.3393 0.3693 0.3792 0.3526 0.3592 0.3574 0.3336 0.3409 0.3427 0.3717 0.3766 0.6284 0.6365 0.6219 0.6448 0.6250 0.6478 0.6265 0.6283 0.6301 0.6269 0.6259 0. 0.6601 0.6753 0.6437 0.6501 0.6550 0.6594 0.6526 0.6546 0.6622 0.6643 0.6572 0.6524 Table 7: Performance comparison of human vs. hierarchical address types in recovery and generation tasks. Best results for each metric are highlighted in bold. Dataset Task Address Type Performance Metrics Loc Prob Dist Rad SI DailyLoc SD DARD STVD Tencent ChinaMobile Recovery Generation Recovery Generation Human Hierarchical Human Hierarchical Human Hierarchical Human Hierarchical 0.3421 0.3420 0.3148 0.3089 0.3118 0.3118 0.3059 0.2992 0.3383 0. 0.3611 0.3840 0.3872 0.4648 0.3317 0.3586 0.2728 0.2852 0.3687 0.4577 0.2942 0. 0.3807 0.3251 0.1212 0.1004 0.1533 0.1283 0.0691 0.0986 0.0778 0.0767 0.4479 0. 0.4566 0.4690 0.3054 0.4945 0.4624 0.4789 0.1803 0.1397 0.1687 0.1975 0.1217 0. 0.0980 0.1497 0.0578 0.0779 0.0845 0.1114 0.0619 0.0587 0.0767 0.0909 0.3849 0. 0.3931 0.4092 0.3935 0.4143 0.3757 0.3888 0.6391 0.6336 0.6533 0.6512 0.6400 0. 0.6591 0.6614 14 (a) Home (b) Workplace (c) Trajectory Figure 6: Comparison of Mobility patterns in real urban spaces of different user profiles. Figure 5: Comparison of daily movement patterns Table 8: Performance comparison of embedding-based vs. LLM-based similarity methods in trajectory generation. Best results for each metric are highlighted in bold. Dataset Similarity Method Generation Metrics Loc Prob Dist Rad SI SD DARD STVD Tencent ChinaMobile Embedding LLM Embedding LLM 0.3148 0. 0.3118 0.2992 0.3611 0.3474 0.3872 0.4792 0.3687 0.3950 0.2942 0.3701 0.1533 0. 0.0691 0.0794 0.4566 0.4679 0.5054 0.4766 0.0845 0.0650 0.0619 0.0616 0.3931 0. 0.3935 0.4156 0.6533 0.6583 0.6400 0.6546 centers compared to their residential locations(Figure 5a), and the overall trajectory point distribution is relatively dispersed(Figure 5c), suggesting that they tend to reside in suburban areas to reduce living costs, while working in IT-related companies concentrated in urban centers. The second row corresponds to young females in Finance/Accounting/Auditing/Tax/Cashier with bachelors degree and moderate income(Profile 1). Generated workplaces and residences of Profile 1 cluster around major corporate hubs, suggesting that they often work in larger companies and rent apartments nearby their workplaces. The third row represents middle-aged males in Network Sales/Operations/Services with bachelors degree and moderate income(Profile 2).Compared to the previous two user types, the trajectories generated for Profile 2 appear more scattered and irregular, demonstrating less regular mobility patterns, as they may travel more frequently for business."
        }
    ],
    "affiliations": [
        "Department of Electronic Engineering, BRNist, Tsinghua University, Beijing, China"
    ]
}