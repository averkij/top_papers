{
    "paper_title": "MotionGS: Exploring Explicit Motion Guidance for Deformable 3D Gaussian Splatting",
    "authors": [
        "Ruijie Zhu",
        "Yanzhe Liang",
        "Hanzhi Chang",
        "Jiacheng Deng",
        "Jiahao Lu",
        "Wenfei Yang",
        "Tianzhu Zhang",
        "Yongdong Zhang"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Dynamic scene reconstruction is a long-term challenge in the field of 3D vision. Recently, the emergence of 3D Gaussian Splatting has provided new insights into this problem. Although subsequent efforts rapidly extend static 3D Gaussian to dynamic scenes, they often lack explicit constraints on object motion, leading to optimization difficulties and performance degradation. To address the above issues, we propose a novel deformable 3D Gaussian splatting framework called MotionGS, which explores explicit motion priors to guide the deformation of 3D Gaussians. Specifically, we first introduce an optical flow decoupling module that decouples optical flow into camera flow and motion flow, corresponding to camera movement and object motion respectively. Then the motion flow can effectively constrain the deformation of 3D Gaussians, thus simulating the motion of dynamic objects. Additionally, a camera pose refinement module is proposed to alternately optimize 3D Gaussians and camera poses, mitigating the impact of inaccurate camera poses. Extensive experiments in the monocular dynamic scenes validate that MotionGS surpasses state-of-the-art methods and exhibits significant superiority in both qualitative and quantitative results. Project page: https://ruijiezhu94.github.io/MotionGS_page"
        },
        {
            "title": "Start",
            "content": "4 2 0 2 0 1 ] . [ 1 7 0 7 7 0 . 0 1 4 2 : r MotionGS: Exploring Explicit Motion Guidance for Deformable 3D Gaussian Splatting Ruijie Zhu Yanzhe Liang Hanzhi Chang Wenfei Yang Tianzhu Zhang Jiacheng Deng Yongdong Zhang Jiahao Lu University of Science and Technology of China {ruijiezhu, yzliang, changhz, dengjc, lujiahao}@mail.ustc.edu.cn, {yangwf, tzzhang, zhyd73}@ustc.edu.cn"
        },
        {
            "title": "Abstract",
            "content": "Dynamic scene reconstruction is long-term challenge in the field of 3D vision. Recently, the emergence of 3D Gaussian Splatting has provided new insights into this problem. Although subsequent efforts rapidly extend static 3D Gaussian to dynamic scenes, they often lack explicit constraints on object motion, leading to optimization difficulties and performance degradation. To address the above issues, we propose novel deformable 3D Gaussian splatting framework called MotionGS, which explores explicit motion priors to guide the deformation of 3D Gaussians. Specifically, we first introduce an optical flow decoupling module that decouples optical flow into camera flow and motion flow, corresponding to camera movement and object motion respectively. Then the motion flow can effectively constrain the deformation of 3D Gaussians, thus simulating the motion of dynamic objects. Additionally, camera pose refinement module is proposed to alternately optimize 3D Gaussians and camera poses, mitigating the impact of inaccurate camera poses. Extensive experiments in the monocular dynamic scenes validate that MotionGS surpasses state-of-the-art methods and exhibits significant superiority in both qualitative and quantitative results. Project page: https://ruijiezhu94.github.io/MotionGS_page/."
        },
        {
            "title": "Introduction",
            "content": "Dynamic scene reconstruction aims to model the 3D structure and appearance of time-evolving scenes, enabling novel-view synthesis at arbitrary timestamps. It is crucial task in the field of 3D computer vision, attracting widespread attention from the research community and finding important applications in areas such as virtual/augmented reality and 3D content production. In comparison to static scene reconstruction, dynamic scene reconstruction remains longstanding open challenge due to the difficulties arising from motion complexity and topology changes. In recent years, plethora of dynamic scene reconstruction methods [1, 2, 3, 4, 5, 6, 7, 8] have been proposed based on Neural Radiance Fields (NeRF) [9], driving rapid advancements in this field. While these methods exhibit impressive visual quality, their substantial computational overhead impedes their applications in real-time scenarios. Recently, novel approach called 3D Gaussian Splatting (3DGS) [10], has garnered widespread attention in the research community. By introducing explicit 3D Gaussian representation and efficient CUDA-based rasterizer, 3DGS has achieved unprecedented high-quality novel-view synthesis with real-time rendering. Subsequent methods [11, 12, 13, 14, 15, 16, 17] rapidly extend 3DGS to dynamic scenes, also named 4D scenes. Initially, D-3DGS [11] Equal contribution 38th Conference on Neural Information Processing Systems (NeurIPS 2024). (a) Gaussian flow under different supervision. We model Gaussian flow under the Figure 1: supervision of optical flow and motion flow respectively. The latter can produce more direct description of object motion, thereby effectively guiding the deformation of 3D Gaussians. (b) The decoupling of optical flow. We decouple the optical flow into motion flow which is only related to object motion and camera flow which is only related to camera motion. proposes to iteratively reconstruct the scene frame by frame, but it incurs significant memory overhead. The more straightforward approaches [13, 17] utilize deformation field to simulate the motion of objects by moving the 3D Gaussians to their corresponding positions at different time steps. Besides, some methods [12, 18] do not independently model motion but treat space-time as whole to optimize. While these methods effectively extend 3DGS to dynamic scenes, they rely solely on appearance to supervise dynamic scene reconstruction, lacking explicit motion guidance on Gaussian deformation. When object motion is irregular (e.g., sudden movements), the model may encounter optimization difficulties and fall into local optima. Based on the above discussions, we argue that explicit motion guidance is indispensable for the deformation of 3D Gaussians. Benefiting from the advancements in optical flow estimation [19, 20], natural solution is to utilize an off-the-shelf optical flow network to provide 2D motion priors [21, 22]. However, the formation of optical flow is affected by both camera motion and object motion, which is not conducive to explicit modeling of object motion. Therefore, it is necessary to separate the optical flow related only to the moving object (i.e., motion flow) to guide Gaussian deformation more efficiently. As shown in Figure 1(a), directly using optical flow (column 2) to supervise the Gaussian deformation will inevitably include the contribution of static objects to the optical flow, while using motion flow as supervision (column 3) can easily avoid this. Besides, the estimated camera pose in dynamic scenes is not always accurate. Due to the lack of geometric consistency between adjacent frames for moving objects, using point correspondences on dynamic objects to calculate the camera pose can lead to erroneous offsets, thereby affecting the optimization of 3DGS. To address the above issues, we propose novel deformable 3D Gaussian Splatting framework called MotionGS, which explicitly constrains the deformation of 3D Gaussians by extracting the motion priors from optical flow. Our method includes an optical flow decoupling module and camera pose refinement module. In the optical flow decoupling module, we decouple the 2D optical flow into camera flow and motion flow, as shown in Figure 1(b). The camera flow comes from the camera ego-motion, while the motion flow comes from the motion of dynamic objects. We use the motion flow to directly constrain the deformation of 3D Gaussians (i.e., Gaussian flow). Since the calculation of Gaussian flow is directly implemented in the CUDA-based rasterizer, this process is differentiable and efficient. In the camera pose refinement module, we first fix the 3D Gaussians and then utilize photometric consistency loss to backpropagate gradients to camera poses, thereby alternately optimizing 3D Gaussians and camera poses to further enhance the rendering quality. To sum up, our main contributions are as follows: We propose novel deformable 3D Gaussian framework called MotionGS, which provides explicit motion guidance for deformable 3DGS and achieves high-quality dynamic scene reconstruction with real-time rendering. The proposed optical flow decoupling module effectively separates the flow caused solely by object motion, thereby efficiently supervising the deformation of 3D Gaussians. The proposed pose refinement module alternately optimizes 3DGS and camera poses, reducing reliance on accurate camera poses and further boosting rendering quality. Extensive experiments have demonstrated the effectiveness of the proposed method. Results on the NeRF-DS and HyperNeRF datasets validate the state-of-the-art performance of our approach in dynamic scene reconstruction."
        },
        {
            "title": "2 Related Work",
            "content": "2.1 Novel-View Synthesis (NVS) Novel view synthesis has been hot research topic in the field of computer vision and graphics in recent years. NeRF [9], which represents 3D scene by neural radiance fields, first achieves highresolution photorealistic results in this field. Despite many subsequent works [23, 24, 25, 26, 27, 28, 29, 30, 31] have been proposed to improve its efficiency and quality, NeRF-based methods still struggle to render high-quality images with real-time rendering speed. Recently, by modeling 3D scenes using set of anisotropic 3D Gaussian with an efficient rasterizer, 3D Gaussian Splatting (3DGS) [10] has shown remarkable performance with real-time rendering. Compared to NeRF, 3DGS is an explicit 3D scene representation method with better scalability and editability. Therefore, it has been rapidly extended to other 3D vision tasks, including sparse-view reconstruction [32, 33, 34, 35], 3D generation [36, 37, 38, 39, 40], scene editing [41, 42, 43] and SLAM [44, 45, 46, 47]. 2.2 Dynamic Scene Reconstruction In recent years, various dynamic scene reconstruction approaches have been proposed, which can be broadly categorized into NeRF-based and 3DGS-based methods. NeRF-based works [48, 1, 49, 2, 4, 50, 51, 5] usually map dynamic scenes to canonical space and render images based on this 3D canonical space. This kind of 4D scene representation is intuitive but requires well-reconstructed canonical space. Other works propose to use time-varying NeRFs [6, 3, 52, 53, 54] or explicit representations [55, 56, 7, 8, 57, 58, 59] to represent and render dynamic scenes. However, all these NeRF-based methods require frequent point sampling or MLP queries, suffering from long training and rendering time. With the proposal of 3DGS, many works [16, 21, 15, 11, 13, 17, 12, 60, 14, 61, 62, 63] use 3DGS as the fundamental model for 4D scene representation. For instance, D-3DGS [11] models dynamic scenes by allowing the positions and rotation matrixes of 3DGS to change over time. Deformable 3DGS [17] uses an MLP to model deformation field based on time and the canonical Gaussian space. SC-GS [15] bounds dense 3DGS with sparse control points, calculating the movement of Gaussians in coarse-to-fine manner. Despite they have performed impressive rendering quality in some dynamic scenes, they lack explicit motion guidance to constrain the movement of Gaussian, resulting in degraded performance in more complex dynamic scenes. Recent works [21, 22] compose the movement of 3D points through their corresponding Gaussians, using 2D flow priors to supervise the deformation of 3DGS. Inspired by them, we decompose the optical flow to obtain more direct motion supervision, thus achieving higher rendering quality. 2.3 NVS with Pose Optimization Several NVS works [64, 65, 66, 67, 68, 69, 70] have noticed that it is difficult to derive precise camera poses of input images in the real world, so they address novel view synthesis together with camera pose optimization. i-NeRF [64] initially estimates camera poses by matching the input images. Other methods such as NeRFmm [65] and Nope-NeRF [69] use monocular depth priors as guidance to do the joint optimization of NeRF and camera poses. Recently, CF-3DGS [70] proposes progressive reconstruction and leverages photometric loss to learn the affine transformation of Gaussians to optimize the camera pose. However, these methods are mostly effective only for static scenes and lack support for dynamic scenes. Motivated by these methods, we aim to extend 3DGS to dynamic scenes with pose optimization, thus boosting the rendering quality and robustness."
        },
        {
            "title": "3 Preliminary",
            "content": "In this section, we briefly introduce the modeling and rendering of 3DGS in Section 3.1 and the deformable extension of 3DGS towards dynamic scene reconstruction in Section 3.2. 3 3.1 3D Gaussian Splatting As an explicit 3D representation similar to point clouds, 3DGS models the scene with set of 3D Gaussians. However, different from point clouds, each 3D Gaussian in the scene has its own opacity [0, 1], center position µ R31, and covariance matrix Σ R33. These properties determine the contribution and influence range of 3D Gaussians on rendering. For position R31 in 3D space, the corresponding contribution of 3D Gaussian on it can be formulated as: G(x) = 2 (xµ)Σ1(xµ). (1) For differentiable optimization, the covariance matrix Σ can be decomposed into scaling matrix and rotation matrix R: Σ = RSST RT , where scaling matrix = diag([sx, sy, sz]) and rotation matrix can be transformed from quaternion [rw, rx, ry, rz]. Then the 3D Gaussians can be splatted to 2D camera plane through differential gaussian splatting. Specially, given viewing transform matrix and the Jacobian matrix of the affine approximation of the projective transformation, we can obtain the 2D covariance matrix Σ2D through: Σ2D = JW ΣW . Similarly, we can obtain the 2D center position µ2D of 3D Gaussians in camera plane. Therefore, given 2D pixel p, the rendering contribution of 3D Gaussian on the viewpoint can be obtained through 2D version of (1). To model the appearance of 3D Gaussians, spherical harmonics (SH) are introduced to define the color c. Finally, for each pixel, the rendering results of 3DGS can be derived by calculating the color contribution of all the related Gaussians. This process is known as α-blending: (cid:88) ciαi i1 (cid:89) = (1 αj), j=1 (2) where ci, αi represent the color and density computed from the i-th 3D Gaussian. 3.2 Deformable 3D Gaussian Splatting To extend 3DGS to dynamic scenes, an intuitive approach is to utilize learnable deformation field to fit the movement of objects in the real world through Gaussian deformation. This idea originates from NeRF-based methods such as D-NeRF [1] and has been effectively applied to 3DGS in recent works [17, 13]. In these deformable 3DGS methods, deformation network is typically used to model the movement of the center position of 3D Gaussians. Additionally, due to the inherent properties of 3D Gaussians, the deformation network may also consider the rotation and scaling factors of 3D Gaussians as they vary over time. Therefore, the deformation of 3D Gaussians can be formulated as: (µ + µ, + r, + s) = D(µ, r, s, t), (3) where is the timestamp, µ, r, are the center position, rotation quaternion and scaling factors of 3D Gaussians, and µ, r, are their residuals, respectively. Due to the various implementations of deformable 3DGS, in this paper we focus solely on the deformation aspect without discussing the other designs and specific differences in these works. We select method [17] as our baseline, leveraging explicit motion guidance and camera pose refinement to further enhance the rendering quality and the robustness in dynamic scenes."
        },
        {
            "title": "4 Methodology",
            "content": "In this section, we first introduce the overall architecture of our approach in Section 4.1. Then the optical flow decoupling module is introduced to derive motion guidance for Gaussian deformation in Section 4.2. The camera pose refinement module is introduced to alternately optimize 3D Gaussians and camera poses in Section 4.3. Finally, the overall loss function is introduced in Section 4.4. 4.1 Overall Architecture The overall architecture of our method is illustrated in Figure 2. Our method primarily focuses on the reconstruction of monocular dynamic scenes. Firstly, following 3DGS [10], we initialize camera poses and 3D Gaussians using COLMAP [71]. Given two adjacent frames It and It+1, we compute forward optical flow Ftt+1 using an off-the-shelf flow estimation network. Meanwhile, we can obtain the rendered depth map Dt of frame It at time through the rasterizer. By feeding the depth 4 Figure 2: The overall architecture of MotionGS. It can be viewed as two data streams: (1) The 2D data stream utilizes the optical flow decoupling module to obtain the motion flow as the 2D motion prior; (2) The 3D data stream involves the deformation and transformation of Gaussians to render the image for the next frame. During training, we alternately optimize 3DGS and camera poses through the camera pose refinement module. map It, camera poses Ct, Ct+1, and optical flow priors Ftt+1 into the optical flow decoupling module, we can calculate the motion flow tt+1 solely related to object movement. After predicting the deformation of Gaussians through the deformation network D, we obtain the state of 3D Gaussians at time + 1 and render the Gaussian flow tt+1 from time to + 1 under the assumption of stationary camera viewpoint for the frame It. The motion flow should be consistent with the Gaussian flow, thus providing explicit motion guidance to Gaussian deformation. Additionally, since the initialized camera poses may be inaccurate, we add small residual to the relative camera pose . Leveraging the proposed camera pose refinement module, we cleverly backpropagate gradients to the camera poses, achieving refinement of the camera poses. During training, we alternately optimize 3D Gaussian and camera poses to enhance the rendering quality and robustness in dynamic scenes. 4.2 Optical Flow Decoupling Module To provide explicit motion guidance for the deformation of Gaussians, we first utilize an off-the-shelf optical flow network to predict 2D motion priors. Since optical flow is influenced by both camera movement and object motion, we decompose it into camera flow and motion flow as illustrated in the Figure 1(b). Camera flow represents the optical flow caused solely by camera movement, assuming the objects in the scene remain stationary. In contrast, motion flow considers the camera as stationary, capturing only the movement of the objects. Essentially, optical flow can be viewed as the vector sum of these two components. By decoupling them, we can effectively isolate object motion, providing precise guidance for Gaussian deformation. Camera flow and motion flow. We use schematic diagram Figure 3 to illustrate the detailed calculation process. Camera flow can be directly computed from the camera poses and the depth of the current frame. Specifically, at the timestamp t, we obtain the depth map Dt corresponding to frame It directly from 3D Gaussians through the rasterizer. Given the intrinsics Kt and extrinsics Tt of camera Ct, we can reproject point pt from frame It to 3D space using its depth Dt: xt = 1 1 (4) where pt is the homogeneous coordinate of pt. Assuming xt does not move, we can obtain the projection pt+1 of xt on frame It+1: Dt pt, pt+1 = proj(Kt+1Tt+1xt), (5) where Kt+1 and Tt+1 are the intrinsics and extrinsics of camera Ct+1, proj() projects the 3D coordinates to 2D image planes by dividing the last dimension (depth). Then the camera flow can be 5 Figure 3: Flow calculation. Figure 4: Pose refinement on iterative training. defined as: (6) which indicates the flow caused solely by camera movement. As the point xt moves over time, we denote its updated position as xt+1. This new point xt+1 is then projected onto frame It+1 as pt+1. Thus, the optical flow Ftt+1 between two adjacent frame is defined as pt+1 pt. Finally, the motion flow tt+1 is derived by subtracting the camera flow from the optical flow: pt, tt+1 = pt+1 tt+1 = Ftt+1 M tt+1 = pt+1 pt+1 , (7) which also corresponds to the optical flow caused by object movement at fixed viewpoint. Gaussion flow. To establish correspondence between Gaussian deformation and motion flow, we need to splat the Gaussian deformation onto the 2D image plane, which is not implemented in the original 3DGS framework. Inspired by recent work [21], we introduce the concept of Gaussian flow, denoted as tt+1, to describe the 2D projection of Gaussian deformation, and implement it in the CUDA-based rasterizer. The core idea is to model the contribution of Gaussians to the optical flow by first transforming 3D Gaussians to canonical Gaussian space and then transforming them back to the state at the next time step. Please refer to Appendix A.1 for the specific derivation and modeling process of Gaussian flow. Gao et al. [21] computes the deformation of 3D Gaussians from time to + 1 under the transformation of the camera viewpoint from Ct to Ct+1, corresponding to optical flow. Different from it, our Gaussian flow is designed to match the motion flow, representing the deformation of 3D Gaussians from time to + 1 fixed under the camera viewpoint Ct+1. Flow loss. To effective constrain the Gaussian deformation, we use L1 loss between motion flow and Gaussian flow for simplicity: Lflow = (cid:13) (cid:13)sg(F tt+1) tt+1 (cid:13) (cid:13) , (8) where sg() means stop gradient. Note that we also stop the gradients of all variables at time in the calculation of Gaussian flow for more efficient training. Discussion. The benefits of decoupling the optical flow are evident. Since motion flow is only related to object motion, it can directly provide motion guidance. More importantly, in some previous works [4, 54, 6], an off-the-shelf segmentation network is often used to segment out the dynamic objects in the scene (such as humans, animals, cars, etc.). However, such masks are only used in their photometric loss to mask out dynamic regions. In contrast, our motion flow benefits from these dynamic masks more directly. By masking static objects with these masks, we can obtain clear motion flow for supervising Gaussian deformation. If optical flow is used as motion guidance, this advantage will no longer exist because static objects can also contribute to the optical flow. 4.3 Camera Pose Refinement Module In monocular dynamic scenes, due to the complexity of motion and sparsity of observations, even widely used methods like COLMAP [71] cannot accurately estimate camera poses. Since the optimization of 3DGS requires precise camera poses as input, it often performs poorly in complex 6 dynamic scenes. Existing 3DGS-based dynamic scene reconstruction methods rarely take this into account. Inspired by pose-free optimization methods for static scene reconstruction [72, 70], we design the camera pose refinement module. By alternately optimizing 3D Gaussian primitives and camera poses during training, we improve the rendering quality of 3DGS and its robustness in dynamic scenes. Iterative training. Since the supervision of 3DGS primarily relies on photometric consistency loss, simultaneously optimizing camera parameters and 3DGS can be considered chicken-and-egg problem. Therefore, similar to Bundle Adjustment, we adopt an alternating optimization strategy to train the model. Specifically, assuming Gt is the Gaussian at time t, we first predict the deformation of the Gaussian using the deformation field D. We denote the deformed Gaussian as Gt+1 . Since the observation viewpoint changes from time to + 1, Gt+1 needs to be transformed once again under the camera Ct+1 to render frame It+1. We denote the transformed Gaussian as Gt+1. This transformation process actually corresponds to camera motion. To achieve differentiable optimization, we introduce small residual into the relative pose from camera viewpoint Ct to Ct+1, treating it as learnable SE(3) transformation. With this small change, we enable gradients to backpropagate to the camera poses. During the optimization of camera poses, we freeze all attributes of 3D Gaussians to improve training stability and robustness. Then we update the camera poses initialized by COLMAP with the optimized relative camera poses, achieving global pose refinement. Discussion. While several methods have been proposed for pose-free optimization in static scenes, dynamic scenes present greater challenges due to their inherently under-constrained nature. As result, to ensure stable and robust optimization, our approach still leverages camera poses computed by COLMAP as an initialization step. This also necessitates the presence of sufficient static features in the scene. Fortunately, static features are commonly found in most real-world environments, particularly in background regions. 4.4 Optimization Thanks to the integration of optical flow rendering and camera pose gradient computation in our rasterization process, the overall training pipeline of our method is end-to-end differentiable. The overall training loss is given by: = Lbaseline + λLflow, (9) where Lbaseline is the photometric loss used in our baseline [17], λ is the weight of our flow loss."
        },
        {
            "title": "5 Experiment",
            "content": "5.1 Experimental Setup To highlight the abilities of our method in handling complex dynamic scenes, we select two representative monocular dynamic scene datasets for evaluation: NeRF-DS [73] and HyperNeRF [49]. Our implementation is mainly based on PyTorch. We use simple Adam [74] optimizer to adjust the rotation increment and translation increment of the camera, and the learning rates of the two are set to 3e-3 and 1e-1, respectively. The entire training process requires 20,000 iterations. We set λ to 0.5 for NeRF-DS and 0.1 for HyperNeRF scene. The rest of the settings are consistent with the baseline method [17]. All experiments are performed on single Nvidia RTX 3090 GPU. For more implementation details, please refer to Appendix A.2. 5.2 Results Following previous methods, we use metrics PSNR, SSIM, and LPIPS for evaluation. For more visualizations, please refer to Appendix A.4. Results on the NeRF-DS dataset. Table 1 shows the performance comparison results with the state-of-the-art methods on the NeRF-DS dataset. In dynamic monocular scenes, especially in those with rapid movements and high complexity, our method significantly outperforms the baseline method. For example (see Figures 5 and 12), in the plate scene, our method accurately renders the reflections and sharp edges of the moving plate while significantly reducing visual distortions such as floating Table 1: Quantitative comparison on NeRF-DS dataset per-scene. We highlight the best and the second best results in each scene. NeRF-DS and HyperNeRF employ MS-SSIM and LPIPS with the AlexNet, while other methods and ours use SSIM and LPIPS with the VGG network. Method Sieve Plate Bell Press PSNR SSIM LPIPS PSNR SSIM LPIPS PSNR SSIM LPIPS PSNR SSIM LPIPS 3D-GS [10] TiNeuVox [59] HyperNeRF [49] NeRF-DS [73] Deformable-3DGS [17] Ours 23.16 21.49 25.43 25.78 25.14 26.17 Method 0.2247 0.3176 0.1645 0.1472 0.1502 0. 16.14 20.58 18.93 20.54 18.82 21.01 0.8203 0.8265 0.8798 0.8900 0.8674 0.8884 Cup 0.4093 0.3317 0.2940 0.1996 0.3554 0.1907 21.01 23.08 23.06 23.19 25.42 26.33 0.6970 0.8027 0.7709 0.8042 0.7404 0. As 0.7885 0.8242 0.8097 0.8212 0.8481 0.8688 Basin 0.2503 0.2568 0.2052 0.1867 0.1570 0.1490 22.89 24.47 26.15 25.72 25.41 26.63 0.2904 0.3001 0.1959 0.2047 0.1918 0. 0.8163 0.8613 0.8897 0.8618 0.8614 0.8865 Mean PSNR SSIM LPIPS PSNR SSIM LPIPS PSNR SSIM LPIPS PSNR SSIM LPIPS 3D-GS [10] TiNeuVox [59] HyperNeRF [49] NeRF-DS [73] Deformable-3DGS [17] Ours 21.71 19.71 24.59 24.91 24.76 24. 0.8304 0.8109 0.8770 0.8741 0.8876 0.8916 0.2548 0.3643 0.1650 0.1737 0.1544 0.1556 22.69 21.26 25.58 25.13 26.08 26.56 0.8017 0.8289 0.8949 0.8778 0.8827 0.8902 0.2994 0.3967 0.1777 0.1741 0.1832 0.1757 18.42 20.66 20.41 19.96 19.61 20. 0.7170 0.8145 0.8199 0.8166 0.7888 0.8126 0.3153 0.2690 0.1911 0.1855 0.1871 0.1865 20.29 21.61 23.45 23.60 23.61 24.54 0.7816 0.8234 0.8488 0.8494 0.8394 0.8656 0.2920 0.2766 0.1990 0.1816 0.1970 0.1719 artifacts. Similarly, in the basin scene, our method effectively models the smooth surface of the basin, in contrast to other methods that result in bumpy basin bottom. This is mainly because our proposed framework can provide accurate and effective motion guidance for Gaussian deformation. Results on the HyperNeRF dataset. For scenes captured in the wild using smartphones, Table 2 summarizes the relevant performance comparison results. Our method also achieves consistent performance improvements in these scenarios. Qualitatively, our approach excels at accurately reconstructing scene geometry and appearance, even under irregular camera movements and inaccurate camera poses. For instance (see Figures 6 and 13), in the chicken scene, our method captures the subtle bumps on the red shell, while in the broom scene, it accurately renders the details of the broom in fast movement. This is mainly attributed to the motion guidance and camera pose refinement proposed by our method, both of which enhance the rendering performance of the baseline method. Table 2: Quantitative comparison on HyperNeRFs vrig dataset per-scene. Method 3D Printer Chicken Broom Banana Mean PSNR SSIM PSNR SSIM PSNR SSIM PSNR SSIM PSNR SSIM HyperNeRF [49] TiNeuVox [59] Deformable 3DGS [17] Ours 20.0 22.8 20.5 21.8 0.63 0.73 0.64 0.71 27.4 28.2 22.8 26.8 0.63 0.79 0.61 0.79 19.5 21.3 20.5 22. 0.21 0.31 0.35 0.38 22.1 24.4 26.0 28.2 0.72 0.64 0.83 0.86 22.3 24.2 22.5 24.8 0.55 0.62 0.61 0.69 5.3 Ablation Study In this section, we conduct ablations on the NeRF-DS dataset to validate the effectiveness of the key components of our method, as shown in Table 3. For more ablations, please refer to Appendix A.3. Table 3: Ablations on the key components of our proposed framework. Setting PSNR SSIM LPIPS Baseline + optical flow guidance + motion flow guidance + motion flow guidance + camera pose refinement 23.61 23.37 24.12 24.54 0.8394 0.8333 0.8609 0.8656 0.1970 0.2112 0.1763 0.1719 Effectiveness of the optical flow decoupling module. To illustrate the necessity of optical flow decoupling module, we conduct ablations using direct optical flow supervision instead of decoupled motion flow constraints. As shown in the row 2 of Table 3, directly using optical flow to supervise Gaussian motion even results in performance decline compared to the baseline. This performance drop is likely due to the inherent ambiguity created by the mixed camera and object movements. Figure 5: Qualitative comparison on NeRF-DS dataset. Refer to Figure 12 for more scenes. Figure 6: Qualitative comparison on HyperNeRF dataset. Refer to Figure 13 for more scenes. Figure 7: Visualization of all data flows. Each example corresponds to two rows. When camera and object movements are not separated, the supervision signal becomes noisy and less effective. This ambiguity hampers the optimization process of 3DGS, thereby reducing the motion modeling capabilities of the deformation field. In contrast, we use motion flow as supervision, which effectively provides explicit motion guidance for Gaussian deformation, thereby better modeling complex dynamic scenes. As shown in Figures 7 and 14, only the motion flow can clearly highlights movement information in dynamic regions. This explicit motion information efficiently constrains the Gaussian flow, ensuring that the motion guidance remains consistent and effective. Effectiveness of the camera pose refinement module. Leveraging the alternating optimization of 3DGS and camera poses, our approach adaptively corrects potential errors in camera poses. Furthermore, the updated camera poses contribute to more accurate camera flow, thus improving the accuracy of motion guidance. In row 4 of Table 3, our camera pose refinement module, built upon motion Figure 8: Visualization of the camera trajectories optimized by our method and COLMAP. guidance, yields substantial performance gains for the model. This iterative optimization process enhances the robustness of our model in complex dynamic scenes. For instance, in the HyperNeRF dataset, our method reconstructs more plausible results compared to the baseline approach. Unlike static scene datasets (e.g., Tanks & Temples) that use COLMAP to obtain the ground truth of camera poses, we assume that COLMAP may not provide accurate poses for dynamic scene datasets. In this setting, we lack ground truth for direct quantitative evaluation for refined camera pose. Therefore, we provide visualizations of the pose refinement process in the Figure 8 as qualitative comparison."
        },
        {
            "title": "6 Conclusion",
            "content": "In this paper, we propose MotionGS, novel deformable 3D Gaussian Splatting framework for explicitly modeling and constraining object motion in dynamic scene reconstruction. The proposed framework includes two key modules: the optical flow decoupling module and the camera poserefinement module. The optical flow decoupling module decouples the motion flow related solely to object motion from the optical flow priors, providing explicit supervision for Gaussian deformation. The camera pose refinement module alternately optimizes 3DGS and camera poses, further enhancing the rendering quality and robustness of our model in dynamic scenes. Quantitative and qualitative results on the NeRF-DS and HyperNeRF datasets strongly demonstrate the contributions and effectiveness of our proposed method. More importantly, the proposed improvements are agnostic to specific network designs, which can be applied to similar deformation-based 3DGS methods. In future work, we aim to develop 3DGS method that does not rely on camera pose inputs, thereby achieving robust high-quality reconstruction in dynamic scenes."
        },
        {
            "title": "References",
            "content": "[1] Albert Pumarola, Enric Corona, Gerard Pons-Moll, and Francesc Moreno-Noguer. D-nerf: Neural radiance fields for dynamic scenes. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 1031810327, 2021. [2] Keunhong Park, Utkarsh Sinha, Jonathan Barron, Sofien Bouaziz, Dan Goldman, Steven Seitz, and Ricardo Martin-Brualla. Nerfies: Deformable neural radiance fields. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 58655874, 2021. [3] Zhengqi Li, Simon Niklaus, Noah Snavely, and Oliver Wang. Neural scene flow fields for space-time view synthesis of dynamic scenes. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 64986508, 2021. [4] Yu-Lun Liu, Chen Gao, Andreas Meuleman, Hung-Yu Tseng, Ayush Saraf, Changil Kim, Yung-Yu Chuang, Johannes Kopf, and Jia-Bin Huang. Robust dynamic radiance fields. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 1323, 2023. [5] Hang Gao, Ruilong Li, Shubham Tulsiani, Bryan Russell, and Angjoo Kanazawa. Monocular dynamic view synthesis: reality check. Advances in Neural Information Processing Systems, 35:3376833780, 2022. [6] Zhengqi Li, Qianqian Wang, Forrester Cole, Richard Tucker, and Noah Snavely. Dynibar: Neural dynamic image-based rendering. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 42734284, 2023. [7] Ang Cao and Justin Johnson. Hexplane: fast representation for dynamic scenes. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 130141, 2023. 10 [8] Ruizhi Shao, Zerong Zheng, Hanzhang Tu, Boning Liu, Hongwen Zhang, and Yebin Liu. Tensor4d: Efficient neural 4d decomposition for high-fidelity dynamic reconstruction and rendering. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 1663216642, 2023. [9] Ben Mildenhall, Pratul Srinivasan, Matthew Tancik, Jonathan Barron, Ravi Ramamoorthi, and Ren Ng. Nerf: Representing scenes as neural radiance fields for view synthesis. Communications of the ACM, 65(1):99106, 2021. [10] Bernhard Kerbl, Georgios Kopanas, Thomas Leimkühler, and George Drettakis. 3d gaussian splatting for real-time radiance field rendering. ACM Transactions on Graphics, 42(4):114, 2023. [11] Jonathon Luiten, Georgios Kopanas, Bastian Leibe, and Deva Ramanan. Dynamic 3d gaussians: Tracking by persistent dynamic view synthesis. arXiv preprint arXiv:2308.09713, 2023. [12] Zhan Li, Zhang Chen, Zhong Li, and Yi Xu. Spacetime gaussian feature splatting for real-time dynamic view synthesis. arXiv preprint arXiv:2312.16812, 2023. [13] Guanjun Wu, Taoran Yi, Jiemin Fang, Lingxi Xie, Xiaopeng Zhang, Wei Wei, Wenyu Liu, Qi Tian, and Xinggang Wang. 4d gaussian splatting for real-time dynamic scene rendering. arXiv preprint arXiv:2310.08528, 2023. [14] Zeyu Yang, Hongye Yang, Zijie Pan, and Li Zhang. Real-time photorealistic dynamic scene representation and rendering with 4d gaussian splatting. International Conference on Learning Representations (ICLR), 2024. [15] Yi-Hua Huang, Yang-Tian Sun, Ziyi Yang, Xiaoyang Lyu, Yan-Pei Cao, and Xiaojuan Qi. Sc-gs: Sparsecontrolled gaussian splatting for editable dynamic scenes. arXiv preprint arXiv:2312.14937, 2023. [16] Youtian Lin, Zuozhuo Dai, Siyu Zhu, and Yao Yao. Gaussian-flow: 4d reconstruction with dynamic 3d gaussian particle. arXiv preprint arXiv:2312.03431, 2023. [17] Ziyi Yang, Xinyu Gao, Wen Zhou, Shaohui Jiao, Yuqing Zhang, and Xiaogang Jin. Deformable 3d gaussians for high-fidelity monocular dynamic scene reconstruction. arXiv preprint arXiv:2309.13101, 2023. [18] Yuanxing Duan, Fangyin Wei, Qiyu Dai, Yuhang He, Wenzheng Chen, and Baoquan Chen. 4d gaussian splatting: Towards efficient novel view synthesis for dynamic scenes. arXiv preprint arXiv:2402.03307, 2024. [19] Zhaoyang Huang, Xiaoyu Shi, Chao Zhang, Qiang Wang, Ka Chun Cheung, Hongwei Qin, Jifeng Dai, and Hongsheng Li. Flowformer: transformer architecture for optical flow. In European conference on computer vision, pages 668685. Springer, 2022. [20] Haofei Xu, Jing Zhang, Jianfei Cai, Hamid Rezatofighi, and Dacheng Tao. Gmflow: Learning optical flow via global matching. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 81218130, 2022. [21] Quankai Gao, Qiangeng Xu, Zhe Cao, Ben Mildenhall, Wenchao Ma, Le Chen, Danhang Tang, and Ulrich Neumann. Gaussianflow: Splatting gaussian dynamics for 4d content creation. arXiv preprint arXiv:2403.12365, 2024. [22] Zhiyang Guo, Wengang Zhou, Li Li, Min Wang, and Houqiang Li. Motion-aware 3d gaussian splatting for efficient dynamic scene reconstruction. arXiv preprint arXiv:2403.11447, 2024. [23] Jonathan Barron, Ben Mildenhall, Matthew Tancik, Peter Hedman, Ricardo Martin-Brualla, and Pratul Srinivasan. Mip-nerf: multiscale representation for anti-aliasing neural radiance fields. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 58555864, 2021. [24] Jonathan Barron, Ben Mildenhall, Dor Verbin, Pratul Srinivasan, and Peter Hedman. Mip-nerf 360: Unbounded anti-aliased neural radiance fields. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 54705479, 2022. [25] Cheng Sun, Min Sun, and Hwann-Tzong Chen. Direct voxel grid optimization: Super-fast convergence for radiance fields reconstruction. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 54595469, 2022. [26] Qiangeng Xu, Zexiang Xu, Julien Philip, Sai Bi, Zhixin Shu, Kalyan Sunkavalli, and Ulrich Neumann. Point-nerf: Point-based neural radiance fields. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 54385448, 2022. [27] Qianqian Wang, Zhicheng Wang, Kyle Genova, Pratul Srinivasan, Howard Zhou, Jonathan Barron, Ricardo Martin-Brualla, Noah Snavely, and Thomas Funkhouser. Ibrnet: Learning multi-view image-based rendering. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 46904699, 2021. [28] Thomas Müller, Alex Evans, Christoph Schied, and Alexander Keller. Instant neural graphics primitives with multiresolution hash encoding. ACM transactions on graphics (TOG), 41(4):115, 2022. 11 [29] Alex Yu, Ruilong Li, Matthew Tancik, Hao Li, Ren Ng, and Angjoo Kanazawa. Plenoctrees for real-time rendering of neural radiance fields. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 57525761, 2021. [30] Kai Zhang, Gernot Riegler, Noah Snavely, and Vladlen Koltun. Nerf++: Analyzing and improving neural radiance fields. arXiv preprint arXiv:2010.07492, 2020. [31] Ruijie Zhu, Jiahao Chang, Ziyang Song, Jiahuan Yu, and Tianzhu Zhang. Tiface: Improving facial reconstruction through tensorial radiance fields and implicit surfaces. arXiv preprint arXiv:2312.09527, 2023. [32] Jiahe Li, Jiawei Zhang, Xiao Bai, Jin Zheng, Xin Ning, Jun Zhou, and Lin Gu. Dngaussian: Optimizing sparse-view 3d gaussian radiance fields with global-local depth normalization. arXiv preprint arXiv:2403.06912, 2024. [33] Yuedong Chen, Haofei Xu, Chuanxia Zheng, Bohan Zhuang, Marc Pollefeys, Andreas Geiger, Tat-Jen Cham, and Jianfei Cai. Mvsplat: Efficient 3d gaussian splatting from sparse multi-view images. arXiv preprint arXiv:2403.14627, 2024. [34] David Charatan, Sizhe Li, Andrea Tagliasacchi, and Vincent Sitzmann. pixelsplat: 3d gaussian splats from image pairs for scalable generalizable 3d reconstruction, 2024. [35] Stanislaw Szymanowicz, Christian Rupprecht, and Andrea Vedaldi. Splatter image: Ultra-fast single-view 3d reconstruction. Conference on Computer Vision and Pattern Recognition (CVPR), 2024. [36] Jiaxiang Tang, Jiawei Ren, Hang Zhou, Ziwei Liu, and Gang Zeng. Dreamgaussian: Generative gaussian splatting for efficient 3d content creation. arXiv preprint arXiv:2309.16653, 2023. [37] Andreas Blattmann, Robin Rombach, Huan Ling, Tim Dockhorn, Seung Wook Kim, Sanja Fidler, and Karsten Kreis. Align your latents: High-resolution video synthesis with latent diffusion models. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 22563 22575, 2023. [38] Jiaxiang Tang, Zhaoxi Chen, Xiaokang Chen, Tengfei Wang, Gang Zeng, and Ziwei Liu. Lgm: Large multi-view gaussian model for high-resolution 3d content creation. arXiv preprint arXiv:2402.05054, 2024. [39] Zhengyi Wang, Cheng Lu, Yikai Wang, Fan Bao, Chongxuan Li, Hang Su, and Jun Zhu. Prolificdreamer: High-fidelity and diverse text-to-3d generation with variational score distillation. arXiv preprint arXiv:2305.16213, 2023. [40] Xu Yinghao, Shi Zifan, Yifan Wang, Chen Hansheng, Yang Ceyuan, Peng Sida, Shen Yujun, and Wetzstein Gordon. Grm: Large gaussian reconstruction model for efficient 3d reconstruction and generation, 2024. [41] Yiwen Chen, Zilong Chen, Chi Zhang, Feng Wang, Xiaofeng Yang, Yikai Wang, Zhongang Cai, Lei Yang, Huaping Liu, and Guosheng Lin. Gaussianeditor: Swift and controllable 3d editing with gaussian splatting, 2023. [42] Jiemin Fang, Junjie Wang, Xiaopeng Zhang, Lingxi Xie, and Qi Tian. Gaussianeditor: Editing 3d gaussians delicately with text instructions. In CVPR, 2024. [43] Shijie Zhou, Haoran Chang, Sicheng Jiang, Zhiwen Fan, Zehao Zhu, Dejia Xu, Pradyumna Chari, Suya You, Zhangyang Wang, and Achuta Kadambi. Feature 3dgs: Supercharging 3d gaussian splatting to enable distilled feature fields. arXiv preprint arXiv:2312.03203, 2023. [44] Chi Yan, Delin Qu, Dan Xu, Bin Zhao, Zhigang Wang, Dong Wang, and Xuelong Li. Gs-slam: Dense visual slam with 3d gaussian splatting. In CVPR, 2024. [45] Nikhil Keetha, Jay Karhade, Krishna Murthy Jatavallabhula, Gengshan Yang, Sebastian Scherer, Deva Ramanan, and Jonathon Luiten. Splatam: Splat, track & map 3d gaussians for dense rgb-d slam. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2024. [46] Hidenobu Matsuki, Riku Murai, Paul H. J. Kelly, and Andrew J. Davison. Gaussian Splatting SLAM. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2024. [47] Huajian Huang, Longwei Li, Cheng Hui, and Sai-Kit Yeung. Photo-slam: Real-time simultaneous localization and photorealistic mapping for monocular, stereo, and rgb-d cameras. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2024. [48] Yilun Du, Yinan Zhang, Hong-Xing Yu, Joshua Tenenbaum, and Jiajun Wu. Neural radiance flow for 4d view synthesis and video processing. In 2021 IEEE/CVF International Conference on Computer Vision (ICCV), pages 1430414314. IEEE Computer Society, 2021. [49] Keunhong Park, Utkarsh Sinha, Peter Hedman, Jonathan Barron, Sofien Bouaziz, Dan Goldman, Ricardo Martin-Brualla, and Steven Seitz. Hypernerf: higher-dimensional representation for topologically varying neural radiance fields. arXiv preprint arXiv:2106.13228, 2021. [50] Qianqian Wang, Yen-Yu Chang, Ruojin Cai, Zhengqi Li, Bharath Hariharan, Aleksander Holynski, and Noah Snavely. Tracking everything everywhere all at once. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 1979519806, 2023. [51] Gengshan Yang, Minh Vo, Natalia Neverova, Deva Ramanan, Andrea Vedaldi, and Hanbyul Joo. Banmo: In Proceedings of the IEEE/CVF Building animatable 3d neural models from many casual videos. Conference on Computer Vision and Pattern Recognition, pages 28632873, 2022. [52] Wenqi Xian, Jia-Bin Huang, Johannes Kopf, and Changil Kim. Space-time neural irradiance fields for free-viewpoint video. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 94219431, 2021. [53] Chaoyang Wang, Ben Eckart, Simon Lucey, and Orazio Gallo. Neural trajectory fields for dynamic novel view synthesis. arXiv preprint arXiv:2105.05994, 2021. [54] Chen Gao, Ayush Saraf, Johannes Kopf, and Jia-Bin Huang. Dynamic view synthesis from dynamic monocular video. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 57125721, 2021. [55] Kaichen Zhou, Jia-Xing Zhong, Sangyun Shin, Kai Lu, Yiyuan Yang, Andrew Markham, and Niki Trigoni. Dynpoint: Dynamic neural point for view synthesis. Advances in Neural Information Processing Systems, 36, 2023. [56] Sara Fridovich-Keil, Giacomo Meanti, Frederik Rahbæk Warburg, Benjamin Recht, and Angjoo Kanazawa. K-planes: Explicit radiance fields in space, time, and appearance. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 1247912488, 2023. [57] Zhen Xu, Sida Peng, Haotong Lin, Guangzhao He, Jiaming Sun, Yujun Shen, Hujun Bao, and Xiaowei Zhou. 4k4d: Real-time 4d view synthesis at 4k resolution. arXiv preprint arXiv:2310.11448, 2023. [58] Feng Wang, Sinan Tan, Xinghang Li, Zeyue Tian, Yafei Song, and Huaping Liu. Mixed neural voxels for fast multi-view video synthesis. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 1970619716, 2023. [59] Jiemin Fang, Taoran Yi, Xinggang Wang, Lingxi Xie, Xiaopeng Zhang, Wenyu Liu, Matthias Nießner, and Qi Tian. Fast dynamic radiance fields with time-aware neural voxels. In SIGGRAPH Asia 2022 Conference Papers, pages 19, 2022. [60] Kai Katsumata, Duc Minh Vo, and Hideki Nakayama. An efficient 3d gaussian representation for monocular/multi-view dynamic scenes. arXiv preprint arXiv:2311.12897, 2023. [61] Zhicheng Lu, Xiang Guo, Le Hui, Tianrui Chen, Ming Yang, Xiao Tang, Feng Zhu, and Yuchao Dai. 3d geometry-aware deformable gaussian splatting for dynamic view synthesis. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2024. [62] Devikalyan Das, Christopher Wewer, Raza Yunus, Eddy Ilg, and Jan Eric Lenssen. Neural parametric gaussians for monocular non-rigid object reconstruction. arXiv preprint arXiv:2312.01196, 2023. [63] Jiakai Sun, Han Jiao, Guangyuan Li, Zhanjie Zhang, Lei Zhao, and Wei Xing. 3dgstream: On-the-fly training of 3d gaussians for efficient streaming of photo-realistic free-viewpoint videos. arXiv preprint arXiv:2403.01444, 2024. [64] Lin Yen-Chen, Pete Florence, Jonathan Barron, Alberto Rodriguez, Phillip Isola, and Tsung-Yi Lin. inerf: Inverting neural radiance fields for pose estimation. In 2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), pages 13231330. IEEE, 2021. [65] Zirui Wang, Shangzhe Wu, Weidi Xie, Min Chen, and Victor Adrian Prisacariu. Nerf: Neural radiance fields without known camera parameters. arXiv preprint arXiv:2102.07064, 2021. [66] Yitong Xia, Hao Tang, Radu Timofte, and Luc Van Gool. Sinerf: Sinusoidal neural radiance fields for joint pose estimation and scene reconstruction. arXiv preprint arXiv:2210.04553, 2022. [67] Chen-Hsuan Lin, Wei-Chiu Ma, Antonio Torralba, and Simon Lucey. Barf: Bundle-adjusting neural radiance fields. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 57415751, 2021. [68] Shin-Fang Chng, Sameera Ramasinghe, Jamie Sherrah, and Simon Lucey. Garf: Gaussian activated radiance fields for high fidelity reconstruction and pose estimation. arXiv e-prints, pages arXiv2204, 2022. [69] Wenjing Bian, Zirui Wang, Kejie Li, Jia-Wang Bian, and Victor Adrian Prisacariu. Nope-nerf: Optimising neural radiance field with no pose prior. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 41604169, 2023. [70] Yang Fu, Sifei Liu, Amey Kulkarni, Jan Kautz, Alexei Efros, and Xiaolong Wang. Colmap-free 3d gaussian splatting. arXiv preprint arXiv:2312.07504, 2023. 13 [71] Johannes Lutz Schönberger and Jan-Michael Frahm. Structure-from-motion revisited. In Conference on Computer Vision and Pattern Recognition (CVPR), 2016. [72] Hidenobu Matsuki, Riku Murai, Paul H. J. Kelly, and Andrew J. Davison. Gaussian Splatting SLAM. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2024. [73] Zhiwen Yan, Chen Li, and Gim Hee Lee. Nerf-ds: Neural radiance fields for dynamic specular objects. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 82858295, 2023. [74] Diederik Kingma. Adam: method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014. [75] René Ranftl, Katrin Lasinger, David Hafner, Konrad Schindler, and Vladlen Koltun. Towards robust monocular depth estimation: Mixing datasets for zero-shot cross-dataset transfer. IEEE Transactions on Pattern Analysis and Machine Intelligence, 44(3), 2022. [76] Lingtong Kong and Jie Yang. Mdflow: Unsupervised optical flow learning by reliable mutual knowledge distillation. IEEE Transactions on Circuits and Systems for Video Technology, 33(2):677688, 2022. [77] Ruijie Zhu, Chuxin Wang, Ziyang Song, Li Liu, Tianzhu Zhang, and Yongdong Zhang. Scaledepth: Decomposing metric depth estimation into scale prediction and relative depth estimation. arXiv preprint arXiv:2407.08187, 2024. [78] Tianye Li, Mira Slavcheva, Michael Zollhoefer, Simon Green, Christoph Lassner, Changil Kim, Tanner Schmidt, Steven Lovegrove, Michael Goesele, Richard Newcombe, et al. Neural 3d video synthesis from multi-view video. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 55215531, 2022."
        },
        {
            "title": "A Appendix",
            "content": "A.1 Formulation of Gaussian Flow Figure 9: The formulation of Gaussian flow. We first project the point xt corresponding to the i-th Gaussian at time into the canonical Gaussian space, and then reproject this point from the canonical Gaussian space to the i-th Gaussian at time + 1. Motivated by [21], we formulate the Gaussian flow tt+1 to simulate the motion of dynamic object in the scene, as shown in Figure 9 Specifically, Gaussian flow corresponds to the deformation of 3D Gaussians from time to + 1 in the camera viewpoint Ct+1. For point xt, we first transform it to the canonical space 2 corresponding to the Gaussian at time t: i,t (xt µi,t), (10) where µi,t and Σi,t are the center position and covariance matrix of i-th Gaussian at the timestamp t. Then we transform ˆxt back to the Gaussian at the next time step + 1: ˆxt = Σ1 xi,t+1 = Σi,t+1 ˆxt + µi,t, (11) where µi,t+1 and Σi,t+1 are the center position and covariance matrix of i-th Gaussian at the timestamp + 1. Therefore, the flow contribution from i-th Gaussian to this point can be defined as: i,tt+1 = xi,t+1 xt. (12) Finally, all Gaussian flow contributions to the point can be accumulated in similar way to αblendering: F tt+1 = = (cid:88) i= (cid:88) i=1 wiF i,tt+1 wi(xi,t+1 xt), (13) (14) where wi is the weight of α-blendering. Note that since the computation of forward optical flow is referenced to frame It, the Gaussian flow should be consistently rendered under the camera viewpoint Ct, corresponding to the decoupled motion flow. It represents the 2D splatting of the Gaussian deformation field from time to + 1 when the camera viewpoint remains unchanged. A.2 More Implementation Details Datasets. The NeRF-DS dataset consists of eight stereo camera video sequences of daily scenes. These scenes contain high-speed moving high-gloss surface objects and changing camera poses, which pose challenges for dynamic scene modeling. The HyperNeRF dataset includes additional complications such as topological changes and inaccurate camera poses. For the NeRF-DS dataset, we use the default resolution 480270 for all scenes for training and testing. We train the model using images from the left camera and test it on the right camera. For the HyperNeRF dataset, we select four sets of scenes in the vrig subset (3D Printer, Chicken, Broom, and Banana) for training and testing, with 2 downsampling resolution of 536 960. 2The canonical space mentioned here should not be confused with the canonical space in the Gaussian deformation field. It represents the standard Gaussian distribution space. 15 Implementation details. To achieve the differentiable Gaussian flow and differentiable camera pose, we integrate the forward and backward processes into our rasterizer. To provide reliable optical flow, we choose GMFlow [20] as the default optical flow network. In order to stabilize the initialization process of the scene, we introduce motion constraints only after the Gaussian starts to deform and move. In the NeRF-DS dataset, we set the weight of the flow loss λ to 0.5; while in the HyperNeRF scene, it is set to 0.1. Camera pose optimization is also only activated during the Gaussian deformation stage. Data sampling mechanism. We adopt the same data sampling strategy as the baseline method, i.e., reading image sequences in randomly shuffled order. For an -frame video, the frames are shuffled and then read sequentially. In each iteration, we read two frames and calculate the optical flow between them. To enhance efficiency, the second image from the last iteration is used as the first image in the current iteration. Thus, except for the first iteration, only one new image is read in each subsequent iteration. Consequently, there are 1 iterations per epoch, with optical flow computed once in each iteration. This strategy balances the introduction of accurate motion priors with maintaining training efficiency. During the first epoch of training, we calculate the optical flow for all adjacent frame pairs, resulting in total of 1 optical flow maps. In subsequent epochs, we do not reshuffle the image sequence, allowing us to reuse the optical flow maps calculated in the first epoch. This effectively eliminates the need to recompute optical flow maps in each epoch, significantly reducing computational overhead. Training time and GPU memory. For model training, we list the training time per scene and peak memory usage on the NeRF-DS dataset as shown in Tables 4 and 5, providing comprehensive assessment of resource usage during training. Compared to our baseline, our approach incurs increased training time and peak memory usage. This is primarily due to the additional rendering of Gaussian flow and the refinement of camera poses, which are necessary for our method. Table 4: Training time comparison across different models. Training Time As Basin Bell Cup Plate Press Sieve Baseline Ours (w/o pose refinement) Ours NeRF-DS 1h 1m 1h 11m 1h 42m 1h 3m 1h 0m 0h 51m 0h 57m 1h 8m 1h 15m 1h 53m 1h 13m 1h 6m 0h 58m 1h 3m 1h 33m 1h 46m 2h 4m 1h 34m 1h 30m 1h 17m 1h 25m 6h 43m 6h 48m 6h 49m 6h 50m 6h 53m 6h 48m 6h 47m Table 5: Max GPU memory usage comparison across different models. Max GPU Memory (GB) As Baseline Ours 15.67 16.61 Basin 13.61 14.52 Bell Cup Plate Press Sieve 15.97 17.73 15.29 15.70 9.66 10. 10.65 11.62 12.17 12.97 FPS, number of 3D Gaussians and storage. We provide statistics of FPS and number of Gaussians on NeRF-DS dataset, as shown in Table 6. In most scenes of NeRF-DS, our method MotionGS achieves real-time rendering (FPS>30). Table 6: FPS, number of 3D Gaussians and storage on the NeRF-DS dataset per scene. Scene AS Basin Bell Cup Plate Press Sieve FPS 50 29 19 35 32 45 35 Storage 49M 70M 97M 54M 58M 53M 54M Nums 178K 250K 379K 200K 220K 197K 200K 16 Figure 10: Rendered depth from 3D Gaussian splatting (ours) and off-the-shelf monocular depth estimator (MiDas). Our rendered depth has richer details and is scale-aligned with the scene. MiDas rendered depth is usually more smooth and suffers from scale ambiguity. A.3 More Ablations We summarize the ablations on other choices of our proposed framework in Table 7. For fair comparison, we do not activate the proposed camera pose refinement module during training, since it also influences the flow calculation. Our interpretation and analysis of the ablations are as follows. Table 7: Ablations on other choices of our proposed framework. For fair comparison, we do not activate the proposed camera pose refinement module during training."
        },
        {
            "title": "Row Setting",
            "content": "PSNR SSIM LPIPS 1 2 3 4 5 6 7 8 9 Baseline w/o Motion mask Different depth choice (Midas [75]) Different optical flow network (FlowFormer [19]) Different optical flow network (MDFlow [76]) Self-supervised flow supervision loss Lower flow loss weight (λ = 0.2) Higher flow loss weight (λ = 0.8) Ours (w/o camera pose refinement) 23.61 23.13 23.58 23.97 23.25 23.76 23.46 23.75 24.12 0.8394 0.8242 0.8384 0.8525 0.8308 0.8474 0.8343 0.8470 0. 0.1970 0.2249 0.1969 0.1893 0.2137 0.1807 0.2042 0.1819 0.1763 Effectiveness of motion mask (row 2). Introducing motion mask allows the motion flow to focus on the motion of dynamic objects, thereby reducing interference from static areas. When the motion mask is removed, the performance declines. We attribute this degradation to inaccurate optical flow in the background areas, which introduces errors in the motion guidance and subsequently leads to incorrect Gaussian deformations. Different depth choice (row 3). Estimating the accurate depth maps for depth warping is critical issue when calculating camera flow. We find that using depth prediction from offline estimator Midas [75] yields suboptimal results. This approach degrades the quality of subsequent motion flow, reducing the accuracy of motion constraints and ultimately impacting the reconstruction quality. We attribute this degradation to the inherent scale ambiguity [77] in the depth estimator, as shown in Figure 10. In contrast, using rendered depth by 3DGS ensures scale and geometric consistency and provides superior detail. Different optical flow network (row 4-5). Our method relies on existing 2D optical flow estimators to provide motion guidance for the 3D Gaussian fields. The choice of optical flow prior can lead to performance differences. When we replace GMFlow [20] with another supervised method FlowFormer [19], the performance deteriorates. This is mainly due to the fact that FlowFormer performs inadequately in the \"plate\" scene, resulting in an overall performance decrease. Additionally, when we replace GMFlow [20] with self-supervised method MDFlow [76], the performance is 17 even worse. This phenomenon may also illustrates the importance of accurate motion priors, while erroneous or noisy motion constraints may even have negative effect on the optimization. Self-supervised flow supervision loss (row 6). Inspired by self-supervised optical flow estimation methods, we attempt to provide motion priors in self-supervised manner. Specifically, we estimate the Gaussian flow corresponding to the optical flow and use it to warp the It frame. We then compute the photometric loss with the It+1 frame. As shown in the table, this method outperforms our baseline but is less effective compared to our proposed method. We hypothesize that the discrepancy arises because the self-supervised loss may not provide accurate supervision in areas with similar colors. Nevertheless, it is evident that employing self-supervised optical flow loss can reduce dependence on off-the-shelf optical flow estimation. When an optical flow estimation network is either unavailable or inaccurate, this approach can serve as valuable alternative to improve rendering quality. Different flow loss weights (row 7-8). We compare the rendering performance under different flow loss weights. The results indicate that the selected weight (λ = 0.5) achieves the best rendering quality. We speculate that excessively large loss weights may disrupt the original optimization process based on rendering losses, while too small weights may result in insufficient motion guidance. A.4 More Visualizations Please refer to Figures 12, 13 and 14. A.5 Limitation Figure 11: Failure case in DyNeRF dataset. Since the viewpoints are fixed and sparse, neither motion flow nor optical flow can help our method avoid floating artifacts. During our experiments, we identify several unresolved issues. Specifically, when applying our method to the DyNeRF dataset [78], we encounter significant challenges as illustrated in Figure 11. Upon further analysis, we find that the fixed and sparse camera viewpoints in the DyNeRF dataset hinder accurate depth rendering, affecting subsequent camera flow calculations and leading to artifacts. The inaccuracies in motion flow primarily comes from the inaccuracy of the camera flow, rather than failure of the optical flow estimation itself. It is also important to clarify that the DyNeRF dataset is not continuous monocular video but rather dynamic scenes with sparse viewpoints, which posed challenges to the canonical 3D Gaussian initialization. Moving forward, our focus will be on addressing these issues to further improve the robustness of our model in dynamic scene reconstruction. We aim to develop more stable and reliable motion priors and adapt our approach to handle scenarios with minimal object movement more effectively. By doing so, we hope to extend the applicability and reliability of our method across wider range of dynamic scenes. A.6 Broader Impacts To the best of our knowledge, the proposed method will not have significant negative social impact. The proposed dynamic reconstruction method can be used to reconstruct and render some daily dynamic scenes. Users can use the video shot by their mobile phones as input to obtain an explicit 3D asset represented by 3D Gaussian and deformation field. This 3D asset can be used for subsequent editing, development, secondary creation for entertainment. 18 A.7 Data Availability The datasets that support the findings of this study are available in the following repositories: NeRFDS [73] at https://github.com/JokerYan/NeRF-DS/releases/tag/v0.1-pre-release under Apache-2.0 license, HyperNeRF [49] at https://github.com/google/hypernerf/ releases/tag/v0.1 under Apache-2.0 license. The code of our baseline [17] is available at https://github.com/ingra14m/Deformable-3D-Gaussians under MIT license. Figure 12: Qualitative comparison on NeRF-DS dataset per-scene. Compared with the state-ofthe-art methods, our method can render more reasonable details, especially on dynamic objects. 19 Figure 13: Qualitative comparison on HyperNeRF dataset per-scene. Compared with the stateof-the-art methods, our method is more robust in reconstructing dynamic scenes. Even if the input camera pose is not accurate on HyperNeRF dataset, our method can adaptively optimize the camera poses and produce reasonable rendering results. 20 Figure 14: Visualization of all data flows. In order: ground truth of It, ground truth of It+1, rendered image of It, rendered depth of frame It, optical flow, camera flow, motion flow, Gaussian flow."
        }
    ],
    "affiliations": [
        "University of Science and Technology of China"
    ]
}