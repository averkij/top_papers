{
    "paper_title": "Agentic Design of Compositional Machines",
    "authors": [
        "Wenqian Zhang",
        "Weiyang Liu",
        "Zhen Liu"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "The design of complex machines stands as both a marker of human intelligence and a foundation of engineering practice. Given recent advances in large language models (LLMs), we ask whether they, too, can learn to create. We approach this question through the lens of compositional machine design: a task in which machines are assembled from standardized components to meet functional demands like locomotion or manipulation in a simulated physical environment. To support this investigation, we introduce BesiegeField, a testbed built on the machine-building game Besiege, which enables part-based construction, physical simulation and reward-driven evaluation. Using BesiegeField, we benchmark state-of-the-art LLMs with agentic workflows and identify key capabilities required for success, including spatial reasoning, strategic assembly, and instruction-following. As current open-source models fall short, we explore reinforcement learning (RL) as a path to improvement: we curate a cold-start dataset, conduct RL finetuning experiments, and highlight open challenges at the intersection of language, machine design, and physical reasoning."
        },
        {
            "title": "Start",
            "content": "Wenqian Zhang1 Weiyang Liu2,* 1The Chinese University of Hong Kong (Shenzhen) *Equal Advising Corresponding Author Zhen Liu1,*, 2The Chinese University of Hong Kong besiegefield.github.io 5 2 0 2 6 ] . [ 1 0 8 9 4 1 . 0 1 5 2 : r Figure 1: The task of compositional machine design is illustrated in our BesiegeField environment. The figure shows high-level sketch of the agentic workflow (w/ Gemini Pro 2.5), along with the resulting machines and their simulated performance. The design objective is to create machine that throws boulders long distances."
        },
        {
            "title": "ABSTRACT",
            "content": "The design of complex machines stands as both marker of human intelligence and foundation of engineering practice. Given recent advances in large language models (LLMs), we ask whether they, too, can learn to create. We approach this question through the lens of compositional machine design: task in which machines are assembled from standardized components to meet functional demands like locomotion or manipulation in simulated physical environment. To support this investigation, we introduce BesiegeField, testbed built on the machine-building game Besiege, which enables part-based construction, physical simulation and reward-driven evaluation. Using BesiegeField, we benchmark state-of-the-art LLMs with agentic workflows and identify key capabilities required for success, including spatial reasoning, strategic assembly, and instruction-following. As current open-source models fall short, we explore reinforcement learning (RL) as path to improvement: we curate cold-start dataset, conduct RL finetuning experiments, and highlight open challenges at the intersection of language, machine design, and physical reasoning. Man is tool-making animal. Benjamin Franklin"
        },
        {
            "title": "INTRODUCTION",
            "content": "The history of human progress is, at its core, the history of machines, just as the ancient Greeks built the Antikythera mechanism to predict eclipses and Leonardo da Vinci envisioned machines to fly. Today, as large language models (LLMs) begin to approximateand in some domains, surpass human cognitive abilities, natural question arises:"
        },
        {
            "title": "Technical Report",
            "content": "Can computational models, like humans, conceive and create complex machines to achieve purposeful goals? At the heart of this question lie two tightly coupled concepts: compositionality, how parts are put together into assemblies, and functionality, the tasks these assemblies perform as they interact with external forces or inputs. While foundation models are already capable of synthesizing 3D shapes and building mechanical parts with computer-aided design (CAD) models, it is the complex compositional structures, in which very different parts and components are orchestrated to smoothly move together, that realize vast array of demands. Just as clock emerges from the composition of simple and standardized mechanical elements such as gears and flywheels, these same elements, when combined differently, can give rise to entirely different machines, such as sewing machine. On the other hand, the same functionality may be realized by different part compositions, just as both cars and bicycles can transport person from place to place. Put it concisely: composition is shaped by functionality, and functionality is realized through composition. Since such compositional machines can be expressed programmatically, with types, placements and articulations of parts represented in structured code that LLMs can generate and manipulate, we formalize the above question as: Can LLMs, given standardized mechanical parts and reward function for the desired functionality, discover diverse spatial part compositions that maximize the reward and complete the task? The question is not only about the pursuit of intelligence but also about the practice of engineering. Modern design pipelines are often long and costly, especially in large-scale projects where each iteration demands substantial resources. These projects accumulate vast collections of documents and blueprints, making it difficult to trace, retrieve, or reuse past design efforts. Much essential knowhow is passed informally across teams and generations, and in many cases, never fully recorded and since forgotten. An automated machine design system could directly address these challenges. Rather than merely mimicking patterns from historical designs, such system should be agentic: capable of exploring the exponentially large design space, leveraging prior knowledge to create novel designs for new demands and constraints, and improving them through feedback. To investigate this concretely, we introduce BesiegeField, an interactive environment built on the machine-design game of Besiege1. The environment allows for construction of simple mechanical machines with standardized and semantic parts such as gears and wheels, and supports customized physical scenarios in which LLM agents can test constructed machines and evaluate their dynamics and interactions. Building on BesiegeField, we benchmark state-of-the-art LLMs with different agent designs and strategies for selecting and placing basic mechanical elements to build machines for representative functional demands, task we term compositional machine design. Through these experiments, we empirically identify key capabilities required for this task: accurate spatial reasoning, high-level knowledge of design strategies, and instruction-following in spatial domains. Since only few proprietary LLMs achieve satisfactory results, we further investigate how reinforcement learning (RL) can improve the performance of open-source LLMs. To this end, we curate small machine design dataset to cold-start RL finetuning, perform exploratory RL experiments, and highlight key challenges that chart directions for future research. In summary, our contributions are listed below: We introduce and formalize the task of compositional machine design, where machines are assembled from standardized parts to achieve functional goals. We present BesiegeField, an interactive environment that enables LLM agents to construct, simulate, and evaluate compositional machines in customized physical scenarios. We systematically benchmark state-of-the-art LLMs and different agentic workflow designs on representative machine-design tasks. We explore RL finetuning of LLMs on this task, for which we curate cold-start dataset, conduct experiments, and highlight the key challenges."
        },
        {
            "title": "2 COMPOSITIONAL MACHINE DESIGN",
            "content": "Full machine design involves many coupled elements: geometry, statics and dynamics, demand analysis, failure modes, safety, and even legal constraints (Beitz et al., 1996; Wong et al., 2025). To 1https://en.wikipedia.org/wiki/Besiege_(video_game)"
        },
        {
            "title": "Technical Report",
            "content": "isolate tractable subproblem, we focus on the structural composition of machines: how standardized parts are spatially arranged and mechanically linked to produce functional behavior. We refer to this task, introduced in the previous section, as compositional machine design. It captures two essential components: (i) the static geometry of machine as part-based assembly, and (ii) its compatibility with functional demands, typically assessed through physical simulation. This abstraction omits considerations such as manufacturing constraints, material properties, or domain-specific regulations, but retains the core spatial and behavioral reasoning challenges relevant to design. This special task of compositional machine design mirrors challenges found in other exploration domains. For example, automatic theorem proving involves compositional and exponentially large action space, while electronic design automation (EDA) for chip layouts requires spatial reasoning to place components of varying shapes under spatial constraints (albeit in more regular and grid-constrained fashion than mechanical parts in machines). unique challenge in machine design, however, is its dependence on diverse long-horizon behaviors, both autonomous and nonautonomous, within an environment. Specifically, machine may behave differently when operated in different ways (e.g., bicycle when pedaled versus when braking) or under different external conditions (e.g., driving car in sunny versus rainy weather). Similarly, many sophisticated machines cannot function without appropriate control policies, as exemplified by aircraft that rely on fly-by-wire systems to stabilize their inherently unstable aerodynamic configurations (which would otherwise be unflyable by human pilot alone). key open problem is therefore how to account for the interplay among physics, control policy, and compositional structure in machine design. It is worth noting that, unlike in math theorem proving where one valid proof often suffices (even though multiple proofs may still be valued), design domains typically require generating diverse set of candidate solutions. This diversity is essential to (i) differentiate products, (ii) adapt to unpredictable market demands, and (iii) account for uncertainty in real-world testing and deployment. Consequently, the task places greater emphasis on diversity, and model for compositional machine design should function more like generative model than simple reward maximizer."
        },
        {
            "title": "3 BESIEGEFIELD: PLAYGROUND FOR COMPOSITIONAL MACHINE DESIGN",
            "content": "Studying the full problem of compositional machine design is challenging, as it involves the coupling of many interacting factors. We therefore focus on minimalist, component-level setting in which machines are constructed primarily from cuboid primitives with clear functional semantics, together with small set of specialized exceptions, and operate under shared control policy in an environment governed by rigid-body and elastic mechanics. This abstraction allows us to properly benchmark the capabilities of existing LLMs and to assess the upper bounds, potential, and challenges of agentic systems and RL algorithms. To this end, we create BesiegeField, an interactive environment adapted from the machine-building game Besiege, in which players design medieval machines to complete tasks such as destroying castles. Powered by the built-in physics engine, BesiegeField supports physical simulation of mechanical systems such as vehicles and catapults in user-customized environments with terrains, obstacles, external forces (e.g., wind and gravity), and co-existing agents. The environment provides nearly 80 types of building blocks (examples illustrated in Fig. 10), including passive ones like drills and logs, and powered ones like powered cogs and wheels. Machines are constructed by sequentially attaching new parts to vacant and attachable faces of existing blocks, starting from root block and thus forming construction tree (indeed directly acyclic graph (DAG), in the sense of operation orders; one block can has two parents in the DAG; the actual structures may contain loops). Powered blocks can receive control commands, allowing machines to be operated precisely. During simulation, complete state information (e.g., the position and velocity of each block in the constructed machine) can be recorded for model feedback. Finally, the environment supports custom modifications and can be extended with additional block types and richer physics (e.g., simple fluid simulation). Further details are explained in Appendix B. BesiegeField is unique in balancing real-world geometry and physics, part-level semantics, and simple compositional rules. Block-stacking environments like LEGO (Fan et al., 2022) and Minecraft (Fan et al., 2022; Pun et al., 2025) allow intuitive combinatorial assembly but do not natively provide realistic physical simulation and rely on generic blocks with limited semantic meaning. CAD modeling (Li et al., 2025) captures fine-grained geometry and interactions, but its complexity makes rules cumbersome and sequences prohibitively long. By contrast, BesiegeField"
        },
        {
            "title": "Technical Report",
            "content": "Figure 2: Demonstration of the machine design tasks in our experiments. (Left: car; Right: catapult). Figure 3: Demonstration of the default XML representation and our construction tree representation. Parent block info is in blue and child info is in red. uses semantically meaningful parts with cuboid-like construction rulessupporting realistic physics while remaining abstract enough for tractable composition. This calibrated balance enables the study of compositional creativity and geometric reasoning at level of difficulty that both differentiates algorithms and permits rapid experimentation. Moreover, unlike prior environments, BesiegeField supports machine destruction, adding durability and failure analysis to the design space."
        },
        {
            "title": "4.1 BENCHMARK SETTINGS",
            "content": "Representative target machines and tasks. To benchmark and characterize the performance of different LLMs for agentic compositional machine design, we consider two conceptually simple yet representative target machines to build: car and catapult as shown in Fig. 2. While success in both requires understanding part semantics and structural syntax, car building primarily tests static relational reasoning, such as enforcing correct part orientations, symmetry, and stability; in contrast, catapult building challenges models with dynamic relational reasoning, where parts must coordinate over time to produce causal mechanical effects. Moreover, the two tasks are simple enough to be constructed with only few blocks so that they fit within the LLMs context window, yet complex enough to require explicit reasoning about construction strategies and causal dependencies. We evaluate the performance of cars and catapults by their moving distance and their throwing distance (i.e., the moving distance of the stone), respectively, towards fixed and given direction. During each simulation, the generated machine will be placed at designated position, and the active parts will be powered after few seconds. As there can be reward hacking issues, for catapults experiments we surround the designated machine placement position with moderate-height walls. More details about the target machines, rewards, and environments can be found in Appendix B. Machine representations. In BesiegeField, the default XML representation records all blocks with global 3D positions and uses built-in algorithm to recover connections. Such representation, however, does not well encode machine structures. Instead, we propose parsimonious representation aligned with the games building logic, based on pairwise relative attachment relationships (i.e., how one part is rotated and attached to another). Details are explained in Appendix D.3. Performance metrics. We evaluate our agentic systems using the following quantitative metrics: 1) file validity rate, the proportion of generated JSON files that can be successfully parsed into machine construction trees; 2) spatial validity rate, the proportion of generated machines that are free from self-collisions; 3) machine validity rate, the proportion of machines that satisfy both file and spatial validity; 4) mean and maximum simulation scores, the average and highest rewards achieved by generated machines in the environment."
        },
        {
            "title": "Technical Report",
            "content": "Figure 4: Example CoT of inspector agents (w/ Gemini 2.5 Pro). Blue text highlights the moderate capability of LLMs in spatial reasoning and imagined physical simulation. Figure 5: Example CoT of inspector agents (w/ OpenAI o3). Red text highlights reasoning errors. Environment feedback. For the simple target machines car and catapult, we consider environment feedback within time window of 5 seconds that is long enough to characterize their designated functionalities. Specifically, for car we consider maximum speed and driving distance; for catapult, we consider boulder throwing distance and maximum height. We also record the machines global orientation and broken parts information (if any). Details are elaborated in Appendix D.5."
        },
        {
            "title": "4.2 AGENTIC WORKFLOW DESIGN",
            "content": "Single-agent setting. We first benchmark if single LLM agent alone is capable of completing the task. Specifically, one LLM agent is provided with the environment description, the available machine components, the assembly syntax, and the functional requirements (e.g., moving an object forward). The agent generates chain-of-thought (CoT; Wei et al. (2022)) to reason about what is needed and why, and then derives an abstract plan (e.g., connecting lever to container with boulder). This plan is later translated into the construction tree representation. Iterative editing. Because compositional machine design requires both low-level spatial reasoning and high-level ideation, single agent rarely produces satisfactory machines. We therefore also design an iterative editing workflow that involves three major agents: 1) designer, which produces an initial plan from the environment description, the available machine components, the assembly syntax, and the functional requirements; 2) refiner, self-critic agent that which evaluates draft against requirements and constraints and proposes multiple candidate revisions at each step; 3) environment querier, an agent that runs machine simulation and summarizes the environment feedback, in the way that it always provides global information such as machine orientation throughout the trajectory but selectively reports the feedback on specific blocks (e.g., position and speed) for further machine refinement. The workflow begins with draft from the designer that is later critiqued by an inspector, which assess the designed machine in an abstract fashion, then polished once by"
        },
        {
            "title": "Technical Report",
            "content": "Figure 7: Machines produced by agentic systems with different LLMs (Top: car; Bottom: catapult). Models Catapult Task Gemini 2.5 Pro OpenAI o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E Car Task Gemini 2.5 Pro OpenAI o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E Single-agent Max Mean Std Mean Iterative Editing Max 2.30 2.87 1.75 3.18 1.19 3.50 2.57 3.18 33.96 15.28 8.87 3.51 9.83 9.06 1.75 0. 9.0 5.22 9.24 8.2 4.82 4.86 9.05 5.64 40.85 32.08 11.50 9.40 12.98 10.53 8.09 0.03 3.86 1.96 3.17 2.99 2.21 2.17 3.72 1.95 6.73 8.97 4.46 4.85 1.28 3.68 2.80 0.01 4.67 9.14 5.10 4.82 1.18 3.07 2.82 1.28 34.34 14.34 15.24 8.11 8.07 8.23 14.36 3. 21.95 14.01 12.02 9.10 4.91 5.24 11.39 5.94 41.66 35.08 28.95 10.04 28.04 18.84 28.34 12.76 Std 8.68 3.71 5.54 3.41 2.18 2.55 5.23 2.41 13.96 11.79 13.12 3.58 12.48 7.12 9.47 5.23 Hierarchical Design Max Mean Std 9.83 2.00 3.90 1.73 2.27 2.41 5.39 3.59 29.96 28.39 12.59 18.75 14.56 17.92 1.94 1.55 18.19 11.11 6.52 4.76 9.32 4.93 12.02 11.83 41.52 36.18 34.05 26.02 38.67 31.94 14.99 2. 8.35 3.98 2.54 2.39 4.22 2.58 5.16 4.15 7.78 11.01 10.78 4.38 20.69 12.85 5.48 0.32 Table 1: Quantitative results of agentic systems with different LLMs. refiner. The design then undergoes fixed number of iterations, each consisting of one querier and one refiner step. At refiner stages, multiple candidates are generated for running Monte Carlo tree search (MCTS; Coulom (2006)). The best design found in this search process is selected as output. Hierarchical construction. Inspired by typical human design processes as well as recent designs of agentic systems (Xiao et al., 2025; Teng et al., 2025; Zhang et al., 2025), we introduce meta-designer agent that first analyzes the requirements and constraints, and then constructs highlevel blueprint of the major functional blocks (e.g., the suspension system) and their interconnections. With this blueprint in place, we adopt an autoregressive strategy to build the machine block by block: 1) we begin with the first functional block and dispatch the job to eight parallel builder agents; 2) the valid designs from this stage are evenly distributed to another eight builder agents to construct the second block; and 3) the process iterates in this manner until the entire machine is assembled. Empirically, we find that the meta-designer typically decomposes machine into three to four functional blocks. Figure 6: Our agentic machine design workflow."
        },
        {
            "title": "4.3 KEY EMPIRICAL OBSERVATIONS",
            "content": "General observations. We find compositional machine design to be challenging task for LLMs (Fig. 7 and Table 1), though not intractable: Gemini 2.5 Pro can consistently construct visually sensible machines with non-trivial performance. We find no evidence that reasoning models outperform non-reasoning ones, suggesting the main bottleneck lies in LLMs limited 3D understanding and/or in-context learning. We also find that LLMs, especially reasoning models, still exhibit some spatial and physical reasoning as exemplified by the CoT from Gemini Pro 2.5  (Fig. 4)  , much like world model in text space. Failure patterns. We identified common failure patterns in LLM-generated machines  (Fig. 18)  : 1) incorrect part orientations; 2) incorrect part placements, where parts attach to wrong parents; 3)"
        },
        {
            "title": "Technical Report",
            "content": "instruction-following failures, where elements of the high-level blueprint are not strictly observed; 4) flawed high-level reasoning, where LLMs fail to recognize correct physics or essential components. Effect of environment feedback. It is unsurprising that with the more environment feedback the agents receive, the better performance of generated machines improve in general  (Table 12)  . Effect of edit history. We find that edit histories are generally helpful in decreasing the number of failure attempts in creating valid machines  (Table 6)  , which underscores the importance of longer context window of base models for efficient exploration. Hierarchical design. We observe the mean performance improves with hierarchical design only when the abstract-level reasoning on blueprints is reliable, as shown by the performance of Gemini 2.5 Pro. In the meantime, consistent with the intuition that hierarchical design is more structured and principled, it generally yields lower variance in obtained scores. Effect of CoT reasoning. As shown in Fig. 18, LLMs often fail to faithfully translate high-level machine design plans in their CoT into semantically and geometrically consistent machine construction trees. To better assess the impact of CoT reasoning on high-level design, we feed the CoT generated by Gemini 2.5 Pro (the best-performing model) to other LLMs, prompting them to directly output construction trees. The resulting machines generally show improved performance  (Fig. 31)  and highlight the critical role of high-level semantic reasoning in machine design. CoT-machine correspondence. Though the CoT often provides reasonably high-level blueprint, agents may still generate machines that deviate from the intended structure  (Fig. 18)  . We hypothesize that this misalignment is key reason many LLMs struggle to build better machines. Machine representation. We experiment with coordinate-only representation derived from the default XML (Appendix D.1) and our construction tree representation. Results show that the coordinate-only representation performs significantly worse  (Table 7)  , implying that explicit structural information is necessary for LLM understanding. 3D information. We observe that  (Table 5)  the performance generally improves when we also feed parsed 3D information into the context of LLMs, which implies that LLMs are less capable of understanding relative spatial relationship (e.g., construction trees)."
        },
        {
            "title": "5 TOWARDS MACHINE DESIGN THROUGH REINFORCEMENT LEARNING",
            "content": "Although agentic systems show promise in compositional machine design, simply scaling system size is unlikely to be economical, as errors compound rapidly. Like humans who internalize experience, LLM agents should consolidate new knowledge into weights. We thus explore reinforcement learning with verifiable rewards (RLVR) in BesiegeField to develop machine-design capabilities."
        },
        {
            "title": "5.1 EXPERIMENTAL SETTINGS",
            "content": "Cold-start finetuning and dataset curation. Following recent RLVR practices (Lambert et al., 2025; Yue et al., 2025; Zhu et al., 2025a), we curated small dataset to cold-start LLMs by aligning their reasoning process with expert CoT. Specifically, we collected textual descriptions of machine functionalities from Besiege player communities and prompted Gemini 2.5 Pro to generate corresponding machines. After filtering out invalid generations, we obtained 9,984 valid machineCoT pairs. We then used this dataset to perform supervised finetuning on Qwen-2.5-14B-Instruct for 12 epochs. Additional training details are provided in Appendix F.2. Reward design. We use the reward = is_valid performance where is_valid indicates whether constraints are satisfied (Appendix D.4). For car, performance is the maximum travel distance; for catapult, it is the product of the boulders maximum height and distance, penalizing solutions that are extreme in only one dimension. RL finetuning settings. We finetune agents specialized in building single type of machine (either car or catapult), making our setup closely aligned with one-shot RLVR (Wang et al., 2025) where single prompt is used throughout the RL process. We adopt group relative policy optimization (GRPO; Shao et al. (2024)) with LoRA parametrization (Hu et al., 2022) (rank 64) and mixedprecision training to finetune the cold-started model. We evaluate both the standard GRPO advantage estimator and the pass@k variant (Tang et al., 2025). In the latter case, due to the implementation of the RLVR framework verl (Sheng et al., 2025), the number of rollouts is set equal to k. Each"
        },
        {
            "title": "Technical Report",
            "content": "Models Catapult Car Validity Ratio Mean Score Max Score Validity Ratio Mean Score Max Score Qwen2.5-14B-Instruct Qwen2.5-14B-Instruct + Cold-Start Qwen2.5-14B-Instruct + RL Qwen2.5-14B-Instruct + Cold-Start + RL 11/50 9/50 12/50 11/50 0.06 0.11 0.13 0.14 2.41 5.54 5.92 7.14 46/50 40/50 41/50 42/ 4.97 4.67 3.72 5.05 19.10 20.23 24.08 45.72 Table 2: Results of RLVR post-training in BesiegeField. We use Qwen2.5-14B as the backbond LLM. experiment is run for 400 iterations on 8 A100 GPUs with per-GPU batch size of 1 and gradient accumulation of 8. We apply KL regularization with strength 0.001 to encourage the model to remain close to its initialization."
        },
        {
            "title": "5.2 MAIN RESULTS AND OBSERVATIONS",
            "content": "General results. As shown in Fig. 25, RL finetuning can generally improve the mean performance, mostly by increasing the percentage that machines are valid (including file validity, machine validity and satisfaction of minimum performance threshold). In the meantime, we also find that the maximum reward increases in our best setting. Similar to observations in many other RLVR settings, the entropy of the output distribution quickly drops even with regularization. Pass@k advantage vs. Pass@1 advantage. Since we eventually care about the best performing designs, especially given the low validity rate, our default setting adopts Pass@k advantage estimator. Indeed, Pass@k finetuning is more likely to discovery promising machine designs  (Fig. 23)  . Evolution of generated machines during finetuning. In Fig. 8, we qualitatively examine how models refine their designs over the course of finetuning. We observe that models typically make detail-level adjustments, such as shifting part positions, while keeping the same high-level design strategy rather than exploring alternative strategies. Although these strategies are often reasonable, the models struggle to find precise configurations that enable smooth coordination among parts. This precision is especially critical for sophisticated mechanisms like catapults to function properly. Figure 8: Designs at RL finetuning stages. Cold-start. Not surprisingly, we find that cold-start alone does not enable models to produce satisfactory designs, and that finetuning on the cold-start model is better than on the base model  (Table 2)  ."
        },
        {
            "title": "6 DISCUSSIONS AND INTRIGUING INSIGHTS",
            "content": "Capabilities for compositional machine design. Although tasks such as visual understanding and generation also depend on spatial, physical, and semantic reasoning, compositional machine design introduces unique requirements for LLM capabilities. Without precise spatial placement of machine parts, design may fail to function correctly; gear train, for example, will not transmit rotation if the gears are misaligned. Since the design process is typically hierarchical, successful LLMs must be able to accurately translate high-level blueprints into detailed geometric designs. In addition, machine design spans both concept-level reasoning and detailed specification. This dual demand often leads to large design documents and calls for form of visual reasoning expressed through text, similar to what has been studied in LLMs applied to scalable vector graphics (SVG) and CAD models (Qiu et al., 2025b; Alrashedy et al., 2025). Multimodal reasoning is also important because effective machine design typically relies on integrating textual descriptions with visual or schematic representations. In this work, however, we focus only on pure LLM-based reasoning to isolate and analyze its capabilities for compositional machine design. Challenges in agentic machine design systems. The task of machine design faces similar challenges found in agentic systems in domains such as legal services and other knowledge-intensive fields. key difficulty is the highly varied requirements and domain knowledge of different customers. To address this, LLMs need to acquire task-specific knowledge through in-context learning or finetuning. In addition, the complexity of design tasks often requires multiple agents to coordinate, and such pipelines can suffer error accumulation when the base LLM lacks sufficient capability. Exploration in machine design space. Different from tasks such as theorem proving, the goal of compositional machine design is to discover structures that more effectively achieve desired func-"
        },
        {
            "title": "Technical Report",
            "content": "tionalities. Rather than reusing existing solutions, practical design agent should be able to propose novel strategies, structural layouts, and part specifications as machine complexity increases. Meeting this requirement calls for RL finetuning methods that prevent models from collapsing into narrow set of strategies and structures, which recent methods aim to alleviate (Zhu et al., 2025b; Chen et al., 2025c; Cui et al., 2025; Cheng et al., 2025; Liu et al., 2025b). This demand is closely related to continual RL (Schwarz et al., 2018), since finetuned LLMs must avoid catastrophic forgetting, maintain its reasoning ability, and consolidate learned strategies, which is particularly important because large-scale machine design datasets are rare and commercially infeasible to collect."
        },
        {
            "title": "7 RELATED WORK AND CONCLUDING REMARKS",
            "content": "3D graphics codes for generative modeling. There is long history in 3D asset generation and engineering design of representing the construction of target instance as program or sequence of operations in domain-specific language (Ritchie et al., 2023; Sun et al., 2025; Deng et al., 2022), which we refer to here as 3D graphics codes (Qiu et al., 2025b; Chen et al., 2025a). Unlike geometric representations such as point clouds or meshes, these codes describe objects at higher semantic level, capturing part composition, design constraints, and user operations in modeling software. Similar to programming languages, 3D graphics codes are inherently discrete and are typically generated with autoregressive models trained from scratch (Yuan et al., 2024) or with LLMs finetuned on curated datasets (Kulits et al., 2025; Chen et al., 2025b). Much of the existing work centers on CAD scripts for individual parts (Wu et al., 2023; Alrashedy et al., 2025; Li et al., 2025) or Blender macros for single assets (Huang et al., 2024). Whereas recent studies on LEGO assemblies (Pun et al., 2025), Minecraft structures (Fan et al., 2022; Liu et al., 2025a), and procedural scene generation (Sun et al., 2025; Chen et al., 2025a; Jones et al., 2025; Yuan et al., 2024) introduce richer compositionality, they still fall short of the task of compositional machine design, which requires assemblies that both function under physical laws and exhibit the precise geometry of real objects. LLM agents. LLM agents are language models organized to operate in iterative loops of perception and action (Yao et al., 2023b; Minaee et al., 2024; Hu et al., 2024c). They interact with external tools (Schick et al., 2023; Liu et al., 2024b; Kim et al., 2024; Qin et al., 2024), respond to signals from simulated or real environments (Savva et al., 2019; Shridhar et al., 2021), incorporate selfreflection to refine their outputs (Hu et al., 2024b; Alrashedy et al., 2025; Shinn et al., 2023; Yu et al., 2025), and are commonly organized into multi-agent systems that coordinate roles and exchange information (Li et al., 2023; Chen et al., 2024; Zhang et al., 2025) . These designs move beyond one-shot text generation and establish LLMs as adaptive decision makers capable of long-horizon reasoning. Approaches that introduce search over possible solutions (Yao et al., 2023a; Putta et al., 2024; Koh et al., 2024) or reflection on prior attempts (Besta et al., 2024; Deng et al., 2024; Renze & Guven, 2024; Xiao et al., 2025; Yu et al., 2025) have enabled progress on increasingly complex tasks. LLM agents have already been used in design tasks such as code synthesis (Gao et al., 2023; Novikov et al., 2025; Madaan et al., 2023), CAD design (Alrashedy et al., 2025) and game environments (Wang et al., 2024; Fan et al., 2022). Partially inspired by these developments, Makatura et al. (2023) proposed prototypical agent-based design framework that generates mechanical structures from text prompts. Their system treats structure generation as one-shot process and delegates the search for optimal geometric and physical parameters to external optimization tools. In contrast, our work with BesiegeField explores how LLM agents can directly and iteratively bridge compositional structures to functional goals, framing design as process of reasoning and adaptation with both accurate simulation and intuitive physics. Reinforcement learning with verifiable rewards (RLVR). Recent studies indicate that, by running RL finetuning with verifiable rewards from simulators or verifiers, reasoning abilities emerge (Shao et al., 2024; Guo et al., 2025; Bai et al., 2022), even when single prompt is used during finetuning (Wang et al., 2025). Yet, many methods exhibit loss of diversity as output entropy collapses during reinforcement learning and thus do not fully enable LLMs to explore novel solutions. Examples of mitigation methods include explicit entropy or KL regularization (Cui et al., 2025; Ouyang et al., 2022), Pass@k training (Tang et al., 2025; Chen et al., 2025c), and distribution-matching objectives like generative flow networks (Zhu et al., 2025b; Hu et al., 2024a). BesiegeField provides verifiable rewards and thus enables direct application of RLVR to compositional machine design. Concluding remarks. We introduced compositional machine design, simplified yet challenging task that reflects core aspects of real-world machine design. To evaluate LLM performance on this"
        },
        {
            "title": "Technical Report",
            "content": "task, we developed BesiegeField, an interactive environment based on the game Besiege. Our results with agentic systems and reinforcement learning demonstrate that LLMs hold promise for solving this problem. While we did not exhaustively explore all designs or integrate multi-modal information, our findings underscore the need to advance fundamental LLM algorithms and capabilities, and point toward exciting future directions in machine design."
        },
        {
            "title": "ACKNOWLEDGMENT",
            "content": "We sincerely thank the developers of Besiege for creating the game and fostering an open and vibrant community, without which our exploration of this exciting idea would not have been possible."
        },
        {
            "title": "REFERENCES",
            "content": "Kamel Alrashedy, Pradyumna Tambwekar, Zulfiqar Haider Zaidi, Megan Langwasser, Wei Xu, and Matthew Gombolay. Generating CAD code with vision-language models for 3d designs. In ICLR, 2025. 8, 9 Yuntao Bai, Saurav Kadavath, Sandipan Kundu, Amanda Askell, Jackson Kernion, Andy Jones, Anna Chen, Anna Goldie, Azalia Mirhoseini, Cameron McKinnon, et al. Constitutional ai: Harmlessness from ai feedback. arXiv preprint arXiv:2212.08073, 2022. 9 Beitz, Pahl, and Grote. Engineering design: systematic approach. Mrs Bulletin, 71:30, 1996. 2 Maciej Besta, Nils Blach, Ales Kubicek, Robert Gerstenberger, Michal Podstawski, Lukas Gianinazzi, Joanna Gajda, Tomasz Lehmann, Hubert Niewiadomski, Piotr Nyczyk, et al. Graph of thoughts: Solving elaborate problems with large language models. In AAAI, 2024. 9 Weize Chen, Yusheng Su, Jingwei Zuo, Cheng Yang, Chenfei Yuan, Chi-Min Chan, Heyang Yu, Yaxi Lu, Yi-Hsin Hung, Chen Qian, Yujia Qin, Xin Cong, Ruobing Xie, Zhiyuan Liu, Maosong Sun, and Jie Zhou. Agentverse: Facilitating multi-agent collaboration and exploring emergent behaviors. In ICLR, 2024. Yamei Chen, Haoquan Zhang, Yangyi Huang, Zeju Qiu, Kaipeng Zhang, Yandong Wen, and Weiyang Liu. Symbolic graphics programming with large language models. arXiv preprint arXiv:2509.05208, 2025a. 9 Yongwei Chen, Yushi Lan, Shangchen Zhou, Tengfei Wang, and Xingang Pan. Sar3d: Autoregressive 3d object generation and understanding via multi-scale 3d vqvae. In CVPR, 2025b. 9 Zhipeng Chen, Xiaobo Qin, Youbin Wu, Yue Ling, Qinghao Ye, Wayne Xin Zhao, and Guang Shi. Pass@ training for adaptively balancing exploration and exploitation of large reasoning models. arXiv preprint arXiv:2508.10751, 2025c. 9 Daixuan Cheng, Shaohan Huang, Xuekai Zhu, Bo Dai, Wayne Xin Zhao, Zhenliang Zhang, and Furu Wei. Reasoning with exploration: An entropy perspective. arXiv preprint arXiv:2506.14758, 2025. 9 Rémi Coulom. Efficient selectivity and backup operators in monte-carlo tree search. In International conference on computers and games, pp. 7283. Springer, 2006. 6 Ganqu Cui, Yuchen Zhang, Jiacheng Chen, Lifan Yuan, Zhi Wang, Yuxin Zuo, Haozhan Li, Yuchen Fan, Huayu Chen, Weize Chen, et al. The entropy mechanism of reinforcement learning for reasoning language models. arXiv preprint arXiv:2505.22617, 2025. 9 Boyang Deng, Sumith Kulal, Zhengyang Dong, Congyue Deng, Yonglong Tian, and Jiajun Wu. Unsupervised learning of shape programs with repeatable implicit parts. NeurIPS, 2022. 9 Yang Deng, Xuan Zhang, Wenxuan Zhang, Yifei Yuan, See-Kiong Ng, and Tat-Seng Chua. On the multi-turn instruction following for conversational web agents. arXiv preprint arXiv:2402.15057, 2024."
        },
        {
            "title": "Technical Report",
            "content": "Tim Dettmers, Mike Lewis, Sam Shleifer, and Luke Zettlemoyer. 8-bit optimizers via block-wise quantization. In ICLR, 2022. 32 Linxi Fan, Guanzhi Wang, Yunfan Jiang, Ajay Mandlekar, Yuncong Yang, Haoyi Zhu, Andrew Tang, De-An Huang, Yuke Zhu, and Anima Anandkumar. Minedojo: Building open-ended embodied agents with internet-scale knowledge. NeurIPS, 2022. 3, 9 Luyu Gao, Aman Madaan, Shuyan Zhou, Uri Alon, Pengfei Liu, Yiming Yang, Jamie Callan, and Graham Neubig. Pal: Program-aided language models. In ICML, 2023. 9 Daya Guo, Dejian Yang, Haowei Zhang, Junxiao Song, Peiyi Wang, Qihao Zhu, Runxin Xu, Ruoyu Zhang, Shirong Ma, Xiao Bi, et al. Deepseek-r1 incentivizes reasoning in llms through reinforcement learning. Nature, 645(8081):633638, 2025. Edward J. Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, and Weizhu Chen. Lora: Low-rank adaptation of large language models. In ICLR, 2022. 7 Edward Hu, Moksh Jain, Eric Elmoznino, Younesse Kaddar, Guillaume Lajoie, Yoshua Bengio, and Nikolay Malkin. Amortizing intractable inference in large language models. In ICLR, 2024a. 9 Shiying Hu, Zengrong Huang, Chengpeng Hu, and Jialin Liu. 3d building generation in minecraft via large language models. In 2024 IEEE Conference on Games (CoG), pp. 14. IEEE, 2024b. 9 Ziniu Hu, Ahmet Iscen, Aashi Jain, Thomas Kipf, Yisong Yue, David Ross, Cordelia Schmid, and Alireza Fathi. Scenecraft: An llm agent for synthesizing 3d scenes as blender code. In ICML, 2024c. 9 Ian Huang, Guandao Yang, and Leonidas Guibas. Blenderalchemy: Editing 3d graphics with visionlanguage models. In ECCV, 2024. 9 Kenny Jones, Paul Guerrero, Niloy Mitra, and Daniel Ritchie. Shapelib: Designing liarXiv preprint brary of programmatic 3d shape abstractions with large language models. arXiv:2502.08884, 2025. 9 Myeongsoo Kim, Tyler Stennett, Dhruv Shah, Saurabh Sinha, and Alessandro Orso. Leveraging large language models to improve rest api testing. In Proceedings of the 2024 ACM/IEEE 44th International Conference on Software Engineering: New Ideas and Emerging Results, pp. 3741, 2024. 9 Jing Yu Koh, Stephen Marcus McAleer, Daniel Fried, and Russ Salakhutdinov. Tree search for language model agents. In ICLR, 2024. Peter Kulits, Haiwen Feng, Weiyang Liu, Victoria Fernandez Abrevaya, and Michael Black. Rethinking inverse graphics with large language models. Transactions on Machine Learning Research (TMLR), 2025. 9 Nathan Lambert, Jacob Morrison, Valentina Pyatkin, Shengyi Huang, Hamish Ivison, Faeze Brahman, Lester James Validad Miranda, Alisa Liu, Nouha Dziri, Xinxi Lyu, Yuling Gu, Saumya Malik, Victoria Graf, Jena D. Hwang, Jiangjiang Yang, Ronan Le Bras, Oyvind Tafjord, Christopher Wilhelm, Luca Soldaini, Noah A. Smith, Yizhong Wang, Pradeep Dasigi, and Hannaneh Hajishirzi. Tulu 3: Pushing frontiers in open language model post-training. In COLM, 2025. 7 Guohao Li, Hasan Hammoud, Hani Itani, Dmitrii Khizbullin, and Bernard Ghanem. Camel: Communicative agents for\" mind\" exploration of large language model society. NeurIPS, 2023. 9 Jiahao Li, Weijian Ma, Xueyang Li, Yunzhong Lou, Guichun Zhou, and Xiangdong Zhou. Cadllama: leveraging large language models for computer-aided design parametric 3d model generation. In CVPR, 2025. 3, 9 Shunyu Liu, Yaoru Li, Kongcheng Zhang, Zhenyu Cui, Wenkai Fang, Yuxuan Zheng, Tongya Zheng, and Mingli Song. Odyssey: Empowering minecraft agents with open-world skills. In IJCAI, 2025a."
        },
        {
            "title": "Technical Report",
            "content": "Weiyang Liu, Zeju Qiu, Yao Feng, Yuliang Xiu, Yuxuan Xue, Longhui Yu, Haiwen Feng, Zhen Liu, Juyeon Heo, Songyou Peng, et al. Parameter-efficient orthogonal finetuning via butterfly factorization. In ICLR, 2024a. 32 Xukun Liu, Zhiyuan Peng, Xiaoyuan Yi, Xing Xie, Lirong Xiang, Yuchen Liu, and Dongkuan Xu. Toolnet: Connecting large language models with massive tools via tool graph. arXiv preprint arXiv:2403.00839, 2024b. 9 Zhen Liu, Tim Xiao, Weiyang Liu, Yoshua Bengio, and Dinghuai Zhang. Efficient diversitypreserving diffusion alignment via gradient-informed gflownets. In ICLR, 2025b. 9 Aman Madaan, Niket Tandon, Prakhar Gupta, Skyler Hallinan, Luyu Gao, Sarah Wiegreffe, Uri Alon, Nouha Dziri, Shrimai Prabhumoye, Yiming Yang, et al. Self-refine: Iterative refinement with self-feedback. NeurIPS, 2023. 9 Liane Makatura, Michael Foshey, Bohan Wang, Felix HähnLein, Pingchuan Ma, Bolei Deng, Megan Tjandrasuwita, Andrew Spielberg, Crystal Elaine Owens, Peter Yichen Chen, et al. How can large language models help humans in design and manufacturing? arXiv preprint arXiv:2307.14377, 2023. Shervin Minaee, Tomas Mikolov, Narjes Nikzad, Meysam Chenaghlu, Richard Socher, Xavier Amatriain, and Jianfeng Gao. Large language models: survey. arXiv preprint arXiv:2402.06196, 2024. 9 Alexander Novikov, Ngân Vu, Marvin Eisenberger, Emilien Dupont, Po-Sen Huang, Adam Zsolt Wagner, Sergey Shirobokov, Borislav Kozlovskii, Francisco JR Ruiz, Abbas Mehrabian, et al. Alphaevolve: coding agent for scientific and algorithmic discovery. arXiv preprint arXiv:2506.13131, 2025. 9 Long Ouyang, Jeffrey Wu, Xu Jiang, Diogo Almeida, Carroll Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, et al. Training language models to follow instructions with human feedback. NeurIPS, 2022. 9 Ava Pun, Kangle Deng, Ruixuan Liu, Deva Ramanan, Changliu Liu, and Jun-Yan Zhu. Generating physically stable and buildable brick structures from text. In ICCV, 2025. 3, 9 Pranav Putta, Edmund Mills, Naman Garg, Sumeet Motwani, Chelsea Finn, Divyansh Garg, and Rafael Rafailov. Agent q: Advanced reasoning and learning for autonomous ai agents. arXiv preprint arXiv:2408.07199, 2024. Yujia Qin, Shihao Liang, Yining Ye, Kunlun Zhu, Lan Yan, Yaxi Lu, Yankai Lin, Xin Cong, Xiangru Tang, Bill Qian, Sihan Zhao, Lauren Hong, Runchu Tian, Ruobing Xie, Jie Zhou, Mark Gerstein, dahai li, Zhiyuan Liu, and Maosong Sun. ToolLLM: Facilitating large language models to master 16000+ real-world APIs. In ICLR, 2024. 9 Zeju Qiu, Weiyang Liu, Haiwen Feng, Yuxuan Xue, Yao Feng, Zhen Liu, Dan Zhang, Adrian Weller, and Bernhard Schölkopf. Controlling text-to-image diffusion by orthogonal finetuning. In NeurIPS, 2023. 32 Zeju Qiu, Simon Buchholz, Tim Xiao, Maximilian Dax, Bernhard Schölkopf, and Weiyang Liu. Reparameterized llm training via orthogonal equivalence transformation. In NeurIPS, 2025a. 32 Zeju Qiu, Weiyang Liu, Haiwen Feng, Zhen Liu, Tim Z. Xiao, Katherine Collins, Joshua Tenenbaum, Adrian Weller, Michael Black, and Bernhard Schölkopf. Can large language models understand symbolic graphics programs? In ICLR, 2025b. 8, 9 Zeju Qiu, Weiyang Liu, Adrian Weller, and Bernhard Schölkopf. Orthogonal finetuning made scalable. In EMNLP, 2025c. Matthew Renze and Erhan Guven. Self-reflection in llm agents: Effects on problem-solving performance. arXiv preprint arXiv:2405.06682, 2024. 9 Daniel Ritchie, Paul Guerrero, Kenny Jones, Niloy Mitra, Adriana Schulz, Karl Willis, and Jiajun Wu. Neurosymbolic models for computer graphics. In Eurographics, 2023."
        },
        {
            "title": "Technical Report",
            "content": "Manolis Savva, Abhishek Kadian, Oleksandr Maksymets, Yili Zhao, Erik Wijmans, Bhavana Jain, Julian Straub, Jia Liu, Vladlen Koltun, Jitendra Malik, et al. Habitat: platform for embodied ai research. In CVPR, 2019. 9 Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Eric Hambro, Luke Zettlemoyer, Nicola Cancedda, and Thomas Scialom. Toolformer: Language models can teach themselves to use tools. NeurIPS, 2023. 9 Jonathan Schwarz, Wojciech Czarnecki, Jelena Luketina, Agnieszka Grabska-Barwinska, Yee Whye Teh, Razvan Pascanu, and Raia Hadsell. Progress & compress: scalable framework for continual learning. In ICML, 2018. 9 Zhihong Shao, Peiyi Wang, Qihao Zhu, Runxin Xu, Junxiao Song, Xiao Bi, Haowei Zhang, Mingchuan Zhang, YK Li, Yang Wu, et al. Deepseekmath: Pushing the limits of mathematical reasoning in open language models. arXiv preprint arXiv:2402.03300, 2024. 7, 9 Guangming Sheng, Chi Zhang, Zilingfeng Ye, Xibin Wu, Wang Zhang, Ru Zhang, Yanghua Peng, Haibin Lin, and Chuan Wu. Hybridflow: flexible and efficient rlhf framework. In Proceedings of the Twentieth European Conference on Computer Systems, pp. 12791297, 2025. 7 Noah Shinn, Federico Cassano, Ashwin Gopinath, Karthik Narasimhan, and Shunyu Yao. Reflexion: Language agents with verbal reinforcement learning. NeurIPS, 2023. 9 Mohit Shridhar, Xingdi Yuan, Marc-Alexandre Cote, Yonatan Bisk, Adam Trischler, and Matthew Hausknecht. Alfworld: Aligning text and embodied environments for interactive learning. In ICLR, 2021. 9 Chunyi Sun, Junlin Han, Weijian Deng, Xinlong Wang, Zishan Qin, and Stephen Gould. 3d-gpt: Procedural 3d modeling with large language models. In 3DV, 2025. 9 Yunhao Tang, Kunhao Zheng, Gabriel Synnaeve, and Remi Munos. Optimizing language models for inference time objectives using reinforcement learning. In ICML, 2025. 7, Fengwei Teng, Zhaoyang Yu, Quan Shi, Jiayi Zhang, Chenglin Wu, and Yuyu Luo. Atom of thoughts for markov llm test-time scaling. arXiv preprint arXiv:2502.12018, 2025. 6 Guanzhi Wang, Yuqi Xie, Yunfan Jiang, Ajay Mandlekar, Chaowei Xiao, Yuke Zhu, Linxi Fan, and Anima Anandkumar. Voyager: An open-ended embodied agent with large language models. Transactions on Machine Learning Research (TMLR), 2024. 9 Yiping Wang, Qing Yang, Zhiyuan Zeng, Liliang Ren, Liyuan Liu, Baolin Peng, Hao Cheng, Xuehai He, Kuan Wang, Jianfeng Gao, et al. Reinforcement learning for reasoning in large language models with one training example. arXiv preprint arXiv:2504.20571, 2025. 7, 9 Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, brian ichter, Fei Xia, Ed H. Chi, Quoc Le, and Denny Zhou. Chain of thought prompting elicits reasoning in large language models. In NeurIPS, 2022. 5 Melvin Wong, Yueming Lyu, Thiago Rios, Stefan Menzel, and Yew-Soon Ong. Llm-to-phy3d: Physically conform online 3d object generation with llms. arXiv preprint arXiv:2506.11148, 2025. Sifan Wu, Amir Khasahmadi, Mor Katz, Pradeep Kumar Jayaraman, Yewen Pu, Karl Willis, and Bang Liu. Cad-llm: Large language model for cad generation. In NeurIPS, 2023. 9 Tim Xiao, Robert Bamler, Bernhard Schölkopf, and Weiyang Liu. Verbalized machine learning: Revisiting machine learning with language models. Transactions on Machine Learning Research, 2025. 6, 9 Shunyu Yao, Dian Yu, Jeffrey Zhao, Izhak Shafran, Tom Griffiths, Yuan Cao, and Karthik Narasimhan. Tree of thoughts: Deliberate problem solving with large language models. NeurIPS, 2023a."
        },
        {
            "title": "Technical Report",
            "content": "Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. In ICLR, 2023b. 9 Zhouliang Yu, Yuhuan Yuan, Tim Xiao, Fuxiang Frank Xia, Jie Fu, Ge Zhang, Weiyang Liu, et al. Generating symbolic world models via test-time scaling of large language models. Transactions on Machine Learning Research, 2025. 9 Haocheng Yuan, Jing Xu, Hao Pan, Adrien Bousseau, Niloy Mitra, and Changjian Li. Cadtalk: An algorithm and benchmark for semantic commenting of cad programs. In CVPR, 2024. 9 Yang Yue, Zhiqi Chen, Rui Lu, Andrew Zhao, Zhaokai Wang, Yang Yue, Shiji Song, and Gao Huang. Does reinforcement learning really incentivize reasoning capacity in LLMs beyond the base model? In ICML, 2025. Jiayi Zhang, Jinyu Xiang, Zhaoyang Yu, Fengwei Teng, Xiong-Hui Chen, Jiaqi Chen, Mingchen Zhuge, Xin Cheng, Sirui Hong, Jinlin Wang, Bingnan Zheng, Bang Liu, Yuyu Luo, and Chenglin Wu. AFlow: Automating agentic workflow generation. In ICLR, 2025. 6, 9 Xinyu Zhu, Mengzhou Xia, Zhepei Wei, Wei-Lin Chen, Danqi Chen, and Yu Meng. The surprising effectiveness of negative reinforcement in llm reasoning. arXiv preprint arXiv:2506.01347, 2025a. 7 Xuekai Zhu, Daixuan Cheng, Dinghuai Zhang, Hengli Li, Kaiyan Zhang, Che Jiang, Youbang Sun, Ermo Hua, Yuxin Zuo, Xingtai Lv, et al. Flowrl: Matching reward distributions for llm reasoning. arXiv preprint arXiv:2509.15207, 2025b."
        },
        {
            "title": "Table of Contents",
            "content": "A Supplementary Tables"
        },
        {
            "title": "Appendix",
            "content": "B Details on the BesiegeField Environment . . . . B.1 Construction Rule . Simulation . B.2 . . B.3 Blocks . . B.4 Tasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Search Strategies in Machine Modification Loops Environment Settings for Agentic Design and RL Finetuning . . . . . D.1 Machine Representation . . D.2 Global Position-based Representation . . D.3 Construction Tree Representation . . . D.4 Reward Setting . . . . D.5 Environment Feedback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Challenges in Compositional Machine Design . . . . E.1 . E.2 Need for Precision . . E.3 Appearance vs. Performance . Failure Patterns . . . . . . . . . . . . . . . . . . . . . . . . . Settings for RL Finetuning F.1 Cold-Start Dataset Curation . . F.2 Cold-Start Details . . F.3 RL Experiment Detailsdditional Ablation Studies Generated Samples H.1 From RL-finetuned Models . . H.2 From Agentic Workflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Relations between CoT and Machines . Single Agent CoT Samples from Gemini 2.5 Pro . . . . . . . J.1 . J.2 Meta Designer . . . J.3 Designer . . . Inspector J.4 Environment Querier . J.5 . . Refiner J.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Single-Agent Prompt Multi-Agent Prompts Shared Prompts . . . . . . . . . . L.1 . L.2 Designer System And User Prompt . Inspector System And User Prompt L.3 L.4 Refiner System Prompt . . . L.5 Environment Querier System Prompt . L.6 Block Informations
        },
        {
            "title": "A SUPPLEMENTARY TABLES",
            "content": "Models \"Catapult\" Task Gemini 2.5 Pro Claude Opus 4 o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 DeepSeek-V3 Kimi K2 GPT-5 Llama 4 Scout 17B 16E \"Car\" Task Gemini 2.5 Pro Claude Opus 4 o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 DeepSeek-V3 Kimi K2 GPT-5 Llama 4 Scout 17B 16E Meta-Designer & Designer Blind Refinement Modification w/ Env Feedback Valid Mean Max Valid Mean Max Valid Mean Max 5 4 3 6 3 7 6 8 7 3 8 6 5 3 1 8 4 8.49 4.17 0 0.75 4.34 0 7.18 3.87 3.59 27.85 2.96 29.27 5.43 21.80 0.27 6.74 5.67 1.55 9.14 4.36 0 4.5 4.37 0 12.02 4.92 11.83 38.06 3.41 41.43 8.72 29.91 0.47 6.74 20.32 2.00 5 2 3 6 3 7 2 1 7 3 2 6 5 3 1 8 1 8.18 5.38 0 1.61 0.31 0.98 5.29 5.35 - 17.81 36.18 20.03 3.90 13.25 16.94 0.39 3.75 0.47 11.07 5.8 0 5.0 0.49 3.18 7.36 5.35 - 39.64 37.05 40.04 11.25 26.05 29.87 0.39 9.65 0.47 5 2 3 6 3 4 0 0 7 3 2 6 5 3 1 8 1 15.73 9.10 5.34 5.21 4.62 4.82 - - - 29.96 26.59 28.39 11.75 18.75 17.92 14.99 8.43 0.47 18.19 9.32 11.11 6.52 4.76 4.93 - - - 41.52 38.67 36.18 34.05 26.02 31.94 14.99 13.72 0.47 Table 3: Comparison between the performance of machines generated by different stages. The mean score is computed by taking the average of the scores of all valid machines. We sample 8 machines at the designer stage and keep only the valid machines. The maximum number of retries in the following stages is thus equal to the number of valid machines produced at the designer stage. Models \"Catapult\" Task Gemini 2.5 Pro Claude Opus 4 o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 DeepSeek-V3 Kimi K2 GPT-5 Llama 4 Scout 17B 16E Designer Blind Refinement Modification w/ Env Feedback Valid Mean Max Valid Mean Max Valid Mean Max 3 2 8 4 6 6 3 5 7 6.13 4.76 2.87 3.5 4.24 4.67 6.85 1.50 3.63 9.0 4.91 5.22 9.24 8.2 4.86 9.05 1.88 5. 3 0 8 4 6 5 2 5 2 8.10 - 2.98 6.39 4.61 4.33 8.31 5.86 5.88 12.09 - 9.17 10.78 8.75 4.78 8.97 12.77 6.95 3 0 8 4 6 5 2 5 2 11.08 - 9.14 10.2 6.43 4.91 11.28 7.53 5.12 21.95 - 14.01 12.02 9.10 5.24 11.39 9.48 5. Table 4: Performance of machines generated after different stages of the iterative editing workflow (without meta-designer). Mean scores are computed on valid machines."
        },
        {
            "title": "Baseline",
            "content": "w/o Parsed 3D Information"
        },
        {
            "title": "Mean",
            "content": "Gemini 2.5 Pro o3 Qwen3-Coder-480B-A35B Claude Opus 4 5 3 5 2 8.18 0 1.61 5."
        },
        {
            "title": "Max",
            "content": "11.07 0 5.0 5."
        },
        {
            "title": "Mean",
            "content": "5 3 0 2 7.13 0 - 0."
        },
        {
            "title": "Max",
            "content": "11.36 0 - 0.26 Table 5: Ablation on the effect of parsed 3D information. We compute the blind refinement score under two machine representations. The average score is computed with respect to valid machines only; 8 tries for each experiment."
        },
        {
            "title": "Models",
            "content": "Refiner Avg Retry Refiner validity rate"
        },
        {
            "title": "Baseline",
            "content": "w/o Modify History Gemini 2.5 Pro o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 1.42 1.94 2.50 2.74 3.24 1.54 1.33 2.37 2.75 2.93 3.69 1."
        },
        {
            "title": "Baseline",
            "content": "100% 97.87% 82.65% 85.18% 94.12% 100% w/o Modify History 100% 88.89% 91.94% 85.18% 53.85% 98.31% Table 6: Ablation of edit history as refiner inputs. Machine Validity (pass/total)"
        },
        {
            "title": "File Valid",
            "content": "3D Valid"
        },
        {
            "title": "Models",
            "content": "Baseline (construction tree) Gemini 2.5 Pro pro o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E 8/8 3/8 8/8 7/8 8/8 7/8 6/8 8/8 Global position-based 3D representation Gemini 2.5 Pro pro o3 Claude Opus 4 Kimi K2 Llama 4 Scout 17B 16E 5/8 0/8 0/8 5/8 0/ 5/8 3/3 6/8 3/7 4/8 7/7 6/6 8/8 5/8 - - 4/5 - 5/8 3/8 6/8 3/8 4/8 7/8 6/8 8/8 5/8 - - 4/8 - 8.49 0 0.75 4.34 4.17 0 7.18 3.59 4.96 - - 0 - 9.14 0 4.5 4.37 4.36 0 12.02 11.83 12.85 - - 0 - Table 7: Ablation study on machine representations."
        },
        {
            "title": "B DETAILS ON THE BESIEGEFIELD ENVIRONMENT",
            "content": "We built BesiegeField by creating plug-in modules for the game Besiege that create interfaces to allow flexible composition of parts (once certain rules are obeyed), control policies on multiple powered parts (e.g.. powered cogs), recording of state information of any block (e.g., position, orientation, part integrity, etc.) and settings of termination conditions (e.g., some part passing through line). BesiegeField supports multi-process launching and thus allows for efficient parallel RL training. As the game natively supports multi-player gameplay, BesiegeField can naturally be applied to multi-agent RL settings. As the game Besiege (shown in Fig. 9) is built with the (mostly) opensourced Unity3D game engine2, BesiegeField is highly-customizable: the environment 1) natively supports modification of physical parameters, external forces, terrains and obstacles (e.g., stone buildings) and 2) allows for extension patches (known as mods3) to introduce other mechanisms, such as new block types, fluid simulation and many other components. Figure 9: Besiege editor view. B.1 CONSTRUCTION RULE Each machine is built by attaching new blocks to the existing structure, starting from special root block. For convenience, we describe each construction step as an attacher block (child) connected to an attachee block (parent). As an attacher, each block has exactly one face available for connection; as an attachee, each block has none to several attachable faces. Once face is used, it is considered occupied and cannot be reused. If, after construction, the free end of block happens to coincide with an attachable face of an existing block, the two blocks are automatically connected. few special blocks violate the rule described above, such as spring. These blocks have two ends and thus must have two parent blocks, do not have physical volume can be attached to either vacant or occupied faces of other blocks. Finally, each block can be rescaled and rotated after construction. Since post-construction scaling and rotation introduce unnecessary complexity into our pipeline, we exclude them from our experiments and leave their handling to future work. B.2 SIMULATION Once constructed, the machine will be placed at the designated pose indicated by the position and orientation of the starting block (not necessary near the ground, but there is maximum height 2https://en.wikipedia.org/wiki/Unity_(game_engine) 3https://en.wikipedia.org/wiki/Video_game_modding"
        },
        {
            "title": "Technical Report",
            "content": "Figure 10: Common useful blocks in constructing standard machines in BesiegeField. constraint). The machine will be subject to gravity and Newtonian physical laws (rigid and elastic ones) after placement. B.3 BLOCKS Out of the 75 construction blocks provided by Besiege, we filter out list of 27 blocks (shown in Fig. 10) that are most relevant to build machines with classical mechanical mechanisms such as levers and trusses. Starting Block: the root of any mechanism; initial orientation is along z+ axis. Small Wooden Block: cubic basic construction block. Wooden Block: shaped like two small wooden blocks attached together. Wooden Rod: slender, fragile construction block. Log: shaped like three small wooden blocks arranged in parallel. Steering Hinge: powered; controls rotation of sub-blocks, swinging left or right along the axis perpendicular to its placement axis. Steering Block: powered; rotates blocks along its placement axis. Powered Wheel: radius 1m; provides ground movement. Unpowered Wheel: identical to the powered wheel but requires external force to rotate. Large Powered Wheel: larger version of the powered wheel (radius 3m). Large Unpowered Wheel: unpowered version of the large powered wheel. Small Wheel: functions like caster wheel (e.g., shopping cart), unpowered, 1.2m long. Roller Wheel: similar to the small wheel, but shorter (0.8m). Universal Joint: freely rotates around its placement axis, unpowered. Hinge: swings up and down along the axis perpendicular to its placement axis, unpowered. Ball Joint: swings freely in all directions, unpowered. Axle Connector: similar to ball joint but allows unrestricted 360 rotation. Suspension: shaped like wooden block, it can buffer forces from all directions. Rotating Block: powered; motor-like block that generates torque and rotates about its local y-axis."
        },
        {
            "title": "Technical Report",
            "content": "Grabber: grabs objects on contact and can release them. Boulder: large rock, loosely attached; useful for throwing. Grip Pad: block with the highest friction. Elastic Pad: block with the highest elasticity. Container: typically used to hold boulder. Spring: can contract; one of the special blocks that can have two parent attachments (without occupying attachable faces). Brace: reinforces structural strength. Ballast: heavy cubic block used as counterweight. B.4 TASKS We define set of tasks in which the goal is to construct machines within designated building area to accomplish specific objectives. Movement. Referred to as the car task in the main text, the objective is to build machine capable of driving along tracks and traversing various terrains. Throw. Referred to as the catapult task in the main text, the goal is to construct machine that can launch boulders over long distances. To prevent unintended strategies (e.g., carrying the boulder instead of throwing it, or letting it roll along the ground), the building area is enclosed by medium-height wall. Delivery. This task requires building machine that can transport large stone forward across different terrains  (Fig. 14)  . Pick. The objective here is to design machine that can retrieve stone located at the bottom of deep well  (Fig. 13)  . For many of these tasks, we introduce multiple difficulty levels (not used in the experiments reported in this paper) to encourage progressively more sophisticated designs: Movement and Delivery. We consider: (1) randomized terrains with stones and wooden rods (e.g., Fig. 11), (2) curved tracks  (Fig. 16)  , and (3) obstacles such as height-limiting bars. Throw. We design: (1) varied objectives, such as requiring the boulder to pass through an aerial ring  (Fig. 15)  or land precisely within small target zone, (2) environmental factors such as wind, and (3) obstacles, including height restrictions either within the building area or along the boulders trajectory."
        },
        {
            "title": "Technical Report",
            "content": "Figure 11: Illustration of the task car / movement on rocky terrain, more difficult setting compared to the environment used for the car task in our experiments. Figure 12: Illustration of the task catapult / throw."
        },
        {
            "title": "Technical Report",
            "content": "Figure 13: Illustration of the task pick. Figure 14: Illustration of the task delivery with bump on the track."
        },
        {
            "title": "Technical Report",
            "content": "Figure 15: Illustration of the task catapult / Throw with the objective of throwing the boulder through the target ring. Figure 16: Illustration of the task car / movement with curved track."
        },
        {
            "title": "C SEARCH STRATEGIES IN MACHINE MODIFICATION LOOPS",
            "content": "Apart from the MCTS strategy used in the main experiments, we also evaluate two alternatives: (i) best-of-N, where we select the best-performing machine out of candidates, and (ii) random search, which mimics best-of-N but instead selects random candidate. For clarity, we refer to one consecutive querierrefiner call as search node (consistent with our MCTS setup). Unlike classical MCTS or best-of-N, here each search node is allowed up to five retries to prevent child statistics from being too sparse. We perform search rounds, each aiming to obtain 5 valid candidate machines (though this may fail; if fewer than 5 are found, the parent nodes machine is used as candidate). Full algorithmic details are provided in Algorithm 1, Algorithm 2, and Algorithm 3. In Fig. 9 we show the improvement of machine performance with respect to the number of search rounds used. In Fig. 17 we compare the efficiency of different search methods in our agentic compositional machine design setting. Algorithm 1 Random Search Algorithm best_score retry 0 while retry < max_retry do Require: Agentic Search Node Require: Scoring function S, machine valid check function Require: Search Round Ensure: The Best result with the highest score 1: Input machine ori_machine 2: max_retry 5 3: machine_last_round ori_machine 4: for = 1 to do 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: end for 17: return (machine_last_round, score) end if end while score S(machine_next_round) machine_last_round machine_next_round break retry retry + 1 machine_next_round N.generate(machine_last_round) if (machine_next_round) then"
        },
        {
            "title": "Random Search",
            "content": "Best-of-N"
        },
        {
            "title": "MCTS",
            "content": "Avg.I Mean Max Avg.I Mean Max Avg.I Mean Max Gemini 2.5 Pro Claude Opus 4 o3 Qwen3-Coder-480B-A35B 5 5 5 5 15.02 20.5 7.88 7.67 11.94 7.71 7.64 4.50 20 18 8 11 14.67 16.66 8.18 8.50 10.60 15.07 9.87 5. 8 6 7 8.5 15.73 18.19 9.32 9.10 11.11 5.34 6.52 5.21 Table 8: Ablation study on different search strategies. We compare the agentic workflow final scores. MCTS is executed for 5 rounds, with Random Search and Best-of-N also run for the same number of rounds. Avg.I denotes the average number of node expansions per search round."
        },
        {
            "title": "Technical Report",
            "content": "Algorithm 2 Best-of-N Algorithm best_score best_machine_this_round best_machine for = 1 to do retry 0 while retry < max_retry do Require: Agentic Search Node Require: Scoring function S, machine valid check function Require: Search Round R, number of samples Ensure: The Best result with the highest score 1: Input machine ori_machine 2: best_score 3: best_machine ori_machine 4: max_retry 5 5: for = 1 to do 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: 22: 23: end for 24: return (best_machine, best_score) end if end while scorei S(machinei) if scorei > best_score then best_score scorei best_machine machinei end for break end if retry retry + 1 machinei N.generate(best_machine_this_round) if (machinei) then"
        },
        {
            "title": "Technical Report",
            "content": "Algorithm 3 Monte Carlo Tree Search (MCTS) Require: Agentic Search Node Require: Root node root, maximum iterations AX_IT ER Require: Select(node): Traverse tree using UCB until leaf node Require: Expand(node): Generate 4 child candidates via LLM. Validate them in parallel: keep valid ones, and regenerate invalid ones until they pass or hit the max retry limit. If all fail, use the parent node as the child. should_expand rue end if if not should_expand then retry 0 node Select(root) if node == root or node.visited then Require: Simulate(node): Besiege simulation Require: Backpropagate(node, reward): Update visit counts and rewards along path Require: BestChild(node): Return child with highest simulation score Ensure: Best action from the search tree 1: root s0 2: max_retry 5 3: for = 1 to AX_IT ER do 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: end for 22: return BestChild(root) end if end while reward Simulate(child) Backpropagate(child, reward) end if while should_expand and not all child nodes are valid do retry retry + 1 child Expand(node) if retry max_retry then child node break Step 2: Expansion Step 3: Simulation Step 4: Backpropagation Return best child Unvisited leaf node; no children yet Step 1: Selection"
        },
        {
            "title": "Models",
            "content": "Gemini 2.5 Pro Claude Opus 4 o3 Qwen3-Coder-480B-A35B R2 R5 R"
        },
        {
            "title": "Mean",
            "content": "15.04 8.61 5.33 5."
        },
        {
            "title": "Max",
            "content": "17.31 9.32 11.11 6."
        },
        {
            "title": "Mean",
            "content": "15.73 9.10 5.34 5."
        },
        {
            "title": "Max",
            "content": "18.19 9.32 11.11 6."
        },
        {
            "title": "Mean",
            "content": "16.44 9.43 8.46 5."
        },
        {
            "title": "Max",
            "content": "18.19 9.98 14.52 6.52 Table 9: Ablation study on the effect of search depth in MCTS. R2, R5, and R10 represent the running rounds of MCTS on the same search tree. Figure 17: The variation in machine average scores with the increasing number of LLM node expansion operations under different search strategies."
        },
        {
            "title": "D ENVIRONMENT SETTINGS FOR AGENTIC DESIGN AND RL FINETUNING",
            "content": "D.1 MACHINE REPRESENTATION To reduce complexity in compositional machine design, our machine representation assumes all blocks remain at their default scale and are not further rotated after attachment (note: the attachment operation itself may rotate blocks). D.2 GLOBAL POSITION-BASED REPRESENTATION By simplifying the default XML representation that BesiegeField receives, we obtain the global position-based representation. Below is concrete example: [ ] {\"type\": 0, \"Position\": [0,0, 0], \"Rotation\": [0,0,0,1]}, {\"type\": 1, \"Position\": [0,0,0.5], \"Rotation\": [0,0,0,1]}, {\"type\": 2, \"Position\": [0,0,2.5], \"Rotation\": [0,0,0,1]}, {\"type\": 9, \"Position\": [0,0.5,2], \"Rotation\": [-0.707,0,0,0.707], \"end-position\": [0,2,0]} Basically, each block in the machine is independently recorded without mentioning its adjacent blocks. For most of the block types, only the block type and its pose (position + orientation) are recorded. For special blocks that have two parents, the other end has to be specified, for which the corresponding dictionary has an additional entry of end-position. D.3 CONSTRUCTION TREE REPRESENTATION With our parsimonious construction tree representation, the example machine above is represented by the following the following JSON list: [ ] : -1}, {type: 0, id: 0, parent : -1, face_id 0}, : 0, face_id {type: 1, id: 1, parent : 0}, 1, face_id {type: 2, id: 2, parent : : 4, 0, face_id_a: {type: 9, id: 3, parent_a: 6} 1, face_id_b: parent_b: Specifically, the ordered list of dictionaries of the machine construction JSON file represents the construction order of blocks. Each dictionary contains the following information of corresponding block: 1) type: block type; 2) id: the order ID of this block (the same as the order in the list), included so that LLMs do not have to parse it by itself; 3) parent, the ID of its parent block; 4) face_id, the face of the blocks parent to which the block is attached. In cases that the block has two parents (e.g., string that connects both parts), we use parent_a and parent_b to record both parents; similar for face_id. Note: the first block with id 0 is always the unique starting block, of which the local position and rotation are always zero. D.4 REWARD SETTING Here we elaborate on the reward design for RL experiments in Sec. 5.1. Our reward is in the form of = is_validperformance where is_valid is the boolean representing machine validity and performance is the task-specific performance metric. Car. We set is_valid to 1 as long as the policy produces machine that can be parsed from the generated construction tree and can be successfully placed into the environment without any selfcollision; otherwise it is set to 0. performance is set to the distance between the starting position and the end position of the root block."
        },
        {
            "title": "Technical Report",
            "content": "Catapult. For is_valid to be 1 in this task, the machine has to satisfy an additional constraint compared to the car task: the maximum height of the boulder position during simulation must be greater than threshold of 3m. As explained in the main text, performance for catapult is the product of the maximum height and maximum distance (towards some pre-defined direction) during simulation. D.5 ENVIRONMENT FEEDBACK In principle, we are able to obtain all state variables of each single part of simulated machine. Due to the space complexity of the simulation results, not all information can be fed to LLM agents. Here we consider minimal set of environment feedback information that the environment querier always gathers and returns to the refiner. Below are the minimal set of feedback information for each task: Car. 1) machine orientation; 2) machine maximum moving distance (towards designated direction); 3) machine max speed; 4) machine average speed per second; 5) machine position per 0.2 second (atomic time). Catapult. 1) boulder maximum distance (horizontal, towards designated distance); 2) boulder maximum height; 3) boulder position per 0.2 second (atomic time). Beyond these basic pieces of feedback, the querier, after seeing the candidate machine and its simulation results, in our default setting selectively extract subset of environment feedback given its speculation on the issues of the simulated machine. For instance, parts during simulation may collide with each other and break. Such behavior carries important hints on why machines fail, and an LLM agent with sufficient capability in spatial and physics understanding can possibly identify the vulnerable blocks in the design. Below we elaborate on the additional information that the querier may gather: Block index to query; Time interval of interest (states outside this interval will not be considered); Feedback type of interest (one or more from the list) Position; Orientation; Velocity; Length (for spring only)"
        },
        {
            "title": "E CHALLENGES IN COMPOSITIONAL MACHINE DESIGN",
            "content": "E.1 FAILURE PATTERNS Generated machines often fail in systematic ways. As shown in Fig. 18, we observe several recurring categories of errors, including flawed reasoning, structural attachment errors, incorrect part orientations and failures in instruction following. These diverse failure types highlight both the reasoning and execution challenges inherent in compositional machine design. Figure 18: Examples to illustrate failure patterns. In each example, the original machine is shown on the left and the modified machine on the right. Failure patterns are sampled from Qwen3-Coder-480B-A35B-Instruct. E.2 NEED FOR PRECISION In Fig. 19 we present simple example to illustrate how the task of compositional machine design requires high precision in the spatial design of configurations of different parts. Even though the high-level design is feasible, the machine in the top row fails to throw the boulder out due to the incorrect position of the container. E.3 APPEARANCE VS. PERFORMANCE As illustrated in Fig. 20, machines appearance does not necessarily reflect its actual performance. design that seems well-aligned with human intuition can fail dramatically, while one that looks awkward or unintuitive may achieve superior results. For LLMs to design machines that are both effective and visually intuitive to humans, reward functions must account not only for task performance but also for stability and other factors that shape human perception of functionality."
        },
        {
            "title": "Technical Report",
            "content": "Figure 19: Illustration of how machines built with feasible high-level designs may fail due to inaccurate part placement. Machine sampled from Gemini 2.5 Pro. Left: designed machines; Right: simulation results. Figure 20: Boulder-throwing trajectories for various machine designs generated by Gemini 2.5 Pro. From left to right, each row first shows the machine design, followed by time-lapsed birds-eye view of its throw."
        },
        {
            "title": "F SETTINGS FOR RL FINETUNING",
            "content": "F.1 COLD-START DATASET CURATION Noticing that Gemini 2.5 Pro produces the most satisfactory machines with reasonable CoT, we adopt the single-agent generation setting and collect Gemini-generated machines along with their CoT. We curated 100 design objectives: 75 captions of machines created by Besiege players from the Internet and 25 authored by us. These 25 prompts are constructed by 1) first writing down simple design objectives that are realizable by BesiegeField and can emerge from some simple rewards, and 2) then introducing environment constraints and machine-specific requirements. Using this prompt dataset, we generate 250 machines per prompt, and after filtering out inappropriate ones (those that fail to parse, cannot be built in the environment, or do not have specific physics-driven functionality, e.g., statue), we obtain 9,984 machines with their corresponding CoT. sample gallery is shown in Fig. 21. We present examples in the curated prompt set: 1. Build machine that can provide an exciting spinning amusement ride experience. 2. Build machine that can mimic the movements of humanoid figure for entertainment or functional demonstrations. 3. Build machine that can glide smoothly over snow or ice. Below we present the text prompts with our simple authoring strategy, which can possibly be scaled with LLMs: -Additional Environment Constraints1. On an uneven, bumpy straight road, build small car that must travel in straight line to the finish. 2. On straight road stands stone wall; build battering ram that must accelerate straight ahead, smash the wall, and finish with minimal damage to the machine. -Modified Demands for Target Machines1. Build tall tower that must keep heavy block (id 36) at 15 height for 5 without collapse. 2. On straight road stands 10 high wall; build siege ladder that must advance, extend its top above the wall, and remain upright throughout. F.2 COLD-START DETAILS In our experiment, we use Qwen2.5-14B-Instruct as the base model and train it on the Gemini synthesized dataset. To save GPU memory, we employ the parameter-efficient quantized OFT (QOFT) technique (Qiu et al., 2025c; 2023; Liu et al., 2024a; Qiu et al., 2025a) for updating the model parameters, with OFT block size 64. We use 8-bit training with the 8-bit AdamW optimizer implmented with bitsandbytes (Dettmers et al., 2022), learning rate of 1e-6 and linear warmup schedule (3% of the total training steps). F.3 RL EXPERIMENT DETAILS We use verl framework to implement our RL experiments. The LLM is finetuned from Qwen2.514B-Instruct (with LoRA of rank 64 on all linear layers) using the Gemini-synthesized dataset described above. We set learning rate to 5e-6 with gradient clipping threshold set to 0.5. The GRPO advantage estimator uses an advantage clipping ratio of 0.2. We add KL penalty (weight 0.001) with respect to the pretrained LLM and do not introduce any entropy regularization. For rollouts, we use temperature of 1.0 and top-p value of 0.95. Maximum input and output lengths are 3440 and 1168 tokens, respectively. We train each model for 400 update steps which take approximately 48 hours."
        },
        {
            "title": "Technical Report",
            "content": "Figure 21: Examples of Gemini-synthesized machines."
        },
        {
            "title": "G ADDITIONAL ABLATION STUDIES",
            "content": "Meta-Designer in hierarchical design. In Table 10, we show that how meta-designer for hierarchical design may benefit compositional machine design. Leveraging the knowledge on existing machines, meta-designers can identify the key macro-level mechanical components that are easier to design compared to the whole task, as shown in the results for Gemini 2.5 Pro, Kimi K2 and Llama 4 Scout. However, introducing an additional stage can introduce compounding error and, if the LLM agent is not capable of integrating different macro-level mechanical components, they may lead to lower scores, which we hypothesize is the reason for the failure of hierarchical design in models like Qwen3. Moreover, we examine if the meta-designer should provide step-by-step building instruction for the designer  (Fig. 22)  , or simply provide high-level mechanical component descriptions. We find that meta-designer that provides more detailed information is beneficial mostly when the base model is powerful enough (e.g., Gemini 2.5 Pro). Effect of feedback-free self-critic. In Table 11, we show that the inspector agent which does selfcritic before running any environment simulation tend to improve performance for models like Gemini 2.5 Pro (the most powerful model for the task of compositional machine design in BesiegeField) but can fail drastically for models like o3. Effect of active feedback queries. In Table 12, we show that the active queries on the environment feedbacks help most of the models achieve better performance, compared to the setting with no environment feedback and that with only environment simulation final scores. Additional RL results. In Fig. 23 and 25 and , we show the maximum scores achieved in the environments with different RL methods plus the validity rate of machines. We visualize the maximum score since, in the case when one is allowed to use inference-time scaling techniques, the best performing machines are the ones people care most about. We show that our settings with Pass@64 training achieves the best maximum score with two different random seeds. In additiona, in Fig. 27, we visualize the corresponding Best@N metrics. For completeness, we also visualize the results with our default setting on the task car in Fig. 24, 26 and 28. Figure 22: Construction guidance comparison of Meta Designer and Detailed Meta Designer, sampled with Gemini 2.5 Pro."
        },
        {
            "title": "Models",
            "content": "Machine Validity (pass/total)"
        },
        {
            "title": "File Valid",
            "content": "3D Valid"
        },
        {
            "title": "Max",
            "content": "Baseline (Meta-Designer & Designer) Gemini 2.5 Pro o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E"
        },
        {
            "title": "Single Agent",
            "content": "Gemini 2.5 Pro o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E 8/8 3/8 8/8 7/8 8/8 7/8 6/8 8/8 6/8 8/8 8/8 7/8 8/8 7/8 8/8 8/8 w/ detailed Meta-Designer & Designer Gemini 2.5 Pro o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E 8/8 7/8 8/8 0/8 7/8 8/8 8/8 8/ 5/8 3/3 6/8 3/7 4/8 7/7 6/6 8/8 3/6 8/8 4/8 6/7 2/6 6/7 3/8 7/8 7/8 6/7 2/8 - 5/7 8/8 0/8 7/8 5/8 3/8 6/8 3/8 4/8 7/8 6/8 8/8 3/8 8/8 4/8 6/8 2/8 6/8 3/8 7/8 7/8 6/8 2/8 - 5/8 8/8 - 7/ 8.49 0 0.75 4.34 4.17 0 7.18 3.59 6.13 2.87 3.5 4.24 4.76 4.67 6.85 3.63 9.19 0.92 4.87 - 4.13 6.12 - 4.01 9.14 0 4.5 4.37 4.36 0 12.02 11.83 9.00 5.22 9.24 8.2 4.91 4.86 9.05 5.64 11.94 1.18 4.87 - 4.79 9.0 - 6. Table 10: Ablation study on the meta-designer. Machine validity is evaluated in two aspects: file validity, 3D validity. Note that 3D validity requires the machine to first pass file validity. Final validity refers to fully valid machine (satisfying both file and 3D validity). The mean simulation score is calculated based solely on the final valid outputs. Detailed Meta-Designer provides more concisely, step-by-step construction guidance to the Designer. Compared to Baseline, Single Agent is slightly harder to construct valid machines, but the simulation scores are better. Detailed Meta-Designer improves both metrics, but requires LLMs to have strong 3D understanding and large context window. The comparison between Meta-Designer and Detailed Meta-Designer is illustrated in Fig. 22."
        },
        {
            "title": "Baseline",
            "content": "w/o Inspector"
        },
        {
            "title": "Mean",
            "content": "Gemini 2.5 Pro o3 Qwen3-Coder-480B-A35B Doubao Seed 1.6 Claude Opus 4 DeepSeek-V3 Kimi K2 Llama 4 Scout 17B 16E 5 3 6 3 2 7 2 0 8.18 0 1.61 0.31 5.38 0.98 5.29 -"
        },
        {
            "title": "Max",
            "content": "11.07 0 5.0 0.49 5.8 3.18 7.36 -"
        },
        {
            "title": "Mean",
            "content": "5 3 6 3 4 7 6 0 5.67 3.08 0.75 0.47 5.20 0.38 2.31 -"
        },
        {
            "title": "Max",
            "content": "9.37 9.24 4.51 1.41 8.25 2.16 8.91 - Table 11: Ablation study on inspector agentic design. The mean simulation score is calculated based solely on the valid machines after blind refinement. Removing the inspector from the agentic flow lowers the blind refiners mean performance on LLMs with weaker 3D understanding, while barely affecting other models."
        },
        {
            "title": "Baseline",
            "content": "w/o Env Querier"
        },
        {
            "title": "Score Only",
            "content": "std Mean Max std Mean Max std Mean Max Gemini 2.5 Pro 2.47 5.36 o3 Qwen3-Coder-480B-A35B 0.95 0.31 Claude Opus 4 0.23 Doubao Seed 1.6 0.09 DeepSeek-V3 15.73 18.19 11.11 5.34 6.52 5.21 9.32 9.10 4.76 4.62 4.82 4.93 4.18 4.24 2.32 0.82 0.08 1. 14.89 19.77 8.55 4.06 6.89 4.05 9.08 8.50 4.89 4.94 6.00 4.37 2.05 2.76 2.53 0.42 0.29 1.91 9.68 7.05 2.81 5.75 4.79 2.76 13.18 10.24 5.56 6.05 5.05 5.15 Table 12: Ablation study on the environment querier agent. For the refiner, the baseline includes simulation scores, basic environment feedback, and querier-required feedback. The \"w/o env querier\" setting provides only simulation scores and basic environment feedback. In the \"pure score only\" setting, only simulation scores are provided. Removing the environment querier causes slight drop in average machine performance. With reward signals only, the performance markedly degrades across most LLMs. Figure 23: Catapult task machine scores across RL steps. KL regularization helps the model discover better structure designs. Pass@64 is greatly more efficient at uncovering powerful machine designs. Pass@8 (roll-out 8) outperforms Pass@1 (roll-out 64) in efficiency and matches its performance with fewer roll-outs. No cold start models lack the advanced knowledge needed to find better machines."
        },
        {
            "title": "Technical Report",
            "content": "Figure 24: Car machine scores across RL steps. The RL finetuning hyperparameter setting is the same as the base hyperparameter setting of Catapult. Machine performance slightly rises as training steps increase. Figure 25: Catapult task machine validity rate and reward non-zero rate across RL steps. The machine validity rate refers to the proportion of machines that can successfully run simulations. The reward non-zero rate represents the ratio of machines that can simulate with non-zero reward. LLM constructs more legal machines as training steps increase, and rewards non-zero machines. Pass@8 and Pass@1 converge early. No KL fills roll-outs with failure cases, slowing performance gains. No cold start lacks design knowledge, encounters more failures than no KL, and improves validity rate most slowly. The base setting balances convergence and performance improvement. Figure 26: Car task machine validity rate and reward non-zero rate across RL steps. The machine validity converges early and remains stable during further training."
        },
        {
            "title": "Technical Report",
            "content": "Figure 27: Catapult task. Average Best@N metric. At each test step, the LLM generates 64 samples, selects the top samples, and records the maximum score. This process is repeated 1,000 times, and the mean value is calculated. Base settings (both seeds) dominates Best@N performance; excluding base settings, no KL dominates the rest. Pass@1 and Pass@8 spawn only handful of high-performance machines. No cold start produces machines of more average quality."
        },
        {
            "title": "Technical Report",
            "content": "Figure 28: Car task. Mean Best@N metrics. Similar to the machine validity rate, the Best@N performance increases quickly and remains stable in rest training periods."
        },
        {
            "title": "H GENERATED SAMPLES",
            "content": "H.1 FROM RL-FINETUNED MODELS Here, we present some of the best RL samples from rollouts, as well as examples from the agentic workflow. Fig. 29 displays the RL rollout samples, while Fig. 30 illustrates the agentic workflow samples. Figure 29: Qwen2.5-14B-Instruct cold started RL model catapult task sample from roll-out. Throwing distances are labeled on the bottom-right corner of the image."
        },
        {
            "title": "Technical Report",
            "content": "H.2 FROM AGENTIC WORKFLOW Figure 30: The LLM inference gallery of machine-generated samples. The rows, from top to bottom, were inferred by the following models, respectively: Claude 4 Opus, Gemini 2.5 Pro, o3, Doubao Seed 1.6, and Qwen3-Coder-480B-A35B-Instruct. Throwing distances are labeled on the bottom-right corner of the image."
        },
        {
            "title": "I RELATIONS BETWEEN COT AND MACHINES",
            "content": "To further investigate if high-level machine blueprint or low-level part placement is more important, we experiment with machine generation of LLMs by generating machine details conditioned on Gemini-generated CoT (instead of on CoT produced by themselves). We find that with Gemini CoT, almost all LLMs design machines that are more visually similar to \"catapults\", as shown in Fig. 31. We therefore hypothesize that the major gap between other LLMs, especially open-source ones, and Gemini 2.5 Pro is the abstract-level spatial and physics reasoning on machine designs. Figure 31: Comparison between generated machines conditioned on their own CoT or Gemini-generated CoT."
        },
        {
            "title": "Technical Report",
            "content": "J COT SAMPLES FROM GEMINI 2.5 PRO J.1 SINGLE AGENT system: <System Prompt> user: Design machine to throw boulder (type id 36) in parabolic trajectory. You must use exactly one boulder. Optimize for throw distance , height, and speed. Apply the principle of leverage correctly, balancing the weight of the projectile. assistant: <think> **Analyzing Catapult Components** Im now building catapult with rigid frame using Wooden Blocks to ensure stability. plan to use Log as the throwing arm, attached to constructed pivot point. The Container will hold the boulder at the arms end. **Devising Launch Mechanisms** Im reconsidering my approach. With the provided constraints, trebuchet is out. The single boulder and lack of hinges necessitate catapult. must leverage the Rubber Band. My plan is to design tension-based catapult for the boulder, prioritizing stability and throwing arm efficiency. **Optimizing for Distance** Im now focused on the tension-powered catapult. My plan is for solid base, pivot, lever arm, boulder-holding container, and rubber bands . Im working on the arms length and the positioning of the rubber bands for maximum launch power and the best trajectory for the boulder. **Assessing the Lever Arm** Im now working on the arm, crucial for force. must decide on its length and how it attaches to the pivot. Im considering different attachment methods to create stable but rotatable lever, exploring options for maximum launch power and height. **Evaluating Construction Strategies** Im stuck! need to use catapult given the constraints. But, the lack of hinge restricts my options. Im exploring different ways to connect the throwing arm to the frame and leverage the Rubber Band for propulsion. **Designing Hybrid Catapult** Ive sketched out the structure, pivoting on the Rotating Block, with base and uprights. The throwing arm will comprise Log, with Container at the tip. am struggling with the rubber band attachment. will have to ensure the right angles and tension. **Evaluating Rubber Band Placement** Im now focusing on the final adjustments. With the core design finalized , the key is the Rubber Band placement. The goal is maximizing launch power by carefully considering the bands attachment points and the angle of force application. aim to achieve long throw with this arrangement. **Evaluating Lever Arm Placement** Im now focused on the throwing arms construction and its link to the rotating pivot. Ive built the base and the pivot structure. The lever arms length and the location for the Container are my next priorities. The rubber band attachments also need to be evaluated."
        },
        {
            "title": "Technical Report",
            "content": "**Engineering the Launch Mechanism** Im now focused on tension-based catapult. Its time to build, starting with solid base and stable pivot point using the Rotating Block. My priorities are strong throwing arm, the right Container for the boulder, and, critically, the strategic placement of the Rubber Bands. **Refining the Design** Im now focused on the core catapult design. The need for simple build, given the constraints, favors straightforward tension catapult. am planning solid base, lever arm (most likely Log), container for the boulder, and the crucial application of Rubber Bands to generate the launch force. **Finalizing Catapult Design** Ive spent time analyzing the limitations and refining the catapult build . Ive now decided on the layout. The catapult will be built around sturdy frame, pivot using Rotating Block, an arm (lever), and the utilization of the Rubber Band for propulsion. am ready for the final assembly. **Constructing the Base** Im now focused on the basic frame. Ive decided to construct it from logs for stability. The goal is sturdy structure to anchor the catapult components, primarily the Rotating Block and lever arm. Im focusing on the geometry. **Analyzing Leverage Application** Im now focused on catapult design. Given the one-boulder rule and lack of hinges, Ill focus on lever-based catapult. am now determining the lever arm length. **Building Lever Catapult** Im planning basic tension-based catapult using the Rotating Block as pivot. Im focusing on the throwing arms dimensions, the Rubber Band placement to maximize launch power, and the Container block to hold the boulder. **Constructing Launch Support** Im now focused on the basic design. With the users need to launch single boulder, tension-based catapult is optimal. Ill build it around the Rotating Block. Im using Log for the arm and planning base, rubber band connections, and the boulders container. **Planning the Build** Im streamlining the design. The key will be stable base, Rotating Block for the pivot, and lever arm. Ill use Container to hold the boulder, and the Rubber Bands will be the power source. Now am evaluating the dimensions and the best placement of each part. **Constructing the Launching Mechanism** Im designing simplified catapult, keeping the focus on its functionality and the users requirement for single boulder and the available blocks. plan to use Rotating Block as the pivot. The rest of the design must center around this Rotating Block component. **Constructing the Catapult** Ive established the foundation of the catapult, focusing on solid base and pivot mechanism. The challenge now is to construct the lever arm and connect it effectively to the Rotating Block, while also determining how to hold the boulder. will prioritize design maximizing force transfer for launch. **Constructing Lever Arm** Im solidifying the basic build: catapult, powered by rubber bands, given the constraints. The next step is constructing the lever arm,"
        },
        {
            "title": "Technical Report",
            "content": "deciding its dimensions and how it will attach to the pivot point for optimal force transfer. **Constructing the Final Catapult** Ive finalized the construction plan. The tension-based catapult, using the Rotating Block for the pivot and lever arm, is my focus. will use Container for the boulder, and the Rubber Band for launching, paying close attention to force application and frame design. **Outlining Catapult Construction** Ive sketched out the build, focusing on tension-powered catapult. base, pivoting lever arm, and boulder holder are planned. My design will depend on stable foundation and the proper application of rubber bands for generating enough force for distance and height. **Constructing the Catapult** Ive arrived at straightforward plan for tension-powered catapult, using the available blocks. Im focusing on design to maximize launch potential. The base, pivot point, arm, and rubber bands will be the key components for an efficient, functional build. **Devising the Final Catapult** Ive finalized the core design. am now sure of tension-based catapult ; the concept is simple and effective. My focus is now on the construction idea and creating the blocks. am convinced it will be simple build and the machine can leverage the Rotating Block and Rubber Band to meet the users launch goals. **Constructing Launching System** Im finalizing the blueprint now. The tension-based catapult will use base, pivot with the Rotating Block, and lever arm for the boulder. Ill ensure maximum launch power through strategic rubber band placement and precise measurements. need strong yet streamlined design. **Constructing Functional Catapult** Ive finalized the plan. The design uses tension-based catapult, with \"Rotating Block\" for pivot. sturdy base with two Log arms ensures stability, while two Rubber Bands generate the launch force. The boulder holder is \"Container\", and the system prioritizes lever arm efficiency for maximum height and distance. **Formulating Final Design** Im now certain: tension-based catapult, incorporating the Rotating Block for the pivot, will meet the users needs. The goal is maximum launch power within the given constraints. Ill sketch out the construction, outlining the key blocks and how they fit together. Ive solid plan. Construction Idea: will design tension-powered catapult to launch the boulder. The design prioritizes long throwing distance and height by utilizing long lever arm. The machine has four main parts: 1. **Base Frame:** T-shaped base, constructed from central Wooden Block and two Logs extending sideways, provides wide, stable footprint to handle the throwing forces and prevent the machine from tipping over. 2. **Support Tower:** Two Logs rise vertically from the ends of the base, creating tall, sturdy support structure for the pivot axle. 3. **Lever Arm Assembly:** This is the core of the catapult. Rotating Block is used as functional hinge/axle, mounted on one of the support uprights. Small Wooden Block acts as hub on this axle, with long Log attached pointing up (the throwing arm) and Small Wooden Block attached pointing down (the short lever). This structure creates the"
        },
        {
            "title": "Technical Report",
            "content": "necessary leverage. At the end of the throwing arm, Container is mounted via an adapter block to hold the Boulder. 4. **Power System:** Two Rubber Band blocks provide the propulsive force. They connect from forward-projecting Log on the base to the short lever arm. The stretched rubber bands contract rapidly, pulling the short arm down and forward, which in turn whips the long throwing arm upwards and forwards, launching the boulder in high parabolic trajectory. This design maximizes the lever ratio to achieve high velocity for the projectile, while the robust frame maintains stability during the launch. necessary_blocks [1, 63, 22, 15, 30, 36, 9] </think> JSON: json [ {\"type\": 0, \"id\": 0, \"parent\": -1, \"face_id\": -1} {\"type\": 1, \"id\": 1, \"parent\": 0, \"face_id\": 1} {\"type\": 63, \"id\": 2, \"parent\": 1, \"face_id\": 1} {\"type\": 63, \"id\": 3, \"parent\": 1, \"face_id\": 3} {\"type\": 63, \"id\": 4, \"parent\": 2, \"face_id\": 6} {\"type\": 63, \"id\": 5, \"parent\": 3, \"face_id\": 6} {\"type\": 22, \"id\": 6, \"parent\": 4, \"face_id\": 4} {\"type\": 15, \"id\": 7, \"parent\": 6, \"face_id\": 3} {\"type\": 63, \"id\": 8, \"parent\": 7, \"face_id\": 3} {\"type\": 15, \"id\": 9, \"parent\": 7, \"face_id\": 4} {\"type\": 15, \"id\": 10, \"parent\": 8, \"face_id\": 0} {\"type\": 30, \"id\": 11, \"parent\": 10, \"face_id\": 3} {\"type\": 36, \"id\": 12, \"parent\": 11, \"face_id\": 0} {\"type\": 63, \"id\": 13, \"parent\": 0, \"face_id\": 0} {\"type\": 9, \"id\": 14, \"parent_a\": 13, \"face_id_a\": 1, \"parent_b\": 9, \" face_id_b\": 1} {\"type\": 9, \"id\": 15, \"parent_a\": 13, \"face_id_a\": 3, \"parent_b\": 9, \" face_id_b\": 2} ] J.2 META DESIGNER system: <System Prompt> user: Design machine to throw boulder (type id 36) in parabolic trajectory. You must use exactly one boulder. Optimize for throw distance , height, and speed. Apply the principle of leverage correctly, balancing the weight of the projectile. meta-designer output: json { \"definition\": \"Construct machine that can throw boulders in parabolic trajectory, designed to maximize throw distance and height by utilizing the principle of leverage.\", \"function_points\": [ \"Establish stable foundation to withstand recoil and prevent tipping.\", \"Implement powered lever arm for projectile propulsion.\", \"Carry and release boulder projectile at the apex of the arms swing.\" ],"
        },
        {
            "title": "Technical Report",
            "content": "\"design_structure\": [ { \"function_name\": \"Base and Support Frame\", \"description\": \"A wide, static frame built from the Start Block. It provides stability for the machine and includes vertical support to mount the rotating mechanism, as well as stop block to halt the throwing arms motion.\", \"related_function_points\": [ \"Establish stable foundation to withstand recoil and prevent tipping.\" ] }, { \"function_name\": \"Powered Throwing Arm\", \"description\": \"A composite structure consisting of powered pivot, long lever arm, and projectile holder. The Rotating Block provides rapid rotational force, the Log acts as the lever to amplify speed, and the Container holds the Boulder, releasing it via inertia.\", \"related_function_points\": [ \"Implement powered lever arm for projectile propulsion .\", \"Carry and release boulder projectile at the apex of the arms swing.\" ] } ], \"build_order\": [ \"Base and Support Frame\", \"Powered Throwing Arm\" ], \"machine_structure\": { \"Base and Support Frame\": { \"type\": [ 1, 15 ], \"guidance\": \"Wooden Blocks (ID 1) and Small Wooden Blocks (ID 15) are used to build wide, heavy base that prevents tipping. They also form tower to elevate the pivot point and physical stop to arrest the arms rotation, which is crucial for the release mechanism.\" }, \"Powered Throwing Arm\": { \"type\": [ 22, 63, 30, 36 ], \"guidance\": \"A Rotating Block (ID 22) provides the high-speed rotational power. This is attached to Log (ID 63), which acts as long, robust lever arm. Container (ID 30) is placed at the end of the arm to hold the Boulder (ID 36) projectile.\" } } } J.3 DESIGNER system: <System Prompt> designer-layer1 input:"
        },
        {
            "title": "Technical Report",
            "content": "On the basis of the existing structure, generate [Base and Support Frame ], [A wide, static frame built from the Start Block. It provides stability for the machine and includes vertical support to mount the rotating mechanism, as well as stop block to halt the throwing arms motion.], as [Establish stable foundation to withstand recoil and prevent tipping.], using block type[1, 15], [Wooden Blocks (ID 1) and Small Wooden Blocks (ID 15) are used to build wide, heavy base that prevents tipping. They also form tower to elevate the pivot point and physical stop to arrest the arms rotation, which is crucial for the release mechanism.] designer-output-layer1: Based on the existing structure, Base and Support Frame was generated to establish stable foundation to withstand recoil and prevent tipping. Ultimately, the block types [1, 15] were decided upon. No blocks were removed as they were all suitable for the design. JSON: json [ {\"type\": \"0\", \"id\": 0, \"parent\": -1, \"face_id\": -1} {\"type\": \"1\", \"id\": 1, \"parent\": 0, \"face_id\": 1} {\"type\": \"1\", \"id\": 2, \"parent\": 0, \"face_id\": 2} {\"type\": \"1\", \"id\": 3, \"parent\": 0, \"face_id\": 0} {\"type\": \"1\", \"id\": 4, \"parent\": 1, \"face_id\": 2} {\"type\": \"1\", \"id\": 5, \"parent\": 2, \"face_id\": 4} {\"type\": \"1\", \"id\": 6, \"parent\": 0, \"face_id\": 3} {\"type\": \"1\", \"id\": 7, \"parent\": 6, \"face_id\": 6} {\"type\": \"1\", \"id\": 8, \"parent\": 7, \"face_id\": 6} {\"type\": \"15\", \"id\": 9, \"parent\": 8, \"face_id\": 0} ] designer-layer2: On the basis of the existing structure, generate [Powered Throwing Arm], [A composite structure consisting of powered pivot, long lever arm, and projectile holder. The Rotating Block provides rapid rotational force, the Log acts as the lever to amplify speed, and the Container holds the Boulder, releasing it via inertia.], as [Implement powered lever arm for projectile propulsion., \"Carry and release boulder projectile at the apex of the arms swing.\"], using block type [22, 63, 30, 36], [A Rotating Block (ID 22) provides the high-speed rotational power. This is attached to Log (ID 63), which acts as long, robust lever arm. Container (ID 30) is placed at the end of the arm to hold the Boulder (ID 36) projectile.] <3D Info> designer-output-layer2: Based on the existing structure, Powered Throwing Arm was generated as Implement powered lever arm for projectile propulsion.,Carry and release boulder projectile at the apex of the arms swing.. Ultimately, the block types [22, 63, 30, 36] were decided upon, while [] were removed due to []. JSON: json [ {\"type\": \"0\", \"id\": 0, \"parent\": -1, \"face_id\": -1}, {\"type\": \"1\", \"id\": 1, \"parent\": 0, \"face_id\": 1}, {\"type\": \"1\", \"id\": 2, \"parent\": 0, \"face_id\": 2}, {\"type\": \"1\", \"id\": 3, \"parent\": 0, \"face_id\": 0}, {\"type\": \"1\", \"id\": 4, \"parent\": 1, \"face_id\": 2}, {\"type\": \"1\", \"id\": 5, \"parent\": 2, \"face_id\": 4}, {\"type\": \"1\", \"id\": 6, \"parent\": 0, \"face_id\": 3}, {\"type\": \"1\", \"id\": 7, \"parent\": 6, \"face_id\": 6}, {\"type\": \"1\", \"id\": 8, \"parent\": 7, \"face_id\": 6}, {\"type\": \"15\", \"id\": 9, \"parent\": 8, \"face_id\": 0},"
        },
        {
            "title": "Technical Report",
            "content": "{\"type\": \"22\", \"id\": 10, \"parent\": 8, \"face_id\": 4}, {\"type\": \"63\", \"id\": 11, \"parent\": 10, \"face_id\": 3}, {\"type\": \"30\", \"id\": 12, \"parent\": 11, \"face_id\": 0}, {\"type\": \"36\", \"id\": 13, \"parent\": 12, \"face_id\": 0} ] J."
        },
        {
            "title": "INSPECTOR",
            "content": "system: <System Prompt> inspector input: Task Introduction Construct machine that can throw boulders in parabolic trajectory, designed to maximize throw distance and height by utilizing the principle of leverage. JSON Information <JSON> 3D Information <3D Information> Questions <Inspector Questions> inspector-output: <Three-Dimensional Perception of the World> { \"Coordinate System\": \"Left-Handed System\", \"Up\": \"y\", \"Right\": \"x\", \"Forward\": \"z\", \"Frontmost Block\": {\"3\": [0.0, 0.0, 1.5]}, \"Rearmost Block\": {\"9\": [2.0, 2.0, -3.0]}, \"Leftmost Block\": {\"5\": [-2.0, 0.0, 1.5]}, \"Rightmost Block\": {\"7\": [2.0, 1.5, 0.0]}, \"Topmost Block\": {\"13\": [1.0, 7.4, -2.0]}, \"Lowest Block\": {\"0\": [0, 0, 0]} } </Three-Dimensional Perception of the World> <Question Answer> 1. **Dynamic Blocks Analysis:** The only dynamic block in this machine is the Rotating Block [10]. * **Position and Orientation**: The Rotating Block [10] is located at center coordinates [1.0, 2.0, -2.0] with global orientation of x-. * **Analysis**: a. **Impact on the machine**: The Rotating Block [10] serves as the pivot for the throwing arm. It is the core component intended to generate the throwing motion. b. **Direction of force**: The block is oriented along the xaxis, meaning its rotation axis is the global x-axis. When activated, it will generate torque, causing its sub-blocks to rotate in the y-z plane . c. **Impact on sub-blocks and machine**: The Rotating Block [10] will cause its child blocks ([11], [12], [13]) to swing upwards and forwards in powerful arc. Simultaneously, it will exert an equal and opposite reaction torque on its parent block [8] and the entire support structure, which will likely cause the machine to violently tip over or break."
        },
        {
            "title": "Technical Report",
            "content": "2. **Special Static Blocks Analysis:** The special static blocks are the Container [12] and the Boulder [13]. * **Container [12]**: It is located at the end of the throwing arm (Log [11]) with its center at [1.0, 6.9, -2.0]. Its orientation is y+ (upwards). This placement and orientation are rational, as it correctly positions it to hold the Boulder [13] like cup at the end of the throwing arm. * **Boulder [13]**: It is placed inside the Container [12] with its center at [1.0, 7.4, -2.0]. As the projectile, its placement is logical and necessary for the machines function. 3. **Balance Check (self-gravity):** a. **Center of Gravity**: The calculated center of gravity for the entire machine is approximately at (0.85, 4.22, -1.46). The block closest to this point is the Log [11]. b. **Sinking/Collapse**: Yes, parts of the machine will collapse. The entire throwing mechanism, including the heavy Boulder [13] (mass 5), rests on tall, slender support tower made of single Wooden Blocks ([6], [7], [8]). This structure is extremely fragile and not braced. The machine is severely top-heavy, and the immense weight concentrated on this single tower will cause it to bend and collapse under gravity alone, even before the Rotating Block [10] is activated. 4. **Comprehensive Analysis:** a. **Force Summary**: The primary force is gravity, which makes the top-heavy machine highly unstable due to the high position of the Boulder [13]. Upon activation, the Rotating Block [10] will generate massive torque on the throwing arm and an equal reaction torque on the flimsy support tower. The combination of static top-heaviness and dynamic reaction forces will lead to immediate structural failure. b. **Logically Unreasonable Blocks**: Block [6] -> Wooden Block [7] -> Wooden Block [8]. **Hierarchical Structure**: Starting Block [0] -> Wooden **Reason for Unreasonableness**: The support tower consisting * * of blocks [6], [7], and [8] is fundamentally flawed. It is single, unbraced column tasked with supporting the entire throwing arm and the heavy Boulder [13]. This design is far too weak to handle the static weight, let alone the powerful dynamic forces and reaction torque from the Rotating Block [10]. The machine is guaranteed to collapse. </Question Answer> <Summary of Design Defects> 1. Problem description, involving blocks: [6, 7, 8], belonging to structure: \"Base and Support Frame\" The support tower for the throwing mechanism, composed of blocks [6], [7], and [8], is critically weak. It is single, unbraced column made of wooden blocks, which is completely inadequate to support the massive weight of the throwing arm and the Boulder [13]. The structure will collapse under its own weight or instantly shatter upon activation of the Rotating Block [10] due to the immense reaction torque. </Summary of Design Defects> J.5 ENVIRONMENT QUERIER system: <System Prompt> environment-querier input: Task Introduction Construct machine that can throw boulders in parabolic trajectory, designed to maximize throw distance and height by utilizing the principle of leverage."
        },
        {
            "title": "Technical Report",
            "content": "Mechanical JSON Structure <JSON> 3D Information <3D Information> Environment Feedback machine damaged: machine parts DoubleWoodenBlock order_id:8 occurred at 0.4 sec block order_id 13 boulder throwing distance 5.63 boulder max height 7.3 boulder actual position in first 5 seconds [1.0, 7.01, -1.5], [0.84, 7.34, -2.44], [0.64, 5.69, -6.2], [0.61, 3.28, -9.97], [0.57, 1.68, -10.14], [0.38, 1.78, -9.45], [0.17, 1.72, -8.76], [-0.03, 1.52, -8.13], [-0.22, 1.22, -7.61], [-0.36, 0.85, -7.23], [-0.47, 0.48, -6.98], [-0.53, 0.16, -6.86], [-0.55, -0.07, -6.83], [-0.55, -0.18, -6.87], [-0.53, -0.17, -6.92], [-0.52, -0.03, -6.94], [-0.52, 0.21, -6.9], [-0.55, 0.51, -6.76], [-0.6, 0.85, -6.52], [-0.69, 1.18, -6.16], [-0.81, 1.45, -5.72], [-0.95, 1.66, -5.2], [-1.11, 1.76, -4.64], [-1.28, 1.76, -4.07], [-1.44, 1.66, -3.53] environment-querier-output: <Thought Process> The user wants me to analyze boulder-throwing machine that is failing its task. **Objective:** Build leverage-based machine to throw boulder for **1. Analyze the Task and Machine Design:** * maximum distance and height. This implies catapult or trebuchet design. * **Base:** wide base is constructed using Wooden Blocks (ID 1, **Machine Structure:** * 2, 3, 4, 5, 6) connected to the Starting Block (ID 0). This seems designed for stability. **Tower:** vertical tower is built on the right side of the base with Wooden Blocks (ID 6, 7, 8). Block 8 is the apex of this support structure. **Lever Arm:** Rotating Block (ID 10) is mounted on top of the tower (on block 8), serving as the fulcrum. Log (ID 11) acts as the throwing arm, with Container (ID 12) and Boulder (ID 13) at the top. Ballast (ID 14) is attached to the other side of the Rotating Block as counterweight. * **Power System:** The machine uses combination of powered Rotating Block (ID 10) and two Rubber Bands (ID 15, 16). The rubber bands connect the top of the tower (block 8) to points on the base ( blocks 3 and 5). **machine damaged**: This is the most critical piece of feedback. **machine parts: DoubleWoodenBlock order_id:8**: The failure point **2. Analyze the Environmental Feedback:** * The machine is breaking during operation. * is identified as block 8. This is the Wooden Block that supports the entire rotating lever arm assembly. * indicating massive, immediate overload on the structure. **Boulder Performance:** The boulder travels mere 5.63 units and * ends up behind its starting coordinate. This confirms catastrophic failure of the launch mechanism, not just weak throw. The arm is likely **occurred at 0.4sec**: The failure is almost instantaneous, collapsing or swinging backward. **3. Synthesize and Hypothesize the Root Cause:** * : The point of failure (block 8) is subjected to several immense forces * *"
        },
        {
            "title": "Technical Report",
            "content": "1. 2. **Static Load:** The weight of the entire lever arm assembly ( rotating block, log, container, boulder, ballast) rests on it. **Dynamic Load:** The torque from the Rotating Block (ID 10) creates powerful reaction force on its mount point (block 8). 3. **Tension Load:** The two Rubber Bands (ID 15, 16) are stretched from block 8 down to the base. When the simulation starts, they will contract with immense force, pulling down and forward on block 8. **Hypothesis:** The combination of these forces, particularly the * sudden, immense tension from the rubber bands, is causing block 8 to shear off from the rest of the tower (block 7). The tower itself, being single column of wooden blocks, is structurally weak and cannot withstand this combination of bending and shear stress. The rubber bands are incorrectly placed; instead of powering the lever arm, they are destroying the support structure. The machine is literally tearing itself apart. **4. Formulate Plan for Further Investigation:** To confirm this hypothesis, need to observe the behavior of the key components involved in the structural failure around the time of the collapse (0.4s). **Block 8 (Failure Point):** need to see its position and rotation **Block 10 (Rotating Block/Fulcrum):** Its movement will show the * to confirm its being ripped from its mounting. * forces being applied by the lever arm onto block 8. * the attempted throw and the overall collapse dynamics. * rapid decrease in length will prove they are contracting and applying the destructive force suspect. **Block 11 (Lever Arm):** Its motion will confirm the direction of **Rubber Bands (15 & 16):** need to check their length property. Based on this analysis, will request detailed feedback on these specific components to verify the cause of the failure. </Thought Process> <Required Feedback> [ { }, { }, { }, { }, { } \"id\": 8, \"duration\": [0.0, 0.8], \"properties\": [\"position\", \"rotation\"] \"id\": 10, \"duration\": [0.0, 0.8], \"properties\": [\"position\", \"rotation\"] \"id\": 11, \"duration\": [0.0, 0.8], \"properties\": [\"position\", \"rotation\"] \"id\": 15, \"duration\": [0.0, 0.8], \"properties\": [\"length\"] \"id\": 16, \"duration\": [0.0, 0.8], \"properties\": [\"length\"] ] </Required Feedback>"
        },
        {
            "title": "Technical Report",
            "content": "J.6 REFINER system: <System Prompt> refiner input: Task Introduction Construct machine that can throw boulders in parabolic trajectory, designed to maximize throw distance and height by utilizing the principle of leverage. Mechanical JSON Structure <JSON> 3D Information <3D Information> Environment Feedback machine damaged: machine parts DoubleWoodenBlock order_id:8 occurred at 0.4 sec block order_id 13 boulder throwing distance 5.63 boulder max height 7.3 boulder actual position in first 5 seconds [1.0, 7.01, -1.5], [0.84, 7.34, -2.44], [0.64, 5.69, -6.2], [0.61, 3.28, -9.97], [0.57, 1.68, -10.14], [0.38, 1.78, -9.45], [0.17, 1.72, -8.76], [-0.03, 1.52, -8.13], [-0.22, 1.22, -7.61], [-0.36, 0.85, -7.23], [-0.47, 0.48, -6.98], [-0.53, 0.16, -6.86], [-0.55, -0.07, -6.83], [-0.55, -0.18, -6.87], [-0.53, -0.17, -6.92], [-0.52, -0.03, -6.94], [-0.52, 0.21, -6.9], [-0.55, 0.51, -6.76], [-0.6, 0.85, -6.52], [-0.69, 1.18, -6.16], [-0.81, 1.45, -5.72], [-0.95, 1.66, -5.2], [-1.11, 1.76, -4.64], [-1.28, 1.76, -4.07], [-1.44, 1.66, -3.53] Querier required feedback block order_id 8 type_id 1 info duration(s) [0.0, 1.0] block broken before below time(s) 0.2 block position [[2.01, 2.49, 0.01]] Due to block broken, the position is incomplete or not recorded block velocity [[0.15, 1.7, 4.1]] Due to block broken, the velocity is incomplete or not recorded block order_id 10 block type_id block info duration(s) [0.0, 1.0] block position [[ 1.5 , 2.52, -1.49], [ 1.5 , 3.34, -0.56], [1.48, 5.27, 1.08], [0.73, 5.66, 2.42], [0.11, 4.45, 3.64])] block rotation [[ 0. [-0.47, -0.47, 0.06, -0.04, block order_id 0 , -0.71, 0.51, 0.72]] 0.01, 0.71], [-0.16, -0.68, 0.18, 0.69], 0.54], [-0.73, -0.04, 0.08, 0.67], [-0.69, block type_id 0 block info duration(s) [0.0, 2.0] block rotation"
        },
        {
            "title": "Technical Report",
            "content": "[[0., 0., 0., 1.], [ 0.07, 0.89], [ 0.39, 0.14, -0.09, 1. , 0.15, 0.03, 0.99], 0.93], [0.2 , 0.01, 0.09, 0.98], [ 0.13, -0.31, , -0.01, 0.91], [0. 0.05, 0.36, ], [ 0.45, 0. 0.06, 0.93], [-0.06, -0.26, -0.1 , 0.96], [-0.08, -0.18, -0.1 , -0.04, [-0.09, -0.13, 0.97]] Initial State of the Machine The machine is initially placed on the ground, facing the z+ direction, with the target direction being z+. Please remember that the task failure is due to the mechanical design defects. Your ultimate goal is to modify the mechanical design defects so that it can complete the task. The historical modification information represents your previous attempts to make changes, and these steps did not comply with the game rules. Based on the information about the task failure, please make modifications to the mechanics. When designing the modification steps, avoid making the same mistakes as those in the historical modification information. refiner-output: <Thought Process> The user wants me to fix trebuchet-like machine that is failing. **1. Analysis of the Machine and Failure:** **Machine Structure:** The machine consists of base, vertical * tower on the right side, and rotating arm mounted on top of the tower. The arm has container with boulder on one end and was intended to have counterweight on the other. Power is provided by Rotating Block (ID 10) at the pivot and Ballast (ID 14) acting as counterweight. Two Rubber Bands (ID 15, 16) are connected from the top of the tower ( **Failure Mode:** The simulation feedback consistently reports that ID 8) to the base, seemingly for stabilization. * DoubleWoodenBlock id:8 is damaged at 0.4 seconds. Block 8 is the topmost block of the support tower, directly holding the entire rotating assembly (Rotating Block, arm, boulder, and ballast). * **Overwhelming Force:** The combination of the Rotating Blocks **Root Cause Analysis:** * torque and the heavy Ballast (ID 14, mass 3) dropping creates an immense rotational force. The Boulder (ID 13, mass 5) at the end of long lever arm (ID 11, Log) amplifies this stress. The tower, constructed from simple Wooden Blocks, cannot withstand this force, leading to the failure of block 8. * **Instability:** The feedback shows the entire machine lifting and tilting (machine orientation in long time x-, machine frequently changes in the following orientations). This indicates the base is too small and light to counteract the violent motion of the throwing arm. The Rubber Bands (ID 15, 16) are connected asymmetrically (from the tower to the front and left parts of the base), which likely introduces twisting force, contributing to the instability and structural failure rather than preventing it. **2. Modification Strategy:** The primary goal is to ensure the machines structural integrity so it can actually launch the boulder without self-destructing. * **Step 1: Reduce Destructive Forces.** The most critical issue is the excessive force breaking block 8. The simplest way to address this is to remove the primary source of this force, the Ballast (ID 14). The Rotating Block (ID 10) by itself will still provide sufficient power to launch the boulder, but with much less violent acceleration, which the wooden structure should be able to handle. * and 16) are not stabilizing the structure effectively and are likely contributing to the twisting failure due to their asymmetric placement. **Step 2: Remove Ineffective Components.** The Rubber Bands (ID"
        },
        {
            "title": "Technical Report",
            "content": "Removing them will simplify the forces acting on the tower and improve stability. This plan directly targets the identified points of failure. By removing the ballast and the rubber bands, the stress on the critical component ( block 8) is significantly reduced, and the machines overall stability should improve. The throwing distance might be reduced, but successful, non-destructive launch is the first priority. **3. Final Plan:** 1. 2. 3. Remove Ballast (ID 14). Remove Rubber Band (ID 15). Remove Rubber Band (ID 16). This is minimal but highly effective set of changes to fix the core problem. </Thought Process> <Modification Description> The machines support tower (block 8) is breaking due to excessive torque from the ballast and rotating block. The rubber bands are placed **Power Blocks Analysis:** The launch will now be powered solely by asymmetrically, causing twisting forces and instability. will remove the ballast (ID 14) to reduce the strain on the structure and remove the two rubber bands (ID 15, 16) to eliminate the destabilizing twisting forces. </Modification Description> <Simulation Prediction After Modification> * the Rotating Block (10). The removal of the Ballast (14) significantly reduces the peak torque, resulting in smoother, less violent rotation of the throwing arm. This will prevent the structural failure of the tower. **Balance Check:** Without the heavy ballast dropping and the * asymmetric pull from the rubber bands, the machine will be much more stable during operation. The base should remain mostly on the ground, with minimal tipping as the arm swings. The overall center of gravity will be more manageable. * block 8, will be resolved. The machine will successfully complete the launch sequence without breaking. While the throwing distance and height may be lower due to the reduced power, the machine will now be functional **Comprehensive Analysis:** The primary defect, the destruction of and can complete its primary task of throwing the boulder. * **10-second game simulation prediction:** * **0.0s - 0.5s:** The Rotating Block activates, and the arm begins to swing upwards smoothly. The tower (block 8) remains intact. **0.5s - 1.0s:** The arm reaches its maximum rotation, and the boulder is released from the container. The machines base remains stable **1.0s - 5.0s:** The boulder travels in clear parabolic arc. The machine settles without any damage. The final throwing distance will be shorter than the broken attempts but will represent successful launch. </Simulation Prediction After Modification> * * on the ground. <Modification Steps> Remove [14] Remove [15] Remove [16] </Modification Steps>"
        },
        {
            "title": "Technical Report",
            "content": "K SINGLE-AGENT PROMPT You are machine builder. Your task is to generate complete machine as JSON file based on the users request. Add new blocks to the initial structure; do not modify or delete it. Block Placement: New blocks must attach to attachable_faces of Coordinate System: Left-handed coordinate system, y+ upwards, z+ Size Limit: The final machine must not exceed dimensions of 17 ( I. Rules: 1. forward and x+ right. 2. existing blocks. Blocks cannot overlap. 3. Length, Z), 17 (Width, X), 9.5 (Height, Y). 4. 5. lowest block. Account for potential collisions between the machine and the ground throughout operation. 6. Gravity: Every block is subject to gravity; the greater blocks mass, the stronger its downward force. Consider this in your design when the machine is in operation. 7. momentum are applied. Functionality: Ensure functional blocks are oriented correctly. Ground Interaction: The ground automatically conforms to the machine Physical rules: Classical mechanical laws such as conservation of II. Block Data: Notes: You can only use blocks from this list. blocks default orientation is Z+. 1. Attachable face: a. id: The i-th attachable_face of this block. b. pos: Coordinates relative to the building center(which is the attachable_face of the parent block) of this block. c. orientation: Orientation relative to the building center of this block. 2. Tags: a. Non-static: Block can generate force or movement. b. Non-stable: Connection to parent is not rigid (e.g., hinges, boulders). c. Linear: Do not collide with other blocks, but will occupy two attachable_faces. 3. Special Blocks: a. Boulder (id 36): Does not physically connect to other blocks. b. Spring (id 9): special block that pulls its two connection points together. Detailed Infos: <Block Infos without explanations> III. JSON Output Format: 1. type: blocks type_id 2. id: this is i-th block 3. parent: parent blocks id 4. face_id: parent blocks constructible_point id 5. Standard Block: {\"type\": <int>, \"id\": <int>, \"parent\": <int>, \" face_id\": <int>} 6. special block (id: 9): {\"type\": 9, \"id\": <int>, \"parent_a\": <int>, \" face_id_a\": <int>, \"parent_b\": <int>, \"face_id_b\": <int>} IV. Final Response Format: Your response must contain only these two parts: 1. Chain of thoughts: a. You need to think step by step, analyse each blocks usage, and where to place them. Put your cot in <cot></cot>"
        },
        {
            "title": "Technical Report",
            "content": "b. Construction Idea: brief explanation of your design, remember to consider necessary block types, note them in necessary_blocks [ type_1,type_2 ...], no more than 300 words. 2. is an example: json JSON: The complete JSON code inside json ... block. Here [ ] {\"type\":\"0\",\"id\":0,\"parent\":-1,\"face_id\":-1}, {\"type\": <int>, \"id\": <int>, \"parent\": <int>, \"face_id\": <int>}, ..."
        },
        {
            "title": "Technical Report",
            "content": "L MULTI-AGENT PROMPTS L.1 SHARED PROMPTS L.1.1 GAME INTRODUCTION WITH 3D KNOWLEDGE 1. Coordinate System: The game uses left-handed coordinate system, with the Y-axis pointing upwards. In global coordinates, z+ is forward and x+ is to the right. 2. Construction: New blocks must be connected to the \"attachable faces\" of existing blocks. The default orientation of blocks is z+. 3. Block Types: a. Regular Blocks: Have fixed dimensions and multiple attachable faces. b. special blocks (ID 7, 9): Connect two attachable faces, do not collide with other blocks, but will occupy the connection points. 4. Size Limitations: The mechanical dimensions must not exceed Length (z) 17, Width (x) 17 Height (y) 9.5. L.1.2 MACHINE 3D JSON FORMAT json [ {\"type\":\"0\",\"id\":0,\"parent\":-1,\"face_id\":-1}, {\"type\":\"Block Type ID\",\"id\":\"Block Order ID\",\"parent\":\"Parent Block ID\",\"face_id\":\"Attachable Face ID in Parent Block\"}, ... ] If it is special block (Type ID is 7 or 9, other blocks are not special blocks), it will be: json { \"type\":\"Block Type ID\", \"id\":\"Block Order ID\", \"parent_a\":\"Parent Block Order ID\", \"face_id_a\":\"Attachable Face ID in Parent Block\", \"parent_b\":\"Parent Block Order ID\", \"face_id_b\":\"Attachable Face ID in Parent Block\" } L.1.3 BUILD GUIDANCE Your task is to: Add new blocks based on the initial machine JSON and construction requirements provided by the user, without deleting the initial structure, and output the final complete JSON. Building Objective: Describe the structure and function to be built, User Input Format: 1. and provide list of recommended block IDs. 2. Initial JSON: The structural data of the existing machine. Block Usage: You can only select from the list of recommended block Core Building Rules: 1. IDs provided by the user. You may remove certain recommended block IDs due to \"inapplicability\" or \"better alternatives,\" but you cannot add new IDs. If any are removed, the reason must be stated. Collision Prevention: You must accurately calculate the coordinates 2. and orientation of new blocks based on the orientation and position of the parent block to ensure that the new block does not overlap with the existing structure."
        },
        {
            "title": "Technical Report",
            "content": "3. Coordinate System and Orientation: The initial orientation of all blocks is Z+. The final orientation of new blocks must be transformed based on the parent blocks orientation and the relative direction of the building point, according to the following rules: Oriented z+: Front z+, Back z-, Left x-, Right x+, Up y+, Down yOriented z-: Front z-, Back z+, Left x+, Right x-, Up y+, Down yOriented x-: Front x-, Back x+, Left z-, Right z+, Up y+, Down yOriented x+: Front x+, Back x-, Left z+, Right z-, Up y+, Down yOriented y+: Front y+, Back y-, Left x-, Right x+, Up z-, Down z+ Oriented y-: Front y-, Back y+, Left x-, Right x+, Up z+, Down zYour Output Format: 1. Building Plan: Generated [structure summary] to achieve [function]. Finally used blocks [ID1, ID2,...]. Removed [ID3,...] because [reason for removal]. 2. Final JSON: json [ // The complete JSON including both the initial structure and the new blocks ] L.1.4 META DESIGNER SYSTEM PROMPT You are mechanical designer, and your task is to design machine in the game Besiege based on the users requirements. Please gain general understanding of the game based on the following information: I. Game Introduction: 1. Besiege is physics-based construction game developed using Unity. Players need to build various machines to complete different tasks. 2. Besiege only contains basic mechanics and physical laws, such as mass, friction, and collision. 3. Blocks are used to build machines. Each block has its unique functions , advantages, and disadvantages. II. Block Introduction: 1. Blocks are mainly divided into five major categories: Basic Blocks, Mobility Blocks, Mechanical Blocks, Weapon Blocks, and Armor Blocks. - Basic Blocks are the fundamental components of many machines - structural blocks and some basic moving parts. - Mobility Blocks are primarily designed for movement functions - powered and unpowered wheels, steering blocks, and gears. - Mechanical Blocks provide various useful auxiliary functions - joints, suspension devices, winches, grabbers, etc. - Weapon Blocks offer various types of violent output at different ranges - swords and saws for close combat, and cannons and rockets for longrange. - Armor Blocks can protect the machine from damage or provide useful shapes for carrying other blocks - armor plates and wooden panels, as well as half-pipes and brackets. 2. Here is detailed introduction to the properties and functions of each block: Name Category Type ID Function ----------------------------------- Starting Block Basic 0 The Starting Block is the root block of the machine; it is placed at the starting position by default, cannot be moved, cannot be deleted, and only one can exist at time. Small Wooden Block Basic 15 basic structural block, cube-shaped , to which other blocks can be attached from any side, making it particularly suitable for constructing the basic framework of machines."
        },
        {
            "title": "Technical Report",
            "content": "Wooden Block Basic 1 basic mechanical block, twice the length of Small Wooden Block. Wooden Rod Basic 41 basic mechanical block, twice the length of Small Wooden Block, with the same weight as Wooden Block, but very fragile. Log Basic 63 basic mechanical block, more robust, three times the length of Small Wooden Block. Brace Basic 7 non-placeable block used for reinforcement, built by \"attaching\" to other blocks, with no collision volume. It is often used to increase the stability of static structures and is not suitable for any dynamic structures. Steering Hinge Mobility 28 The Steering Hinge can rotate blocks along an axis perpendicular to the placement axis. This block can rotate child blocks to 180-degree direction to the left or right, commonly used for vehicle steering. Steering Block Mobility 13 The Steering Block can rotate blocks along its placement axis, similar to the rotating part of helicopters rotor. Powered Wheel Mobility 2 Similar to car wheel, it can drive itself but cannot turn independently. It is mechanical device used for moving objects on the ground. Unpowered Wheel Mobility 40 wheel that does not rotate without external force, otherwise similar to Powered Wheel. Powered Large Wheel Mobility 46 Similar to Powered Wheel, but with radius and thickness twice that of Powered Wheel. Unpowered Large Wheel Mobility without external force, otherwise similar to Powered Large Wheel. Small Wheel Mobility 50 It works almost the same as caster wheel (like shopping cart wheel), unpowered. Universal Joint Mechanical 19 block that can freely rotate around its placement axis, similar to Steering Block but without power. wheel that does not rotate Hinge Mechanical 5 Similar to Steering Hinge, but without power . Ball Joint Mechanical 44 Can swing 360 degrees along the axis perpendicular to the placement axis, but without power. Axle Connector Mechanical 76 Similar to Ball Joint. Rotating Block Mechanical 22 Powered, it can rotate clockwise or counterclockwise along the axis perpendicular to the placement axis. Suspension Mechanical 16 Shaped like wooden block, it can buffer forces from all directions. Grabber Mechanical 27 It will grab and hold onto any object it comes into contact with. Spring Mechanical 9 special block that attaches to two other blocks and can quickly pull them together. Its pulling force is almost entirely dependent on its length. Boulder Weapon 36 stone that does not directly connect to other blocks even when built on them. It can be used as projectile weapon and is also commonly used as target in transportation tests. Elastic Pad Armor 87 Increases the elasticity of the contact surface, providing an effect of rebounding and increasing kinetic energy. Container Armor 30 Can hold child blocks like bowl, mainly used to carry blocks that cannot be directly connected to the machine. The container has some anti-slip capability, and only one block (the target to be carried) can be placed inside. No other blocks can be added. Roller Wheel Locomotion 86 Similar to the small wheel, but shorter (0.8m). Grip Pad Armour 49 Block with the highest friction. Ballast Flight 35 heavy cubic block used as counterweight. III. Mechanical Design Requirements: 1. When designing the machine, you should adopt \"layered design\" approach. Break down the users requirements into the functions that the machine needs to achieve, and list the functional points."
        },
        {
            "title": "Technical Report",
            "content": "2. For each functional point, design structure that can meet the function. structure can be understood as \"group of blocks,\" and several structures combined form the machine. 3. For each structure, determine the types of blocks to be used. 4. Determine the construction order of the structures to make the machine -building process layered. List which structure is the foundation and which is the upper-layer structure, and establish the construction sequence chain. IV. Output Format Requirements: json { \"definition\": \"Construct machine that can fulfill the users requirements\", \"function_points\": [\"Function Point 1\", \"Function Point 2\", \"Function Point 3\"], \"design_structure\": [ { \"function_name\": \"Structure 1 Name\", \"description\": \"Description of Structure 1\", \"related_function_points\": [\"Function Point 1\", \"Function Point 2\"] }, { } \"function_name\": \"Structure 2 Name\", \"description\": \"Description of Structure 2\", \"related_function_points\": [\"Function Point 3\"] ], \"build_order\": [\"Structure 2 Name\", \"Structure 1 Name\"], \"machine_structure\": { \"Structure 1 Name\": { \"block_id\": [ID1, ID2, ID3...], \"guidance\": \"Guidance here\" }, \"Structure 2 Name\": { \"block_id\": [ID4, ID5, ID6...], \"guidance\": \"Guidance here\" } } } V. Note: 1. You must design the machine based on the game introduction and block introduction, and you cannot use blocks that do not exist in the game. 2. Strictly follow the output format requirements. Do not output any content other than what is required by the output format. 3. For the design of structures, aim for simplicity and use the minimum number of structures to complete all functions. Check if there are existing structures that can be used before designing new ones. 4. When selecting blocks for structure, limit the types of blocks to no more than three, and preferably use only one type. Focus solely on meeting the functional points with the bare minimum requirements, and do not attempt to fulfill demands beyond the functional points. will provide the user input below. Please generate mechanical overview in JSON format based on the users description. L.2 DESIGNER SYSTEM AND USER PROMPT <system> You are mechanical builder in the game \"Besiege.\" Your task is to add new blocks to an existing machine structure according to user requests and finally output the complete machine JSON data."
        },
        {
            "title": "Technical Report",
            "content": "I. Game Introduction: <Game Introduction With 3D Knowledge> II. Introduction to Blocks: <Block Infos> III. Introduction to JSON Format: <Machine 3D JSON Format> IV. Construction Guidance: <Build Guidance> V. Output Format Requirements: Based on the existing structure, [structural summary] was generated as [functional implementation]. Ultimately, the block types [ID1, ID2, ...] were decided upon, while [ID3 , ...] were removed due to [reason for removal]. JSON: json ... VI. Note: Building Principles 1. Correct Orientation: Ensure that functional blocks such as wheels and hinges are oriented correctly to achieve the intended function. 2. Efficiency First: a. Complete the design goal with the fewest blocks possible. b. The ground will automatically adapt to the lowest point of the mechanism. Output Requirements 1. Strict Structure: Your response must only contain two parts: Construction Plan and Final JSON. Prohibit any additional greetings, explanations, or comments. 2. Pure JSON: The complete JSON code block must be placed within json ... . Prohibit modifying the initial structure. Prohibit modifying the scale property of any block. Prohibit adding comments or nonexistent properties in the JSON. Next, will provide user input. Please generate JSON based on the description. <user> <designer_output[\"design_structure\"][i][\"description\"]>+<Output Machine Json> L."
        },
        {
            "title": "INSPECTOR SYSTEM AND USER PROMPT",
            "content": "<system> Ill provide you with mission in the game Besiege, along with the machine designed for it in JSON format and its 3D information. Please identify and summarize the unreasonable parts of the machine design. Heres the introduction to the game and construction knowledge. I. Game Introduction: <Game Introduction With 3D Knowledge> II. Introduction to Blocks: <Block Infos> III. Introduction to JSON and 3D Information: <Machine 3D JSON Format> IV. Introduction to Output Format: <Three-Dimensional Perception of the World> { \"Coordinate System\": \"Left-Handed System or Right-Handed System\", \"Up\": \"x or or z\", \"Right\": \"x or or z\", \"Forward\": \"x or or z\","
        },
        {
            "title": "Technical Report",
            "content": "\"Frontmost Block\": {\"id\": [Center Point Coordinates]}, \"Rearmost Block\": {\"id\": [Center Point Coordinates]}, \"Leftmost Block\": {\"id\": [Center Point Coordinates]}, \"Rightmost Block\": {\"id\": [Center Point Coordinates]}, \"Topmost Block\": {\"id\": [Center Point Coordinates]}, \"Lowest Block\": {\"id\": [Center Point Coordinates]}, } </Three-Dimensional Perception of the World> <Question Answer> Write the answer to the users question here </Question Answer> <Summary of Design Defects> 1. Problem description, involving blocks: [id_list], belonging to structure: \"Structure Name\" ... </Summary of Design Defects> V. Notes: 1. Please do not output any irrelevant information and directly answer the users question. 2. The id of the block must be enclosed in \"[]\". Additionally, do not use \"[]\" for any other numbers; consider using \"()\" instead. Below, will provide you with JSON and 3D information. Please answer the users question based on this information. <user> Task Introduction {designer_output[\"definition\"]} JSON Information <Output Machine Json> 3D Information <Output Machine Json 3D Info> Mechanical Structure Information <Machine Tree With Designer Layer Arrangement> Initial State of the Machine The machine is initially placed on the ground, facing in the z+ direction , with the target direction being z+. Questions: 1. Output the position and orientation of all dynamic blocks, and analyze : a. The impact of dynamic blocks on the machine b. The direction of force provided by dynamic blocks c. The impact on sub-blocks and the direction of force on the machine 2. Output static blocks other than basic structural blocks, and analyze the rationality of their orientation and position. 3. Balance Check (self-gravity) a. The center of gravity of the machine (find the block closest to the center of gravity) b. Whether parts of the machine will sink due to gravity 4. Comprehensive Analysis a. Summarize the direction of all forces to analyze the movement of the machine b. Identify logically unreasonable blocks, output their hierarchical structure and reasons for unreasonableness L.4 REFINER SYSTEM PROMPT will give you task in the game Besiege, as well as the 3D information of the machine designed to complete this task. There are some"
        },
        {
            "title": "Technical Report",
            "content": "unreasonable aspects in the design of this machine, and would like you to modify these parts: I. Game Introduction: <Game Introduction With 3D Knowledge> II. Block Introduction: <Block Infos> III. Input Introduction: 1. Task & Context Task Objective: <designer_output[\"user_input\"]> Preceding Information (if any): Defect Report: <quizzer_output> Modification History: <modify_history> Environmental Feedback: <environment_feedback> 2. Machine Data <Machine 3D JSON Format> IV. Modification Method Introduction: Please follow the steps below to analyze and modify the machine structure . Step 1: Analyze & Plan 1. Diagnose the Current Machine: Analyze its power, balance, structure, and overall movement to identify design flaws or areas for optimization. 2. Devise Modification Plan: Based on your diagnosis, decide which blocks to move, remove, or add. 3. impact of your changes. 4. your modification plan in sentence or two using natural language. Briefly Describe Modifications: Before generating commands, describe Evaluate Modification Impact: When planning, you must consider the Step 2: Execute Modification Operations Use the following three command formats for modifications. Output only the operation commands, with each command on new line. 1. Add Block (Add) Format: Non-Linear: Add [block type ID] to [id] in [attachable_face_id ] attachable_face_id_a] to [id_b] in [attachable_face_id_b] Linear: Add [block type ID] to [id_a] in [ Rules: Can only be added to original blocks. You cannot add new blocks onto other newly added blocks. special blocks require specifying two connection points. 2. Remove Block (Remove) Format: Remove [id] Rules: Can only remove original blocks. Cannot remove block that has child blocks. 3. Move Block (Move) Move [id] to [new_parent_id] in [new_attachable_face_id] Rules: Moves the target block and all its child blocks as single unit. The new parents id must be smaller than the id of the block being moved. special blocks cannot be moved. The move must change the blocks original position. <Build Guidance: Coordinate System and Orientation>"
        },
        {
            "title": "Technical Report",
            "content": "V. Output Format Introduction: <Thought Process> </Thought Process> <Modification Description> </Modification Description> <Simulation Prediction After Modification> </Simulation Prediction After Modification> <Required Feedback> </Required Feedback> <Modification Steps> </Modification Steps> VI. Note: 1. Output Scope: Only output content related to the modification method and the required output format. 2. Ground Definition: The ground is always located beneath the machine, in contact with the block that has the lowest y-coordinate. 3. Task Adherence: Pay close attention to the task requirements. Do not delete important blocks by mistake. 4. Parenting Constraint: block that has been deleted cannot be used as parent for new or moved blocks within the same set of operations. 5. Format Integrity: Ensure the output format is complete. You must retain the <Thought Process></Thought Process> and <Modification Description></Modification Description> tags. 6. Content Separation: Do not include verification results within the < Modification Description> block. 7. Preserve Success Steps: Retain any steps marked as \"Success\" and do not adjust their order. 8. Prioritize Error Steps: Focus your efforts on fixing the steps marked as \"Error\". Do not modify steps marked as \"Unverified\" prematurely . 9. Error History: will provide the modification history for the \"Error\" steps. Use this information to avoid repeating invalid operations. Below, will provide you with the JSON and 3D information. Please modify the machine accordingly. L.5 ENVIRONMENT QUERIER SYSTEM PROMPT will give you task in the game Besiege, as well as the information on the machine designed to complete this task. The machine has finished the task simulation and returned some environmental feedback to describe its performance. Please analyze the issues with the machine based on the feedback and request more feedback if needed. I. Game Introduction: <Game Introduction With 3D Knowledge> II. Block Introduction: <Block Infos> III. Input Introduction: <Machine 3D JSON Format> IV. Query Introduction: A. Environmental Feedback Request: After conducting the environmental simulation of your modified machinery, The system will provide essential data for the most critical components ( such as position, rotation, and velocity). Based on the performance of the essential data, you need to determine what problems the machinery may have encountered and request feedback on the key blocks that may have issues. You can also request those blocks that may significantly impact the machinerys functionality and check whether their performance meets expectations. The format for the environmental feedback request is as follows. Please adhere strictly to this format and avoid including any extraneous information:"
        },
        {
            "title": "Technical Report",
            "content": "<Required Feedback> [ \"id\": int, \"duration\": [float, float], \"properties\": [\"position\", \"rotation\", \"velocity\", \"length\"], { }, ... ] </Required Feedback> Both \"id\" and \"duration\" are mandatory fields. Note that the game runs for total of 5 seconds, game state samples per 0.2s; do not exceed this duration. You can freely select the attributes in \"properties,\" but avoid including irrelevant information. The \"length\" attribute is only applicable to linear components. V. Output Format Introduction: <Thought Process> </Thought Process> <Required Feedback> </Required Feedback> VI. Note: 1. Please do not output any irrelevant information. 2. The ground will always correctly appear beneath the machine, making normal contact with the block that has the lowest y-axis coordinate. 3. All blocks are affected by gravity. If block with large selfweight is built on certain non-powered non-static blocks, the non-static blocks may rotate due to the gravitational force of the sub-blocks. 4. Similarly, the power generated by powered blocks also needs to counteract the gravitational force of the sub-blocks. 5. Please adhere to the output format and avoid adding any irrelevant information in the JSON. Below, will provide you with the JSON and 3D information, as well as the environmental feedback. Please request more feedback as needed. L.6 BLOCK INFORMATIONS Explanations: This is concise list of the blocks you can use for this construction. Please read and follow the rules carefully. I. Block Information Format Each blocks information follows the dict format. Attributes that block does not have will not appear in the keys. 1. Characteristic Tags: a. Non-static: The block can actively generate force or movement. b. Non-stable: The connection between the block and its parent block is non-rigid, allowing for movement or rotation. c. Linear: The block is used to connect two existing points rather than being attached to single point. If there are no tags, it is regular static and stable block. 2. Attachable Faces: The key is in the format of attachable face ID, coordinates (relative coordinates), and orientation (relative orientation). II. Key Special Rules 1. Powered Wheel Rule (applicable to all powered wheels): The direction of power provided by the wheel is not the same as its orientation. - Forward (Z+ direction): The wheel should face sideways (X+ or X-). - Left turn (power pushes towards X-): The wheel should face forward ( Z+). - Right turn (power pushes towards X+): The wheel should face backward (Z-)."
        },
        {
            "title": "Technical Report",
            "content": "- When the wheel faces up or down (Y+ or Y-), it does not provide power. 2. Special Blocks (Brace, Spring): - They do not have their own connection points but connect to two other blocks. - Brace: Used to reinforce static structures with no collision volume. - Spring: Generates contracting pull force along the line connecting its two ends when stretched. 3. Non-connecting Blocks (bombs, boulders): - These blocks are placed at the specified location but do not form physical connection with any other block. Containers are usually needed to hold them. Detailed Infos: [ { \"Name\": \"Starting Block\", \"Description\": \"The root block of the mechanism. It cannot be placed or deleted, and only one can exist at time. Its initial position is fixed, and its initial orientation is z+.\", \"Type ID\": 0, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 0.5], \"Orientation\": \"Front {\"ID\": 1, \"Coordinates\": [0, 0, -0.5], \"Orientation\": \"Back {\"ID\": 2, \"Coordinates\": [-0.5, 0, 0], \"Orientation\": \"Left {\"ID\": 3, \"Coordinates\": [0.5, 0, 0], \"Orientation\": \"Right {\"ID\": 4, \"Coordinates\": [0, 0.5, 0], \"Orientation\": \"Up\"}, {\"ID\": 5, \"Coordinates\": [0, -0.5, 0], \"Orientation\": \"Down\"} ], \"Mass\": 0.25 \"Name\": \"Small Wooden Block\", \"Description\": \"A basic construction block, cubic in shape.\", \"Type ID\": 15, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down ], \"Mass\": 0.3 \"Name\": \"Wooden Block\", \"Description\": \"A basic construction block.\", \"Type ID\": 1, \"Size\": [1, 1, 2], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 2], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [-0.5, 0, 1.5], \"Orientation\": \"Left \"}, \"}, \"}, \"}, \"}, \"}, \"} \"}, \"}, }, { }, {"
        },
        {
            "title": "Technical Report",
            "content": "\"}, \"}, \"}, \"} .\", \"}, \"}, \"}, \"}, \"}, \"} \"}, \"}, \"}, \"}, \"}, \"}, {\"ID\": 3, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 4, \"Coordinates\": [0.5, 0, 1.5], \"Orientation\": \"Right {\"ID\": 5, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 6, \"Coordinates\": [0, 0.5, 1.5], \"Orientation\": \"Up\"}, {\"ID\": 7, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down {\"ID\": 8, \"Coordinates\": [0, -0.5, 1.5], \"Orientation\": \"Down ], \"Mass\": 0.5 }, { \"Name\": \"Wooden Rod\", \"Description\": \"A basic construction block, slender and fragile \"Type ID\": 41, \"Size\": [1, 1, 2], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 2], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [-0.5, 0, 1.5], \"Orientation\": \"Left {\"ID\": 3, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 4, \"Coordinates\": [0.5, 0, 1.5], \"Orientation\": \"Right {\"ID\": 5, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 6, \"Coordinates\": [0, 0.5, 1.5], \"Orientation\": \"Up\"}, {\"ID\": 7, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down {\"ID\": 8, \"Coordinates\": [0, -0.5, 1.5], \"Orientation\": \"Down ], \"Mass\": 0.5 }, { \"Name\": \"Log\", \"Description\": \"A basic construction block.\", \"Type ID\": 63, \"Size\": [1, 1, 3], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 3], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [-0.5, 0, 1.5], \"Orientation\": \"Left {\"ID\": 3, \"Coordinates\": [-0.5, 0, 2.5], \"Orientation\": \"Left {\"ID\": 4, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 5, \"Coordinates\": [0.5, 0, 1.5], \"Orientation\": \"Right {\"ID\": 6, \"Coordinates\": [0.5, 0, 2.5], \"Orientation\": \"Right {\"ID\": 7, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 8, \"Coordinates\": [0, 0.5, 1.5], \"Orientation\": \"Up\"}, {\"ID\": 9, \"Coordinates\": [0, 0.5, 2.5], \"Orientation\": \"Up\"}, {\"ID\": 10, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \" {\"ID\": 11, \"Coordinates\": [0, -0.5, 1.5], \"Orientation\": \" 68 Down\"}, Down\"},"
        },
        {
            "title": "Technical Report",
            "content": "{\"ID\": 12, \"Coordinates\": [0, -0.5, 2.5], \"Orientation\": \" Down\"} }, { ], \"Mass\": 1 \"Name\": \"Steering Hinge\", \"Description\": \"Powered, used to control the rotation of subblocks. It can swing left and right along the axis perpendicular to the placement axis.\", \"Type ID\": 28, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"} ], \"Special Attributes\": { \"Swing Direction\": [\"Left\", \"Right\"], \"Angle\": [-90, 90], \"NonStatic\":\"True\", \"NonStable\":\"True\" }, \"Mass\": 1 }, { \"Name\": \"Steering Block\", \"Description\": \"Powered, used to control the rotation of subblocks. It can rotate clockwise or counterclockwise along the placement axis.\", \"Type ID\": 13, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down \"}, \"}, \"} ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"NonStatic\":\"True\", \"NonStable\":\"True\" }, \"Mass\": }, { \"Name\": \"Powered Wheel\", \"Description\": \"Powered, mechanical device used to move objects on the ground.\", \"Type ID\": 2, \"Size\": [2, 2, 0.5], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 0.5], \"Orientation\": \"Front\"} ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"PoweredWheel\":\"True\", \"NonStatic\":\"True\", \"NonStable\":\"True\" }, \"Mass\": 1 }, {"
        },
        {
            "title": "Technical Report",
            "content": "\"Name\": \"Unpowered Wheel\", \"Description\": \"A wheel that does not rotate without external force, similar to the powered wheel.\", \"Type ID\": 40, \"Size\": [2, 2, 0.5], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 0.5], \"Orientation\": \"Front\"} ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"NonStable\":\"True\" }, \"Mass\": 1 }, { \"Name\": \"Large Powered Wheel\", \"Description\": \"Similar to the powered wheel, but larger.\", \"Type ID\": 46, \"Size\": [3, 3, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-1.5, 0, 1], \"Orientation\": \"Front {\"ID\": 2, \"Coordinates\": [1.5, 0, 1], \"Orientation\": \"Front {\"ID\": 3, \"Coordinates\": [0, 1.5, 1], \"Orientation\": \"Front {\"ID\": 4, \"Coordinates\": [0, -1.5, 1], \"Orientation\": \"Front {\"ID\": 5, \"Coordinates\": [-1.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 6, \"Coordinates\": [1.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 7, \"Coordinates\": [0, 1.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 8, \"Coordinates\": [0, -1.5, 0.5], \"Orientation\": \"Down ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"PoweredWheel\":\"True\", \"NonStatic\":\"True\", \"NonStable\":\"True\" }, \"Mass\": 1 }, { \"Name\": \"Large Unpowered Wheel\", \"Description\": \"Similar to the unpowered wheel, but larger.\", \"Type ID\": 60, \"Size\": [3, 3, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-1.5, 0, 1], \"Orientation\": \"Front {\"ID\": 2, \"Coordinates\": [1.5, 0, 1], \"Orientation\": \"Front {\"ID\": 3, \"Coordinates\": [0, 1.5, 1], \"Orientation\": \"Front {\"ID\": 4, \"Coordinates\": [0, -1.5, 1], \"Orientation\": \"Front {\"ID\": 5, \"Coordinates\": [-1.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 6, \"Coordinates\": [1.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 7, \"Coordinates\": [0, 1.5, 0.5], \"Orientation\": \"Up\"}, 70 \"}, \"}, \"}, \"}, \"}, \"}, \"} \"}, \"}, \"}, \"}, \"}, \"},"
        },
        {
            "title": "Technical Report",
            "content": "{\"ID\": 8, \"Coordinates\": [0, -1.5, 0.5], \"Orientation\": \"Down \"} ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"NonStable\":\"True\" }, \"Mass\": 1 }, { \"Name\": \"Small Wheel\", \"Description\": \"It works almost the same as caster wheel (e.g., shopping cart wheel), but it is not powered.\", \"Type ID\": 50, \"Size\": [0.5, 1, 1.5], \"Special Attributes\": {\"NonStable\":\"True\"}, \"Mass\": 0.5 }, { }, { \"Name\": \"Roller Wheel\", \"Description\": \"Same as the small wheel.\", \"Type ID\": 86, \"Size\": [1, 1, 1], \"Special Attributes\": { \"NonStable\":\"True\" }, \"Mass\": 0.5 \"Name\": \"Universal Joint\", \"Description\": \"A block that can freely rotate around its placement axis, but it is not powered.\", \"Type ID\": 19, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down \"}, \"}, \"} ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"NonStable\":\"True\" }, \"Mass\": 0.5 }, { \"Name\": \"Hinge\", \"Description\": \"It can swing up and down along the axis perpendicular to the placement axis, but it is not powered.\", \"Type ID\": 5, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down \"}, \"}, \"}"
        },
        {
            "title": "Technical Report",
            "content": "], \"Special Attributes\": { \"Swing Direction\": [\"Up\", \"Down\"], \"Angle\": [-90, 90], \"NonStable\":\"True\" }, \"Mass\": 0.5 }, { \"Name\": \"Ball Joint\", \"Description\": \"It can swing freely in all directions, but it is not powered.\", \"Type ID\": 44, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down ], \"Special Attributes\": { \"Swing Range\": \"All directions outward from the build surface \"NonStable\":\"True\" }, \"Mass\": 0.5 \"Name\": \"Axle Connector\", \"Description\": \"Similar to ball joint.\", \"Type ID\": 76, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"} ], \"Special Attributes\": { \"Swing Range\": \"All directions outward from the build surface \"NonStable\":\"True\" }, \"Mass\": 0.3 \"}, \"}, \"} \", \", }, { }, { \"Name\": \"Rotating Block\", \"Description\": \"When powered, this motor-like block generates torque and rotates about its local y-axis. Blocks connected at attachable_face 1 or 4 rotate with it as part of rigid assembly. The rotation block has its own mass and obeys classical mechanics: it applies torque to connected parts when powered, and it can also be moved, rotated, or stopped by external forces or torques, depending on constraints.\", \"Type ID\": 22, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ \"}, \"}, {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"},"
        },
        {
            "title": "Technical Report",
            "content": "{\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down \"} ], \"Special Attributes\": { \"Rotation Axis\": \"Front\", \"NonStatic\":\"True\", \"NonStable\":\"True\" }, \"Mass\": 1 }, { \"Name\": \"Grabber\", \"Description\": \"If the build point is unoccupied, it will grab any object that comes into contact with the build point and hold it firmly.\", \"Type ID\": 27, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"} ], \"Special Attributes\": { \"Grip Direction\": \"Front\", \"NonStable\":\"True\" }, \"Mass\": 0.5 }, { \"Name\": \"Boulder\", \"Description\": \"A rock that will not directly connect to other blocks even if built on them, high mass.\", \"Type ID\": 36, \"Size\": [1.9, 1.9, 1.9], \"Special Attributes\": { \"NonStable\":\"True\" }, \"Mass\": 5 }, { }, { }, { \"Name\": \"Grip Pad\", \"Description\": \"The block with the highest friction.\", \"Type ID\": 49, \"Size\": [0.8, 0.8, 0.5], \"Mass\": 0.3 \"Name\": \"Elastic Pad\", \"Description\": \"The block with the highest elasticity.\", \"Type ID\": 87, \"Size\": [0.8, 0.8, 0.2], \"Mass\": 0. \"Name\": \"Container\", \"Description\": \"It has railing around the building point. If oriented towards +y, it can hold sub-blocks like bowl. It is mainly used to hold blocks that cannot directly connect to the mechanism, such as boulders and bombs. Do not place other blocks nearby to avoid overlap .\", \"Type ID\": 30, \"Size\": [2.4, 3, 2.8], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"} ], \"Mass\": 0.5 },"
        },
        {
            "title": "Technical Report",
            "content": "{ \"Name\": \"Suspension\", \"Description\": \"It primarily serves as buffer and shock absorber. It is similar in shape to wooden block, with all Attachable Faces Properties located at the far end of the block.\", \"Type ID\": 16, \"Size\": [1, 1, 2], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 2], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 1.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 1.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 1.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 1.5], \"Orientation\": \"Down \"}, \"}, \"} ], \"Mass\": 0.5 }, { \"Name\": \"Brace\", \"Description\": \"The brace can be used for reinforcement. Its construction principle is to attach to other blocks. It has no collision volume. Since it is often used to stabilize static structures, it is not suitable for any dynamic structures.\", \"Type ID\": 7, \"Special Attributes\": { \"Linear\": \"True\", \"Anti Tension Direction\": \"Towards the center of the line segment between the two Attachable Faces Properties\", \"Anti-Compression Direction\": \"Outward from the center of the line segment between the two Attachable Faces Properties\" }, \"Mass\": 0.5 }, { \"Name\": \"Spring\", \"Description\": \"A special block that attaches to two other blocks and can quickly pull the two ends together. Its tension force is almost entirely dependent on its length.\", \"Type ID\": 9, \"Special Attributes\": { \"Linear\": \"True\", \"NonStatic\":\"True\", \"Tension Direction\": \"Towards the center of the line segment between the two Attachable Faces Properties\" }, \"Mass\": 0.4 }, { \"Name\": \"Ballast\", \"Description\": \"It serves as counterweight, has large mass, and is shaped like cube.\", \"Type ID\": 35, \"Size\": [1, 1, 1], \"Attachable Faces Properties\": [ {\"ID\": 0, \"Coordinates\": [0, 0, 1], \"Orientation\": \"Front\"}, {\"ID\": 1, \"Coordinates\": [-0.5, 0, 0.5], \"Orientation\": \"Left {\"ID\": 2, \"Coordinates\": [0.5, 0, 0.5], \"Orientation\": \"Right {\"ID\": 3, \"Coordinates\": [0, 0.5, 0.5], \"Orientation\": \"Up\"}, {\"ID\": 4, \"Coordinates\": [0, -0.5, 0.5], \"Orientation\": \"Down \"}, \"}, \"} ],"
        },
        {
            "title": "Technical Report",
            "content": "\"Mass\": 3 } ]"
        }
    ],
    "affiliations": [
        "The Chinese University of Hong Kong",
        "The Chinese University of Hong Kong (Shenzhen)"
    ]
}