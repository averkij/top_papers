{
    "paper_title": "Pretraining with hierarchical memories: separating long-tail and common knowledge",
    "authors": [
        "Hadi Pouransari",
        "David Grangier",
        "C Thomas",
        "Michael Kirchhof",
        "Oncel Tuzel"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "The impressive performance gains of modern language models currently rely on scaling parameters: larger models store more world knowledge and reason better. Yet compressing all world knowledge into parameters is unnecessary, as only a fraction is used per prompt, and impractical for edge devices with limited inference-time memory and compute. We address this shortcoming by a memory-augmented architecture and a pretraining strategy aligned with existing hardware paradigms. We introduce small language models that access large hierarchical parametric memory banks encoding world knowledge. During pretraining and inference, we fetch a small, context-dependent memory block and add it to the model. Our pretraining learns to store long-tail world knowledge in the memory parameters, while the small language model acts as an anchor capturing common knowledge and general reasoning abilities. Through trillion-token-scale experiments, we show significant gains: a 160M-parameters model augmented with an 18M-parameters memory fetched from a 4.6B memory bank obtains comparable performance to a regular model with more than 2x the parameters. Through extensive experiments, we study the optimal type and size of parametric memories in transformers, scaling them to over 21B parameters. We find that our proposed hierarchical feed-forward memories work robustly across transformer architectures, whether added during pretraining or post-hoc."
        },
        {
            "title": "Start",
            "content": "Pretraining with hierarchical memories: separating long-tail and common knowledge Hadi Pouransari, David Grangier, Thomas, Michael Kirchhof, Oncel Tuzel Apple The impressive performance gains of modern language models currently rely on scaling parameters: larger models store more world knowledge and reason better. Yet compressing all world knowledge into parameters is unnecessary, as only fraction is used per prompt, and impractical for edge devices with limited inference-time memory and compute. We address this shortcoming by memory-augmented architecture and pretraining strategy aligned with existing hardware paradigms. We introduce small language models that access large hierarchical parametric memory banks encoding world knowledge. During pretraining and inference, we fetch small, context-dependent memory block and add it to the model. Our pretraining learns to store long-tail world knowledge in the memory parameters, while the small language model acts as an anchor capturing common knowledge and general reasoning abilities. Through trillion-token-scale experiments, we show significant gains: 160M-parameters model augmented with an 18M-parameters memory fetched from 4.6B memory bank obtains comparable performance to regular model with more than 2 the parameters. Through extensive experiments, we study the optimal type and size of parametric memories in transformers, scaling them to over 21B parameters. We find that our proposed hierarchical feed-forward memories work robustly across transformer architectures, whether added during pretraining or post-hoc. Correspondence: Hadi Pouransari: mpouransari@apple.com Date: October 6, 5 2 0 2 9 2 ] . [ 1 5 7 3 2 0 . 0 1 5 2 : r Figure 1 Left: Schematic of pretraining-with-memories: some parameters are always used (anchor parameters), others are fetched per input document (memory parameters). Middle: Accuracy improvement over baseline when 10% of parameters are allocated as memories for knowledge-intensive task (predicting the atomic numbers of elements), using models with 160M, 410M, and 1.4B parameters, corresponding to rows A2, B2, and C2 in Table 1. Right: Elements sorted by their frequency of appearance in the DCLM-Baseline dataset (5 buckets, each with 24 elements). With the proposed pretraining-with-memories, we observe significant improvements, especially on long-tail data. While the baseline 1.4B model has only 17% accuracy on the least frequent element bucket, augmenting it with only 10% memory parameters increases the accuracy to 83%."
        },
        {
            "title": "Introduction",
            "content": "Frontier large language models (LLMs) have advanced significantly in recent years, demonstrating strong capabilities across both world knowledge and reasoning tasks. These improvements have largely been driven by scaling the number of parameters and training tokens. However, limited results exist on the role of model parameter count in each specific aspect, and on whether knowledge and reasoning can be disentangled. LLMs memorize many facts in their parameters during pretraining (Roberts et al., 2020), most of which are long-tail knowledge, overly specific, and unnecessary for the intended use. For example, part of the parameters of the Qwen3-2B (Yang et al., 2025) model store the fact that Albert Einstein was born on March 14, 1879, detail that is not essential for executing on-device personal assistant tasks, yet is permanently loaded into RAM and considered in each computation. Ideally, this capacity would be utilized for reasoning and commonsense abilities. We propose to use base model as an anchor to capture common knowledge and reasoning capabilities and augment it with memory bank that dedicates large set of memory parameters to long-tail knowledge. In Figure 1, we illustrate this through representative knowledge-intensive task: predicting the atomic number of elements. Baseline pretraining performance degrades for samples with lower frequency in the pretraining data. This degradation is attributed to catastrophic forgetting (Toneva et al., 2018), which arises from destructive gradient updates caused by dissimilar content (Ghosal et al., 2025) applied to the same set of parameters. In contrast, in the proposed approach, memory parameters are activated and updated only on sequences of similar topics, thereby reducing susceptibility to forgetting. Besides training dynamics advantages, separating long-tail knowledge into dedicated memory parameters offers several additional benefits, as discussed below. Runtime efficiency: For on-device deployment of LLMs, the main bottleneck is the availability of large and fast memory. Methods such as mixture-of-experts (Shazeer et al., 2017) (MoEs) improve compute efficiency by activating only fraction of the feed-forward modules. Still, MoEs require on-demand random access to the full set of experts at every layer and for every token, such that all model parameters remain loaded, not just the active ones. This makes on-device deployment of MoEs challenging. In our proposed method, depending on the context, only the required knowledge parameters are attached to the anchor model (see Figure 2). This allows fast on-device memory to be used primarily for anchor model parameters, while knowledge parameters are stored in slower but larger storage. Furthermore, we learn knowledge in the form of hierarchical memories, allowing inference to naturally align with existing device memory hierarchies (RAM, flash storage, external disk) and benefit from their compositionality over session of interaction with the model (see Figure 5). Training efficiency: key bottleneck in large-scale distributed training of standard LLMs is the need to communicate large gradient tensors between compute nodes. In the proposed approach, during pretraining, based on the content of documents in batch, only small fraction of memory bank parameters is retrieved and updated together with the anchor model parameters. As result, the gradients are highly sparse, which substantially reduces node-to-node communication. This property makes the proposed method well-suited for co-locating training data and compute in massively distributed setups, similar to branch-train-merge (BTM) methods (Li et al., 2022; Gururangan et al., 2023a). For instance, pretraining an anchor model with 160 million parameters and 4.6 billion memory parameters requires less than 1.7 the compute budget of training 160M model alone. Privacy and knowledge editing: Separating knowledge and reasoning abilities enables direct mapping between training tokens and specific subsets of parameters (memories). Ownership of training data tokens can therefore be linked to ownership of the corresponding memories. This makes it possible to remove or edit certain data from the model by deleting or updating the associated memory parameters, or to restrict access to specific memories while keeping the anchor model public. We show the effect of memory blocking in Section 4. The proposed approach also allows creating new memories from new data after pretraining, as shown in Section 4. Through this mechanism, strong public reasoning model can be readily augmented with memories built from large private user data or organizational databases, providing more efficient alternative to very long contextual memories. Our main contributions are transformer architectures augmented with large hierarchical memories (Figure 2) 2 Figure 2 Proposed architecture: For given context (such as question text), the memory retriever module selects relevant parameters from large set of memory bank parameters. These memory parameters are organized hierarchically based on the hierarchical clustering of the pretraining data. The anchor model, together with the retrieved memories, then responds to the question. and clustering-based pretraining method (Section 2.1), through which long-tail knowledge is automatically incorporated into the memory bank. We systematically examine how different memory types (Figure 3), depths (Figure 3d), sizes (Figure 4a), positions  (Table 9)  , and memory-to-model ratios (Figure 4b) affect performance. We further analyze the runtime efficiency of the proposed method in relation to hardware storage hierarchies (Section 3). Memory learning is scaled to banks containing up to 21B parameters. Results demonstrate consistent improvements over baseline models  (Table 1)  and retrieval-augmented generation strategies  (Table 3)  , and robust applicability to arbitrary transformer architectures  (Table 2)  . For example, with approximately 10% additional parameters retrieved from the memory bank, we observe gains on knowledge-specific tasks of 34.1% 40.3% for 160M model and 40.9% 45.9% for 410M model."
        },
        {
            "title": "2 Pretraining with memories",
            "content": "Consider language model with parameters θ, called anchor parameters, large bank of memory parameters , and retriever module that, given context x, fetches only the relevant memory parameters R(x; ) from the memory bank. During pretraining, we optimize the next token prediction loss for each document in the dataset D: L(x) = (cid:88) log Pθ,R(x;W )(xt x<t), (2.1) where Pθ,R(x;W )(xt x<t) is the models output probability distribution over the vocabulary for token in document x, given its previous tokens, using anchor parameters θ augmented with the retrieved memory parameters R(x; ). In terms of parameter counts, we generally assume R(x; ) θ . Therefore, with the training objective in Equation (2.1), the memory bank parameters are updated only sparsely. Intuitively, we expect R(x; ) to retrieve the same subset of parameters from for inputs that are semantically similar. As result, memory parameters receive gradients primarily from documents with related content, mitigating forgetting (Ghosal et al., 2025) and enabling them to efficiently memorize long-tail world knowledge. In contrast, θ receives gradients for all and is expected to primarily capture common knowledge and general reasoning capabilities. At inference time, the model uses only θ + R(x; ) parameters, introducing only minor overhead compared to model that relies solely on θ. Figure 2 presents the overall architecture. We next describe the construction of each component in this framework."
        },
        {
            "title": "2.1 Clustering-based memory retriever\nHierarchical clustering: Given a pretraining dataset D, we use an off-the-shelf text embedding model ϕ\nto map each document x ∈ D to ϕ(x) ∈ Rc. We then perform hierarchical clustering using the document\nembeddings: first, we divide the documents into k clusters using k-means; next, we further subdivide each",
            "content": "3 cluster into sub-clusters, and continue this process for levels. Finally, we obtain kl nested clusters at each level. In this paper, we cluster the DCLM-baseline dataset (Li et al., 2024) with 3.2 billion documents into hierarchy with = 4 levels and dividing factor of = 16 resulting in 16, 162, 163, and 164 clusters at levels 1, 2, 3, and 4, respectively (see Figure 2). We use Sentence-BERT all-MiniLM-L6-v2 embedding model (Reimers and Gurevych, 2019) with dimension = 384. See more details in Appendix C. To retrieve cluster, we map document to an index tuple I(x) = (i1, i2, . . . , ip) by traversing the clustering tree greedily: at each level l, ϕ(x) is compared to centroids and the sub-tree corresponding to the closest (via L2 distance) centroid (il) is then visited. This greedy traversal leads to fast and scalable retrieval within O(pk) comparisons. For our tree of depth = 4, we denote the cluster index as I(x) = (i1, i2, i3, i4). We pre-compute the cluster index for each document in the pretraining dataset offline, resulting in no training-time overhead. See details in Section A.2. At test time, we use the same traversal to get the cluster index for the task context (e.g., question text). Hierarchical memories: We assign memory parameter block to each cluster in given hierarchical clustering tree, denoted by Wl,il Rsl , where {1, 2, 3, 4} denotes the level, il {1, . . . , kl} is the cluster index at level l, and sl is the size of the memory parameter blocks at level l. The memory bank consists of all memory parameter blocks Wl,il . The memory retriever is then: R(x; ) = [W1,i1, W2,i2, W3,i3, W4,i4], where I(x) = (i1, i2, i3, i4). (2.2) The total number of parameters in the memory bank is = s1k + s2k2 + s3k3 + s4k4, and the number of retrieved parameters (fetched memory size) is R(x; ) = s1 + s2 + s3 + s4."
        },
        {
            "title": "2.2 Inference with parametric memories\nThere are multiple ways to add parametric memories R(x; W ) to an anchor model θ, i.e., to practically\nmodel Pθ,R(x;W )(xt | x<t). We limit our discussion to decoder-only, transformer-based (Vaswani et al., 2017)\nlanguage models. For all memory types, we instantiate them such that at the beginning of training they have\nno effect on the anchor model. See details in Appendix I.",
            "content": "LoRa-Memories: popular approach to augment model with (small) set of extra parameters is to patch its linear layers with low-rank adaptation matrices (LoRa, Hu et al., 2022). We consider three types of LoRa memories: LoRa-QK adapts the query and key projection layers (see Figure 14), LoRa-VO adapts the value and output projection layers (see Figure 15), and LoRa-FFN adapts all three linear layers in the SwiGLU feed-forward network (FFN) (Shazeer, 2020) with rank matrices (see Figure 16). KV-Memories: The knowledge in the context tokens transformer attends to is ultimately sequence of KV-caches. natural extension of providing context knowledge is thus to learn KV-cache parameters directly. This can also be seen as generalization of prefix tuning (Li and Liang, 2021; Lester et al., 2021), where only input token embeddings are learned. At each transformer layer, data-dependent query tokens cross-attend to fetched KV memories (see Figure 17). FFN-Memories: Previous works have argued that transformer-based language models mainly store their knowledge in the FFN layers (Geva et al., 2020; Dai et al., 2022; Yao et al., 2022). Inspired by this, we introduce FFN memories: we expand the inner dimension of the SwiGLU FFN layers by through concatenation with the fetched memory parameters, which is equivalent to fast addition (see Figure 18). The number of parameters sl in memory block assigned to clusters at level depends on the memory type, the anchor models architecture (e.g., hidden dimension, depth, etc.), and the memory block size multiplier (rank for LoRa, number of KV memory tokens, or FFN dimension expansion size). Therefore, hierarchical memory configuration (s1, s2, s3, s4) can be written as c0(r1, r2, r3, r4), where c0 is constant determined by the anchor model architecture and memory type, and rl is the memory block size multiplier for memories at level that we control. For simplicity, we drop the constant c0 in the rest of the paper and provide details in Appendix I. In practice, we generally set these multipliers so that coarser levels have larger parameter blocks, i.e., r1 r2 r3 r4, or set rl = 0 when no memories are assigned to clusters at level l. 4 (a) (c) (b) (d) Figure 3 Effect of memory type on Specific-Knowledge benchmarks (a) and Wikipedia perplexity (b). Effect of memory level on performance as function of fetched memory size (c) and bank size (d)."
        },
        {
            "title": "3 Design choices for pretraining with memories",
            "content": "We use DCLM-Baseline (Dai et al., 2022) for training. The dataset contains 3.2 billion documents ( 4.3 trillion tokens). We cluster the dataset to tree with 4 levels, having 16, 162, 163, and 164 clusters at each level. See Appendix for training details. For evaluation, we consider 13 frequently used benchmarks, including multiple-choice and generative tasks. We divide these tasks into two groups based on the level of specific knowledge required (see Appendices and for details): Common-Knowledge (Avg-CK): Lambada-OpenAI (Paperno et al., 2016), BoolQ (Clark et al., 2019), SQuAD (Rajpurkar et al., 2016), Winograd (Levesque et al., 2012), CoQA (Reddy et al., 2019), and WinoGrande (Sakaguchi et al., 2021). Specific-Knowledge (Avg-SK): Hellaswag (Zellers et al., 2019), ArcEasy/Challenge (Clark et al., 2018), TriviaQA (Joshi et al., 2017), NaturalQuestions-Open (Lee et al., 2019; Kwiatkowski et al., 2019), PIQA (Bisk et al., 2019), and OpenBookQA (Mihaylov et al., 2018). For evaluation, we retrieve the memories based only on the question text. As an open-ended generation task, we also track the average perplexity on the 2022 English Wikipedia (Wiki-En) with 6.5M samples (4B tokens), where memories are retrieved based on the full Wikipedia document. FFN-Memories outperform LoRa and KV memories: In Figure 3, we compare different memory types introduced in Section 2.2. We attach the memories to pretrained model with 160M parameters (row A1 in Table 1) and train them from scratch for 275B tokens with the loss objective in Equation (2.1), while the anchor model parameters (θ) are frozen. For this set of experiments, we use single-level memory configuration in the form of (0, s2, 0, 0), corresponding to total of 162 = 256 memories, each with size s2, for different values of s2. We observe that FFN-Memories have significant advantage over other forms of memory across all memory sizes. Based on this observation, in the rest of the paper we use only FFN-Memories. (a) (b) Figure 4 (a) Avg-SK accuracy for different hierarchical memories, demonstrating performance gain with larger bank size and fetched memory size. (b) Wiki-En perplexity for different fetched memorytoanchor model size ratios, with the optimal point at 1:10. The purple curve shows the perplexity of anchor models without memory. The green curves show the perplexity of models with memory, with different shades of green corresponding to the progress of memory training. Accuracy improves with deeper and larger memories: Here, we explore the design space of different single-level memory configurations (s1, s2, s3, s4), where only one of the sls is non-zero. The anchor model is pretrained and frozen (row A1 in Table 1) during memory training (see Section A.3 for details). As shown in Figure 3c, for constant fetched memory size (i.e., sl), deeper memories yield greater accuracy improvements, as they capture more relevant and detailed information for given query. In Figure 3d, we show that performance is strictly increasing function of total memory bank size for all memory configurations, as more capacity becomes available to capture long-tail knowledge. Shao et al. (2024) recently made similar observation for regular RAG setups by increasing the size of the datastore from which documents are retrieved. Note that for fixed total memory bank size, shallower memory corresponds to larger fetched memory size. Therefore, in Figure 3d, at fixed memory bank size, shallower memories achieve higher accuracy. Hierarchical memories enable an optimal design: Unlike single-level memories used in previous experiments, general hierarchical memory configuration (s1, s2, s3, s4) with possibly multiple non-zero values allows independent control of the total memory bank size ((cid:80) 16lsl) and the size of fetched memory parameters at inference time ((cid:80) sl). For large total memory bank size with small number of fetched parameters at inference, we can use larger level-3 and level-4 memories. Conversely, for smaller total bank size with more fetched parameters at inference, we can increase the sizes of level-1 and level-2 memories. From learning dynamics perspective, in regular language modeling, all parameters are updated at every iteration, receiving gradients from wide range of dissimilar documents in the dataset. As result, long-tail information is often forgotten (Toneva et al., 2018). When training with hierarchical memories, however, memory bank parameters at level are activated 16l times less frequently compared to anchor model parameters (which can be considered level-0). Consequently, deeper memory bank parameters receive fewer gradient updates, and from more similar content, shielding them from forgetting (Ghosal et al., 2025). This leads to effective learning of hierarchy of memories, ranging from the most common knowledge at level 1 to the most specific knowledge at level 4. Above, we showed that single-level memories benefit from larger fetch size and bank size. We now systematically demonstrate this for general hierarchical configuration. We evaluate two groups of hierarchical memories added to our frozen pretrained 160M model (row A1 in Table 1): one with memory bank size of 4.6B and another with 18.7B, both with configurations spanning between 1M and 300M fetched parameters (see Section A.4 for details). Results in Figure 4a confirm that performance increases strictly with fetched memory size (while keeping bank size fixed) and with bank size (while keeping fetched memory size fixed) for the 6 Figure 5 Deployment advantages of hierarchical memories. Left: Memory loading latency is reduced by using the hardware hierarchy. Right: Latency is reduced by exploiting compositionality over time: larger memories for low-level clusters, once loaded, are less likely to need reloading. general hierarchical configurations. For example, changing the memory configuration from (256,64,16,0) to (256,64,16,4) barely changes the fetched memory size but corresponds to bank sizes of 4.6B and 18.7B, respectively, and results in an Avg-SK improvement from 39.1% to 40.1%. The point with highest accuracy in Figure 4a corresponds to augmenting 160M anchor model with 240M fetched memory parameters, achieving 44.5% accuracy on Avg-SK. This is notable result, showing that an anchor+memory model with total of 400M runtime parameters outperforms regularly trained 410M model (row B1 in Table 1) by 3.6 points. Building on this observation, we ask the following question: For given runtime parameters budget, how many parameters should be allocated to the anchor model and how many to the fetched memories? To explore this, we train sequence of anchor models with 260M, 320M, 350M, 370M, 385M, and 410M parameters, freeze them, and pair them with fetched memories of sizes 150M, 90M, 60M, 40M, 25M, and 0, respectively, such that the total runtime parameter count for anchor+memory remains fixed at 410M. All configurations use 6.3B memory bank (see Section A.7). In Figure 4b, 1:10 ratio of fetched memory to anchor model size appears optimal and guides our next experiments. However, this observation may not generalize to different runtime, memory bank, and training budgets, or when the anchor model and memory parameters are co-trained. Models with hierarchical memories have on-device deployment advantages. Assuming von Neumann architecture with hardware organized in increasing size and decreasing speed (RAM, flash disk, external disk), we can store shallower memory levels (with larger fetch size but smaller bank size) on faster components, while offloading deeper levels to slower storage (Alizadeh et al., 2024). In the example in Figure 5 (left), with hypothetical hardware setup, hierarchical memory can be loaded in 38ms, whereas loading memory of the same fetch size from flat bank (stored on the external disk due to its excessive total size) takes 198msmore than 5 longer. Additionally, even if both hierarchical and flat memory banks are stored exclusively on the external disk, hierarchical memories still provide loading speed advantage due to their compositionality. For example, when generating different atomic numbers in Figure 1, the level-1 and level-2 memories remain mostly unchanged, and only deeper memories need to be swapped. This takes 47ms, compared to 198ms when the entire flat memory must be reloaded, as shown in Figure 5 (right)."
        },
        {
            "title": "4 Results",
            "content": "In this section, building on the findings from Section 3, we provide comprehensive set of results for different-sized models and compare them with baselines. See Appendix for training details. Starting from 160M anchor model pretrained regularly (row A1 in Table 1), we add memories with the (256, 64, 16, 0) configuration, corresponding to fetched memory size of 18M parameters and total memory bank size of 4.6B parameters. When memories are learned with frozen anchor model (row A3), we observe +5.1 points improvement on Avg-SK compared to A1 and 2 points reduction in Wiki-En perplexity, demonstrating the effectiveness of memories for tasks requiring specific knowledge, with only 10% additional runtime parameters from fetched memories. To ensure fair comparison, we also train generic memory with the same size as the fetched memories (18M parameters) together with the memory bank parameters. When evaluating with generic memory, unlike 7 Row Anchor model Init. Seen tokens Cotrain anchor Memory config Bank size Fetch size Avg-CK (%) Avg-SK (%) WikiEn Pplx Generic Fetched Generic Fetched Generic Fetched (0,0,0,0) 0 0 45.9 34. 17.2 A1 A2 A3 A4 B1 B2 B3 C1 C2 160M 410M 1.4B Scratch A1 A1 Scratch Scratch B1 Scratch Scratch C1 1.1T +1.1T +1.1T 2.2T 1.1T +1.1T 2.2T 1.1T +1.1T n/a Yes No Yes n/a Yes n/a n/a Yes (256,64,16,0) 4.6B 18M (0,0,0,0) (512,128,32,0) (0,0,0,0) (0,0,0,0) (768,256,16,0) 0 12.7B 0 0 0 50M 0 47.9 46.6 46.6 55.5 48.7 47.4 46.7 56.1 52. 53.2 61.2 35.7 34.7 33.8 41.8 40.3 39.2 39.6 45. 40.9 41.1 49.7 16.7 16.7 17.8 13.8 14.2 15.2 15. 12.4 13.9 13.8 10.8 21.1B 153M 64. 64.5 51.3 54.9 11.0 10.2 Table 1 Summary of results for pretraining with memories at different parameter scales. fetched memories that are retrieved based on context, we simply use the anchor+generic memory parameters. This isolates the effect of merely increasing the number of parameters and training tokens in the anchor model. Anchor+generic memory scores 34.7% on Avg-SK, 4.5 points below fetched memories, showing the benefit of context-based retrieval in isolation. We next explore co-training the anchor model parameters (θ) and the memory parameters (W ) together, as in Equation (2.1). For fair comparison, during training we use the generic memory with probability 1/(16 + 1) and the fetched memory with probability 16/(16 + 1), where 16 is the clustering division factor. This ensures there is no training bias in favor of the memory bank parameters. Row A2 in Table 1 shows co-training results, with Figure 6a illustrating training curves for A2 and A3 experiments. key observation is that when we allow the anchor parameters to be co-trained with the memory bank, we obtain greater improvement compared to the case where the anchor model is frozen (Avg-SK 39.2% 40.3%). This gain can be attributed to two factors: 1) when co-training, the anchor model learns to utilize the memories more effectively compared to when it is frozen, and 2) the anchor model performance improves simply due to more training. The latter effect should be minor if the anchor model is already converged. We provide additional discussion in Appendix E. We also explore co-training the anchor model and memory bank together from scratch. Results are shown in row A4 of Table 1. Despite using the same total training budget as row A2, A4 shows lower performance. This result suggests that memories are learned more effectively after the anchor model has been trained to some extent (i.e., the setup of row A2). This is analogous to human memory, which develops only after the brain gains semantic understanding, around age 3 (Shaw, 2016). Next, we scale the co-training setup of row A2 to anchor models of sizes 410M and 1.4B, corresponding to rows B2 and C2 in Table 1. These models are paired with memory configurations such that the fetched memory is approximately 10% of the anchor model size, corresponding to memory bank sizes of 12.7B and 21.1B for the 410M and 1.4B anchor models, respectively. We observe similar improvements for these larger models: for Avg-SK, fetched memories outperform generic memories by +4.1 points for the 410M and +3.6 points for the 1.4B model. Finally, for the 410M model, we train model regularly (without memories) with the same total training budget as row B2 (2.2T tokens). We observe that Avg-CK performance is worse than that of the anchor+generic setup in row B2. These preliminary results suggest that when the anchor model is co-trained with large memory bank (as in row B2), long-tail knowledge is offloaded to the memories, enabling the anchor model to perform better on common-knowledge tasks. Blocking part of the memory bank: In Figure 6b, we show the performance of the 410M model with memories (row B2 in Table 1) on predicting atomic numbers of elements (see Figure 1) when the best-matching parts of the memory bank are adversarially blocked during retrieval. We observe significant performance drop, from 70% to 20%, when blocking 1/16 of the bank. This preliminary result highlights the potential of the proposed approach for applications with privacy goals. Adding memory to other pretrained models: We explore the post-hoc addition of parametric memories to open-weight models. We span multiple sizes and architectures, namely Gemma 3 270M (Gemma Team 8 (a) (b) Figure 6 (a) Performance improvements on Avg-SK when co-training memories and anchor model parameters jointly during training. (b) Effect of blocking parts of the memory bank from retrieval. Pretrained model Bank size Fetch size Avg-CK (%) Avg-SK (%) Gemma 3 270M + memory Qwen 2.5 0.5B + memory 0 5.9B 0 11.1B 0 23.2M 0 43.4M Llama 3.2 1B + memory 0 0 14.1B 102.2M 44.2 44.8 53.9 52. 58.9 57.6 34.3 38.2 40.6 44.5 46.6 50.5 Atomic Number Acc. (%) 1.7 49. 53.4 90.4 96.6 96.6 Table 2 Learning memory on top of pretrained open-weight models post-hoc. All trainings use 1.1 trillion tokens from DCLM. Anchor model 160M 410M 1.4B Inference setup Baseline Bank size 0 RAG-DCLM 70 TB 21 GB RAG-Wiki 9 GB 10% Memory Baseline 0 RAG-DCLM 70 TB 21 GB RAG-Wiki 25 GB 10% Memory Baseline 0 RAG-DCLM 70 TB 21 GB RAG-Wiki 42 GB 10% Memory FLOPs Avg-CK 0-shot Avg-SK 0-shot 1 2.3 1.7 1.11 1 2.3 1.7 1.1 1 2.3 1.7 1.1 43.6 42.4 42.4 45.3 48.6 48.2 47.3 52. 56.0 55.8 55.5 59.3 32.8 32.6 35.0 38.4 38.5 38.1 41.6 44.5 46.9 46.1 49.2 52.4 Table 3 Comparison with vanilla RAG. et al., 2025), Qwen 2.5 0.5B (Yang et al., 2024), and Llama 3.2 1B (Meta AI, 2024). We add hierarchical FFN memories of 10% the model size post-hoc to pretrained (and frozen) anchor models and train the memories for 1.1T tokens on DCLM, see Section A.6 for additional details. Results are shown in Table 2. As above, the specific knowledge accuracy improves with memories. This is consistent across all architectures, showing the generality of adding hierarchical memories across all models. Common knowledge remains the same or slightly decreases; potentially because these models were pretrained on more tuned data mixtures than the simple open-source data mixture DCLM that we use in these experiments. Comparing with vanilla retrieval-augmented generation: An alternative, yet complementary, approach to parametric memory is retrieval-augmented generation (RAG), where relevant texts are retrieved from datastore and prepended to the context (Lewis et al., 2020; Ram et al., 2023; Izacard et al., 2023) to improve performance on knowledge-intensive tasks. Using our Sentence-BERT embedding model as the retriever and DCLM training data as the datastore, we evaluate RAG on the baseline models from rows A1, B1, and C1. See implementation details in Appendix H. As shown in Table 3, vanilla retrieval from DCLM performs poorly relative to the baseline models, while adding more than 2 runtime FLOPs and requiring large storage for the raw-document datastore. This is likely due to the low quality of DCLM (a pretraining dataset) when used as RAG datastore. To give RAG an advantage, we also retrieve from the higher-quality Wiki-En. RAG-Wiki improves baseline performance on SK (e.g., from 46.9 to 49.2 for the 1.4B model) while remaining slightly below baseline on CK. By contrast, learned memories (with 10% extra parameters) improve both CK and SK, with lower FLOPs overhead. We note that high-quality RAG is complementary to the proposed learned memory approach and can be combined with it for further gains."
        },
        {
            "title": "5 Related works",
            "content": "Databases. (Ahn et al., 2016) use symbolic knowledge graph, and Borgeaud et al. (2022) introduce Retro, augmenting language-model predictions with large raw-text memory bank. More recently, Zhao et al. (2025) propose replacing long-tail knowledge with retrieval to an external knowledge base by masking retrieved tokens during pretraining. Limitations of these approaches are scalability to large pretraining corpora and low compression rate because the memory stores raw text. Parametric memories. Wu et al. (2022) propose memorizing transformers, which use nearest-neighbor lookup to sparsely retrieve cached keyvalue pairs. For efficiency, Eyuboglu et al. (2025) introduce Cartridges: KV-memories (similar to what we discussed in Section 2.2) that learn specific long document as more runtime-efficient alternative to in-context learning. We find that KV-memories underperform compared to FFN-memories, at least for large-scale memorization. MemSinks (Ghosal et al., 2025) uses type of FFN-memories, where they dedicate fraction (e.g., 30%) of FFN neurons per layer to memorization. However, their goal is to throw those parameters away at inference time for privacy and generalization. Our contextdependent memory retrieval is also conceptually related to instruction-following pruning Hou et al. (2025), which selects the most suitable parameters from larger model based on the task description. Mixture of experts. Our approach is related to MoEs (Shazeer et al., 2017). Jelassi et al. (2024) show that increasing the number of experts improves memorization while reasoning saturates when active parameters are fixed, aligning with our anchor-memory decomposition to balance reasoning and knowledge. For privacy, Shi et al. (2025) propose FlexOlmo, combining publicly trained anchor expert with exchangeable domain experts trained on private data. Product key memory (PKM) (Lample et al., 2019) can be seen as sparser MoE that combines two selected expert sets; Huang et al. (2024) improve PKM via tensor decomposition, and Berges et al. (2024) augment subsets of FFN layers with such memory to boost factual benchmarks. These MoE approaches are similar in kind to ours, and we expect that some of our insights may carry over. However, our memory architecture is vastly different, allowing to offload inactive parameters based on the context, give explicit control over memories during both training and inference, and add memories post-hoc."
        },
        {
            "title": "6 Discussion",
            "content": "Conclusion. We propose pretraining language models with memories to automatically capture long-tail world knowledge in large hierarchical memory banks. Small language models augmented with memory banks match regular transformers with 2 more parameters. Moreover, we propose and analyze several additional potential benefits of this design, including more efficient hardware implementation and enhanced data privacy. Limitations and future directions. One unexplored area is the study of optimal scaling laws for learning memories. Compute-optimal scaling laws developed for dense training (Hoffmann et al., 2022) are not necessarily applicable to pretraining with memories, since memory parameters are updated less frequently. We also mainly focused on architecture design for memories, and leave architecture search and design of anchor models to future work. Finally, pretraining with memories can benefit multilingual setups (not considered in this work) or other modalities beyond text, such as vision. We leave this investigation for future work. Acknowledgments We would like to thank Cheng-Yu Hsieh, Samira Abnar, Stephen Pulman, Karen Khatamifard, Chun-Liang Li, and Rick Chang for their feedback. Apple and the Apple logo are trademarks of Apple Inc., registered in the U.S. and other countries and regions."
        },
        {
            "title": "References",
            "content": "Josh Achiam, Steven Adler, Sandhini Agarwal, Lama Ahmad, Ilge Akkaya, Florencia Leoni Aleman, Diogo Almeida, Janko Altenschmidt, Sam Altman, Shyamal Anadkat, et al. Gpt-4 technical report. arXiv preprint arXiv:2303.08774, 2023. Sungjin Ahn, Heeyoul Choi, Tanel Pärnamaa, and Yoshua Bengio. neural knowledge language model. ArXiv, abs/1608.00318, 2016. URL https://api.semanticscholar.org/CorpusID:2600027. Keivan Alizadeh, Seyed Iman Mirzadeh, Dmitry Belenko, Khatamifard, Minsik Cho, Carlo Del Mundo, Mohammad Rastegari, and Mehrdad Farajtabar. Llm in flash: Efficient large language model inference with limited memory. In Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1256212584, 2024. David Arthur and Sergei Vassilvitskii. k-means++: The advantages of careful seeding. Technical report, Stanford, 2006. Akari Asai, Zeqiu Wu, Yizhong Wang, Avirup Sil, and Hannaneh Hajishirzi. Self-rag: Learning to retrieve, generate, and critique through self-reflection. 2024. Vincent-Pierre Berges, Barlas Oğuz, Daniel Haziza, Wen-tau Yih, Luke Zettlemoyer, and Gargi Ghosh. Memory layers at scale. arXiv preprint arXiv:2412.09764, 2024. Yonatan Bisk, Rowan Zellers, Ronan Le Bras, Jianfeng Gao, and Yejin Choi. Piqa: Reasoning about physical commonsense in natural language. In AAAI Conference on Artificial Intelligence, 2019. URL https://api.semanticscholar. org/CorpusID:208290939. Sid Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor Leahy, Kyle McDonell, Jason Phang, et al. Gpt-neox-20b: An open-source autoregressive language model. arXiv preprint arXiv:2204.06745, 2022. Sebastian Borgeaud, Arthur Mensch, Jordan Hoffmann, Trevor Cai, Eliza Rutherford, Katie Millican, George Bm Van Den Driessche, Jean-Baptiste Lespiau, Bogdan Damoc, Aidan Clark, et al. Improving language models by retrieving from trillions of tokens. In International conference on machine learning, pages 22062240. PMLR, 2022. Christopher Clark, Kenton Lee, Ming-Wei Chang, Tom Kwiatkowski, Michael Collins, and Kristina Toutanova. BoolQ: Exploring the surprising difficulty of natural yes/no questions. In Jill Burstein, Christy Doran, and Thamar Solorio, editors, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 29242936, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1300. URL https://aclanthology.org/N19-1300/. Peter Clark, Isaac Cowhey, Oren Etzioni, Tushar Khot, Ashish Sabharwal, Carissa Schoenick, and Oyvind Tafjord. Think you have solved question answering? try arc, the ai2 reasoning challenge. arXiv preprint arXiv:1803.05457, 2018. Damai Dai, Li Dong, Yaru Hao, Zhifang Sui, Baobao Chang, and Furu Wei. Knowledge neurons in pretrained transformers. In Smaranda Muresan, Preslav Nakov, and Aline Villavicencio, editors, Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 84938502, Dublin, Ireland, May 2022. Association for Computational Linguistics. doi: 10.18653/v1/2022.acl-long.581. URL https://aclanthology.org/2022.acl-long.581/. Sabri Eyuboglu, Ryan Ehrlich, Simran Arora, Neel Guha, Dylan Zinsley, Emily Liu, Will Tennien, Atri Rudra, James Zou, Azalia Mirhoseini, et al. Cartridges: Lightweight and general-purpose long context representations via self-study. arXiv preprint arXiv:2506.06266, 2025. Gemma Team, Aishwarya Kamath, Johan Ferret, Shreya Pathak, Nino Vieillard, Ramona Merhej, Sarah Perrin, Tatiana Matejovicova, Alexandre Ramé, Morgane Rivière, et al. Gemma 3 technical report. arXiv preprint arXiv:2503.19786, 2025. Mor Geva, R. Schuster, Jonathan Berant, and Omer Levy. Transformer feed-forward layers are key-value memories. ArXiv, abs/2012.14913, 2020. URL https://api.semanticscholar.org/CorpusID:229923720. Gaurav Ghosal, Pratyush Maini, and Aditi Raghunathan. Memorization sinks: Isolating memorization during llm training. arXiv preprint arXiv:2507.09937, 2025. 11 David Grangier, Simin Fan, Skyler Seto, and Pierre Ablin. Task-adaptive pretrained language models via clusteredimportance sampling. In Proceedings of the International Conference on Learning Representations (ICLR), 2025. URL https://doi.org/10.48550/arXiv.2410.03735. Suchin Gururangan, Margaret Li, Mike Lewis, Weijia Shi, Tim Althoff, Noah A. Smith, and Luke Zettlemoyer. Scaling expert language models with unsupervised domain discovery. ArXiv, abs/2303.14177, 2023a. URL https: //api.semanticscholar.org/CorpusID:257756896. Suchin Gururangan, Mitchell Wortsman, Samir Yitzhak Gadre, Achal Dave, Maciej Kilian, Weijia Shi, Jean Mercat, Georgios Smyrnis, Gabriel Ilharco, Matt Jordan, Reinhard Heckel, Alex Dimakis, Ali Farhadi, Vaishaal Shankar, and Ludwig Schmidt. OpenLM: minimal but performative language modeling (lm) repository, 2023b. URL https://github.com/mlfoundations/open_lm/. GitHub repository. Jordan Hoffmann, Sebastian Borgeaud, Arthur Mensch, Elena Buchatskaya, Trevor Cai, Eliza Rutherford, Diego de Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, Tom Hennigan, Eric Noland, Katie Millican, George van den Driessche, Bogdan Damoc, Aurelia Guy, Simon Osindero, Karen Simonyan, Erich Elsen, Oriol Vinyals, Jack W. Rae, and Laurent Sifre. Training compute-optimal large language models. In Proceedings of the 36th International Conference on Neural Information Processing Systems, NIPS 22, Red Hook, NY, USA, 2022. Curran Associates Inc. ISBN 9781713871088. Bairu Hou, Qibin Chen, Jianyu Wang, Guoli Yin, Chong Wang, Nan Du, Ruoming Pang, Shiyu Chang, and Tao Lei. Instruction-following pruning for large language models. arXiv preprint arXiv:2501.02086, 2025. Edward Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, Weizhu Chen, et al. Lora: Low-rank adaptation of large language models. ICLR, 1(2):3, 2022. Zihao Huang, Qiyang Min, Hongzhi Huang, Defa Zhu, Yutao Zeng, Ran Guo, and Xun Zhou. Ultra-sparse memory network. arXiv preprint arXiv:2411.12364, 2024. Gautier Izacard, Patrick Lewis, Maria Lomeli, Lucas Hosseini, Fabio Petroni, Timo Schick, Jane Dwivedi-Yu, Armand Joulin, Sebastian Riedel, and Edouard Grave. Atlas: few-shot learning with retrieval augmented language models. J. Mach. Learn. Res., 24(1), January 2023. ISSN 1532-4435. Herve Jegou, Matthijs Douze, and Cordelia Schmid. Product quantization for nearest neighbor search. IEEE transactions on pattern analysis and machine intelligence, 33(1):117128, 2010. Samy Jelassi, Clara Mohri, David Brandfonbrener, Alex Gu, Nikhil Vyas, Nikhil Anand, David Alvarez-Melis, Yuanzhi Li, Sham Kakade, and Eran Malach. Mixture of parrots: Experts improve memorization more than reasoning. arXiv preprint arXiv:2410.19034, 2024. Mandar Joshi, Eunsol Choi, Daniel Weld, and Luke Zettlemoyer. TriviaQA: large scale distantly supervised challenge dataset for reading comprehension. In Regina Barzilay and Min-Yen Kan, editors, Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 16011611, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1147. URL https://aclanthology.org/P17-1147/. Tom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, et al. Natural questions: benchmark for question answering research. Transactions of the Association for Computational Linguistics, 7:453466, 2019. Guillaume Lample, Alexandre Sablayrolles, MarcAurelio Ranzato, Ludovic Denoyer, and Herve Jegou. Large memory layers with product keys. Curran Associates Inc., Red Hook, NY, USA, 2019. Kenton Lee, Ming-Wei Chang, and Kristina Toutanova. Latent retrieval for weakly supervised open domain question answering. arXiv preprint arXiv:1906.00300, 2019. Brian Lester, Rami Al-Rfou, and Noah Constant. The power of scale for parameter-efficient prompt tuning. In MarieFrancine Moens, Xuanjing Huang, Lucia Specia, and Scott Wen-tau Yih, editors, Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 30453059, Online and Punta Cana, Dominican Republic, November 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.emnlp-main.243. URL https://aclanthology.org/2021.emnlp-main.243/. Hector J. Levesque, Ernest Davis, and Leora Morgenstern. The winograd schema challenge. In Proceedings of the Thirteenth International Conference on Principles of Knowledge Representation and Reasoning, KR12, page 552561. AAAI Press, 2012. ISBN 9781577355601. 12 Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel, Sebastian Riedel, and Douwe Kiela. Retrieval-augmented generation for knowledge-intensive nlp tasks. In Proceedings of the 34th International Conference on Neural Information Processing Systems, NIPS 20, Red Hook, NY, USA, 2020. Curran Associates Inc. ISBN 9781713829546. Jeffrey Li, Alex Fang, Georgios Smyrnis, Maor Ivgi, Matt Jordan, Samir Gadre, Hritik Bansal, Etash Guha, Sedrick Keh, Kushal Arora, Saurabh Garg, Rui Xin, Niklas Muennighoff, Reinhard Heckel, Jean Mercat, Mayee Chen, Suchin Gururangan, Mitchell Wortsman, Alon Albalak, Yonatan Bitton, Marianna Nezhurina, Amro Abbas, Cheng-Yu Hsieh, Dhruba Ghosh, Josh Gardner, Maciej Kilian, Hanlin Zhang, Rulin Shao, Sarah Pratt, Sunny Sanyal, Gabriel Ilharco, Giannis Daras, Kalyani Marathe, Aaron Gokaslan, Jieyu Zhang, Khyathi Chandu, Thao Nguyen, Igor Vasiljevic, Sham Kakade, Shuran Song, Sujay Sanghavi, Fartash Faghri, Sewoong Oh, Luke Zettlemoyer, Kyle Lo, Alaaeldin El-Nouby, Hadi Pouransari, Alexander Toshev, Stephanie Wang, Dirk Groeneveld, Luca Soldaini, Pang Wei Koh, Jenia Jitsev, Thomas Kollar, Alexandros G. Dimakis, Yair Carmon, Achal Dave, Ludwig Schmidt, and Vaishaal Shankar. Datacomp-lm: In search of the next generation of training sets for language models. In A. Globerson, L. Mackey, D. Belgrave, A. Fan, U. Paquet, J. Tomczak, and C. Zhang, editors, Advances in Neural Information Processing Systems, volume 37, pages 1420014282. Curran Associates, Inc., 2024. URL https://proceedings. neurips.cc/paper_files/paper/2024/file/19e4ea30dded58259665db375885e412-Paper-Datasets_and_Benchmarks_Track.pdf. Margaret Li, Suchin Gururangan, Tim Dettmers, Mike Lewis, Tim Althoff, Noah A. Smith, and Luke Zettlemoyer. Branch-train-merge: Embarrassingly parallel training of expert language models. ArXiv, abs/2208.03306, 2022. URL https://api.semanticscholar.org/CorpusID:251371375. Xiang Lisa Li and Percy Liang. Prefix-tuning: Optimizing continuous prompts for generation. Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pages 45824597, 2021. URL https://api.semanticscholar.org/ CorpusID:230433941. Nelson Liu, Kevin Lin, John Hewitt, Ashwin Paranjape, Michele Bevilacqua, Fabio Petroni, and Percy Liang. Lost in the middle: How language models use long contexts. Transactions of the Association for Computational Linguistics, 12:157173, 2024. Xinxi Lyu, Michael Duan, Rulin Shao, Pang Wei Koh, and Sewon Min. Frustratingly simple retrieval improves challenging, reasoning-intensive benchmarks. arXiv preprint arXiv:2507.01297, 2025. Kevin Meng, David Bau, Alex Andonian, and Yonatan Belinkov. Locating and editing factual associations in gpt. Advances in neural information processing systems, 35:1735917372, 2022. Meta AI. Llama 3.2 model card. 2024. URL https://www.llama.com/docs/model-cards-and-prompt-formats/llama3_2/. Todor Mihaylov, Peter Clark, Tushar Khot, and Ashish Sabharwal. Can suit of armor conduct electricity? new dataset for open book question answering. In EMNLP, 2018. Denis Paperno, Germán Kruszewski, Angeliki Lazaridou, Quan Ngoc Pham, Raffaella Bernardi, Sandro Pezzelle, Marco Baroni, Gemma Boleda, and Raquel Fernández. The lambada dataset: Word prediction requiring broad discourse context. arXiv preprint arXiv:1606.06031, 2016. Hadi Pouransari, Chun-Liang Li, Jen-Hao Rick Chang, Pavan Kumar Anasosalu Vasu, Cem Koc, Vaishaal Shankar, and Oncel Tuzel. Dataset decomposition: faster llm training with variable sequence length curriculum. In Proceedings of the 38th International Conference on Neural Information Processing Systems, NIPS 24, Red Hook, NY, USA, 2025. Curran Associates Inc. ISBN 9798331314385. Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. SQuAD: 100,000+ questions for machine comprehension of text. In Jian Su, Kevin Duh, and Xavier Carreras, editors, Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 23832392, Austin, Texas, November 2016. Association for Computational Linguistics. doi: 10.18653/v1/D16-1264. URL https://aclanthology.org/D16-1264/. Ori Ram, Yoav Levine, Itay Dalmedigos, Dor Muhlgay, Amnon Shashua, Kevin Leyton-Brown, and Yoav Shoham. In-context retrieval-augmented language models. Transactions of the Association for Computational Linguistics, 11: 13161331, 2023. doi: 10.1162/tacl_a_00605. URL https://aclanthology.org/2023.tacl-1.75/. Siva Reddy, Danqi Chen, and Christopher D. Manning. CoQA: conversational question answering challenge. Transactions of the Association for Computational Linguistics, 7:249266, 2019. doi: 10.1162/tacl_a_00266. URL https://aclanthology.org/Q19-1016/. 13 Nils Reimers and Iryna Gurevych. Sentence-bert: Sentence embeddings using siamese bert-networks. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics, 11 2019. URL https://arxiv.org/abs/1908.10084. Adam Roberts, Colin Raffel, and Noam Shazeer. How much knowledge can you pack into the parameters of language model? In Bonnie Webber, Trevor Cohn, Yulan He, and Yang Liu, editors, Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 54185426, Online, November 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-main.437. URL https://aclanthology.org/2020.emnlp-main.437/. Keisuke Sakaguchi, Ronan Le Bras, Chandra Bhagavatula, and Yejin Choi. Winogrande: an adversarial winograd schema challenge at scale. Commun. ACM, 64(9):99106, August 2021. ISSN 0001-0782. doi: 10.1145/3474381. URL https://doi.org/10.1145/3474381. Rulin Shao, Jacqueline He, Akari Asai, Weijia Shi, Tim Dettmers, Sewon Min, Luke Zettlemoyer, and Pang Wei Koh. Scaling retrieval-based language models with trillion-token datastore. Advances in Neural Information Processing Systems, 37:9126091299, 2024. Julia Shaw. The memory illusion: Remembering, forgetting, and the science of false memory. Random House, 2016. Noam Shazeer. Glu variants improve transformer. arXiv preprint arXiv:2002.05202, 2020. Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton, and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts layer. arXiv preprint arXiv:1701.06538, 2017. Weijia Shi, Akshita Bhagia, Kevin Farhat, Niklas Muennighoff, Pete Walsh, Jacob Morrison, Dustin Schwenk, Shayne Longpre, Jake Poznanski, Allyson Ettinger, et al. Flexolmo: Open language models for flexible data use. arXiv preprint arXiv:2507.07024, 2025. Jianlin Su, Murtadha Ahmed, Yu Lu, Shengfeng Pan, Wen Bo, and Yunfeng Liu. Roformer: Enhanced transformer with rotary position embedding. Neurocomputing, 568:127063, 2024. Mariya Toneva, Alessandro Sordoni, Rémi Tachet des Combes, Adam Trischler, Yoshua Bengio, and Geoffrey J. Gordon. An empirical study of example forgetting during deep neural network learning. ArXiv, abs/1812.05159, 2018. URL https://api.semanticscholar.org/CorpusID:55481903. V0.9. Llm foundry v0.7.0. https://github.com/mosaicml/llm-foundry. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan Gomez, Ł ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In I. Guyon, U. Von Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett, editors, Advances in Neural Information Processing Systems, volume 30. Curran Associates, Inc., 2017. URL https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper. pdf. Yuhuai Wu, Markus Rabe, DeLesley Hutchins, and Christian Szegedy. Memorizing transformers. arXiv preprint arXiv:2203.08913, 2022. An Yang, Baosong Yang, Beichen Zhang, Binyuan Hui, Bo Zheng, Bowen Yu, Chengyuan Li, Dayiheng Liu, Fei Huang, Haoran Wei, Huan Lin, Jian Yang, Jianhong Tu, Jianwei Zhang, Jianxin Yang, Jiaxi Yang, Jingren Zhou, Junyang Lin, Kai Dang, Keming Lu, Keqin Bao, Kexin Yang, Le Yu, Mei Li, Mingfeng Xue, Pei Zhang, Qin Zhu, Rui Men, Runji Lin, Tianhao Li, Tingyu Xia, Xingzhang Ren, Xuancheng Ren, Yang Fan, Yang Su, Yichang Zhang, Yu Wan, Yuqiong Liu, Zeyu Cui, Zhenru Zhang, and Zihan Qiu. Qwen2.5 technical report. arXiv preprint arXiv:2412.15115, 2024. An Yang, Anfeng Li, Baosong Yang, Beichen Zhang, Binyuan Hui, Bo Zheng, Bowen Yu, Chang Gao, Chengen Huang, Chenxu Lv, et al. Qwen3 technical report. arXiv preprint arXiv:2505.09388, 2025. Yunzhi Yao, Shaohan Huang, Li Dong, Furu Wei, Huajun Chen, and Ningyu Zhang. Kformer: Knowledge injection in transformer feed-forward layers. In Wei Lu, Shujian Huang, Yu Hong, and Xiabing Zhou, editors, Natural Language Processing and Chinese Computing, pages 131143, Cham, 2022. Springer International Publishing. ISBN 978-3-031-17120-8. Rowan Zellers, Ari Holtzman, Yonatan Bisk, Ali Farhadi, and Yejin Choi. Hellaswag: Can machine really finish your sentence? arXiv preprint arXiv:1905.07830, 2019. 14 Linxi Zhao, Sofian Zalouk, Christian Belardi, Justin Lovelace, Jin Peng Zhou, Kilian Weinberger, Yoav Artzi, and Jennifer Sun. Pre-training large memory language models with internal and external knowledge. arXiv preprint arXiv:2505.15962, 2025."
        },
        {
            "title": "A Training details",
            "content": "A.1 Baseline model training . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . A.2 Memory model training . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . A.3 Additional details of memory type and size ablations . . . . . . . . . . . . . . . . . . . . . . . A.4 Additional details of ablation on memory configuration . . . . . . . . . . . . . . . . . . . . . . A.5 Additional details of co-training memories and anchor model . . . . . . . . . . . . . . . . . . A.6 Additional details of memory learning on open-weight models . . . . . . . . . . . . . . . . . . A.7 Additional details of memory-to-model size experiment . . . . . . . . . . . . . . . . . . . . . ."
        },
        {
            "title": "B Evaluation",
            "content": "C Data clustering details Tokens per parameter in memory learning Fetched memory vs generic memory (additional results) Memory location What tasks benefit more from memories Retrieval augmented generation detail Memory augmented transformer architecture 17 17 17 17 18 18 18 19 20 21 22 23 23"
        },
        {
            "title": "A Training details",
            "content": "In this section, we provide the training details of all experiments. All experiments in the paper are conducted using the OpenLM (Gururangan et al., 2023b) repository1. The training data is DCLM-Baseline (Li et al., 2024). Rotary Positional Embedding (RoPE) (Su et al., 2024) is used to encode positions in queries and keys before the attention module, with frequency of 100,000. For all training jobs, anchor and memory parameters are stored in BFloat16 precision and trained with PyTorch Fully Sharded Data Parallelism (FSDP) using AdamW optimizer (β1 = 0.9, β2 = 0.95) and gradient clipping to 1.0. A.1 Baseline model training The baseline models, corresponding to rows A1, B1, and C2 in Table 1, are transformers with the block shown in Figure 13 and configurations detailed in Table 4, Table 5, and Table 6, respectively. Each model is trained from scratch with 240 1.1T tokens, using context length of 8,192 and the dataset decomposition approach (Pouransari et al., 2025) with global batch size of 1M tokens. The learning rate follows cosine schedule with 10k warmup steps, maximum value of 5 103, and cooldown value of 5 105. Weight decay is set to 0.05. Model OpenLM-160M Model OpenLM-410M Model Num layers Hidden dim Num heads Per head dim FFN inner dim Head-Embedding Num params 35 512 12 32 2,048 tied 163,510,016 Num layers Hidden dim Num heads Per head dim FFN inner dim Head-Embedding Num params 24 1,024 16 64 2,816 separate 411,665, Numb layers Hidden dimension Num heads Per head dim FFN inner dim Head-Embedding Num params OpenLM-1B 24 2,048 16 128 5,632 separate 1,439,893,504 Table 4 OpenLM-160M Table 5 OpenLM-410M Table 6 OpenLM-1B A.2 Memory model training For all memory learning jobs, we first perform clustering as described in Appendix C. After identifying the corresponding level 4 cluster ID of each document (a number between 1 and 164), we pack documents from the same cluster into sequences of length 2,048, globally shuffle them, and add the cluster ID as prefix to each sequence. During training, the cluster ID is simply obtained by separating the first token from the rest of the tokens, which represent the actual data. Note that shallower-level cluster IDs can be inferred from the level-4 cluster ID due to the nested structure of our clustering. Each sequence of length 2,048 can contain subsequences from different documents (within the same cluster), separated by special EOT token. The attention mask is restricted to each document to avoid cross-document attention. The global batch size for all jobs is 2M tokens (1,024 sequences of length 2,048 each), except for the 1.4B model (row C2 in Table 1), where we use global batch size of 4M to improve GPU utilization. When the anchor model is frozen, we train memories asynchronously (one job for the memories of each level-1 subtree, resulting in total of 16 jobs) and merge the checkpoints afterward. In addition, we use cosine learning rate schedule with maximum value of 104 and cool-down value of 105. When training for 240 tokens, we use 10k warmup steps, and for all other trainings with different numbers of tokens, we keep the same warmup ratio. We found that warmup has minimal effect on the performance of memory learning. We use weight decay value of 103, which we found to improve the performance of memory learning, consistent with its goal of memorization. A.3 Additional details of memory type and size ablations The total number of seen tokens for the memory type and size experiments in Figure 3 is 238. For all types of memories considered, the memories correspond to level-2 clusters. 1https://github.com/mlfoundations/open_lm 17 For the experiments in Figure 3d, the total seen tokens are 236, 238, 240, and 241 for memories at levels 1, 2, 3, and 4, respectively. Since deeper memories are updated less frequently, we increased the total seen token budget for those cases. A.4 Additional details of ablation on memory configuration For the experiments in Figure 4 (corresponding to Table 7), we use 240 and 241 total seen tokens, corresponding to memory bank sizes of 4.6B and 18.7B, respectively. Memory config level 3 level level 1 level 4 Bank size Fetched size (M) Common-Knowledge (%) Specific-Knowledge (%) 0 0 98 256 768 1792 5376 256 328 1216 4096 0 16 42 64 96 112 0 64 156 164 0 4 18 16 12 7 0 16 74 22 17 0 1 0 0 0 0 0 4 0 3 0 4.6B 18.7B 0 1.1 8.5 18.1 47.1 102.7 289 18.1 30 75.5 238. 45.9 46.5 46.5 47.4 47.6 48.3 49.7 47.2 46.3 47.8 49.2 34.1 37.8 38.6 39.2 40.2 41.6 43.2 40.1 40.9 41.6 44. Table 7 Ablation on different hierarchical memory configurations corresponding to results shown in Figure 4a. For all experiments, the anchor model is the 160M model (row A1 in Table 1), frozen during memory learning. Memories are trained for 1.1T and 2.2T tokens when the memory bank size is 4.6B and 18.7B, respectively. A.5 Additional details of co-training memories and anchor model For the experiments in Table 1, we denote the total number of seen tokens, which is either 240 or 241. For the A4 model in Table 1, where both memory and anchor model parameters are trained together from scratch, we use cosine learning rate schedule with maximum value of 103 and cool-down value of 105, with 10k warmup steps and weight decay set to 0.1. A.6 Additional details of memory learning on open-weight models For all experiments in Table 2, we use total of 240 tokens. All models are initialized from their public pretrained checkpoints, and these anchors remain frozen in all experiment except cotraining. We use memory config of (512, 128, 32, 0) for Gemma and Qwen (which results in higher memory parameters for Qwen because it has higher internal dimension and more transformer blocks) and (768, 256, 32, 0) for Llama. These numbers result in roughly 10% memory to anchor model parameter ratio. We follow the optimizer setup of Section A.2, except that we do not restrict cross-attention because the baseline models were not all trained this way and reduce warmup steps to 5k. When we cotrain the Qwen anchor with memories, we reduce the batchsize to 1M tokens (512 sequences of length 2,048 each) to accomodate for GPU VRAM and increase warmup steps to 10k to reduce the risk of interference with the pretrained parameters. A.7 Additional details of memory-to-model size experiment Here we provide implementation details for the experiments in Figure 4b. We summarize the architecture of six anchor models and their corresponding memories for this experiment in Table 8. The anchor models are first trained for 238 tokens, then frozen, and their memories are trained for another 239 tokens. For the anchor models, we use cosine learning rate schedule with maximum learning rate of 103 and cool-down value of 105. Weight decay is set to 0.1. We then freeze the anchor model to 18 train the memories. For this particular experiment, memories are trained with constant learning rate of 104 to demonstrate convergence of memory parameters, even without learning rate annealing. Anchor model Memory Runtime params Name Num layers Num params Config Fetch size Bank size 260M 320M 350M 370M 385M 410M 17 19 21 22 24 257,475, 321,721,344 347,419,648 373,117,952 385,967,104 411,665,408 (3840,336,6,0) (1445,256,8,0) (870,226,9,0) (384,200,10,0) (264,94,16,0) (0,0,0,0) 154,165, 6,341,787,648 411,640,832 89,250,816 6,341,246,976 410,972,160 64,496, 6,341,099,520 411,916,288 38,320,128 6,341,787,648 411,438,080 25,276, 6,341,001,216 411,243,520 0 0 411,665,408 Table 8 Anchor models and their corresponding memory configurations for the memory-to-model size experiment in Figure 4b. The anchor model architecture and memory configuration are designed to keep the total runtime number of parameters and the memory bank size (almost) fixed. The anchor model architecture uses hidden dimension of 1,024 and 16 heads for all rows."
        },
        {
            "title": "B Evaluation",
            "content": "We use LLM-Foundry (V0.9) as the evaluation framework. To obtain stable signal, we only include benchmarks for which the baseline 410M model (B1 in Table 1) performs better than random and the ratio of standard deviation to mean performance is less than 0.5. Below is detailed description of the 13 tasks we use to evaluate pretrained language models in this work: Lambada-OpenAI (Paperno et al., 2016) with 5,153 samples, evaluated 0-shot, is of type language modeling, with random baseline performance equal to 0%. BoolQ (Clark et al., 2019) with 3,270 samples, evaluated 0-shot, is of type multiple choice, with random baseline performance equal to 50%. SQuAD (Rajpurkar et al., 2016) with 10,570 samples, evaluated 3-shots, is of type language modeling, with random baseline performance equal to 0%. Winograd (Levesque et al., 2012) with 273 samples, evaluated 3-shots, is of type schema, with random baseline performance equal to 50%. WinoGrande (Sakaguchi et al., 2021) with 1,267 samples, evaluated 5-shots, is of type schema, with random baseline performance equal to 50%. CoQA (Reddy et al., 2019) with 7,983 samples, evaluated 0-shot, is of type language modeling, with random baseline performance equal to 0%. Hellaswag (Zellers et al., 2019) with 10,042 samples, evaluated 0-shot, is of type multiple choice, with random baseline performance equal to 25%. ArcEasy (Clark et al., 2018) with 2,376 samples, evaluated 3-shots, is of type multiple choice, with random baseline performance equal to 25%. ArcChallenge (Clark et al., 2018) with 1,172 samples, evaluated 3-shots, is of type multiple choice, with random baseline performance equal to 25%. TriviaQA (Joshi et al., 2017) with 3,000 samples, evaluated 3-shots, is of type generation task with answers, with random baseline performance equal to 0%. PIQA (Bisk et al., 2019) with 1,838 samples, evaluated 0-shot, is of type multiple choice, with random baseline performance equal to 50%. OpenBookQA (Mihaylov et al., 2018) with 500 samples, evaluated 10-shots, is of type multiple choice, with random baseline performance equal to 25%. NaturalQuestions (Lee et al., 2019; Kwiatkowski et al., 2019) with 2,655 samples used by Liu et al. (2024), evaluated 0-shot, is of type generation task with answers, with random baseline performance equal to 0%. In Appendix G, we present our analysis dividing the above tasks into two groups: common-knowledge (CK) and specific-knowledge (SK). When evaluating models with fetched memory, we retrieve memory based on the question for multiple choice tasks, the context for language modeling tasks, and the portion of the text that is common across all choices for the schema tasks. To compute perplexity (for the Wiki-En dataset) we use the full document to retrieve memory. Elements atomic number: We include task on predicting the atomic number of different elements. The model completes prompt in the form of The atomic number of {...} is, where {...} is replaced with the name of an element (from total of 118). The models generation is then processed to extract integer numerical values, and response is accepted if it matches the actual atomic number. Random baseline performance for this task is 0%. We use the prompt, including the element name, for memory retrieval. The elements atomic number evaluation is particularly interesting because each query has specific keyword: the element name. This allows us to count the frequency of each elements name in the dataset (as shown in Figure 1) to analyze model performance as function of knowledge scarcity in the pretraining dataset. We note, however, that this analysis has some minor caveats. For example, the word lead is both the name of an element and an English verb. In addition, some elements have multiple names; for instance, Natrium is an accepted alias for Sodium. In our frequency calculations, we count all acceptable aliases of each element name."
        },
        {
            "title": "C Data clustering details",
            "content": "We cluster the training set with hierarchical clustering (Grangier et al., 2025). We build clustering tree: each node in the tree is associated with cluster centroid. The examples traverse the tree from top to bottom, selecting the node corresponding to the closest centroids among the current nodes children. Before training the clustering tree, we segment our dataset into non-overlapping 2,048 token windows and compute sentence-BERT embedding for every window. We rely on the sentence-BERT MiniLM-L6-v2 model (Reimers and Gurevych, 2019). This process associates each segment of text with 384 dimensional vector. The training of the tree proceed from root to leaves. Iteratively, new level is built by applying k-means to subset of the examples belonging to each node. We built tree of depth up to 4, always splitting nodes in 16 clusters. For k-means, we normalize the Euclidean norm of the vectors prior to clustering. We train the model via Expectation Maximization using k-means++ initialization (Arthur and Vassilvitskii, 2006). At each step, we sample 6,400 new examples. With 20 steps, we visit 128k examples. To ensure cluster distribution close to uniform, we monitor the cluster sizes at each assignment steps. If cluster is larger than our balancing limit (0.094 1.5 1/16), we split evenly at random its assignments with the smallest cluster, as suggested by Jegou et al. (2010)."
        },
        {
            "title": "D Tokens per parameter in memory learning",
            "content": "While scaling laws exist for regular language model pretraining that identify the training budgetoptimal choice for token-per-parameter (TPP) (Hoffmann et al., 2022), these laws may not hold for memory learning due to its different learning dynamics. Here, we experiment with the effect of TPP when learning memories. We consider the (0,0,16,0) memory configuration on top of pretrained 160M anchor model (row A1 in Table 1). This corresponds to 4,096 memories, each with 860,160 parameters, for total of 3.5B parameters. 20 (a) (b) (c) Figure 7 Common-Knowledge (Avg-CK), Specific-Knowledge (Avg-SK), and perplexity on Wiki-En as function of tokens-per-parameter (TPP). The anchor model is pretrained 160M model (row A1 in Table 1) and is kept frozen during memory learning. We freeze the anchor model and train the memories with 232, 233, . . . , 240 total tokens, corresponding to TPP values ranging from 1 to 312. Results are shown in Figure 7. In regular language modeling, knowledge (as in conditional likelihoods) is picked up into parameters when it, and similar content, is repeated often (with many TPP) and receives constructive gradient updates, and forgotten if it is rare and gets destructive gradient updates by dissimilar content (Ghosal et al., 2025). This means that long-tail information is forgotten after it is seen in batch because the following batches send destructive gradient updates. What lasts in joint parameters is common knowledge, which occurs more often and with more aligned gradients. We demonstrate this effect in Figure 1. In the proposed memory learning method, however, memory parameters are shielded in that they are activated and updated only on sequences of similar topic. This both reduces the times where knowledge can be overwritten and the dissimilarity of possible other gradients. On average, memory parameters corresponding to level are updated 16l times less often than anchor parameters. For the setup considered above with memory configuration (0,0,16,0), where all memories are at level 3, memory parameters receive one update for every 4,096 sequences in the training set. Specific knowledge stored in deep memories is shielded from catastrophic forgetting (Toneva et al., 2018), because, unlike regular parameters, it is not overwritten frequently by destructive gradients from unrelated content. Instead, deep memory parameters are only activated when there are constructive gradients of similar content in their clusters, so that they memorize this specific knowledge. This behavior is shown in Figures 7b and 7c, where specific-knowledge benchmark accuracy and wikipedia perplexity steadily improve with increasing TPP. The last point corresponds to total of 1.1 trillion seen tokens (TPP = 312). Due to computational constraints, we did not scale TPP further. Fetched memory vs generic memory (additional results) In Figure 6a, we showed the performance of the model using fetched and generic memories throughout training, both when anchor parameters are frozen and when they are learnable. key observation is that when we allow the anchor parameters to be co-trained with the memory bank, we obtain greater improvement compared to the case where the anchor model is frozen (e.g., Avg-SK improves from 39.2% to 40.3% as shown in Table 1). This improvement can be attributed to two factors: 1) when co-training, the anchor model learns to adapt to the memories more effectively compared to when it is frozen, and 2) the anchor model is exposed to additional tokens, so its performance improves simply due to more training. The latter effect should be minor if the anchor model is already over-trained (i.e., trained with high TPP) during pretraining and has reached performance saturation, meaning it no longer benefits from additional training. We also track the gap between the performance of the anchor model using generic memories (a fixed set of 21 memory parameters independent of the input context) and fetched memories throughout co-training, as shown in Figure 8b and Figure 8d for the Avg-SK and Wiki-En perplexity metrics, respectively. We observe that the performance gap between fetched and generic memories grows over time (despite using cosine learning rate schedule), indicating that longer co-training benefits fetched memories more than generic ones. This is expected, as the memory bank has significantly more parameters (4.6B in this example) compared to the anchor model (160M) and single generic memory (18M), and thus benefits more from extended training. (a) (c) (b) (d) Figure 8 Additional results for the experiment setup of Figure 6a. Performance improvements from co-training the anchor model and memories, corresponding to row A2 in Table 1. We also show performance when the anchor model is frozen, corresponding to row A3 in Table 1. (a) Avg-SK using fetched and generic memories, (b) Avg-SK gap between fetched and generic memories, which grows as training progresses, (c) Wiki-En perplexity using fetched and generic memories, (d) Wiki-En perplexity gap between fetched and generic memories, which widens as training progresses."
        },
        {
            "title": "F Memory location",
            "content": "So far, we have considered memory parameters to be uniformly distributed across the layers of the model. Meng et al. (2022) showed that model knowledge is mainly captured in the middle layers. We use our memory learning setup to further explore this hypothesis by considering different distributions of memory parameters across layers, as shown in Figure 9. Starting from baseline memory with configuration (0,64,0,0), trained on top of pretrained and frozen 160M model (row A1 in Table 1), corresponding to the level-2 models in Figure 3d, we study the effect of distributing memory parameters non-uniformly across the model. We consider three setupsearly, mid, and latewhere the same number of memory parameters as the uniform baseline are applied only to the first, middle, or last 10 layers of the anchor model (see Figure 9). As discussed in Section A.3, for these experiments the anchor model is frozen, and memories are trained for total of 238 tokens. Results for each memory placement are shown in Table 9. Consistent with the observations of Lample et al. (2019), using memories in the early layers of the anchor model is less effective than using them uniformly (the default setup) or in the deeper layers. 22 Memory location Avg-CK (%) Avg-SK (%) Elements atomic number (%) Wiki-En Pplx No Memory Uniform Early Middle Late 45. 46.7 45.8 46.1 46.9 34.1 36.8 34.9 35.4 36.8 1.7 14.4 2.5 1.7 20.3 17. 16.0 16.6 16.5 16.1 Figure 9 Different distribution of memory along the layers of the anchor model. Table 9 Comparing effectiveness of memories with different distribution over the depth of anchor model, which is kept frozen."
        },
        {
            "title": "G What tasks benefit more from memories",
            "content": "In Figure 1, using the atomic number prediction task, we showed that memories can significantly improve performance on tasks requiring long-tail knowledge. To extend this concept to commonly used benchmarks for evaluating pretrained models, we introduce an approximate, quantitative measure of the degree of knowledge specificity for each of the 13 evaluation benchmarks described in Appendix B. For each dataset, we randomly sample 100 entries and prompt GPT-4 (Achiam et al., 2023) to estimate the education level (as proxy for knowledge specificity) at which typical person would have acquired the knowledge needed to answer each question. The average of these ratings is used as the knowledge specificity score of the task. Specifically, we ask the model to rate each question based on the amount of knowledge required, using the following prompt: Given the following prompt and answer, what facts should human know in order to answer the question correctly? What phase of life will typical person know all required facts? Your response should be in the format of an integer between 0 and 5 based on the following scale: 0: Only language understanding, all required information is in the context 1: Commonsense facts learned through sensory experiences in childhood 2: Facts learned in elementary school 3: Facts learned in middle school 4: Facts learned in high school 5: More specific facts learned later in life Respond with only single integer and nothing else. In Figure 10, we plot the accuracy difference between fetched memories and generic memories against the knowledge specificity score for each benchmark, using the 1.4B model trained with memories (row C2 in Table 1). The plot shows clear positive correlation between knowledge specificity and performance improvement from fetched memories. We further group the datasets into six common-knowledge (purple) and seven specific-knowledge (green) tasks using knowledge specificity score threshold of 2.0. On average, fetched memories improve specific-knowledge (Avg-SK) task performance by 3.6 points, while performance on common-knowledge (Avg-CK) tasks remains comparable (64.4 vs. 64.5). Notably, both CK and SK performance show even greater improvement compared to the baseline model (row C1 in Table 1): Avg-CK improves from 61.2% to 64.5%, and Avg-SK improves from 49.7% to 54.9%. Additionally, we show the same analysis for the 160M (row A2 in Table 1) and 410M (row B2 in Table 1) models trained with memories in Figure 11 and Figure 12, respectively."
        },
        {
            "title": "H Retrieval augmented generation detail",
            "content": "In this section, we provide further details for the experiments in Section 4. We consider two datasets to retrieve documents from: DCLM-Baseline and English Wikipedia 2022, with 6.5 million and 3.2 billion documents, respectively. The average document length in DCLM, using our EleutherAI/gpt-neox (Black et al., 2022) 23 Figure 10 Fetched memories improve performance on knowledge-intensive benchmarks. Accuracy gain (fetched memory vs. generic memory) for the 1.4B model (row C2 in Table 1) as function of the knowledge specificity score of each benchmark. Knowledge specificity is determined by GPT-4 ratings of 100 sampled entries per dataset, and error bars reflect the standard error of the mean. The positive correlation highlights the value of fetched memories for knowledge-intensive tasks. Note that this plot shows the improvement of fetched memories compared to generic memories; the improvement is even greater when comparing fetched memories with the baseline model without memory (row C1 in Table 1). tokenizer, is 1,309 tokens (computed from random 10% subset of the dataset), while for Wikipedia it is 723 tokens. We set the max sequence length at evaluation to 2,560. As reference point, we report FLOPs associated with each approach. For RAG models, we use the average sequence length and compute the additional FLOPs on top of 1024-token context. When using memory, the context length does not increase, but additional memory parameters are fetched and added to the anchor model, increasing runtime FLOPs by 10%. For these experiments, we compare augmenting the anchor model with: 1) fetched memory from the learned bank of memories, versus 2) raw documents retrieved from the same dataset the memories were trained on. For high-quality RAG performance, many factors matter, including the instruction-following and long-context capability of the LLM, the retrievers quality, the quality of the datastore, and additional techniques such as self-reflection (Asai et al., 2024). In this study, we mainly aim to compare learned memories (ours) against contextual memories without additional confounders. We therefore call our retrieval-augmented generations vanilla RAG. We use the same 24 Figure 11 Fetched memories improve performance on knowledge-intensive benchmarks. Accuracy gain (fetched memory vs. generic memory) for the 410M model (row B2 in Table 1) as function of the knowledge specificity score of each benchmark. Knowledge specificity is determined by GPT-4 ratings of 100 sampled entries per dataset, and error bars reflect the standard error of the mean. The positive correlation highlights the value of fetched memories for knowledge-intensive tasks. Note that this plot shows the improvement of fetched memories compared to generic memories; the improvement is even greater when comparing fetched memories with the baseline model without memory (row B1 in Table 1). retrieval mechanism for both learned memories and RAG: given query, we identify the context as described in Appendix B. Using the Sentence-BERT (Reimers and Gurevych, 2019) all-MiniLM-L6-v2 embedding model, we first determine the closest level-3 cluster in DCLM (comparing against 4096 centroids). Note that the models with memory in Table 3 are also trained with hierarchical memory configurations up to level 3. We then retrieve the nearest-neighbor (NN) document from within that level 3 cluster (on average 750k documents, given 3B/4096). This document is then added to the context. To avoid confounders from few-shot complexity in RAG, all tasks are run in 0-shot setup. We experiment with the 160M, 410M, and 1.4B models, corresponding to rows A1, B1, and C1 in Table 1. As shown in Table 3, vanilla NN retrieval from DCLM does not improve baseline model performance for either common-knowledge or specific-knowledge benchmarks. We argue this is mainly due to the low quality of DCLM (a pretraining dataset) when used as datastore for RAG. Recently, Lyu et al. (2025) showed that with careful filtering, RAG quality can be improved when using web-scale datastores. To demonstrate the effect of datastore quality here, we also use English Wikipedia to retrieve higher-quality 25 Figure 12 Fetched memories improve performance on knowledge-intensive benchmarks. Accuracy gain (fetched memory vs. generic memory) for the 160M model (row A2 in Table 1) as function of the knowledge specificity score of each benchmark. Knowledge specificity is determined by GPT-4 ratings of 100 sampled entries per dataset, and error bars reflect the standard error of the mean. The positive correlation highlights the value of fetched memories for knowledge-intensive tasks. Note that this plot shows the improvement of fetched memories compared to generic memories; the improvement is even greater when comparing fetched memories with the baseline model without memory (row A1 in Table 1). documents for the given context with the same Sentence-BERT model. Results in Table 3 show that RAG-Wiki improves baseline performance on specific-knowledge benchmarks (e.g., from 46.9 to 49.2 for the 1.4B model). However, for common-knowledge benchmarks, RAG-Wiki does not improve over baseline. By contrast, using learned memories (with 10% additional parameters relative to baseline) improves performance on both common-knowledge and specific-knowledge benchmarks with lower runtime FLOPs overhead. Finally, we note that high-quality RAG is complementary to the proposed learned memories and can further enhance performance."
        },
        {
            "title": "I Memory augmented transformer architecture",
            "content": "In this section, we provide additional detail on different memory augmented transformer architectures that we considered. LoRa-Memories: The transformer block with SwiGLU FFN has seven linear layers, as shown in Figure 13. 26 Figure 13 Base architecture of transformer block with SwiGLU FFN layer. We can augment any subset of these with low-rank memories. To avoid exhaustive search, we group the linear layers into three categories based on their role in the transformer block: 1) query and key projection layers, 2) value and output projection layers, and 3) FFN linear layers. Accordingly, we define three types of LoRa memories: LoRa-QK (shown in Figure 14), LoRa-OV (shown in Figure 15), and LoRa-FFN (shown in Figure 16). Each LoRa consists of two low-rank matrices, and B. The target linear layer is patched additively as + BA. The size of memories is determined by the rank of matrices and B. Note that for model with hidden dimension d, inner FFN dimension df , per attention head dimension dh, heads, and layers the size of fetched memory with LoRa type is as follows: LoRa-QK memory size: 2rl(d + hdh) LoRa-OV memory size: 2rl(d + hdh) LoRa-FFN memory size: 3rl(d + df ) For graceful initialization, so that memories initially have no effect, we initialize with zeros, as suggested in the original work (Hu et al., 2022), and with uniform Kaiming distribution in all cases. Additionally, we found that scaling factor of α = 2 works best for the LoRa memories considered here. Aligned with previous observations that knowledge in transformers is primarily stored in FFN layers (Geva et al., 2020; Dai et al., 2022; Yao et al., 2022), we also find that LoRa-FFN mostly outperforms alternative LoRa memories for the same number of learnable parameters, as shown in Figure 3. KV-Memories: With these memories, we learn additional key and value vectors to augment the inputdependent keys and values. The input-dependent query vectors cross-attend to the learned key and value vectors, and their results are added to the output of multi-head attention. Note that we do not apply causal masking when attending to the learned keys and values. Additionally, we found that KV memories are slightly more effective when used without positional encoding. To ensure no memory effect at initialization, we initialize the learned value vectors with zeros and the learned key vectors with truncated normal distribution, consistent with other model parameters. The size of KV memories is determined by the number of key-value vectors (r), as shown in Figure 17, and can be calculated as follows: KV memory size: 2rlhdh FFN-Memories: for FFN memories, we directly expand the inner dimension of the three linear layers in the SwiGLU FFN as shown in Figure 18. Similar to other memory types, we initialize memories such that at the beginning of training they have no effect. Therefore, we initialize W1 and W2 FFN memories with truncated normal, and W3 FFN memory with zeros. The size of the FFN memory is determined by their inner dimension and can be calculated as follows: FFN memory size: 3rld 27 Figure 14 transformer block with LoRa memories on queries and keys projection layers. Figure 15 transformer block with LoRa memories on values and output projection layers. Figure 16 transformer block with LoRa memories on SwiGLU-FFN linear layers. Figure 17 transformer block with learned KV memories. 28 Figure 18 transformer block with FFN memories."
        }
    ],
    "affiliations": [
        "Apple"
    ]
}