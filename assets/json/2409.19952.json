{
    "paper_title": "Image Copy Detection for Diffusion Models",
    "authors": [
        "Wenhao Wang",
        "Yifan Sun",
        "Zhentao Tan",
        "Yi Yang"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Images produced by diffusion models are increasingly popular in digital artwork and visual marketing. However, such generated images might replicate content from existing ones and pose the challenge of content originality. Existing Image Copy Detection (ICD) models, though accurate in detecting hand-crafted replicas, overlook the challenge from diffusion models. This motivates us to introduce ICDiff, the first ICD specialized for diffusion models. To this end, we construct a Diffusion-Replication (D-Rep) dataset and correspondingly propose a novel deep embedding method. D-Rep uses a state-of-the-art diffusion model (Stable Diffusion V1.5) to generate 40, 000 image-replica pairs, which are manually annotated into 6 replication levels ranging from 0 (no replication) to 5 (total replication). Our method, PDF-Embedding, transforms the replication level of each image-replica pair into a probability density function (PDF) as the supervision signal. The intuition is that the probability of neighboring replication levels should be continuous and smooth. Experimental results show that PDF-Embedding surpasses protocol-driven methods and non-PDF choices on the D-Rep test set. Moreover, by utilizing PDF-Embedding, we find that the replication ratios of well-known diffusion models against an open-source gallery range from 10% to 20%. The project is publicly available at https://icdiff.github.io/."
        },
        {
            "title": "Start",
            "content": "4 2 0 2 2 ] . [ 2 2 5 9 9 1 . 9 0 4 2 : r a"
        },
        {
            "title": "Image Copy Detection for Diffusion Models",
            "content": "Wenhao Wang1, Yifan Sun2, Zhentao Tan2, Yi Yang3 1University of Technology Sydney 2Baidu Inc. 3Zhejiang University Figure 1: Some generated images (top) from diffusion models replicates the contents of existing images (bottom). The existing (matched) images are from LAION-Aesthetics [1]. The diffusion models include both commercial and open-source ones."
        },
        {
            "title": "Abstract",
            "content": "Images produced by diffusion models are increasingly popular in digital artwork and visual marketing. However, such generated images might replicate content from existing ones and pose the challenge of content originality. Existing Image Copy Detection (ICD) models, though accurate in detecting hand-crafted replicas, overlook the challenge from diffusion models. This motivates us to introduce ICDiff, the first ICD specialized for diffusion models. To this end, we construct Diffusion-Replication (D-Rep) dataset and correspondingly propose novel deep embedding method. D-Rep uses state-of-the-art diffusion model (Stable Diffusion V1.5) to generate 40, 000 image-replica pairs, which are manually annotated into 6 replication levels ranging from 0 (no replication) to 5 (total replication). Our method, PDF-Embedding, transforms the replication level of each imagereplica pair into probability density function (PDF) as the supervision signal. The intuition is that the probability of neighboring replication levels should be continuous and smooth. Experimental results show that PDF-Embedding surpasses protocol-driven methods and non-PDF choices on the D-Rep test set. Moreover, by utilizing PDF-Embedding, we find that the replication ratios of well-known diffusion models against an open-source gallery range from 10% to 20%. The project is publicly available at https://icdiff.github.io/."
        },
        {
            "title": "Introduction",
            "content": "Diffusion models have gained popularity due to their ability to generate high-quality images. phenomenon accompanying this trend is that these generated images might replicate content from Corresponding Author. 38th Conference on Neural Information Processing Systems (NeurIPS 2024). Figure 2: The comparison between current ICD with the ICDiff. The current ICD focuses on detecting edited copies generated by transformations like horizontal flips, random rotations, and random crops. In contrast, the ICDiff aims to detect replication generated by diffusion models, such as Stable Diffusion [2]. (Source of the original image: Lawsuit from Getty Images.) existing ones. In Fig. 1, we choose six well-known diffusion models [3, 4, 5, 6, 7, 8] to illustrate this replication phenomenon. The content replication is acceptable for some (fair) use while interest holders may regard others as copyright infringement [9, 10, 11]. This paper leaves this dispute alone, and focuses scientific problem: How to identify the content replication brought by diffusion models? Image Copy Detection (ICD) provides general solution to the above demand: it identifies whether an image is copied from reference gallery after being tampered with. However, the current ICD methods are trained using hand-crafted image transformations (e.g., horizontal flips, random rotations, and random crops) and overlook the challenge from diffusion models. Empirically, we find existing ICD methods can be easily confused by diffusion-generated replicas (as detailed in Table 3). We infer it is because the tamper patterns underlying diffusion-generated replicas (Fig. 2 right) are different from hand-crafted ones (Fig. 2 middle), yielding considerable pattern gap. In this paper, we introduce ICDiff, the first ICD specialized for diffusion-generated replicas. Our efforts mainly involve building new ICD dataset and proposing novel deep embedding method. Diffusion Replication (D-Rep) dataset. D-Rep consists of 40, 000 image-replica pairs, in which each replica is generated by diffusion model. Specifically, the images are from LAION-Aesthetic V2 [1], while their replicas are generated by Stable Diffusion V1.5 [12]. To make the replica generation more efficient, we search out the text prompts (from DiffusionDB [13])that are similar to the titles of LAION-Aesthetic V2 images, input these text prompts into Stable Diffusion V1.5, and generate many redundant candidate replicas. Given these candidate replicas, we employ human annotators to label the replication level of each generated image against corresponding LAION-Aesthetic image. The annotation results in 40, 000 image-replica pairs with 6 replication levels ranging from 0 (no replication) to 5 (total replication). We divide D-Rep into training set with 90% (36, 000) pairs and test set with the remaining 10% (4, 000) pairs. novel method named PDF-Embedding. The ICD methods rely on deep embedding learning at their core. In the deep embedding space, the replica should be close to its original image and far away from other images. Compared with popular deep embedding methods, our PDF-Embedding learns Probability-Density-Function between two images, instead of similarity score. More concretely, PDF-Embedding transforms the replication level of each image-replica pair into PDF as the supervision signal. The intuition is that the probability of neighboring replication levels should be continuous and smooth. For instance, if an image-replica pair is annotated as level-3 replication, the probabilities for level-2 and level-4 replications should also not be significantly low. PDF-Embedding predicts the probability scores on all the replication levels simultaneously in two steps: 1) extracting 6 feature vectors in parallel from both the real image and its replica, respectively and 2) calculating 6 inner products (between two images) to indicate the probability score at 6 corresponding replication levels. The largest-scored entry indicates the predicted replication level. Experimentally, we prove the effectiveness of our method by comparing it with popular deep embedding models and protocol-driven methods trained on our D-Rep. Moreover, we evaluate the replication of six famous diffusion models and provide comprehensive analysis. In conclusion, our key contributions are as follows: 1. We propose timely and important ICD task, i.e, Image Copy Detection for Diffusion Models (ICDiff), designed specifically to identify the replication caused by diffusion models. 2. We build the first ICDiff dataset and introduce PDF-Embedding as baseline method. PDF-Embedding transforms replication levels into probability density functions (PDFs) and learns set of representative vectors for each image. 3. Extensive experimental results demonstrate the efficiency of our proposed method. Moreover, we discover that between 10% to 20% of images generated by six well-known diffusion models replicate contents of large-scale image gallery."
        },
        {
            "title": "2 Related Works",
            "content": "2.1 Existing Image Copy Detection Methods Current ICD methods try to detect replications by learning the invariance of image transformations. For example, ASL [14] considers the relationship between image transformations and hard negative samples. AnyPattern [20] and PE-ICD [21] build benchmarks and propose solutions that focus on novel patterns in real-world scenarios. SSCD [15] reveals that self-supervised contrastive training inherently relies on image transformations, and thus adapts InfoNCE [16] by introducing differential entropy regularization. BoT [17] incorporates approximately ten types of image transformations, combined with various tricks, to train an ICD model. By increasing the intensity of transformations gradually, CNNCL [18] successfully detects hard positives using simple contrastive loss and memory bank. EfNet [19] ensembles models trained with different image transformations to boost the performance. In this paper, we discover that capturing the invariance of image transformations is ineffective for detecting copies generated by diffusion models. Consequently, we manually label new dataset and train specialized ICD model. 2.2 Replication in Diffusion Models Past research has explored the replication problems associated with diffusion models. The study by [10] questions if diffusion models generate unique artworks or simply mirror the content from their training data. Research teams from Google, as highlighted in [22], note that diffusion models reveal their training data during content generation. Other studies prevent generating replications from the perspectives of both training diffusion models [23, 24, 25, 26, 27] and copyright holders [28, 29, 30]. Some experts, such as those in [24], find that the replication of data within training sets might be significant factor leading to copying behaviors in diffusion models. To address this, [31] proposes an algorithmic chain to de-duplicate the training sources like LAION-2B [1]. In contrast to these efforts, our ICDiff offers unique perspective. Specifically, unlike those that directly using existing image descriptors (such as those from CLIP [32] and SSCD [15]), we manually-label dataset and develop specialized ICD algorithm. By implementing our method, the analytical tools and preventative strategies proposed in existing studies may achieve greater efficacy."
        },
        {
            "title": "3 Benchmark",
            "content": "This section introduces the proposed ICD for diffusion models (ICDiff), including our dataset (D-Rep) and the corresponding evaluation protocols. 3.1 D-Rep Dataset Current ICD [33, 34, 35, 14, 21, 20] primarily focuses on the replica challenges brought by handcrafted transformations. In contrast, our ICDiff aims to address the replication issues caused by diffusion models [3, 4, 5, 6, 7, 8]. To facilitate ICDiff research, we construct D-Rep dataset, which is characterized for diffusion-based replication (See Fig. 3 and the Appendix (Section A) for the examples of diffusion-based replica). The construction process involves generating candidate pairs followed by manual labeling. Generating candidate pairs. It consists of (1) selecting the top 40, 000 most similar prompts and titles: this selection provides an abundant image-replica pair source. In detail, we use the Sentence Transformer [36] to encode the 1.8 million real-user generated prompts from DiffusionDB [13] and 3 Figure 3: The demonstration of the manual-labeled D-Rep dataset. The percentages on the left show the proportion of images with particular level. the 12 million image titles from LAION-Aesthetics V2 6+ [1], and then utilize the computed cosine similarities to compare; (2) obtaining the candidate pairs: the generated images are produced using the prompts with Stable Diffusion V1.5 [12], and the real images are fetched based on the titles. Manual labeling. We generally follow the definition of replication in [10] and further define six levels of replication (0 to 5). higher level indicates greater degree that the generated image replicates the real image. Due to the complex nature of diffusion-generated images, we use multiple levels instead of the binary levels used in [10], which employed manual-synthetic datasets as shown in their Fig. 2. We then train ten professional labelers to assign these levels to the 40, 000 candidate pairs: Initially, we assign 4, 000 image pairs to each labeler. If labelers are confident in their judgment of an image pair, they will directly assign label. Otherwise, they will place the image pair in an undecided pool. On average, each labeler has about 600 undecided pairs. Finally, for each undecided pair, we vote to reach final decision. For example, if the votes for an undecided pair are 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, the final label assigned is 3. Given the complexity of this labeling task, it took both the labelers and our team one month to finish the process. To maintain authenticity, we did not pre-determine the proportion of each score. The resulting proportions are on the left side of Fig. 3. 3.2 Evaluation Protocols To evaluate ICD models on the D-Rep dataset, we divide the dataset into 90/10 training/test split and design two evaluation protocols: Pearson Correlation Coefficient (PCC) and Relative Deviation (RD). Pearson Correlation Coefficient (PCC). The PCC is measure used to quantify the linear relationship between two sequences. When PCC is near 1 or 1, it indicates strong positive or negative relationship. If PCC is near 0, theres little to no correlation between the sequences. Herein, we consider two sequences, the predicted replication level sp = (sp n) and the ground-truth sl = (cid:0)sl (cid:1) (n is the number of test pairs). The PCC for ICDiff is defined as: 2, . . . , sp 1, sp 1, sl 2, . . . , sl (cid:80) i=1 (sp sl(cid:1) sp) (cid:0)sl (cid:115) (cid:80) i=1 (sp sp)2 , (cid:0)sl sl(cid:1)2 (1) PCC = (cid:115) (cid:80) i=1 where sp and sl are the mean values of sp and sl, respectively. Figure 4: The demonstration of the proposed PDF-Embedding. Initially, PDF-Embedding converts manually-labeled replication levels into probability density functions (PDFs). To learn from these PDFs, we use set of vectors as the representation of an image. limitation of the PCC is its insensitivity to global shifts. If all the predictions differ from their corresponding ground truth with the same shift, the PCC does not reflect such shift and remains large. To overcome this limitation, we propose new metric called the Relative Deviation (RD). Relative Deviation (RD). We use RD to quantify the normalized deviation between the predicted and the labeled levels. By normalizing against the maximum possible deviation, RD provides measure of how close the predictions are to the labeled levels on scale of 0 to 1. The RD is calculated by RD = 1 (cid:32) (cid:88) i=1 (cid:12) (cid:12) (cid:12)sp sl (cid:12) max (cid:0)N sl i, sl (cid:1) (cid:33) , (2) where is the highest replication level in our D-Rep. The Preference for RD over Absolute One. Here we show the preference for employing RD over the absolute one through two illustrative examples. We denote the relative and absolute deviation of the ith test pair as: Si = sp sl max(N sl i) i,sl = 3, both Si and Ti equal 0; however, if sp = 3, if sp , and Ti = sl . sp (1) For sample with sl worst prediction), Si = 1 and Ti = 0.6. Here, Si adjusts the worst prediction to value of 1. (2) In the first scenario, where sl = 0, Si = 1 and Ti = 0.6. In the second scenario, where sl = 2, Si = 0.6 and Ti = 0.6. For both cases, Ti remains the same at 0.6, whereas Si values differ. Nevertheless, the two scenarios are distinct: in the first, the prediction cannot deteriorate further; in the second, it can. The value of Si accurately captures this distinction, whereas Ti does not. = 0 (representing the = 5 and sp = 3 and sp"
        },
        {
            "title": "4 Method",
            "content": "This section introduces our proposed PDF-Embedding for ICDiff. PDF-Embedding converts each replication level into probability density function (PDF). To facilitate learning from these PDFs, we expand the original representative vector into set of vectors. The demonstration of PDF-Embedding is displayed in Fig. 4. 4.1 Converting Level to Probability Density Given an replication level sl sl, we first normalize it into pl = sl/max(sl). Then we transfer pl into PDF denoted as g(x) 2, where [0, 1] indicates each possible normalized level. The 2Although we acknowledge that the random variables in this context are discrete, we still utilize the term PDF to effectively communicate our intuition and present our method under ideal conditions. intuition is that the probability distribution of neighboring replication levels should be continuous and smooth. The function g(x) must satisfy the following conditions: (1) (cid:82) 1 0 g(x)dx = 1, ensuring that g(x) is valid PDF; (2) g(x) 0, indicating the non-negativity of the PDF; and (3) g(x) g(pl), which implies that the density is maximized at the normalized level pl. We use three different implementations for g(x): Gaussian: linear: and exponential: g(x A, µ, σ) = exp (cid:18) (x µ)2 2 σ2 (cid:19) , g(x A, µ, β) = β µ, g(x A, µ, λ) = λ exp(λ µ), (3) (4) (5) where: is the amplitude, and µ is the center; σ is the standard deviation of Gaussian function, β is the slope of linear function, and λ is the spread of exponential function. The performance achieved with various converted PDFs is illustrated in the experimental section. For additional details, please see the Appendix (Section B), which includes (1) the methodology for calculating distribution values, (2) the visualization of the learned distributions corresponding to different image pairs, and (3) an analysis of the deviation rate from peak values. 4.2 Representing an Image as Set of Vectors To facilitate learning from the converted PDFs, we utilize Vision Transformer (ViT) [37] to represent an image as set of vectors. Lets denote the patch tokens from real image as X0 and from generated image as X0 g, the ViT model as , and the number of layers in ViT as L. The feed-forward process can be expressed as: (cid:2)CL (cid:2)CL , XL , XL (cid:3) = (cid:0)(cid:2)C0, X0 (cid:3) = (cid:0)(cid:2)C0, X0 (cid:3)(cid:1) , (cid:3)(cid:1) , (6) where C0 is set of class tokens; CL of vectors cL consisting of vectors cL 1,r, . . . , cL 0,g, cL N,r, and CL 1,g, . . . , cL 0,r, cL is set of representative vectors for the real images, consisting is set of representative vectors for the generated images, N,g; is the highest replication level. Therefore, we can use another PDF (x) (x [0, 1]) to describe the predicted replication between two images by h(x) = CL CL , which expands to: h(x) = (cid:2)(cid:10)cL 0,r, cL 0,g (cid:11) , (cid:10)cL 1,r, cL 1,g where , denotes the cosine similarity. (cid:11) , . . . , (cid:10)cL N,r, cL N,g (7) (8) (cid:11)(cid:3) , For training, recalling the PDF g(x) derived from the level, we define the final loss using the Kullback-Leibler (KL) divergence: = DKL(gh) = (cid:90) 1 0 g(x) log (cid:19) (cid:18) g(x) h(x) dx, (9) which serves as measure of the disparity between two probability distributions. Additionally, in the Appendix (Section C), we demonstrate what the network captures during its learning phase. During testing, the normalized level between two images is denoted by ˆpl, satisfying h(x) h(ˆpl). As illustrated in Eqn. 8, h(x) in practice is discrete within the interval [0, 1]. Consequently, the resulting level is = argmax h(x), (10) and the normalized level is quantified as . Table 1: The performance of publicly available models and our PDF-Embedding on the D-Rep. For qualitative results, please refer to Section in the Appendix. Class Visionlanguage Models Selfsupervised Learning Models Supervised Pre-trained Models Current ICD Models Method SLIP [41] BLIP [42] ZeroVL [43] CLIP [32] GPT-4V [44] SimCLR [45] MAE [46] SimSiam [47] MoCov3 [48] DINOv2 [49] EfficientNet [50] Swin-B [51] ConvNeXt [52] DeiT-B [40] ResNet-50 [53] ASL [14] CNNCL [18] SSCD [15] EfNet [19] BoT [17]"
        },
        {
            "title": "5 Experiments",
            "content": "5.1 Training Details PCC (%) 31.8 34.8 36.3 36.8 47.3 7.2 20.7 33.5 35.7 39.0 24.0 32.5 33.8 35.3 37.5 5.6 19.1 29.1 30.5 35.6 RD (%) 49.7 41.6 36.5 35.8 38.7 49.4 67.6 45.4 40.3 32.9 59.3 38.4 36.0 41.7 34.5 78.1 51.7 62.3 62.8 53.8 We implement our PDF-Embedding using PyTorch [38] and distribute its training over 8 A100 GPUs. The ViT-B/16 [37] serves as the backbone and is pre-trained on the ImageNet dataset [39] using DeiT [40], unless specified otherwise. We resize images to resolution of 224 224 before training. batch size of 512 is used, and the total training epochs is 25 with cosine-decreasing learning rate. 5.2 Challenge from the ICDiff Task This section benchmarks popular public models on our D-Rep test dataset. As Table 3 shows, we conduct experiments extensively on vision-language models, self-supervised models, supervised pretrained models, and current ICD models. We employ these models as feature extractors and calculate the cosine similarity between pairs of image features (except for GPT-4V Turbo [44], see Section in the Appendix for the implementation of it). For the computation of PCC and RD, we adjust the granularity by scaling the computed cosine similarities by factor of . In the Appendix (Section E), we further present the concrete similarities predicted by these models and provide corresponding analysis. We observe that: (1) the large multimodal model GPT-4V Turbo [44] performs best in PCC, while the self-supervised model DINOv2 [49] excels in RD. This can be attributed to their pre-training on large, curated, and diverse dataset. Nevertheless, their performance remains somewhat limited, achieving only 47.3% in PCC and 32.9% in RD. This underscores that even the best publicly available models have yet to effectively address the ICDiff task. (2) Current ICD models, like SSCD [15], which are referenced in analysis papers [10, 24] discussing the replication issues of diffusion models, indeed show poor performance. For instance, SSCD [15] registers only 29.1% in PCC and 62.3% in RD. Even the more advanced model, BoT [17], only manages 35.6% in PCC and 53.8% in RD. These results underscore the need for specialized ICD method for diffusion models. Adopting our specialized ICD approach will make their subsequent analysis more accurate and convincing. (3) Beyond these models, we also observe that others underperform on the ICDiff task. This further emphasizes the necessity of training specialized ICDiff model. 5.3 The Effectiveness of PDF-Embedding This section demonstrates the effectiveness of our proposed PDF-Embedding by (1) contrasting it against protocol-driven methods and non-PDF choices on the D-Rep dataset, (2) comparing between different distributions, and (3) comparing with other models in generalization settings. 7 Table 2: Our method demonstrates performance superiority over others. Method Enlarging PCC Reducing RD Regression One-hot Label Label Smoothing Ours (Gaussian) Ours (Linear) Ours (Exp.) PCC (%) 54.4 15.1 40.3 37.6 35.0 53.7 54.0 56. RD (%) 40.1 29.9 28.1 43.3 36.1 24.0 24.6 25.6 Train (s/iter) 0.293 0.294 0.292 0.310 0.310 Infer (s/img) Match (s/pair) 2.02 10 1.02 109 2.07 103 6.97 109 2.07 103 6.97 109 Figure 5: The comparison of different PDFs: Gaussian (left), linear (middle), and exponential (right). is the amplitude in each PDF function (Eqn. 3 to Eqn. 5). (cid:12)sp Comparison against protocol-driven methods. Since we employ PCC and RD as the evaluation protocols, natural embedding learning would be directly using these protocols as the optimization objective, i.e., enlarging PCC and reducing RD. Moreover, we add another variant of reducing (cid:12) RD, i.e., reducing the absolute deviation (cid:12) sl (cid:12) in regression manner. The comparisons are summarized in Table 2, from which we draw three observations as below: (1) Training on D-Rep with the protocol-driven method achieves good results on their specified protocol but performs bad for the other. While Enlarging PCC attains commendable PCC, its RD of 40.1% indicates large deviation from the ground truth. Reducing RD or Reducing Deviation shows relatively good RD (28.1%); however, they exhibit small PCC values that indicate low linear consistency. (2) Our proposed PDF-Embedding surpasses these protocol-driven methods in both PCC and RD. Compared against Enlarging PCC, our method improves PCC by 1.6% and decreases RD by 16.1%. Besides, our method achieves +16.0% PCC and 4.1% RD compared against Reducing RD and Reducing Deviation. (3) The computational overhead introduced by our method is negligible. First, compared to other options, our method only increases the training time by 5.8%. Second, our method introduces minimal additional inference time. Third, while our method requires longer matching time, its magnitude is close to 109, which is negligible when compared to the inference times magnitude of 103. Further discussions on the matching time in real-world scenarios can be found in Section 5.4. Comparison against two non-PDF methods. In Table 2, we also show the experimental results of our method under two standard supervising signals, i.e., One-hot Label and Label Smoothing (ϵ = 0.5). In comparison, our PDF-Embedding using PDFs gains significant superiority, e.g., using exponential PDF is better than label smoothing by +21.3% PCC and 10.5% RD. This superiority validates our intuition that neighboring replication levels should be continuous and smooth. Comparison between different PDF implementations. We compare between three different PDF implementations for the proposed PDF-Embedding in Fig. 5. We observe that: (1) The exponential (convex) function benefits the PCC metric, whereas the Gaussian (concave) function favors the RD metric. The performance of the linear function, which lacks curvature, falls between that of the convex and concave functions. (2) Our method demonstrates robust performance across various distributions, reducing the challenge of selecting an optimal parameter. For example, when using the exponential function, the performance remains high when ranges from 0.6 to 1.8. (3) model 8 Table 3: The experiments for Generalizability to other datasets or diffusion models. The gray color indicates training and testing on the images generated by the same diffusion model. Class Method SD1.5 Visionlanguage Models Selfsupervised Learning Models Supervised Pre-trained Models Current ICD Models Models Trained on D-Rep Ours SLIP [41] BLIP [42] ZeroVL [43] CLIP [32] GPT-4V [44] SimCLR [45] MAE [46] SimSiam [47] MoCov3 [48] DINOv2 [49] EfficientNet [50] Swin-B [51] ConvNeXt [52] DeiT-B [40] ResNet-50 [53] ASL [14] CNNCL [18] SSCD [15] EfNet [19] BoT [17] Enlarging PCC Reducing RD Regression One-hot Label Label Smoothing Gaussian PDF Linear PDF Exponential PDF 0.685 0.703 0.578 0.646 0.661 0.633 0.489 0.572 0.585 0.766 0.116 0.334 0.380 0.386 0.362 0.183 0.201 0.116 0.133 0.216 0.598 0.795 0.750 0.630 0.712 0.787 0.822 0.831 Midjourney 0.680 0.674 0.581 0.665 0.655 0.640 0.488 0.611 0.526 0.529 0.185 0.387 0.429 0.478 0.436 0.231 0.311 0.181 0.265 0.345 0.510 0.736 0.694 0.376 0.568 0.754 0.758 0. DALLE 2 0.668 0.673 0.585 0.694 0.705 0.644 0.487 0.619 0.535 0.593 0.215 0.391 0.432 0.496 0.465 0.093 0.270 0.180 0.267 0.346 0.523 0.736 0.705 0.400 0.636 0.784 0.798 0.826 DeepFloyd IF 0.710 0.696 0.681 0.728 0.731 0.656 0.492 0.684 0.579 0.723 0.241 0.514 0.543 0.603 0.564 0.122 0.347 0.303 0.438 0.477 0.595 0.768 0.739 0.562 0.628 0.774 0.794 0.804 New Bing 0.688 0.696 0.589 0.695 0.732 0.649 0.487 0.620 0.541 0.652 0.171 0.409 0.433 0.528 0.450 0.048 0.279 0.166 0.249 0.338 0.506 0.729 0.704 0.500 0.680 0.774 0.782 0.802 SDXL GLIDE 0.718 0.717 0.677 0.735 0.747 0.651 0.489 0.645 0.554 0.734 0.210 0.430 0.488 0.525 0.522 0.049 0.358 0.239 0.340 0.401 0.554 0.768 0.721 0.548 0.676 0.780 0.794 0. 0.699 0.689 0.707 0.727 0.744 0.655 0.490 0.683 0.599 0.751 0.268 0.561 0.580 0.694 0.540 0.436 0.349 0.266 0.349 0.489 0.592 0.785 0.744 0.210 0.548 0.776 0.790 0.794 supervised by smooth PDF outperforms that supervised by steeper one (also see the corresponding distributions in Fig. 15 of the Appendix). That consists with our intuition again. Our model has good generalizability compared to all other methods. Because the collection process of the images from some diffusion models (see Appendix F) differs from the process used to build the test set of our D-Rep dataset, it is difficult to label 6 levels for them and the proposed PCC and RD are not suitable. In the Table 3, we consider quantitative evaluation protocol that measures the average similarity predicted by model for given image pairs, which are manually labeled with the highest level. When normalized to range of 0 to 1, larger value implies better predictions. This setting is practical because, in the real world, most peoples concerns focus on where replication indeed occurs. We manually confirm 100 such pairs for each diffusion model. We draw three conclusions: (1) Our PDF-Embedding is more generalizable compared to all zero-shot solutions, such as CLIP, GPT4-V, and DINOv2; (2) Our PDF-Embedding still surpasses all other plausible methods trained on the D-Rep dataset in the generalization setting; (3) Compared against testing on SD1.5 (same domain), for the proposed PDF-Embedding, there is no significant performance drop on the generalization setting. 5.4 Simulated Evaluation of Diffusion Models In this section, we simulate scenario using our trained PDF-Embedding to evaluate popular diffusion models. We select 6 famous diffusion models, of which three are commercial, and another three are open source (See Section in the Appendix for more details). We use the LAION-Aesthetics V2 6+ dataset [1] as the gallery and investigate whether popular diffusion models replicate it. When assessing the replication ratio of diffusion models, we consider image pairs rated at Level 4 and Level 5 to be replications. Figure 6: Left: Examples of diffusion-based replication fetched by our PDF-Embedding. The accompanying percentages indicate the replication ratio of each model. Right: Examples filtered by SSCD [15] in [10]. Compared to them, our results are more diverse: For example, the Groot generated by SDXL includes the whole body, whereas the original one features only the face; and the Moai statues created by DeepFloyd IF are positioned differently compared to the original image. Evaluation results. Visualizations of matched examples and the replication ratios are shown in Fig. 6 (Left). For more visualizations, please refer to the Appendix (Section G). We observe that the replication ratios of these diffusion models roughly range between 10% and 20%. The most aggressive model is Midjourney [3] with rate of 20.21%, whereas the conservative model is SDXL [6] at 10.91%. We also include an analysis of failure cases in the Appendix (Section H). Efficiency analysis. Efficiency is crucial in real-world scenarios. replication check might slow down the image generation speed of diffusion models. Our PDF-Embedding requires only 2.07103 seconds for inference and an additional 8.36 102 seconds for matching when comparing generated image against reference dataset of 12 million images using standard A100 GPU. This time overhead is negligible compared to the time required for generating (several seconds). Intuitive comparison with another ICD model. In [10], SSCD [15] is used as feature extractor to identify replication, as illustrated in Fig. 6 (Right). In comparison, our PDF-Embedding detects higher number of challenging cases (hard positives). Despite visual discrepancies between the generated and original images, replication has indeed occurred."
        },
        {
            "title": "6 Conclusion",
            "content": "This paper investigates particular and critical Image Copy Detection (ICD) problem: Image Copy Detection for Diffusion Models (ICDiff). We introduce the first ICDiff dataset and propose strong baseline called PDF-Embedding. distinctive feature of the D-Rep is its use of replication levels. The dataset annotates each replica into 6 different replication levels. The proposed PDF-Embedding first transforms the annotated level into probability density function (PDF) to smooth the probability. To learn from the PDFs, our PDF-Embedding adopts set of representative vectors instead of traditional representative vector. We hope this work serves as valuable resource for research on replication in diffusion models and encourages further research efforts in this area. Disclaimer. The model described herein may yield false positive or negative predictions. Consequently, the contents of this paper should not be construed as legal advice."
        },
        {
            "title": "References",
            "content": "[1] Christoph Schuhmann, Romain Beaumont, Richard Vencu, Cade Gordon, Ross Wightman, Mehdi Cherti, Theo Coombes, Aarush Katta, Clayton Mullis, Mitchell Wortsman, et al. Laion-5b: An open large-scale dataset for training next generation image-text models. Advances in Neural Information Processing Systems, 35:2527825294, 2022. [2] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Björn Ommer. High-resolution image synthesis with latent diffusion models, 2021. [3] Midjourney. Midjourney.com, 2022. Accessed: 2023-10-10. [4] The new bing, 2023. Accessed: October 10, 2023. [5] Aditya Ramesh, Prafulla Dhariwal, Alex Nichol, Casey Chu, and Mark Chen. Hierarchical text-conditional image generation with clip latents. arXiv preprint arXiv:2204.06125, 2022. [6] Dustin Podell, Zion English, Kyle Lacey, Andreas Blattmann, Tim Dockhorn, Jonas Müller, Joe Penna, and Robin Rombach. Sdxl: Improving latent diffusion models for high-resolution image synthesis. arXiv preprint arXiv:2307.01952, 2023. [7] Deep-floyd. If, 2023. Accessed: October 10, 2023. [8] Alexander Quinn Nichol, Prafulla Dhariwal, Aditya Ramesh, Pranav Shyam, Pamela Mishkin, Bob Mcgrew, Ilya Sutskever, and Mark Chen. Glide: Towards photorealistic image generation and editing with text-guided diffusion models. In International Conference on Machine Learning, pages 1678416804. PMLR, 2022. [9] Katherine Lee, Feder Cooper, and James Grimmelmann. Talkinbout ai generation: Copyright and the generative-ai supply chain (the short version). In Proceedings of the Symposium on Computer Science and Law, pages 4863, 2024. [10] Gowthami Somepalli, Vasu Singla, Micah Goldblum, Jonas Geiping, and Tom Goldstein. Diffusion art or digital forgery? investigating data replication in diffusion models. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 60486058, 2023. [11] Yuxin Wen, Yuchen Liu, Chen Chen, and Lingjuan Lyu. Detecting, explaining, and mitigating memorization in diffusion models. In The Twelfth International Conference on Learning Representations, 2024. [12] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Björn Ommer. High-resolution image synthesis with latent diffusion models. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 1068410695, 2022. [13] Zijie J. Wang, Evan Montoya, David Munechika, Haoyang Yang, Benjamin Hoover, and Duen Horng Chau. DiffusionDB: large-scale prompt gallery dataset for text-to-image generative models. In Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 893911, Toronto, Canada, July 2023. Association for Computational Linguistics. [14] Wenhao Wang, Yifan Sun, and Yi Yang. benchmark and asymmetrical-similarity learning for practical image copy detection. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 37, pages 26722679, 2023. [15] Ed Pizzi, Sreya Dutta Roy, Sugosh Nagavara Ravindra, Priya Goyal, and Matthijs Douze. self-supervised descriptor for image copy detection. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 1453214542, 2022. [16] Aaron van den Oord, Yazhe Li, and Oriol Vinyals. Representation learning with contrastive predictive coding. arXiv preprint arXiv:1807.03748, 2018. [17] Wenhao Wang, Weipu Zhang, Yifan Sun, and Yi Yang. Bag of tricks and strong baseline for image copy detection. arXiv preprint arXiv:2111.08004, 2021. [18] Shuhei Yokoo. Contrastive learning with large memory bank and negative embedding subtraction for accurate copy detection. arXiv preprint arXiv:2112.04323, 2021. [19] Sergio Manuel Papadakis and Sanjay Addicam. Producing augmentation-invariant embeddings from real-life imagery. arXiv preprint arXiv:2112.03415, 2021. [20] Wenhao Wang, Yifan Sun, Zhentao Tan, and Yi Yang. Anypattern: Towards in-context image copy detection. In arXiv preprint arXiv:2404.13788, 2024. [21] Wenhao Wang, Yifan Sun, and Yi Yang. Pattern-expandable image copy detection. In International Journal of Computer Vision, 2024. [22] Nicolas Carlini, Jamie Hayes, Milad Nasr, Matthew Jagielski, Vikash Sehwag, Florian Tramer, Borja Balle, Daphne Ippolito, and Eric Wallace. Extracting training data from diffusion models. In 32nd USENIX Security Symposium (USENIX Security 23), pages 52535270, 2023. 11 [23] Eric Zhang, Kai Wang, Xingqian Xu, Zhangyang Wang, and Humphrey Shi. Forget-me-not: Learning to forget in text-to-image diffusion models. arXiv preprint arXiv:2303.17591, 2023. [24] Gowthami Somepalli, Vasu Singla, Micah Goldblum, Jonas Geiping, and Tom Goldstein. Understanding and mitigating copying in diffusion models. Advances in Neural Information Processing Systems, 2023. [25] Nikhil Vyas, Sham Kakade, and Boaz Barak. Provable copyright protection for generative models. 2023. [26] Anonymous. Copyright plug-in market for the text-to-image copyright protection. In Submitted to The Twelfth International Conference on Learning Representations, 2023. under review. [27] Yunqing Zhao, Tianyu Pang, Chao Du, Xiao Yang, Ngai-Man Cheung, and Min Lin. recipe for watermarking diffusion models. arXiv preprint arXiv:2303.10137, 2023. [28] Yingqian Cui, Jie Ren, Yuping Lin, Han Xu, Pengfei He, Yue Xing, Wenqi Fan, Hui Liu, and Jiliang Tang. Ft-shield: watermark against unauthorized fine-tuning in text-to-image diffusion models. arXiv preprint arXiv:2310.02401, 2023. [29] Anthony Rhodes, Ram Bhagat, Umur Aybars Ciftci, and Ilke Demir. My art my choice: Adversarial protection against unruly ai. arXiv preprint arXiv:2309.03198, 2023. [30] Yingqian Cui, Jie Ren, Han Xu, Pengfei He, Hui Liu, Lichao Sun, and Jiliang Tang. Diffusionshield: watermark for copyright protection against generative diffusion models. arXiv preprint arXiv:2306.04642, 2023. [31] Ryan Webster, Julien Rabin, Loic Simon, and Frederic Jurie. On the de-duplication of laion-2b. arXiv preprint arXiv:2303.12733, 2023. [32] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, et al. Learning transferable visual models from natural language supervision. In International conference on machine learning, pages 87488763. PMLR, 2021. [33] Matthijs Douze, Hervé Jégou, Harsimrat Sandhawalia, Laurent Amsaleg, and Cordelia Schmid. Evaluation of gist descriptors for web-scale image search. In Proceedings of the ACM international conference on image and video retrieval, pages 18, 2009. [34] Matthijs Douze, Giorgos Tolias, Ed Pizzi, Zoë Papakipos, Lowik Chanussot, Filip Radenovic, Tomas Jenicek, Maxim Maximov, Laura Leal-Taixé, Ismail Elezi, et al. The 2021 image similarity dataset and challenge. arXiv preprint arXiv:2106.09672, 2021. [35] Zoë Papakipos, Giorgos Tolias, Tomas Jenicek, Ed Pizzi, Shuhei Yokoo, Wenhao Wang, Yifan Sun, Weipu Zhang, Yi Yang, Sanjay Addicam, et al. Results and findings of the 2021 image similarity challenge. In NeurIPS 2021 Competitions and Demonstrations Track, pages 112. PMLR, 2022. [36] Nils Reimers and Iryna Gurevych. Sentence-bert: Sentence embeddings using siamese bert-networks. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 39823992, 2019. [37] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale. In International Conference on Learning Representations, 2020. [38] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-performance deep learning library. Advances in neural information processing systems, 32, 2019. [39] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: large-scale hierarchical image database. In 2009 IEEE conference on computer vision and pattern recognition, pages 248255. Ieee, 2009. [40] Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, and Hervé Jégou. Training data-efficient image transformers & distillation through attention. In International conference on machine learning, pages 1034710357. PMLR, 2021. [41] Norman Mu, Alexander Kirillov, David Wagner, and Saining Xie. Slip: Self-supervision meets languageimage pre-training. In European Conference on Computer Vision, pages 529544. Springer, 2022. [42] Junnan Li, Dongxu Li, Caiming Xiong, and Steven Hoi. Blip: Bootstrapping language-image pre-training In International Conference on Machine for unified vision-language understanding and generation. Learning, pages 1288812900. PMLR, 2022. [43] Quan Cui, Boyan Zhou, Yu Guo, Weidong Yin, Hao Wu, Osamu Yoshie, and Yubo Chen. Contrastive vision-language pre-training with limited resources. In European Conference on Computer Vision, pages 236253. Springer, 2022. 12 [44] OpenAI. Gpt-4 technical report, 2023. [45] Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey Hinton. simple framework for contrastive learning of visual representations. In International conference on machine learning, pages 15971607. PMLR, 2020. [46] Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li, Piotr Dollár, and Ross Girshick. Masked autoencoders are scalable vision learners. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 1600016009, 2022. [47] Xinlei Chen and Kaiming He. Exploring simple siamese representation learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 1575015758, 2021. [48] Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick. Momentum contrast for unsupervised visual representation learning. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 97299738, 2020. [49] Maxime Oquab, Timothée Darcet, Theo Moutakanni, Huy V. Vo, Marc Szafraniec, Vasil Khalidov, Pierre Fernandez, Daniel Haziza, Francisco Massa, Alaaeldin El-Nouby, Russell Howes, Po-Yao Huang, Hu Xu, Vasu Sharma, Shang-Wen Li, Wojciech Galuba, Mike Rabbat, Mido Assran, Nicolas Ballas, Gabriel Synnaeve, Ishan Misra, Herve Jegou, Julien Mairal, Patrick Labatut, Armand Joulin, and Piotr Bojanowski. Dinov2: Learning robust visual features without supervision, 2023. [50] Mingxing Tan and Quoc Le. Efficientnet: Rethinking model scaling for convolutional neural networks. In International conference on machine learning, pages 61056114. PMLR, 2019. [51] Ze Liu, Yutong Lin, Yue Cao, Han Hu, Yixuan Wei, Zheng Zhang, Stephen Lin, and Baining Guo. Swin transformer: Hierarchical vision transformer using shifted windows. In Proceedings of the IEEE/CVF international conference on computer vision, pages 1001210022, 2021. [52] Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, and Saining Xie. convnet for the 2020s. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 1197611986, 2022. [53] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 770778, 2016. More examples of the D-Rep Dataset We show more example image pairs for each level in Fig. 9 to Fig. 14."
        },
        {
            "title": "B The Instantiations of PDFs",
            "content": "This section presents examples of PDFs derived from replication levels, focusing on three primary functions: Gaussian, linear, and exponential for our calculations, visualization, and analysis. Within the area close to the normalized level pl, denoted as δ, the Gaussian function curves downwards making it concave, the linear function is straight with no curvature, and the exponential function curves upwards making it convex. These characteristics indicate the rate at which they deviate from their peak value: the Gaussian function changes slowly in the δ area, the linear function changes at steady rate, and the exponential function changes rapidly in the δ area. fast rate of change suggests the network learns from sharp distribution, while slow rate implies learning from smooth distribution. Gaussian function. Its general formulation is g(x A, µ, σ) = exp (cid:18) (x µ)2 2 σ (cid:19) , (11) where > 0 is the amplitude (the height of the peak), µ [0, 1] is the mean or the center, and σ > 0 is the standard deviation. To satisfy the requirements of PDF in Section 4.1, the following must hold: (cid:90) 1 (cid:18) exp (cid:18) exp (cid:18) (cid:19) 0 (cid:18) (cid:19)(cid:19) (x µ)2 2 σ2 (x µ)2 2 σ2 (cid:19) dx = 1, 0, (x µ)2 2 σ2 (cid:18) exp (pl µ)2 2 σ2 (cid:19) . exp From Eqn. 12, we have: In practice, with {0, 0.2, 0.4, 0.6, 0.8, 1} being discrete, the equations become: µ = pl. (cid:88) x{0,0.2,0.4,0.6,0.8,1} (cid:18) (cid:18) exp (cid:18) exp (cid:19)(cid:19) (x pl)2 2 σ2 = 1, (cid:19) (x pl)2 2 σ2 0. (12) (13) (14) Given specific normalized level pl and varying A, g(x A, µ, σ) values are computed for different using numerical approaches. The resulting distributions are visualized in Fig. 15 (top). Finally we prove that g(x A, µ, σ) is concave for in the interval [µ σ, µ + σ]. This means that in the interested region δ (near the normalized level pl), its rate of change is slow and increases as diverges from µ. Proof: Given the function: g(x A, µ, σ) = exp (cid:18) (x µ)2 2σ2 (cid:19) , we find the first derivative of with respect to : g(x) = dx (cid:20) (cid:18) exp (x µ)2 2σ2 (cid:19)(cid:21) . Using the chain rule, we have: g(x) = exp (cid:18) (x µ)2 2σ2 (cid:19) dx (cid:20) (x µ)2 2σ2 (cid:21) . 14 (15) (16) (17) This gives: g(x) = exp (cid:18) (x µ)2 2σ2 (cid:19) (x µ) σ2 . Next, to find the second derivative, differentiate g(x) with respect to : (cid:20) (cid:18) (cid:19) g(x) = exp dx (x µ)2 2σ2 (x µ) σ2 (cid:21) . Using product rule and simplifying, the result would be: g(x) = exp (cid:18) (x µ)2 2σ2 (cid:19) (cid:20) (x µ)2 σ4 (cid:21) . 1 σ2 When g(x) < 0, we have: [µ σ, µ + σ] . (18) (19) (20) (21) That proves g(x A, µ, σ) is concave in the δ area, and thus its rate of change is slow and increases as diverges from µ. Linear function. Its general formulation is g(x A, µ, β) = β µ, (22) where > 0 denotes the maximum value of the function, µ [0, 1] is the point where the function is symmetric, and β > 0 determines the functions slope. To satisfy the requirements of PDF in Section 4.1, the following must hold: (cid:90) 1 (A β µ) dx = 1, β µ 0, β µ β pl µ. From Eqn. 23, we have: µ = pl. In practice, with {0, 0.2, 0.4, 0.6, 0.8, 1} being discrete, the equations become: (cid:88) (A β pl) = 1, x{0,0.2,0.4,0.6,0.8,1} β pl 0. (23) (24) (25) Given specific normalized level pl and varying A, g(x A, µ, β) values are computed for different x. The resulting distributions are visualized in Fig. 15 (middle). Finally, we prove that g(x A, µ, β) has no curvature, and thus its rate of change is consistent regardless of the value of x. Proof: Given the function: (26) we will differentiate this function based on the absolute value, which will result in two cases for the derivatives based on the sign of (x µ). g(x A, µ, β) = β µ, Case 1: > µ: In this case, µ = µ. So, g(x A, µ, β) = β (x µ). First derivative g(x) : Second derivative g(x) : g(x) = dx (A β (x µ)) = β. g(x) = dx (β) = 0. Case 2: < µ: In this case, µ = µ x. So, g(x A, µ, β) = β (µ x). (27) (28) 15 First derivative g(x) : Second derivative g(x) : g(x) = dx (A β (µ x)) = β. g(x) = dx (β) = 0. (29) (30) When the second derivative is constantly 0, it means the function has no curvature and its rate of change is constant at every point. Exponential function. Its general formulation is (31) where > 0 denotes the intensity of the function, µ [0, 1] is the point where the function is symmetric, and λ > 0 determines the spread or width of the function. To satisfy the requirements of PDF in Section 4.1, the following must hold: g(x A, µ, λ) = λ exp(λ µ), (cid:90) 1 0 (A λ exp(λ µ)) dx = 1, λ exp(λ µ) 0, λ exp(λ µ) λ exp(λ pl µ). From Eqn. 32, we have: µ = pl. In practice, with {0, 0.2, 0.4, 0.6, 0.8, 1} being discrete, the equations become: (cid:88) (A λ exp(λ pl)) = 1, x{0,0.2,0.4,0.6,0.8,1} (32) (33) (34) λ exp(λ pl) 0. Given specific normalized level pl and varying A, g(x A, µ, λ) values are computed for different using numerical approaches. The resulting distributions are visualized in Fig. 15 (bottom). Finally, we prove that g(x A, µ, λ) is convex: its rate of change is rapid in the δ area and decreases as moves diverges from µ. Proof: Given the function: g(x A, µ, λ) = λ exp(λ µ), (35) we find the first and second derivatives with respect to x. This function involves an absolute value, which will create two cases for the derivatives based on the sign of (x µ). Case 1: > µ: In this case, µ = µ. So, First derivative g(x) : Second derivative g(x) : g(x A, µ, λ) = λ exp(λ (x µ)). g(x) = λ dx exp(λ (x µ)), g(x) = λ2 exp(λ (x µ)). g(x) = λ2 dx g(x) = λ3 exp(λ (x µ)) > 0. exp(λ (x µ)), Case 2: < µ: In this case, µ = µ x. So, g(x A, µ, λ) = λ exp(λ (µ x)). 16 (36) (37) (38) (39) Figure 7: The cosine similarity heatmap of the learned vectors. First derivative g(x) : Second derivative g(x) : g(x) = λ dx g(x) = λ2 exp(λ (µ x)). exp(λ (µ x)), g(x) = λ2 dx exp(λ (µ x)), g(x) = λ3 exp(λ (µ x)) > 0. (40) (41) When the second derivative is bigger than 0, it means the function is convex: its rate of change is rapid in the δ area and decreases as moves diverge from µ."
        },
        {
            "title": "C The Visualization of What the Network Learns",
            "content": "To gain insights into what the network has learned, we offer two visualization methods. First, we (cid:3) (refer to Fig. 7). Second, present the cosine similarity heatmap of the learned C0 = (cid:2)c0 we show the distribution changes of image pairs throughout the training process. The final epochs distribution can be seen in Fig. 16, while the entire training process is depicted in the attached videos. 1, . . . , c0 0, c0 From the heatmap, we conclude that: (1) The cosine similarity between different vectors is very low. This demonstrates that the learned vectors are linearly independent. (2) Neighboring vectors exhibit relatively high cosine similarity. This is consistent with the expectation, as they correspond to similar replication levels. From the observed changes in the distributions, we note that: (1) While the distribution initially starts as uniform distribution or peaks at an incorrect level, the network, after training, eventually produces an appropriate and accurate distribution for each image pair. (2) For instance, when supervised by the Gaussian distribution, the network, as expected, produces final distribution that, though not perfect, closely imitates this. Implement GPT-4V Turbo on our D-Rep Test Dataset This section details implementing GPT-4V Turbo on our D-Rep test dataset. GPT-4V Turbo, which has been online since November 6, 2023, is the latest and most powerful large multimodal model developed by OpenAI. Because it cannot be regarded as feature extractor, we directly prompt it with two images and one instruction: 17 Give you one pair of images; please give the similarity of the second one to the first one. Diffusion Models generate the second one, while the first one is the original one. Please only reply with one similarity from 0 1; no other words are needed. Please understand the images by yourself. Given these prompts, GPT-4V Turbo returns similarity ranging from 0 to 1. Using the official API, we ask the GPT-4V Turbo to determine all similarities between the image pairs in the D-Rep test dataset. Note that the computational cost of employing GPT-4V Turbo in practical applications is prohibitively high. Specifically, to compare an image against an image database containing one million images, the API must be called one million times, incurring cost of approximately $7, 800."
        },
        {
            "title": "E The Similarities Predicted by Other Models",
            "content": "In Fig. 17, we show the similarities predicted by six selected models (two vision-language models, two current ICD models, and two others). We conclude that: (1) CLIP [32] tends to assign higher similarities, which deteriorates its performance on image pairs with low levels, leading to many false positive predictions; (2) GPT-4V Turbo [44] and DINOv2 [49] can produce both high and low predictions, but its performance does not match ours. (3) The prediction ranges of ResNet-50 [53] are relatively narrow, indicating its inability to distinguish image pairs with varying levels effectively. (4) Current ICD models, including SSCD [15] and BoT [17], consistently produce low predictions. This is because they are trained for invariance to image transformations (resulting in high similarities for pirated content produced by transformations) and cannot handle replication generated by diffusion models."
        },
        {
            "title": "F The Details of Six Diffusion Models",
            "content": "This section provides details on the evaluation sources for three commercial and three open-source diffusion models. Midjourney [3] was developed by the Midjourney AI company. We utilized dataset scraped by Succinctly AI under the cc0-1.0 license. This dataset comprises 249, 734 images generated by real users from public Discord server. New Bing [4], also known as Bing Image Creator, represents Microsofts latest text-to-image technique. We utilized the repository under the Unlicense to generate 216, 957 images. These images were produced using randomly selected prompts from DiffusionDB [13]. DALLE2 [5] is creation of OpenAI. We downloaded all generated images directly from this website, resulting in dataset containing 50, 904 images. We have obtained permission from the websites owners to use the images for research purposes. We downloaded and deployed three open-source diffusion models, including SDXL [6], DeepFloyd IF [7], and GLIDE [8]. These models were set up on local server equipped with 8 A100 GPUs. Distributing on them, we generated 1, 819, 792 images with prompts from DiffusionDB [13]."
        },
        {
            "title": "G More Replication Examples",
            "content": "We provide more replication examples by diffusion models in Fig. 18 to Fig. 23."
        },
        {
            "title": "H Failure Cases",
            "content": "As shown in Fig. 8, we identify two primary failure cases. The first type of failure occurs when the generated images replicate only common elements without constituting replicated content. For instance, elements like grass (Midjourney), helmets (New Bing), and buildings (DALLE 2) appear frequently but do not indicate actual replication of content. The second type of failure arises when two images share high-level semantic similarity despite having no replicated content. An example can be seen in the image pairs where themes, styles, or concepts are similar, such as the presence of iconic structures (SDXL and GLIDE) or stylized portraits (DeepFloyd IF), even if the specific 18 Figure 8: The failure cases of our detection method. We show one example for each diffusion model. content is not replicated. Understanding these failure modes is crucial for improving the accuracy and robustness of our detection methods in the future. 19 Figure 9: The example image pairs with level 5. 20 Figure 10: The example image pairs with level 4. 21 Figure 11: The example image pairs with level 3. 22 Figure 12: The example image pairs with level 2. 23 Figure 13: The example image pairs with level 1. 24 Figure 14: The example image pairs with level 0. 25 Figure 15: The distributions converted from replication levels. We use Gaussian, linear, and exponential functions as the representative demonstrations. 26 Figure 16: The learned distributions of different image pairs. Please see the attached videos for the distribution changes in the whole training process. 27 Method CLIP GPT-4V DINOv2 ResNet-50 SSCD BoT Label Method CLIP GPT-4V DINOv2 ResNet-50 SSCD BoT Label Method CLIP GPT-4V DINOv2 ResNet-50 SSCD BoT Label Method CLIP GPT-4V DINOv2 ResNet-50 SSCD BoT Label Method CLIP GPT-4V DINOv2 ResNet-50 SSCD BoT Label Method CLIP GPT-4V DINOv2 ResNet-50 SSCD BoT Label Sim. 0.63 0.40 0.35 0.54 0.04 0.05 1.00 Sim. 0.49 0.70 0.40 0.67 0.11 0.24 0.80 Sim. 0.70 0.70 0.61 0.60 0.08 0.25 0. Sim. 0.57 0.20 0.28 0.67 0.01 0.21 0.40 Sim. 0.39 0.00 0.07 0.59 0.06 0.15 0.20 Sim. 0.38 0.00 0.06 0.61 0.05 0.12 0.00 Sim. 0.68 0.60 0.65 0.61 0.16 0.36 1.00 Sim. 0.57 0.20 0.60 0.56 0.13 0.36 0.80 Sim. 0.71 0.20 0.59 0.60 0.02 0.03 0. Sim. 0.57 0.30 0.58 0.60 0.14 0.21 0.40 Sim. 0.55 0.00 0.17 0.59 0.02 0.01 0.20 Sim. 0.56 0.00 0.02 0.62 0.05 0.08 0.00 Sim. 0.85 0.30 0.69 0.53 0.08 0.21 1.00 Sim. 0.65 0.00 0.21 0.65 0.00 0.11 0.80 Sim. 0.82 0.30 0.40 0.57 0.08 0.22 0. Sim. 0.62 0.10 0.23 0.63 0.15 0.25 0.40 Sim. 0.56 0.00 0.11 0.59 0.05 0.05 0.20 Sim. 0.57 0.00 0.09 0.53 0.04 0.03 0.00 Sim. 0.87 0.90 0.35 0.58 0.10 0.06 1.00 Sim. 0.68 0.30 0.44 0.56 0.12 0.25 0.80 Sim. 0.93 0.80 0.76 0.62 0.31 0.35 0. Sim. 0.77 0.30 0.55 0.66 0.10 0.16 0.40 Sim. 0.69 0.00 0.11 0.56 0.12 0.05 0.20 Sim. 0.78 0.10 0.38 0.63 0.23 0.43 0.00 Figure 17: The similarities (or normalized levels) predicted by existing models. 28 Figure 18: The replication examples generated by Midjourney [3]. 29 Figure 19: The replication examples generated by New Bing [4]. 30 Figure 20: The replication examples generated by DALLE2 [5]. 31 Figure 21: The replication examples generated by SDXL [6]. 32 Figure 22: The replication examples generated by DeepFloyd IF [7]. 33 Figure 23: The replication examples generated by GLIDE [8]."
        }
    ],
    "affiliations": [
        "Baidu Inc.",
        "University of Technology Sydney",
        "Zhejiang University"
    ]
}