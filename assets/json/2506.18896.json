{
    "paper_title": "ReasonFlux-PRM: Trajectory-Aware PRMs for Long Chain-of-Thought Reasoning in LLMs",
    "authors": [
        "Jiaru Zou",
        "Ling Yang",
        "Jingwen Gu",
        "Jiahao Qiu",
        "Ke Shen",
        "Jingrui He",
        "Mengdi Wang"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Process Reward Models (PRMs) have recently emerged as a powerful framework for supervising intermediate reasoning steps in large language models (LLMs). Previous PRMs are primarily trained on model final output responses and struggle to evaluate intermediate thinking trajectories robustly, especially in the emerging setting of trajectory-response outputs generated by frontier reasoning models like Deepseek-R1. In this work, we introduce ReasonFlux-PRM, a novel trajectory-aware PRM explicitly designed to evaluate the trajectory-response type of reasoning traces. ReasonFlux-PRM incorporates both step-level and trajectory-level supervision, enabling fine-grained reward assignment aligned with structured chain-of-thought data. We adapt ReasonFlux-PRM to support reward supervision under both offline and online settings, including (i) selecting high-quality model distillation data for downstream supervised fine-tuning of smaller models, (ii) providing dense process-level rewards for policy optimization during reinforcement learning, and (iii) enabling reward-guided Best-of-N test-time scaling. Empirical results on challenging downstream benchmarks such as AIME, MATH500, and GPQA-Diamond demonstrate that ReasonFlux-PRM-7B selects higher quality data than strong PRMs (e.g., Qwen2.5-Math-PRM-72B) and human-curated baselines. Furthermore, our derived ReasonFlux-PRM-7B yields consistent performance improvements, achieving average gains of 12.1% in supervised fine-tuning, 4.5% in reinforcement learning, and 6.3% in test-time scaling. We also release our efficient ReasonFlux-PRM-1.5B for resource-constrained applications and edge deployment. Projects: https://github.com/Gen-Verse/ReasonFlux"
        },
        {
            "title": "Start",
            "content": "ReasonFlux-PRM: Trajectory-Aware PRMs for Long Chain-of-Thought Reasoning in LLMs Jiaru Zou1, Ling Yang2,4, Jingwen Gu3, Jiahao Qiu2, Ke Shen4, Jingrui He1, Mengdi Wang2 1UIUC 2Princeton University 3Cornell University 4ByteDance Seed Code: ReasonFlux-PRM-Code, Models: ReasonFlux-PRM-1.5B/7B Equal Contribution, Corresponding authors"
        },
        {
            "title": "Abstract",
            "content": "Process Reward Models (PRMs) have recently emerged as powerful framework for supervising intermediate reasoning steps in large language models (LLMs). Previous PRMs are primarily trained on model final output responses and struggle to evaluate intermediate thinking trajectories robustly, especially in the emerging setting of trajectoryresponse outputs generated by frontier reasoning models like Deepseek-R1. In this work, we introduce ReasonFlux-PRM, novel trajectoryaware PRM explicitly designed to evaluate the trajectory-response type of reasoning traces. ReasonFlux-PRM incorporates both step-level and trajectory-level supervision, enabling finegrained reward assignment aligned with structured chain-of-thought data. We adapt ReasonFluxPRM to support reward supervision under both offline and online settings, including (i) selecting high-quality model distillation data for downstream supervised fine-tuning of smaller models, (ii) providing dense process-level rewards for policy optimization during reinforcement learning, and (iii) enabling reward-guided Best-of-N test-time scaling. Empirical results on challenging downstream benchmarks such as AIME, MATH500, and GPQA-Diamond demonstrate that ReasonFlux-PRM7B selects higher quality data than strong PRMs (e.g., Qwen2.5-Math-PRM-72B) and humancurated baselines. Furthermore, our derived ReasonFlux-PRM-7B yields consistent performance improvements, achieving average gains of 12.1% in supervised fine-tuning, 4.5% in reinforcement learning, and 6.3% in test-time scaling. We also release our efficient ReasonFlux-PRM-1.5B for resource-constrained applications and edge deployment. Correspondence: Ling Yang at yangling0818@163.com, Mengdi Wang at mengdiw@princeton.edu 5 2 0 2 3 2 ] . [ 1 6 9 8 8 1 . 6 0 5 2 : r Figure 1 Overview of ReasonFlux-PRM. ReasonFlux-PRM is designed to provide general-purpose reward supervision across multiple application scenarios. Left: Offline selection of high-quality distilled trajectoryresponse data to enhance downstream supervised fine-tuning of smaller models. Middle: Online reward modeling integrated into GRPO-based policy optimization. Right: Reward-guided Best-of-N test-time scaling to improve inference-time performance. 1 Figure 2 Illustration of the Trajectory-Response Data generated by Deepseek-R1. Existing PRMs can assign appropriate scores to final responses but often struggle to evaluate intermediate reasoning trajectories accurately."
        },
        {
            "title": "Introduction",
            "content": "Process Reward Models [13] have recently emerged as powerful framework for providing process-level supervision in large language models (LLMs) reasoning process, particularly for complex domains such as mathematical problem solving [1, 4, 5]. Given question and the corresponding models final response, PRMs verify the reasoning step-by-step and assign fine-grained rewards to each step of the response. Prior studies have leveraged PRMs in both post-training stages [6, 7], including providing dense rewards for online reinforcement learning (RL) [8], and reward-guided inference-time scaling [9, 10]. However, existing PRMs are primarily trained and applied to model-generated final responses, typically presented in an explicit and organized stey-by-step chain-of-thought (CoT) format. Concurrently, with recent advancements in frontier reasoning models such as OpenAI-o1 [11] and Deepseek-R1 [12], these models have increasingly adopted trajectory-response format of output: lengthy, comprehensive, and less organized intermediate thinking trajectory, followed by concise, step-by-step final response conditioned on the prior thinking (as illustrated in Figure 2). Such trajectoryresponse pairs have been widely distilled and acquired from large reasoning models to support downstream training of smaller models, enabling them to emulate the reasoning capabilities of larger models to first think then produce coherent, extended CoT rationales [1315]. The increasing utilization of trajectoryresponse data raises an important question: Can PRMs provide supervision not only to the final responses of large reasoning models, but also to their intermediate thinking trajectories? Addressing this question first presents challenge of how to assign informative and correct rewards to the model intermediate thinking trajectories. Unlike final responses, these trajectories are typically treated as silver-standard data [16], automatically generated by large reasoning models without rigorous quality control or standardized verification criteria, making their evaluation inherently noisy and less reliable. To address this, we first revisit several state-of-the-art PRMs and evaluate their performance on trajectoryresponse pairs. Our analysis reveals that existing PRMs struggle to robustly supervise model thinking trajectories and can degrade downstream training on such data. We further find that this degradation stems primarily from two key issues: an structural and formatting mismatch between intermediate thinking trajectories and final responses, and the lack of trajectoryresponse data with assigned rewards during PRMs training. 2 Motivated by these observations, we propose new trajectory-aware PRM, namely ReasonFlux-PRM, which incorporates both step-level and trajectory-level supervision to better align the models middle thinking trajectories with their final responses. ReasonFlux-PRM is trained on 10k curated dataset of high-quality trajectoryresponse pairs covering math and science reasoning. Unlike existing PRMs, ReasonFlux-PRM is explicitly tailored to intermediate thinking processes by providing fine-grained rewards as supervision signals for each step within the thinking trajectory. We further adapt ReasonFlux-PRM for more general reward modeling scenarios, as illustrated in Figure 1. In offline settings, ReasonFlux-PRM assigns scores to filter high-quality trajectoryresponse pairs, facilitating effective training data curation for downstream supervised fine-tuning of smaller models. In online settings, ReasonFlux-PRM is integrated into reward modeling process to provide fine-grained supervision signals during policy optimization, such as GRPO [17]. Moreover, ReasonFlux-PRM facilitates test-time scaling by evaluating multiple generated responses and selecting the most promising one via reward-guided Best-of-N strategy. In summary, our main contributions are: In-Depth Trajectory-Response Data Analysis in Long-CoT Reasoning. We identify, formulate, and analyze the problem of adapting several existing PRMs to supervise both models intermediate reasoning trajectories and their final responses, motivated by the increasing prevalence of trajectoryresponse distillation data in downstream post-training and test-time scaling. Trajectory-aware Reward Modeling for Data Selection, RL and Test-Time Scaling. We introduce ReasonFlux-PRM, trajectory-aware process reward model that incorporates both step-level and trajectory-level supervision, enabling fine-grained reward assignment for model thinking trajectories. ReasonFlux-PRM can be integrated into both offline and online workflows for more generalized purposes, including offline selection of high-quality training data, online policy optimization in RL training, and test-time scaling. Extensive Downstream Evaluations. Across extensive evaluations on challenging reasoning benchmarks, ReasonFlux-PRM demonstrates superior data selection quality at smaller model scales, with ReasonFluxPRM-7B outperforming strong baselines such as Qwen2.5-Math-PRM-72B [2] and datasets curated by human experts. On tasks such as AIME [18, 19], MATH500 [20], and GPQA-Diamond [21], ReasonFluxPRM-7B achieves notable average accuracy improvement of 12.1% during supervised fine-tuning, 4.5% during reinforcement learning, and 6.3% during inference test-time scaling."
        },
        {
            "title": "2 Preliminaries",
            "content": "Trajectory-Response Data. Let foracle() denote an oracle model, such as Deepseek-R1, capable of producing structured reasoning traces. Given complex input prompt x, the oracle generates sequence of intermediate thinking steps followed by final response. We represent each instance of such data as tuple (s, a), where = (s1, s2, . . . , sT ) denotes thinking trajectory consisting of intermediate steps, and = (a1, a2, . . . , aT ) denotes the final response, which can also be structured as chain-of-thought trace with formatted and organized steps. For large reasoning models, we assume that both and consist of reasoning steps. This structural alignment reflects the modeling assumption that the final output trace is generated in step-by-step manner, strictly conditioned on the preceding intermediate reasoning steps s. Both the thinking trajectory and final response are generated auto-regressively by the oracle model, i.e., st foracle(x, s<t), at foracle(x, s, a<t), (1) where s<t = (s1, . . . , st1) and a<t = (a1, . . . , at1) denote the reasoning and answer histories up to step t, respectively. In the trajectory-response outputs distillation setting, the full supervision target instance can be constructed as the concatenation of thinking trajectories and the final response, i.e., = a. Process Reward Modeling. Given trajectory-answer pair (s, a), where both = (s1, . . . , sT ) and = (a1, . . . , aT ) are structured as reasoning traces, the goal of process reward model is to evaluate each intermediate reasoning step st with respect to its utility in achieving correct and coherent final response. We first define reference reward function Rref that provides step-level supervision: rt = Rref(st x, s<t, a), (2) 3 Figure 3 Score distributions rewarded by Qwen2.5-Math-PRM-72B over 1,000 trajectoryresponse pairs distilled from Deepseek-R1 and the Gemini Flash Thinking API. Left: Distribution of scores computed over thinking trajectories. Right: Distribution of scores based on final responses. where Rref() scores the t-th step conditioned on the input x, the prior thinking trajectory steps, and the full final response a. The total reward for the trajectory is then computed by aggregating the step-by-step scores: Rtotal = A(r1, r2, . . . , rT ), (3) where A() denotes an aggregation function such as Mean and Sum. The training objective for PRMs is to learn scoring function Rϕ(), parameterized by ϕ, that approximates the reference reward for each step. This is formulated as minimizing the discrepancy between predicted and reference rewards over training dataset = {(x(i), s(i), a(i), r(i) . Formally, the training objective can be written as: denotes the target reward for step s(i) , where r(i) 1:T )}N i=1 min ϕ"
        },
        {
            "title": "1\nN",
            "content": "N (cid:88) (i) (cid:88) i=1 t=1 (cid:16) Rϕ(s(i) x(i), s(i) <t, a(i)), r(i) (cid:17) . (4)"
        },
        {
            "title": "3 Existing PRMs Are Not Prepared for Rewarding Thinking Trajectories",
            "content": "To examine whether existing frontier PRMs can be directly applied to reward the trajectory-response data, we first conduct preliminary study to investigate two key questions: RQ1: Can PRMs distinguish the quality of thinking trajectories distilled from different oracle models? RQ2: What is the effectiveness of using the PRM-selected trajectory-response data on the downstream fine-tuning of smaller models? For brevity, we defer detailed experimental setups to Appendix A.1. To investigate RQ1, we evaluate the Qwen2.5-Math-PRM-72B PRM model on 1,000 sampled problems in s1k [13] with trajectory-response traces generated by Google Flash Thinking API [22] and Deepseek-R1 [12], respectively. For each data trace, we apply the PRM model to compute the step-level rewards (spitted by \"nn\"), and then aggregate these rewards by taking the mean to obtain final trajectory-level reward. Figure 3 (left) compares the distribution of PRM scores across the two oracle models. The histogram shows significant overlap in the score distributions, though Deepseek-R1 traces tend to receive higher rewards on average, with longer tail toward high-reward regions (e.g., scores above 0.6). The results suggest that while Qwen2.5-Math-PRM-72B captures some signal for differentiating between the two sources, its discriminative ability remains limited. Takeaway 1 Several existing PRMs exhibit limitations in distinguishing reasoning traces distilled from different oracle models and often struggle to clearly separate highand low-quality model thinking trajectories. Next, to investigate RQ2, we evaluate the performance using the PRM-selected data on the downstream supervised fine-tuning of smaller models. We apply four different PRMs to assign reward score to each of 4 Table 1 Performance of Qwen2.5-14B-Instruct on four challenging reasoning tasks after fine-tuning on the trajectoryresponse data selected by four different PRMs. We also compare the fine-tuning performance of using PRM-selected data with using randomly sampled data (1k from 59k) and the s1k human-curated data [13]."
        },
        {
            "title": "SFT Data Source",
            "content": "AIME24 AIME25 MATH500 GPQA-Diamond"
        },
        {
            "title": "Random",
            "content": "16.7 ( 16.6) 20.0 ( 13.3) 68.4 ( 10.4) 34.8 ( 6.6) Math-Shepherd-PRM-7B 13.3 ( 20.0) 6.7 ( 26.6) 67.8 ( 11.0) 13.3 ( 20.0) 13.3 ( 20.0) 71.8 ( 7.0) Skywork-PRM-7B Qwen2.5-Math-PRM-7B 26.7 ( 6.6) 20.0 ( 13.3) 73.2 ( 5.6) 77.0 ( 1.8) Qwen2.5-Math-PRM-72B 33.3 ( 0.0) 77.8 ( 1.0) 36.7 ( 3.4) 26.7 ( 6.6) 26.7 ( 6.6) on model responses 33.3 ( 8.1) 37.9 ( 3.5) 39.4 ( 2.0) 39.4 ( 2.0) 40.9 ( 0.5) Human-curated (s1k) 33.3 33.3 78.8 41.4 the 59K raw trajectory-response traces generated by Gemini [22] in s1 [13], using the same mean aggregation over step-level rewards to compute trajectory-level score. Based on these scores, we rank all traces and select the top 1,000 samples from each PRM as fine-tuning dataset for the downstream small model. For better comparison, we also adopt the direct set of 1K human-curated examples in s1k [13]. Table 1 presents the accuracy of the fine-tuned Qwen2.5-14B-Instruct on four challenging downstream tasks. We observe that all PRM-selected training sets underperform significantly compared to the human-curated baseline, suggesting that existing PRMs are not yet sufficiently calibrated to identify high-quality trajectory-response data, and can even degrade downstream model performance by selecting suboptimal or misaligned training samples. Takeaway 2 Direct reliance on current PRMs for trajectory-response selection can yield misaligned training data, which in turn diminishes the effectiveness of downstream supervised fine-tuning for smaller models. As most existing PRMs are trained on reasoning traces derived from model final output responses rather than intermediate thinking trajectories [2, 23], we take closer look at the distinctions between genuine thinking trajectories and post-hoc generated responses. As we detailed in the Appendix A.2, these two types of data exhibit several fundamental differences: (i) Thinking trajectories often include branching, where the model revisits earlier steps, explores alternative paths, and revises prior assumptionsbehavior rarely observed in the linear and polished structure of final responses. (ii) Thinking trajectories tend to exhibit weaker global coherence across steps, as each step is often locally focused and not optimized for narrative continuity. To further validate that the performance degradation of existing PRMs stems from the aforementioned data mismatch, we conduct an additional experiment in which Qwen2.5-Math-PRM-72B is applied to score each data instance based solely on the model response, rather than the middle thinking trajectories. As shown in Figure 3 (right), the PRM produces relatively clearer separation in score distributions between the two oracle models. Also as shown in Table 1 (row: on model responses), the performance drop is reduced when training on PRM-selected data based on final responses, suggesting that existing PRMs are better aligned with model-response-level supervision. Takeaway 3 Thinking trajectories instinctively differ from final responses, and existing PRMs are more accustomed to scoring final outputs than intermediate reasoning steps. Motivation on ReasonFlux-PRM. Our findings above highlight the need for more general reward model that can effectively evaluate both intermediate model thinking trajectories and final responses. As thinking 5 Figure 4 Illustration of the overall method design. ReasonFlux-PRM is trained on trajectoryresponse data pairs with novel reward design that integrates both step-level and trajectory-level signals. As general-purpose PRM, ReasonFlux-PRM supports both offline data selection for supervised fine-tuning of small models and online reward modeling including policy optimization in RL training and test-time scaling. trajectories become integral to supervised and RL-based fine-tuning, existing PRMs, trained primarily on final responses, struggle to provide reliable supervision. To address this, we propose and train new thinking-aware process reward model tailored to the trajectory-response data supervision."
        },
        {
            "title": "4 ReasonFlux-PRM",
            "content": "In this section, we introduce ReasonFlux-PRM, trajectory-aware process reward model, as illustrated in Figure 4. We first present new reward design tailored for thinking trajectories in Section 4.1, which incorporates both step-level and trajectory-level signals to reflect fine-grained and holistic reasoning quality. We then elaborate how ReasonFlux-PRM is applied in more general reward supervision setting in Section 4.2, covering both offline data selection and online reward modeling."
        },
        {
            "title": "4.1 How Should We Define Process Rewards and Why?",
            "content": "We first propose new reward design to train ReasonFlux-PRM from the trajectoryresponse data. Our formulation integrates both step-level and trajectory-level rewards to better address the discrepancy between intermediate thinking trajectories and final responses, and to align ReasonFlux-PRM with the underlying thinking process through more targeted reward signals during training. Step-level reward for thinking trajectories. As discussed in Section 3, we observe that thinking trajectories are often more complex than final responses, frequently involving branching logic, self-corrections, and redundant reasoning. To better align these two, we incorporate straightforward alignment score ralign that measures the semantic similarity between each step in the intermediate thinking trajectories st and each step in the final response at: ralign = sim(Φ(st), Φ(at)), (5) where Φ is pretrained encoder and sim(, ) denotes cosine similarity. This alignment score uses the final response as learning signal for earlier thinking trajectories, encouraging those that are topically relevant to the final response and penalizing hallucinated or off-topic content. Concurrently, to avoid over-penalizing complex yet meaningful thinking trajectory steps that may not be semantically aligned with the final response, we incorporate complementary quality score rqual . Inspired by the LLM-as-a-judge paradigm [2426], we employ strong expert model (e.g., GPT-4o) as judge to 6 evaluate the logical soundness of each step st in context: rqual = J(st x, s<t, a). The quality score is designed to capture deeper aspects inside reasoning traces, including step correctness, internal coherence, and progression toward the final response. (6) In addition to alignment with the final model output and logical step quality, we apply step-by-step coherence to ensure contextual compatibility between adjacent reasoning steps using contrastive mutual score rcoh information formulation. Specifically, we model the coherence between each thinking trajectory step st and its predecessor st1 by contrasting their embedding similarity against negative samples drawn from unrelated trajectories: rcoh = log exp(sim(Φ(st1), Φ(st))/τ ) sN exp(sim(Φ(st1), Φ(s))/τ ) (cid:80) , (7) where τ is the temperature parameter. By penalizing incoherent transitions or topic shifts, the coherence score encourages each step to be semantically and logically consistent with its immediate predecessor while remaining distinct from unrelated or disjoint reasoning steps. Finally, to aggregate the alignment, quality, and coherence scores into unified reward signal, we apply softmax-based weighting over the three components: rstep = (cid:88) softmax(rali , rqua , rcoh )k rk . k{alig, qua, coh} (8) Template-Guided Trajectory-level Reward. While the step-level rewards offer fine-grained supervision on the completeness and coherence of individual reasoning steps, they might not fully assess whether the overall problem-solving strategy encoded in models thinking trajectory is reliably leads to correct solutions, derived from the final response. We thus introduce template-guided trajectory-level reward to evaluate each trajectory-response data at higher level of abstraction [15, 27]. Specifically, given an input problem and the distilled trajectory-response = a, we employ strong expert LLM (e.g., GPT-4o) as verifier v. The verifier processes the complete output and extracts reasoning template , which captures the high-level strategy underlying the original trajectory-response trace. By abstracting the high-level strategy, the template provides structured guide for subsequent reasoning. The detailed prompt used for template generation is provided in Appendix B. Next, policy model πθ is conditioned on the extracted template and tasked with solving the input problem by strictly adhering to the prescribed template . The model generates chain-of-thought responses as follows: Then, we define the trajectory-level reward rfinal as the average correctness of the generated responses: y(1), . . . , y(N ) πθ( x, ). rfinal ="
        },
        {
            "title": "1\nN",
            "content": "N (cid:88) j=1 I(cid:0)y(j) is correct(cid:1). (9) The template-guided trajectory-level reward evaluates whether the high-level reasoning strategy can be generalized and executed by the policy model independent of the low-level execution in the original trace. Joint Training Objective. To fully leverage both step-level and trajectory-level supervision signals, we integrate the previously defined rewards and propose the following joint training objective: Ltotal = λstep"
        },
        {
            "title": "1\nT",
            "content": "T (cid:88) t="
        },
        {
            "title": "Lstep",
            "content": "(cid:0)Rϕ(st x, s<t, a), rstep (cid:1) + λfinal Lfinal (cid:0)Rϕ(x, y), rfinal(cid:1) , (10) where we adopt mean squared error (MSE) as the loss function for both the step and trajectory reward supervision, and λstep and λfinal are tunable parameters to balance the relative contributions of fine-grained step supervision and high-level strategic feedback. We train ReasonFlux-PRM with this joint objective as the practical surrogate for the optimization objective in Eq. 4 to align with both token-level and trajectory-level reward signals, thereby enabling the supervision effectiveness on the trajectory-response data."
        },
        {
            "title": "4.2 Offline Data Selection and Online Reward Modeling",
            "content": "We elaborate on the utilities of ReasonFlux-PRM from two perspectives: (i) Offline trajectory-response data selection, where ReasonFlux-PRM is used to identify and select high-quality reasoning traces for downstream supervised fine-tuning and reinforcement learning; and (ii) Online reward modeling, where ReasonFlux-PRM provides token-level and trajectory-level reward signals during RL training, and enables efficient reward estimation for test-time scaling. Offline Data Selection. For offline data selection, ReasonFlux-PRM assigns each trajectoryresponse pair (x, = a) step-level reward sequence {ˆrstep for each reasoning steps and trajectory-level reward ˆrfinal. The overall score is computed as: }T t=1 ˆr ="
        },
        {
            "title": "1\nT",
            "content": "T (cid:88) t=1 ˆrstep + α ˆrfinal, (11) where α balances the contributions of local and global reward signals. The aggregated score ˆr is applied to filter samples for later downstream supervised fine-tuning of smaller models. Online Reward Modeling. We first leverage ReasonFlux-PRM to produce composite reward signal that guides policy optimization through process-level supervision during reinforcement learning. Specifically, during the RL training, we incorporate ReasonFlux-PRM into the Group Relative Policy Optimization (GRPO) [17]. By default, GRPO optimizes for the outcome-level reward rout, which reflects the task accuracy of the policy πθ on each training sample. To incorporate process-level supervision from ReasonFlux-PRM, we augment this reward with the PRM-based reward ˆr in Eq. 11. Given input and sampled response πθ( x), the new composite reward used for policy training after incorporating ReasonFlux-PRM then becomes: where β controls the relative weight of supervision from ˆr. With total of group size (i.e., number of sampled responses per input), we proceed with group-normalized advantage estimation as: rnew = (1 β) rout + β ˆr, (12) With the ReasonFlux-PRM derived advantage term Anew, we then update the GRPO objective by: Anew = rnew mean({rnew}G std({rnew}G j=1) j=1) . (13) JReasonFlux-PRM-GRPO(θ) = xi,{yi}G i=1πθold (xi) (cid:34)"
        },
        {
            "title": "1\nG",
            "content": "G (cid:88) i=1 1 yi yi (cid:88) (cid:16) t= min clip (cid:26) πθ(yi,t xi, yi,<t) πθold(yi,t xi, yi,<t) (cid:18) πθ(yi,t xi, yi,<t) πθold(yi,t xi, yi,<t) Anewi, (cid:19) (cid:27) , 1 ϵ, 1 + ϵ"
        },
        {
            "title": "Anewi",
            "content": "δDKL(πθ πref) (cid:17) (cid:35) . (14) Note that ReasonFlux-PRM can be seamlessly integrated into other online RL policy optimization algorithms such as PPo [28] and Reinforce++ [29] by replacing the reward signal with ReasonFlux-PRM composite rewards. Reward-guided Test-Time Scaling. During inference, we further apply ReasonFlux-PRM into test-time-scaling strategies such as Best-of-N to identify the most promising output from set of generated candidates. For each new input question and its corresponding set of sampled model responses, ReasonFlux-PRM assigns score to each response based on the formulation in Eq. 11, and selects the response with the highest score as the final output."
        },
        {
            "title": "5 Empirical Evaluations",
            "content": "We empirically evaluate ReasonFlux-PRM, focusing on two core applications: (i) Offline data selection, where ReasonFlux-PRM identifies high-quality reasoning traces to improve supervised fine-tuning; and (ii) Online reward modeling, where ReasonFlux-PRM offers reward signals for Best-of-N decoding strategy in test-time scaling and GRPO-based policy optimization. 8 Table 2 Offline Data Selection Comparison. We fine-tune the generator model Qwen2.5-14B-Instruct using data selected by ReasonFlux-PRM7B and additional baselines. The highest performance of the generators trained on each data source is bold. ReasonFlux-PRM-7B achieves better performance than the strongest human-curated baseline. SFT Data Source AIME24 AIME MATH500 GPQA-Diamond Human-curated (s1k) 33.3 33.3 78.8 41. Random 16.7 ( 16.6) 20.0 ( 13.3) 68.4 ( 10.4) 34.8 ( 6.6) Math-Shepherd-PRM-7B 13.3 ( 20.0) 6.7 ( 26.6) 67.8 ( 11.0) Skywork-PRM-7B 13.3 ( 20.0) 13.3 ( 20.0) 71.8 ( 7.0) Qwen2.5-Math-PRM-7B 26.7 ( 6.6) 20.0 ( 13.3) 73.2 ( 5.6) 77.0 ( 1.8) Qwen2.5-Math-PRM-72B 33.3 ( 0.0) 77.8 ( 1.0) 36.7 ( 3.4) 26.7 ( 6.6) 26.7 ( 6.6) on model responses 33.3 ( 8.1) 37.9 ( 3.5) 39.4 ( 2.0) 39.4 ( 2.0) 40.9 ( 0.5) Figure 5 Score distributions rewarded by ReasonFlux-PRM-7B on Deepseek-R1 and Gemini over 1000 trajectory-response data. ReasonFlux-PRM-7B 40.0 ( 6.7) 33.3 ( 0.0) 84.8 ( 6.0) 47.5 ( 6.1) Table 3 Performance of PRMs as reward signals in policy optimization. For each of the two policy models, i.e. DeepSeek-R1-Distill-Qwen-7B and Qwen2.5-7B-Instruct, we run GRPO with three different reward signals: entirely rule-based, Qwen2.5-Math-PRM-7B, and ReasonFlux-PRM. The latter two non-rule-based rewards are factored into the overall reward signal according to Eq. 12. We report the mean accuracy averaged over 16 independent runs."
        },
        {
            "title": "Reward Signal Source",
            "content": "AIME24 AIME25 MATH500 GPQA-Diamond Qwen2.5-7B-Instruct DeepSeek-R1-Distill-Qwen-7B Rule-based Qwen2.5-Math-PRM-7B ReasonFlux-PRM-7B Rule-based Qwen2.5-Math-PRM-7B ReasonFlux-PRM-7B 12.9 12. 16.3 50.2 51.2 54.6 11.1 13.3 17.1 38.3 40. 44.2 73.6 74.8 77.2 89.6 92.8 94.8 32.7 32. 34.9 47.1 49.1 51.6 Benchmarks. We evaluate ReasonFlux-PRM on four representative and challenging reasoning benchmarks, including MATH500 [20], diverse set of 500 mathematical problems of varying difficulty; AIME24 [18], consisting of 30 problems from the 2024 American Invitational Mathematics Examination (AIME); AIME25, which includes 15 problems from the 2025 AIME [19]; and GPQA-Diamond [21], benchmark of 198 PhD-level science questions to assess advanced scientific reasoning. Implementation Details. We train ReasonFlux-PRM using two off-the-shelf base models, Qwen2.5-1.5B-Instruct and Qwen2.5-7B-Instruct [30], resulting in ReasonFlux-PRM-1.5B and ReasonFlux-PRM-7B, respectively. The training data is primarily sourced from the public trajectory-response reasoning traces such as OpenThoughts114K [31]. All experiments are conducted on 8 A100 GPUs. Additional experimental setups including ReasonFlux-PRM training details and downstream tasks model configurations are provided in Appendix C. Baselines and Models. For offline data selection, we compare ReasonFlux-PRM with the four frontier PRMs introduced in Section 3, using Qwen2.5-14B-Instruct[30, 32] as the generator model for standard supervised fine-tuning evaluations. For online reward modeling, constrained by computational resources, we primarily use 7B-scale models as policy models for reinforcement learning, including Qwen2.5-7B and Deepseek-R1-DistillQwen-7B [12]. For test-time Best-of-N scaling, we adopt Qwen2.5-14B as the generator model to evaluate inference-time performance."
        },
        {
            "title": "5.1 Offline Data Selection",
            "content": "Table 2 presents the supervised fine-tuning results of Qwen2.5-14B-Instruct, with training data selected by different strategies, including ReasonFlux-PRM-7B, baseline PRMs, and human-curated examples. Notably, ReasonFlux-PRM-7B outperforms the high-quality human-curated s1k dataset. Specifically, our model achieves 6.0% gain on MATH500 and 6.1% improvement on GPQA-Diamond relative to the human-curated baseline. 9 Figure 6 Training dynamics of GRPO policy optimization using ReasonFlux-PRM-7B as reward signals and Qwen2.57B-Instrct as the policy model. (a) Training reward vs. step: We compare the training reward evolution across original rule-based GRPO, Qwen2.5-Math-PRM-7B, and ReasonFlux-PRM-7B; (b) Validation accuracy vs. step: We report the validation accuracy during training with ReasonFlux-PRM-7B; (c) Response length vs. step: We report the evolution of generated response lengths over training steps with ReasonFlux-PRM-7B. We also plot the score distribution over the 1,000 trajectory-response pairs generated by Deepseek-R1 and Gemini, as shown in Figure 5. The clearly separated score distributions in the figure demonstrate that ReasonFlux-PRM-7B effectively distinguishes between the trajectory-response quality generated by different models, providing reliable reward signal for high-quality data selection."
        },
        {
            "title": "5.2 Online Reward Modeling\nReward Signal for RL training. Figure 6 and Table 3 present the training dynamics and downstream reasoning\nperformance after incorporating different reward signals into policy optimization via GRPO. We evaluate\ntwo 7B-scale policy models: Qwen2.5-7B-Instruct and DeepSeek-R1-Distill-Qwen-7B. For each model, we\ncompare three reward signal sources: a fully rule-based heuristic following the original GRPO approach,\nQwen2.5-Math-PRM-7B, and ReasonFlux-PRM-7B. Across both policy models and all evaluated tasks,\nReasonFlux-PRM-7B consistently delivers superior gains over both the rule-based and prior PRM-based\nreward signals. On Qwen2.5-7B-Instruct, ReasonFlux-PRM-7B improves performance by 3.4% on AIME24\nand 5.8% on AIME25 relative to the rule-based baseline. On the stronger DeepSeek-R1-Distill-Qwen-7B\nmodel, ReasonFlux-PRM-7B further advances results, raising MATH500 accuracy from 89.6% to 94.8% and\nGPQA-Diamond from 47.1% to 51.6%. In addition, when directly comparing ReasonFlux-PRM-7B against\nQwen2.5-Math-PRM-7B, we observe consistent improvements. For example, a 3.8% gain on AIME25 with\nQwen2.5-7B-Instruct and a 2.5% gain on GPQA-Diamond with DeepSeek-R1-Distill-Qwen-7B. These results\ndemonstrate that the high-quality learned reward signals from ReasonFlux-PRM substantially enhance policy\noptimization, outperforming both heuristic and strong PRM baselines, and ultimately yielding more capable\nreasoning models through RL training.",
            "content": "Best-of-N in Test-Time Scaling. In Figure 7, we present Best-of-N selection results using ReasonFlux-PRM-7B and baseline PRMs across four reasoning tasks. For the generator model, we use the fine-tuned Qwen2.5-14BInstruct with the same checkpoint in Section 5.1. ReasonFlux-PRM-7B consistently leads to greater accuracy gains as increases, outperforming all baselines by notable margins. While other PRMs show diminishing or flat returns with increased sampling, ReasonFlux-PRM-7B maintains strong upward trend, demonstrating its superior ability to identify high-quality reasoning traces. 10 Figure 7 Test-time performance of Best-of-N selection using ReasonFlux-PRM-7B, Qwen2.5-Math-PRM-72B, and Skywork-PRM-7B across reasoning tasks. We also report results using the majority voting method. Figure 8 Effeciency Analyses on ReasonFlux-PRM-7B. Left: Accuracy on MATH500 improves steadily as the number of ReasonFlux-PRM-7B selected training samples increases, outperforming both human-selected (1k) and full raw data (59k) baselines with fewer total training instances. Right: ReasonFlux-PRM-7B achieves higher accuracy than other PRMs under 7B scale and even larger 72B scale parameter size. Additional Performance Analyses. We leave further performance analyses on ReasonFlux-PRM and case studies in Appendix and Appendix E."
        },
        {
            "title": "5.3 Efficiency Analyses",
            "content": "In this section, we evaluate the efficiency of ReasonFlux-PRM-7B in both offline data selection for SFT and online RL settings by comparing the training performance and overhead under different data and reward supervision strategies. As shown in Figure 8, the data selected by ReasonFlux-PRM7B reduces the amount of training data required while achieving superior model performance. When fine-tuning Qwen2.514B-Instruct on only 1k samples selected by ReasonFluxPRM-7B, the model outperforms the baseline trained on 59k raw trajectories by substantial margin on MATH500. This highlights ReasonFlux-PRM ability to identify high-quality, informative samples that yield greater performance per data point. The result aligns with recent findings on the power of curated supervision in data-efficient post-training, and further shows that ReasonFlux-PRM-7B can outperform even human-selected samples under similar data scales. Figure 9 Time overhead of ReasonFlux-PRMduring SFT and RL stages. For SFT, we compare the training time using 1k selected samples versus the full 59k raw data. For RL training, we evaluate the overall time with/without incorporating ReasonFlux-PRM-7B. investigate the overhead of We further incorporating ReasonFlux-PRM-7B into policy optimization using the GRPO framework. As shown in the right panel of Figure 9, although ReasonFlux-PRM-7B introduces additional computation for stepand trajectory-level reward modeling, the increase in total training time remains moderate compared to standard GRPO. Crucially, Table 4 Ablation study on the α parameter. Table 5 Ablation study on the β parameter. α AIME24 AIME25 MATH500 β AIME24 AIME25 MATH500 0.1 0.8 1.0 1.5 26. 40.0 33.3 33.3 6.7 33.3 33.3 40.0 81.2 83.6 84.8 83.2 0.1 0.3 0.5 0. 10.0 13.3 13.3 20.0 6.7 13.3 6.7 16.7 73.6 74.4 75.2 76. this additional cost leads to consistent improvements in downstream reasoning performance, as we demonstrated in our main experiments. Our experiments on both online and offline settings above demonstrate that ReasonFlux-PRM not only improves model performance across both SFT and RL regimes, but does so with minimal computational overhead, achieving superior efficiency in reasoning-centric fine-tuning and optimization pipelines."
        },
        {
            "title": "5.4 Ablation Study\nAblation on α. As described in Eq. 11, the parameter α controls the balance between step-level rewards\nand the trajectory-level reward during ReasonFlux-PRM’s reward aggregation. To assess the impact of this\nweighting, we conduct an ablation study by varying α ∈ {0.1, 0.8, 1.0, 1.5}, and use ReasonFlux-PRM-7B to\nselect offline fine-tuning data accordingly. The Qwen2.5-14B-Instruct model is then fine-tuned on the top 1,000\nselected examples and evaluated across AIME24, AIME25, and MATH500. As shown in Table 4, performance\nimproves when more weight is placed on the trajectory-level reward. Notably, α = 1.0 achieves the best result\non MATH500, while α = 1.5 yields the highest accuracy on AIME25. These results suggest that combining\nboth local (step-level) and global (trajectory-level) reward signals is essential, and that moderate emphasis\non trajectory-level reasoning is particularly beneficial for complex tasks. We also observe that the optimal\nvalue of α may be influenced by the underlying data distribution. As part of future work, we plan to make α\nlearnable by introducing a lightweight neural module that dynamically adapts the weight between step-level\nand trajectory-level rewards based on the characteristics of each input sample.",
            "content": "Ablation on β. In Eq. 12, we introduce β as weighting coefficient to balance the original rule-based GRPO reward and the process-level reward provided by ReasonFlux-PRM-7B. To understand its influence, we conduct an ablation study by varying β {0.1, 0.3, 0.5, 0.8} and applying GRPO with ReasonFlux-PRM-7B reward integration on the Qwen2.5-7B-Instruct policy model. As shown in Table 5, we evaluate the resulting models across AIME24, AIME25, and MATH500. The performance consistently improves with increasing β, indicating the effectiveness of ReasonFlux-PRM process-level supervision. The highest gains are achieved at β = 0.8, which yields 20.0% accuracy on AIME24, 16.7% on AIME25, and 76.8% on MATH500. The result demonstrates that stronger emphasis on ReasonFlux-PRM rewards leads to more effective RL training."
        },
        {
            "title": "6 Related Works",
            "content": "Offline Data Selection for CoT Reasoning at Scale. The quality of data has proven pivotal in the model training process [33, 34]. Recent studies further demonstrate that small subsets of high-quality data can outperform much larger unfiltered datasets in enhancing model reasoning abilities during post-training stages such as supervised fine-tuning [13, 14, 35, 36]. In contrast to online batch data selection methods [37, 38], which select samples based on updated model signals such as gradient norms or maximum sample loss during training, offline data selection approaches aim to select data once prior to the model training process. Motivated by the need for efficiency at scale, recent works have increasingly explored offline data selection as means of curating high-quality datasets for LLMs training. Beyond simple rejection sampling, these approaches either train an additional model for data selection [39, 40], or adaptively select data based on natural language quality indicators [41], dataset diversity [42], or model-specific quality labels [43, 44]. More recently, model distillation [45, 46] has been widely adopted to leverage longer reasoning traces distilled from large-scale reasoning models as training data for improving the capabilities of downstream smaller models. Methods such 12 as s1 [13], LIMO [14] and ReasonFlux [15] adapt smaller subsets of human-selected high-quality distilled data, enabling smaller models to perform better on sophisticated reasoning tasks compared to training on much larger quantities of raw distilled data. Building on these insights, instead of incurring additional computational costs by focusing solely on training data selection, our work extends the applicability of process reward models from traditional reward supervision to offline data selection, particularly in the context of raw model-distilled chain-of-thought reasoning trajectories [47, 48]. Leveraging the step-by-step supervision capability of PRMs, we utilize them as metric to select high-quality reasoning traces from raw \"silver\" distilled data [16], with the goal of improving downstream post-training performance for smaller models. Process Reward Models. Process Reward Models (PRMs) [5] provide step-level supervision for model reasoning answers, assigning intermediate rewards to each reasoning step [2, 7, 4954]. Existing PRMs, such as MathShepherd [55], Skywork-PRM [23], and Qwen2.5-Math-PRM series [2], are trained on either human-annotated rewards [5] or synthesized supervision signals [4] to provide fine-grained step-level rewards for model-generated reasoning solutions across different tasks such as math problem solving [18, 56], science reasoning [21], and programming [57]. More recent work such as Think-PRM [9] introduces generative PRM to produce long CoT verification. Prior works have integrated PRMs as reward signals during training [1, 6, 7, 58], such as stepby-step verified online RL policy optimization [7, 8] or iterative generator improvement through verifier-guided self-training [59]. Others apply PRMs during inference-time scaling [9, 10, 15, 27, 60, 6062] by integrating the models with step-level search and decoding strategies, including beam search [60], reward-guided tree search [63], Best-of-N sampling [64], etc. However, since current PRMs are mostly trained on model-generated final solutions, they struggle to provide effective reward supervision for the internal reasoning trajectories produced by large reasoning models [12] prior to generating final answers. To address this, we design new trajectory-aware PRM specifically aimed at providing reward supervision for such trajectoryresponse formatted long CoT data."
        },
        {
            "title": "7 Conclusion",
            "content": "We present ReasonFlux-PRM, trajectory-aware PRM that delivers fine-grained step-level and trajectorylevel supervision for trajectory-response long chain-of-thought reasoning traces. Through extensive empirical evaluations, ReasonFlux-PRM consistently improves downstream model performance across multiple challenging benchmarks and application settings. Specifically, ReasonFlux-PRM surpasses strong baselines and human-curated data in offline training data selection, enhances policy optimization during reinforcement learning via dense process-level rewards, and demonstrates superior test-time scaling in Best-of-N inference. Our results highlight the importance of trajectory-aware reward modeling for supervising model intermediate reasoning processes. The discussion of limitations and broader impacts is provided in Appendix F."
        },
        {
            "title": "References",
            "content": "[1] Amrith Setlur, Chirag Nagpal, Adam Fisch, Xinyang Geng, Jacob Eisenstein, Rishabh Agarwal, Alekh Agarwal, Jonathan Berant, and Aviral Kumar. Rewarding progress: Scaling automated process verifiers for llm reasoning. arXiv preprint arXiv:2410.08146, 2024. [2] Zhenru Zhang, Chujie Zheng, Yangzhen Wu, Beichen Zhang, Runji Lin, Bowen Yu, Dayiheng Liu, Jingren Zhou, and Junyang Lin. The lessons of developing process reward models in mathematical reasoning. arXiv preprint arXiv:2501.07301, 2025. [3] Wendi Li and Yixuan Li. Process reward model with q-value rankings. In The Thirteenth International Conference on Learning Representations, 2025. [4] Liangchen Luo, Yinxiao Liu, Rosanne Liu, Samrat Phatale, Meiqi Guo, Harsh Lara, Yunxuan Li, Lei Shu, Yun Zhu, Lei Meng, et al. Improve mathematical reasoning in language models by automated process supervision. arXiv preprint arXiv:2406.06592, 2024. [5] Hunter Lightman, Vineet Kosaraju, Yuri Burda, Harrison Edwards, Bowen Baker, Teddy Lee, Jan Leike, John Schulman, Ilya Sutskever, and Karl Cobbe. Lets verify step by step. In The Twelfth International Conference on Learning Representations, 2024. 13 [6] Jonathan Uesato, Nate Kushman, Ramana Kumar, Francis Song, Noah Siegel, Lisa Wang, Antonia Creswell, Geoffrey Irving, and Irina Higgins. Solving math word problems with process-and outcome-based feedback. arXiv preprint arXiv:2211.14275, 2022. [7] Xinyu Guan, Li Lyna Zhang, Yifei Liu, Ning Shang, Youran Sun, Yi Zhu, Fan Yang, and Mao Yang. rstar-math: Small llms can master math reasoning with self-evolved deep thinking. arXiv preprint arXiv:2501.04519, 2025. [8] Ganqu Cui, Lifan Yuan, Zefan Wang, Hanbin Wang, Wendi Li, Bingxiang He, Yuchen Fan, Tianyu Yu, Qixin Xu, Weize Chen, et al. Process reinforcement through implicit rewards. arXiv preprint arXiv:2502.01456, 2025. [9] Muhammad Khalifa, Rishabh Agarwal, Lajanugen Logeswaran, Jaekyeom Kim, Hao Peng, Moontae Lee, Honglak Lee, and Lu Wang. Process reward models that think, 2025. [10] Jian Zhao, Runze Liu, Kaiyan Zhang, Zhimu Zhou, Junqi Gao, Dong Li, Jiafei Lyu, Zhouyi Qian, Biqing Qi, Xiu Li, and Bowen Zhou. Genprm: Scaling test-time compute of process reward models via generative reasoning, 2025. [11] Aaron Jaech, Adam Kalai, Adam Lerer, Adam Richardson, Ahmed El-Kishky, Aiden Low, Alec Helyar, Aleksander Madry, Alex Beutel, Alex Carney, et al. Openai o1 system card. arXiv preprint arXiv:2412.16720, 2024. [12] DeepSeek-AI. Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning, 2025. [13] Niklas Muennighoff, Zitong Yang, Weijia Shi, Xiang Lisa Li, Li Fei-Fei, Hannaneh Hajishirzi, Luke Zettlemoyer, Percy Liang, Emmanuel Candès, and Tatsunori Hashimoto. s1: Simple test-time scaling, 2025. [14] Yixin Ye, Zhen Huang, Yang Xiao, Ethan Chern, Shijie Xia, and Pengfei Liu. Limo: Less is more for reasoning. arXiv preprint arXiv:2502.03387, 2025. [15] Ling Yang, Zhaochen Yu, Bin Cui, and Mengdi Wang. Reasonflux: Hierarchical llm reasoning via scaling thought templates. arXiv preprint arXiv:2502.06772, 2025. [16] Edward Yeo, Yuxuan Tong, Morry Niu, Graham Neubig, and Xiang Yue. Demystifying long chain-of-thought reasoning in llms. arXiv preprint arXiv:2502.03373, 2025. [17] Zhihong Shao, Peiyi Wang, Qihao Zhu, Runxin Xu, Junxiao Song, Xiao Bi, Haowei Zhang, Mingchuan Zhang, Y. K. Li, Y. Wu, and Daya Guo. Deepseekmath: Pushing the limits of mathematical reasoning in open language models, 2024. [18] Maxwell-Jia. AIME 2024 dataset. https://huggingface.co/datasets/Maxwell-Jia/AIME_2024, 2024. Accessed: 2025-05-15. [19] math ai. AIME 2025 dataset. https://huggingface.co/datasets/math-ai/aime25, 2025. Accessed: 2025-05-15. [20] Dan Hendrycks, Collin Burns, Saurav Kadavath, Akul Arora, Steven Basart, Eric Tang, Dawn Song, and Jacob Steinhardt. Measuring mathematical problem solving with the math dataset, 2021. [21] David Rein, Betty Li Hou, Asa Cooper Stickland, Jackson Petty, Richard Yuanzhe Pang, Julien Dirani, Julian Michael, and Samuel R. Bowman. Gpqa: graduate-level google-proof q&a benchmark, 2023. [22] Google. Gemini Flash Thinking API. Accessed via the Google Cloud Platform, 2025. Accessed on May 15, 2025. [23] Jujie He, Tianwen Wei, Rui Yan, Jiacai Liu, Chaojie Wang, Yimeng Gan, Shiwen Tu, Chris Yuhao Liu, Liang Zeng, Xiaokun Wang, Boyang Wang, Yongcong Li, Fuxiang Zhang, Jiacheng Xu, Bo An, Yang Liu, and Yahui Zhou. Skywork-o1 open series. https://huggingface.co/Skywork, November 2024. [24] Lianmin Zheng, Wei-Lin Chiang, Ying Sheng, Siyuan Zhuang, Zhanghao Wu, Yonghao Zhuang, Zi Lin, Zhuohan Li, Dacheng Li, Eric Xing, et al. Judging llm-as-a-judge with mt-bench and chatbot arena. Advances in Neural Information Processing Systems, 36:4659546623, 2023. [25] Zachary Ankner, Mansheej Paul, Brandon Cui, Jonathan Chang, and Prithviraj Ammanabrolu. Critique-out-loud reward models. arXiv preprint arXiv:2408.11791, 2024. [26] Swarnadeep Saha, Xian Li, Marjan Ghazvininejad, Jason Weston, and Tianlu Wang. Learning to plan & reason for evaluation with thinking-llm-as-a-judge. arXiv preprint arXiv:2501.18099, 2025. [27] Ling Yang, Zhaochen Yu, Tianjun Zhang, Shiyi Cao, Minkai Xu, Wentao Zhang, Joseph Gonzalez, and Bin Cui. Buffer of thoughts: Thought-augmented reasoning with large language models. Advances in Neural Information Processing Systems, 37:113519113544, 2024. 14 [28] John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy optimization algorithms. arXiv preprint arXiv:1707.06347, 2017. [29] Jian Hu. Reinforce++: simple and efficient approach for aligning large language models. arXiv preprint arXiv:2501.03262, 2025. [30] Qwen Team. Qwen2.5: party of foundation models, September 2024. [31] OpenThoughts Team. Open Thoughts. https://open-thoughts.ai, January 2025. [32] An Yang, Baosong Yang, Binyuan Hui, Bo Zheng, Bowen Yu, Chang Zhou, Chengpeng Li, Chengyuan Li, Dayiheng Liu, Fei Huang, Guanting Dong, Haoran Wei, Huan Lin, Jialong Tang, Jialin Wang, Jian Yang, Jianhong Tu, Jianwei Zhang, Jianxin Ma, Jin Xu, Jingren Zhou, Jinze Bai, Jinzheng He, Junyang Lin, Kai Dang, Keming Lu, Keqin Chen, Kexin Yang, Mei Li, Mingfeng Xue, Na Ni, Pei Zhang, Peng Wang, Ru Peng, Rui Men, Ruize Gao, Runji Lin, Shijie Wang, Shuai Bai, Sinan Tan, Tianhang Zhu, Tianhao Li, Tianyu Liu, Wenbin Ge, Xiaodong Deng, Xiaohuan Zhou, Xingzhang Ren, Xinyu Zhang, Xipin Wei, Xuancheng Ren, Yang Fan, Yang Yao, Yichang Zhang, Yu Wan, Yunfei Chu, Yuqiong Liu, Zeyu Cui, Zhenru Zhang, and Zhihao Fan. Qwen2 technical report. arXiv preprint arXiv:2407.10671, 2024. [33] Niklas Muennighoff, Alexander Rush, Boaz Barak, Teven Le Scao, Nouamane Tazi, Aleksandra Piktus, Sampo Pyysalo, Thomas Wolf, and Colin Raffel. Scaling data-constrained language models. Advances in Neural Information Processing Systems, 36:5035850376, 2023. [34] Biao Zhang, Zhongtao Liu, Colin Cherry, and Orhan Firat. When scaling meets llm finetuning: The effect of data, model and finetuning method. arXiv preprint arXiv:2402.17193, 2024. [35] Ziche Liu, Rui Ke, Yajiao Liu, Feng Jiang, and Haizhou Li. Take the essence and discard the dross: rethinking on data selection for fine-tuning large language models. arXiv preprint arXiv:2406.14115, 2024. [36] Alon Albalak, Yanai Elazar, Sang Michael Xie, Shayne Longpre, Nathan Lambert, Xinyi Wang, Niklas Muennighoff, Bairu Hou, Liangming Pan, Haewon Jeong, et al. survey on data selection for language models. arXiv preprint arXiv:2402.16827, 2024. [37] Angelos Katharopoulos and François Fleuret. Not all samples are created equal: Deep learning with importance sampling. In International conference on machine learning, pages 25252534. PMLR, 2018. [38] Jiachen Tianhao Wang, Tong Wu, Dawn Song, Prateek Mittal, and Ruoxi Jia. Greats: Online selection of high-quality data for llm training in every iteration. Advances in Neural Information Processing Systems, 37:131197131223, 2024. [39] Sang Michael Xie, Hieu Pham, Xuanyi Dong, Nan Du, Hanxiao Liu, Yifeng Lu, Percy Liang, Quoc Le, Tengyu Ma, and Adams Wei Yu. Doremi: Optimizing data mixtures speeds up language model pretraining. Advances in Neural Information Processing Systems, 36:6979869818, 2023. [40] Mengzhou Xia, Sadhika Malladi, Suchin Gururangan, Sanjeev Arora, and Danqi Chen. Less: Selecting influential data for targeted instruction tuning. arXiv preprint arXiv:2402.04333, 2024. [41] Yihan Cao, Yanbin Kang, Chi Wang, and Lichao Sun. Instruction mining: Instruction data selection for tuning large language models, 2024. [42] Minghao Wu, Thuy-Trang Vu, Lizhen Qu, and Gholamreza Haffari. The best of both worlds: Bridging quality and diversity in data selection with bipartite graph, 2024. [43] Ziche Liu, Rui Ke, Yajiao Liu, Feng Jiang, and Haizhou Li. Take the essence and discard the dross: rethinking on data selection for fine-tuning large language models, 2025. [44] Jiaru Zou, Mengyu Zhou, Tao Li, Shi Han, and Dongmei Zhang. Promptintern: Saving inference costs by internalizing recurrent prompt during large language model fine-tuning. arXiv preprint arXiv:2407.02211, 2024. [45] Haoran Li, Qingxiu Dong, Zhengyang Tang, Chaojun Wang, Xingxing Zhang, Haoyang Huang, Shaohan Huang, Xiaolong Huang, Zeqiang Huang, Dongdong Zhang, et al. Synthetic data (almost) from scratch: Generalized instruction tuning for language models. arXiv preprint arXiv:2402.13064, 2024. [46] Xiaohan Xu, Ming Li, Chongyang Tao, Tao Shen, Reynold Cheng, Jinyang Li, Can Xu, Dacheng Tao, and Tianyi Zhou. survey on knowledge distillation of large language models. arXiv preprint arXiv:2402.13116, 2024. 15 [47] Murong Yue, Wenlin Yao, Haitao Mi, Dian Yu, Ziyu Yao, and Dong Yu. Dots: Learning to reason dynamically in llms via optimal reasoning trajectories search. arXiv preprint arXiv:2410.03864, 2024. [48] Etash Guha, Ryan Marten, Sedrick Keh, Negin Raoof, Georgios Smyrnis, Hritik Bansal, Marianna Nezhurina, Jean Mercat, Trung Vu, Zayne Sprague, Ashima Suvarna, Benjamin Feuer, Liangyu Chen, Zaid Khan, Eric Frankel, Sachin Grover, Caroline Choi, Niklas Muennighoff, Shiye Su, Wanjia Zhao, John Yang, Shreyas Pimpalgaonkar, Kartik Sharma, Charlie Cheng-Jie Ji, Yichuan Deng, Sarah Pratt, Vivek Ramanujan, Jon Saad-Falcon, Jeffrey Li, Achal Dave, Alon Albalak, Kushal Arora, Blake Wulfe, Chinmay Hegde, Greg Durrett, Sewoong Oh, Mohit Bansal, Saadia Gabriel, Aditya Grover, Kai-Wei Chang, Vaishaal Shankar, Aaron Gokaslan, Mike A. Merrill, Tatsunori Hashimoto, Yejin Choi, Jenia Jitsev, Reinhard Heckel, Maheswaran Sathiamoorthy, Alexandros G. Dimakis, and Ludwig Schmidt. Openthoughts: Data recipes for reasoning models, 2025. [49] Jonathan Uesato, Nate Kushman, Ramana Kumar, Francis Song, Noah Siegel, Lisa Wang, Antonia Creswell, Geoffrey Irving, and Irina Higgins. Solving math word problems with processand outcome-based feedback, 2022. [50] Dan Zhang, Sining Zhoubian, Ziniu Hu, Yisong Yue, Yuxiao Dong, and Jie Tang. Rest-mcts*: Llm self-training via process reward guided tree search. arXiv preprint arXiv:2406.03816, 2024. [51] Amrith Setlur, Chirag Nagpal, Adam Fisch, Xinyang Geng, Jacob Eisenstein, Rishabh Agarwal, Alekh Agarwal, Jonathan Berant, and Aviral Kumar. Rewarding progress: Scaling automated process verifiers for llm reasoning. arXiv preprint arXiv:2410.08146, 2024. [52] Chengqi Lyu, Songyang Gao, Yuzhe Gu, Wenwei Zhang, Jianfei Gao, Kuikun Liu, Ziyi Wang, Shuaibin Li, Qian Zhao, Haian Huang, et al. Exploring the limit of outcome reward for learning mathematical reasoning. arXiv preprint arXiv:2502.06781, 2025. [53] Yinjie Wang, Ling Yang, Ye Tian, Ke Shen, and Mengdi Wang. Co-evolving llm coder and unit tester via reinforcement learning. arXiv preprint arXiv:2506.03136, 2025. [54] Xiusi Chen, Gaotang Li, Ziqi Wang, Bowen Jin, Cheng Qian, Yu Wang, Hongru Wang, Yu Zhang, Denghui Zhang, Tong Zhang, Hanghang Tong, and Heng Ji. Rm-r1: Reward modeling as reasoning, 2025. [55] Peiyi Wang, Lei Li, Zhihong Shao, R. X. Xu, Damai Dai, Yifei Li, Deli Chen, Y. Wu, and Zhifang Sui. Mathshepherd: Verify and reinforce llms step-by-step without human annotations, 2024. [56] Haipeng Luo, Qingfeng Sun, Can Xu, Pu Zhao, Jianguang Lou, Chongyang Tao, Xiubo Geng, Qingwei Lin, Shifeng Chen, Yansong Tang, and Dongmei Zhang. Wizardmath: Empowering mathematical reasoning for large language models via reinforced evol-instruct, 2025. [57] Xinyi He, Jiaru Zou, Yun Lin, Mengyu Zhou, Shi Han, Zejian Yuan, and Dongmei Zhang. CoCoST: Automatic complex code generation with online searching and correctness testing. In Yaser Al-Onaizan, Mohit Bansal, and Yun-Nung Chen, editors, Proceedings of the 2024 Conference on Empirical Methods in Natural Language Processing, pages 1943319451, Miami, Florida, USA, November 2024. Association for Computational Linguistics. [58] Wendi Li and Yixuan Li. Process reward model with q-value rankings. arXiv preprint arXiv:2410.11287, 2024. [59] Arian Hosseini, Xingdi Yuan, Nikolay Malkin, Aaron Courville, Alessandro Sordoni, and Rishabh Agarwal. V-star: Training verifiers for self-taught reasoners. arXiv preprint arXiv:2402.06457, 2024. [60] Charlie Snell, Jaehoon Lee, Kelvin Xu, and Aviral Kumar. Scaling llm test-time compute optimally can be more effective than scaling model parameters. arXiv preprint arXiv:2408.03314, 2024. [61] Jiaru Zou, Qing Wang, Pratyush Thakur, and Nickvash Kani. Stem-pom: Evaluating language models math-symbol reasoning in document parsing. arXiv preprint arXiv:2411.00387, 2024. [62] Wenkai Yang, Shuming Ma, Yankai Lin, and Furu Wei. Towards thinking-optimal scaling of test-time compute for llm reasoning. arXiv preprint arXiv:2502.18080, 2025. [63] Yangzhen Wu, Zhiqing Sun, Shanda Li, Sean Welleck, and Yiming Yang. Inference scaling laws: An empirical analysis of compute-optimal inference for problem-solving with language models. arXiv preprint arXiv:2408.00724, 2024. [64] Runze Liu, Junqi Gao, Jian Zhao, Kaiyan Zhang, Xiu Li, Biqing Qi, Wanli Ouyang, and Bowen Zhou. Can 1b llm surpass 405b llm? rethinking compute-optimal test-time scaling. arXiv preprint arXiv:2502.06703, 2025. 16 [65] Jia LI, Edward Beeching, Lewis Tunstall, Ben Lipkin, Roman Soletskyi, Shengyi Costa Huang, Kashif Rasul, Longhui Yu, Albert Jiang, Ziju Shen, Zihan Qin, Bin Dong, Li Zhou, Yann Fleureau, Guillaume Lample, and Stanislas Polu. Numinamath. [https://huggingface.co/AI-MO/NuminaMath-CoT](https://github.com/ project-numina/aimo-progress-prize/blob/main/report/numina_dataset.pdf), 2024. [66] Yujia Li, David Choi, Junyoung Chung, Nate Kushman, Julian Schrittwieser, Rémi Leblond, Tom Eccles, James Keeling, Felix Gimeno, Agustin Dal Lago, Thomas Hubert, Peter Choy, Cyprien de Masson dAutume, Igor Babuschkin, Xinyun Chen, Po-Sen Huang, Johannes Welbl, Sven Gowal, Alexey Cherepanov, James Molloy, Daniel Mankowitz, Esme Sutherland Robson, Pushmeet Kohli, Nando de Freitas, Koray Kavukcuoglu, and Oriol Vinyals. Competition-level code generation with alphacode. arXiv preprint arXiv:2203.07814, 2022. [67] Guohao Li, Hasan Abed Al Kader Hammoud, Hani Itani, Dmitrii Khizbullin, and Bernard Ghanem. Camel: Communicative agents for \"mind\" exploration of large scale language model society, 2023. [68] Qiying Yu, Zheng Zhang, Ruofei Zhu, Yufeng Yuan, Xiaochen Zuo, Yu Yue, Tiantian Fan, Gaohong Liu, Lingjun Liu, Xin Liu, et al. Dapo: An open-source llm reinforcement learning system at scale. arXiv preprint arXiv:2503.14476, 2025. [69] Leandro von Werra, Younes Belkada, Lewis Tunstall, Edward Beeching, Tristan Thrush, Nathan Lambert, Shengyi Huang, Kashif Rasul, and Quentin Gallouédec. TRL: Transformer Reinforcement Learning."
        },
        {
            "title": "Table of Contents",
            "content": "A Details on the Preliminary Study in Section 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . A.1 Preliminary Study Setups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . A.2 Difference between Model Thinking Trajectories and Final Responses . . . . . . . . . . . . . . Template guided trajectory-level reward design . . . . . . . . . . . . . . . . . . . . . . . . Additional Experimental Setups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . C.1 ReasonFlux-PRM Training . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . C.2 Downstream Tasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Additional Analyses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . D.1 Scaling up ReasonFlux-PRM Model Size on Policy Optimization . . . . . . . . . . . . . . . . D.2 End-to-End Training with ReasonFlux-PRM (SFT+RL) . . . . . . . . . . . . . . . . . . . . . Case Study on ReasonFlux-PRM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Limitations and Broader Impacts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 18 19 23 24 24 24 25 25 25 26 Details on the Preliminary Study in Section 3 A.1 Preliminary Study Setups Process Reward Models. We evaluate four state-of-the-art process reward models for scoring the quality of the thinking trajectories data: Math-Shepherd-PRM-8B [55], Skywork-PRM-7B [23], Qwen2.5-Math-PRM-7B [2], and Qwen2.5-Math-PRM-72B [2]. The details description for each model is shown below: Math-Shepherd-PRM-8B [55]: 7B PRM based on Mistral, trained with data auto-generated from Mistral-7B fine-tuned on MetaMath. It emphasizes verification of step-level reasoning through processlevel rewards without human annotations. Skywork-PRM-7B [23]: PRM built on Qwen2.5-Math-7B-Instruct and trained on data derived from LLaMA-2 fine-tuned on math tasks. It shows strong generalization for verifying reasoning trajectories across models and supports efficient TTS with low inference overhead. Qwen2.5-Math-PRM-7B [2]: Trained on Qwen2.5-Math-7B-Instruct using data from the Qwen2.5-Math series, this PRM offers robust step-by-step reward signals and high compatibility with Qwen family models, demonstrating superior supervision ability in TTS tasks among 7B-scale PRMs. Qwen2.5-Math-PRM-72B [2]: high-capacity verifier trained on Qwen2.5-Math-72B-Instruct and Qwengenerated data. It achieves state-of-the-art process supervision and excels in guiding both samplingand search-based TTS strategies across range of mathematical reasoning tasks. Data Sources. For the data sources, we follow s1k [13] to use its collected datasets consisting of 59K raw model thinking trajectories distilled from the Google Gemini Flash Thinking API [22], along with 1K human-curated samples from the same source and an additional 1K human-curated samples from Deepseek-R1 [12]. These trajectories span broad range of topics, including math and scientific reasoning. For downstream tasks, we choose 4 challenging benchmarks including: AIME24 [18], AIME25 [19], MATH500 [20], and GPQA-Diamond [21]. Training Details in RQ2. As the downstream generator, we adopt Qwen2.5-14B-Instruct as our base model for fine-tuning evaluation. We perform supervised fine-tuning on the Qwen2.5-14B-Instruct model using various 1,000-sample training datasets, each selected either by different PRM-based rankings or curated by human annotators in s1k [13]. We fine-tune the model for 5 epochs using learning rate of 1e5, weight decay of 1e4, and maximum sequence length of 32,768. All experiments are conducted on server node with 8 A100-80G GPUs. 18 A.2 Difference between Model Thinking Trajectories and Final Responses As we mentioned in Section 3, there are two key difference of the data between model thinking trajectories and final responses: Branching steps across thinking trajectories: For instance, the thinking trajectories might initially assume an incorrect variable assignment in math problem, detect the inconsistency, and backtrack to re-derive the solution. Weaker global coherence across steps: This manifests in speculative or uncertain statements (e.g., if we assume X, then Y) that may not resolve within the same reasoning path, and in disjointed or redundant logic, such as repeating subgoals or prematurely concluding without fully integrating prior steps. In contrast, final responses are typically globally fluent and logically unified, aiming to deliver streamlined and conclusive answer. In Examples 1 and 2 below, we provide detailed data examples that highlight the distinctions between model thinking trajectories and final output responses. These examples showcase how the thinking trajectories often contain exploratory, speculative, or partially resolved reasoning steps, in contrast to the more polished and coherent final outputs. To better illustrate these differences, we highlight all branching steps, backtracking behaviors, and internal deliberations in blue, emphasizing the non-linear and less deterministic nature of the models intermediate reasoning process. Example 1 Question: Two capacitors with capacitance values C1 = 2000 10 pF and C2 = 3000 15 pF are connected in series. The voltage applied across this combination is = 5.00 0.02 V. What is the percentage error in the calculation of the energy stored in this combination of capacitors? Thinking Trajectories: Let C1 and C2 be the capacitance values of the two capacitors, and C1, C2 be their absolute errors. Given: C1 = 2000 10 pF C2 = 3000 15 pF Voltage applied across the combination, = 5.00 0.02 When capacitors are connected in series, the equivalent capacitance Ceq is given by: Let me double check, initially thought the formula was C1 + C2, but thats for parallel combination. Since its in series, we should use the reciprocal formula. Calculate the nominal value: 1 Ceq = 1 C1 + 1 C2 Ceq = C1C2 C1 + C2 To find the error in Ceq, we use: Partial derivatives: Evaluate: Ceq = 2000 3000 2000 + = 6 106 5000 = 1200 pF Ceq = (cid:115)(cid:18) Ceq C1 (cid:19)2 + (cid:18) Ceq C2 (cid:19)2 C2 Ceq = C2 2 (C1 + C2)2 9 25 , , Ceq = C2 1 (C1 + C2)2 4 25 Ceq = (cid:115)(cid:18) 9 25 (cid:19) 10 + = 1 25 8100 + 3600 = (cid:18) 4 25 1 25 (cid:19)2 15 = (cid:112) 1 902 + 602 11700 4.33 pF Hmm, but is this the only way? Maybe logarithmic differentiation would give cleaner expression? Let me try an alternative method: So: 1 Ceq = 1 C1 + 1 C2 1 C2 eq dCeq = 1 C2 1 dC1 1 C2 2 dC2 dCeq C2 eq = dC1 C2 1 + dC2 C2 2 Ceq Ceq = Ceq (cid:18) C1 C2 1 + C2 C2 2 (cid:19) This seems messier, maybe it is generalizable. Now let me compute it: = 3000 10 2000 5000 + 2000 15 3000 5000 = 0.003 + 0.002 = 0.005 Ceq = 0.005 1200 = 6 pF Now compute energy: = 1 2 CeqV 2 Let me double-check: voltage is squared here, so the error contribution from voltage gets doubled in fractional terms. Fractional error: E = Ceq Ceq + 2 = 0.005 + 2 0.004 = 0.013 Percentage error = 1.3% Alternative verification might help... might try distribute the weight of errors proportionally: Ceq Ceq = C1 C1 C2 C1 + C2 + C2 C2 C1 C1 + C2 = 0.005 0.6 + 0.005 0.4 = 0.005 Let me Final check: The final answer is: ln = ln (cid:19) (cid:18) 1 2 + ln Ceq + 2 ln = Ceq Ceq + 2 1.3% Final Response: Step 1: Calculate the Equivalent Capacitance When capacitors are connected in series, the equivalent capacitance Ceq is given by: C1C2 1 C1 + C2 C1 C1 + C2 C1C Ceq = 1 Ceq 1 C2 = = + Step 2: Calculate the Error in Ceq Using the formula for propagation of uncertainty: Ceq = 2000 3000 2000 + 3000 = 6 106 5000 = 1200 pF Ceq = (cid:12) (cid:12) (cid:12) (cid:12) Ceq C1 (cid:12) (cid:12) (cid:12) (cid:12) C1 + (cid:12) (cid:12) (cid:12) (cid:12) Ceq C2 (cid:12) (cid:12) (cid:12) (cid:12) C2 Compute the partial derivatives: Substitute the given values: Ceq = C2 2 (C1 + C2)2 , Ceq C1 = 30002 Now compute the error: 9 25 Step 3: Compute the Fractional Error in Ceq Ceq = 10 + = 4 9 25 , Ceq C2 Ceq C2 = = C2 1 (C1 + C2)2 20002 50002 = 4 25 15 = 90 + 60 25 = 150 25 = 6 pF Step 4: Energy Stored in the Capacitor System The energy stored in capacitor is given by: Step 5: Propagate Error in Energy Calculation The fractional error in energy is: Ceq Ceq = 6 1200 = 0.005 = 1 2 CeqV 2 = Ceq Ceq + 2 Given: Substitute into the error formula: Ceq Ceq = 0.005, V = 0.02 5.00 = 0.004 = 0.005 + 2 0.004 = 0.005 + 0.008 = 0.013 Step 6: Convert to Percentage Error Percentage error = 100% = 0.013 100% = 1.3% Final Answer: The percentage error in the energy stored is 1.3% . 20 Example Question: One base of trapezoid is 100 units longer than the other base. The segment that joins the midpoints of the legs divides the trapezoid into two regions whose areas are in the ratio 2 : 3. Let be the length of the segment, parallel x2 100 to the bases, that divides the trapezoid into two regions of equal area. Find the greatest integer that does not exceed . Thinking Trajectories: The problem asks for the value of x2/100, where is the length of segment parallel to the bases that divides the trapezoid into two regions of equal area. We are given information about the lengths of the bases and the ratio of the areas created by the segment joining the midpoints of the legs. Let the lengths of the two bases be b1 and b2, with b1 > b2. We are told that: Let the height of the trapezoid be h. The midline of the trapezoid has length: b1 = b2 + It divides the trapezoid into two smaller trapezoids, each of height h/2. The area of the upper trapezoid is: = b1 + b2 2 The area of the lower trapezoid is: A1 = 1 (b2 + m) 2 = 2 We are told that the ratio of areas is 2 : 3 (upper to lower), so: (b1 + m) A2 = 1 2 = 8 8 (b1 + 3b2) (3b1 + b2) A1 A2 = b1 + 3b2 3b1 + b2 = 2 3 Substitute b1 = b2 + 100: 3(b1 + 3b2) = 2(3b1 + b2) 3b1 + 9b2 = 6b1 + 2b2 7b2 = 3b1 7b2 = 3(b2 + 100) 7b2 = 3b2 + 300 4b2 = 300 b2 = 75 b1 = 175 Let me also test the other case just in case its typo, what if the area ratio was actually 3 : 2? b1 + 3b2 3b1 + b2 = 3 2(b1 + 3b2) = 3(3b1 + b2) 2b1 + 6b2 = 9b1 + 3b2 3b2 = 7b1 3b2 = 7(b2 + 100) 3b2 = 7b2 + 700 4b2 = 700 b2 = 175 Thats invalid as the length cant be negative. So the correct ratio is 2 : 3 and b2 = 75, b1 = 175. Now consider segment of length x, parallel to the bases, that divides the trapezoid into two equal-area regions. Let the height from b2 up to this segment be h. The total area is: We want: We also know from similar triangles: Atotal = 1 2 (b1 + b2)h = 1 2 (175 + 75)h = 125h 1 2 (b2 + x)h = 125h 2 (b2 + x)h = 125h b2 = b1 b2 = b2 b1 b2 Substitute into the area equation: (b2 + x) = 125h (b2 + x)(x b2) = 125(b1 b2) b2 b1 b2 2 = 125(b1 b2) x2 = 125(b1 b2) + b2 2 x2 b2 Substitute b1 = 175, b2 = 75: x2 = 125(100) + 752 = 12500 + 5625 = 18125 (cid:23) (cid:22) x2 = (cid:23) (cid:22) 18125 100 = 181 also saw different derivation that leads directly to this result. Let me verify it: 2x2 = 1 + b2 2 x2 = b2 1 + b2 2 2 x2 = 1752 + 752 2 = 30625 + 5625 2 = 18125 (cid:23) (cid:22) x2 100 = 181 Final Response: Step 1: Set up variables and use the area ratio condition 21 Let the lengths of the two bases of the trapezoid be b1 and b2, with b1 > b2. We are given that b1 = b2 + 100. The segment that joins the midpoints of the legs (the midline) divides the trapezoid into two smaller trapezoids with heights h/2. The lengths of the parallel sides of the upper trapezoid are b2 and = b1+b2 , and its area is 2 The lengths of the parallel sides of the lower trapezoid are and b1, and its area is A1 = 8 (b1 + 3b2). A2 = 8 (3b1 + b2). The ratio of the areas is A1 : A2 = (b1 + 3b2) : (3b1 + b2). Given that this ratio is 2 : 3 or 3 : 2. If b1+3b2 3b1+b2 3b1 + 9b2 = 6b1 + 2b2,, so 7b2 = 3b1. Substituting b1 = b2 + 100, we get = 2 3 , then 7b2 = 3(b2 + 100), = 3 b2 = 75, and b1 = 175. 2 , we get 2b1 + 6b2 = 9b1 + 3b2, so 3b2 = 7b1, which leads to negative value for b2, which is impossible. so 4b2 = 300, Step 2: Verify the alternate area ratio leads to contradiction If b1+3b2 3b1+b2 The lengths of the bases are b1 = 175 and b2 = 75. Step 3: Express the condition for equal-area division Let the segment of length parallel to the bases divide the trapezoid into two regions of equal area. The square of the length of such segment is given by x2 = 1 + b2 b2 2 2 . x2 = 1752 + 752 2 = 30625 + 5625 2 = 36250 2 = 18125. Step 4: Compute the final result We need to find the greatest integer that does not exceed x2/100. x2 100 = 18125 100 = 181.25. The greatest integer that does not exceed 181.25 is 181.25 = 181. Final Answer: The final answer is 181 . 22 Template guided trajectory-level reward design Prompt Design of the Template (LLM-as-a-Verifier) You are given long chain-of-thought (CoT) response to challenging math problem. Your task is to summarize the response into structured sequence of reasoning steps that can serve as clear and guided template for use by smaller model. Problem: [problem] Response: [response] Instructions: Please summarize the response as concise list of reasoning steps, each capturing distinct part of the thought process. These may include restating the problem, defining variables, constructing mathematical models, performing calculations, verifying results, handling different cases, correcting mistakes, and drawing the final conclusion. Focus on preserving the logical flow while keeping each step clear and concise. Here are few template examples you should strictly follow: [Template Example 1] [Template Example 2] [Template Example 3] Write your answer below."
        },
        {
            "title": "C Additional Experimental Setups",
            "content": "C.1 ReasonFlux-PRM Training For ReasonFlux-PRM training, we initialize from the off-the-shelf Qwen2.5-1.5B-Instruct and Qwen2.5-7BInstruct models [30], serving as our 1.5B-scale and 7B-scale ReasonFlux-PRM backbones. We then train ReasonFlux-PRM on the OpenThoughts-114K [31] collection of datasets containing rich, model-generated thinking trajectories paired with their corresponding final responses. OpenThoughts-114k is publicly available synthetic reasoning dataset comprising 114,000 high-quality examples across four domains: mathematics, science, code, and puzzles. Each example includes problem statement, thinking trajectory generated by the Deepseek-R1, and corresponding model response. The dataset was constructed by curating prompts from existing datasets, such as AI-MO/NuminaMath-CoT [65] for math, DeepMind/code-contests [66] for code, and camel-ai/chemistry [67] for science. We utilize the model-generated thinking trajectories and final responses from the datasets as raw training data. Subsequently, we assign step-level and trajectory-level rewards based on our specific reward design, as detailed in Section 4.1. We follow our detailed description in Section 4.1 to train with the step-level reward. In addition, to train with the template-guided trajectory-level reward, we first randomly sample 1000 problem-response samples from OpenThoughts-114k, and prompt GPT-4o to extract the reasoning template from each CoT sample using the prompt in Section B. For each problem-template pair, we choose Qwen2.5-7B-Instruct as our generator πθ and generate = 5 responses that attempt to solve the problem while adhering to the reasoning template. The ground truth trajectory-level reward is then computed as the average accuracy across the 5 responses, as shown in Eq. 9. We then combine the step-level and trajectory-level rewards to obtain the ground truth reward values for the 1000 samples, and train ReasonFlux-PRM to learn these reward values using the joint training objective in Eq. 10. To train our reward model, we use learning rate of 1e-5 and train for 3 epochs. C.2 Downstream Tasks For offline data selection and subsequent supervised fine-tuning, we follow the exact experimental setup described in Appendix A.1 to ensure fair comparison with baseline models. Specifically, we begin by assigning reward scores to each trajectoryresponse pair in OpenThoughts-114k using the designated reward model. We then rank all samples based on their aggregated reward scores and select the top 1,000 examples to serve as the training set for downstream fine-tuning. For online policy optimization, we use training dataset comprising 10k competition-level mathematical reasoning problems collected from MATH [20] and the DAPO [68] training set. These training data contains math problems spanning wide range of topics, including algebra, geometry, probability, and precalculus. Our GRPO training framework is built on the original Hugging Face GRPO Trainer [69]. We train with batch size of 32, generating 6 samples per prompt, and run training for 3 epochs. As mentioned above, the vanilla GRPO relies on rule-based reward that evaluates only the correctness of the final answer. On the other hand, we replace the rule-based reward with the learned reward signal obtained by passing the training prompt and the policy models output through ReasonFlux-PRM. For the Best-of-N test-time scaling experiments, we use Qwen2.5-14B-Instruct as the generator model. Given an input problem x, the generator produces candidate reasoning trajectories using nucleus sampling with temperature = 0.3, where {2, 4, 8, 16}. Each candidate trajectory is then scored by ReasonFlux-PRM, which provides scalar reward reflecting the trajectorys quality in terms of correctness, coherence, and reasoning structure. The final output is selected as the trajectory with the highest ReasonFlux-PRM assigned reward. We evaluate performance by measuring final-answer accuracy over the selected outputs."
        },
        {
            "title": "D Additional Analyses",
            "content": "D.1 Scaling up ReasonFlux-PRM Model Size on Policy Optimization Table 6 Scaling Effects of ReasonFlux-PRM model size on GRPO online policy optimization performance. Larger ReasonFlux-PRM reward models (7B vs. 1.5B) consistently yield better downstream performance on MATH500 and GPQA-Diamond across both Qwen2.5-7B-Instruct and DeepSeek-R1-Distill-Qwen-7B policy models."
        },
        {
            "title": "Policy Model",
            "content": "Qwen2.5-7B-Instruct DeepSeek-R1-Distill-Qwen-7B ReasonFlux-PRM Size MATH500 GPQA-Diamond 1.5B 7B 1.5B 7B 73.8 77. 90.4 93.8 30.8 34.3 48.5 51.5 To investigate the impact of reward model capacity, we vary the size of the ReasonFlux-PRM model used to provide rewards for GRPO-based policy optimization. As shown in Table 6, using larger ReasonFlux-PRM model consistently improves performance across both policy models, Qwen2.5-7B-Instruct and DeepSeek-R1Distill-Qwen-7B. Specifically, scaling ReasonFlux-PRM from 1.5B to 7B leads to 3.8% gain on MATH500 and 3.5% on GPQA-Diamond for Qwen2.5-7B-Instruct. Likewise, for DeepSeek-R1-Distill-Qwen-7B, we observe 3.4% improvement on MATH500 and 3.0% on GPQA-Diamond. These results indicate that larger reward models provide more accurate and informative signals for RL, thereby enabling stronger policy optimization. D.2 End-to-End Training with ReasonFlux-PRM (SFT+RL) Table 7 Effect of ReasonFlux-PRM-7B selected supervised fine-tuning on downstream RL. We compare the original backbone model (Checkpoint 1) and the model fine-tuned on 1k ReasonFlux-PRM-7B selected data (Checkpoint 2), each evaluated under different reward signal sources. Policy Model (Qwen2.5-7B-Instruct) Reward Signal Source MATH500 Checkpoint 1: Original backbone model Checkpoint 2: SFT on 1k ReasonFlux-PRM-7B selected data Rule-based Qwen2.5-Math-PRM-7B ReasonFlux-PRM-7B Rule-based Qwen2.5-Math-PRM-7B ReasonFlux-PRM-7B 74.0 75.4 77.0 84.8 87.6 89.8 As supervised fine-tuning followed by reinforcement learning (SFT+RL) has become dominant paradigm for aligning large language models with reasoning-intensive tasks, we are motivated to evaluate if ReasonFlux-PRM can serve as general-purpose reward model to be effectively applied across both stages of training. Table 7 presents comparative analysis on the Qwen2.5-7B-Instruct policy model, where we evaluate two checkpoints: (i) the original backbone model, and (ii) the same model after SFT on 1k ReasonFlux-PRM-7B selected data over the 59K raw data in s1 [13]. Both checkpoints are then further optimized with different reward signal sources during RL. The results demonstrate that ReasonFlux-PRM-7B consistently improves downstream performance at SFT and RL stages. We also observe that across all reward signal sources, fine-tuning on 1k ReasonFlux-PRM-7B selected data consistently improves performance over the original backbone model. Notably, the combination of ReasonFlux-PRM-7B based supervised fine-tuning and ReasonFlux-PRM-7B guided reinforcement learning yields the highest MATH500 accuracy of 89.8%, with significant 12.8% accuracy improvement compared to the original backbone model (77.0%). These results highlight the end-to-end effectiveness of ReasonFlux-PRM as general reward model for enhancing reasoning capabilities throughout the full training pipeline. Case Study on ReasonFlux-PRM In Case Studies 1 and 2 below, we present two responses to the same mathematical problem, one incorrect and one correct. For each response, we show the step-level and trajectory-level rewards assigned by ReasonFluxPRM-7B. In the incorrect response, ReasonFlux-PRM-7B effectively identifies the point at which the reasoning begins to deviate by assigning significantly lower rewards to the subsequent steps. In contrast, the correct response receives consistently high rewards throughout the trajectory. Our study on the example suggests that ReasonFlux-PRM is not only capable of distinguishing between correct and incorrect solutions but also of pinpointing the precise step where an error in reasoning occurs."
        },
        {
            "title": "F Limitations and Broader Impacts",
            "content": "Limitations While ReasonFlux-PRM demonstrates robust improvements in reasoning quality across diverse mathematical and scientific benchmarks, one limitation lies in its reliance on high-quality trajectoryresponse pairs for training. Although ReasonFlux-PRM is designed to be general-purpose and adaptable, its current instantiation is tailored toward domains with well-structured logic (e.g., math and science), where reward signals based on alignment, quality, and coherence can be meaningfully computed. Applying ReasonFluxPRM in more open-ended tasks such as commonsense dialogue or code generation may require redefining trajectory-level reward criteria and further tuning of the reward decomposition strategy. However, these domains fall outside the scope of this work and do not detract from the validity or strength of our conclusions in the reasoning-focused setting. Broader Impact This paper introduces ReasonFlux-PRM, trajectory-aware reward modeling framework that advances LLM reasoning by providing fine-grained supervision over both intermediate thinking steps and high-level solution strategies. This improves LLM alignment, interpretability, and efficiency in structured reasoning tasks such as math and science, while supporting both supervised fine-tuning and reinforcement learning. While our work has broad implications, we do not foresee significant negative impacts or societal concerns that warrant specific emphasis. 26 Case Study 1 Question: If 6 2 and 3 5, what is the greatest possible value of (cid:18) + (cid:19) (cid:18) 1 1 (cid:19) ? Thinking Trajectories: The problem asks for the greatest possible value of the expression [Step-level reward: 0.997] (cid:18) + (cid:19) (cid:18) 1 1 (cid:19) given the ranges for and b. First, lets expand the expression: (cid:18) (cid:19) (cid:19) (cid:18) 1 [Step-level reward: 0.983] (cid:18) 1 = + 1 (cid:19) + (cid:18) 1 1 (cid:19) = 1 a2 + 1 1 1 = b a2 + 1 b2 = a2 + 1 b2 Now we need to find the maximum value of a2 + 1 [Step-level reward: 0.996] b2 given the constraints 6 2 and 3 5. Consider the terms a2 and 1 36 a2 4. [Step-level reward: 0.503] b2 separately. Since 6 2, we have 0 (a)2 ((6))2 = 36. Therefore, Since 3 5, we have 9 b2 25. Therefore, 1 [Step-level reward: 0.895] 25 1 b2 1 9 . We want to maximize a2 + 1 [Step-level reward: 0.297] (This is the place where the thinking trajectory went wrong, because in order to maximize a2 + 1 b2 , a2 needs to be maximized, not minimized. ReasonFlux-PRM assigns low reward starting from this segment within the thinking trajectory, which indicates that ReasonFlux-PRM is able to identify errors in reasoning traces.) b2 . This is equivalent to minimizing a2 and maximizing 1 b2 . The minimum value of a2 is 36. The maximum value of 1 [Step-level reward: 0.238] (The step-level rewards drop significantly since the last wrong step.) b2 is 1 9 . So the greatest possible value of a2 + 1 Lets calculate this value: 36 + 1 [Step-level reward: 0.280] 9 = 369 b2 is 36 + 1 9 . 9 = 324 9 + 1 9 + 9 = 3241 9 = 323 9 Final Response: Given the ranges 6 2 and 3 5. We want to find the greatest possible value of the expression (cid:18) + (cid:19) (cid:18) 1 [Step-level reward: 0.995] (cid:19) . 1 First, we expand the expression: (cid:0)a + 1 = a2 + 1 b2 [Step-level reward: 0.997] (cid:1) (cid:0) 1 a(cid:1) = (cid:0) a(cid:1) + 1 a(cid:1) = 1 (cid:0) 1 a2 + 1 1 = a2 + 1 b2 Now we need to find the maximum value of a2 + 1 b2 given the constraints for and b. Consider the term a2. Since 6 2, the values of a2 range from (6)2 = 36 to (2)2 = 4. Therefore, the values of a2 range from 36 to 4. [Step-level reward: 0.988] Consider the term 1 from 1 25 to 1 9 . [Step-level reward: 0.897] b2 . Since 3 5, the values of b2 range from 32 = 9 to 52 = 25. Therefore, the values of 1 b2 range To maximize a2 + 1 b2 , we need to maximize 1 = 3. The minimum value of a2 is 36, which occurs when = 6. [Step-level reward: 0.108] (The low score here aligns with the low score in the model thinking trajectories.) b2 and minimize a2. The maximum value of 1 b2 is 1 9 , which occurs when 27 Thus, the greatest possible value of a2 + 1 36 + 1 9 = Final Answer: The final answer is [Step-level reward: 0.319] 323 9 b2 is 36 + 1 9 . 36 9 9 1 9 + = 324 9 + 1 9 = 324 1 9 = 323 9 [Trajectory-level reward: 0.197] (As the final answer is incorrect, ReasonFlux-PRM assigns low trajectory-level reward to the overall trajectory-response data.) 28 Case Study 2 Question: If 6 2 and 3 5, what is the greatest possible value of (cid:18) + (cid:19) (cid:18) 1 1 (cid:19) ? Thinking Trajectories: The problem asks for the greatest possible value of the expression [Step-level reward: 0.998] (cid:18) + (cid:19) (cid:18) 1 1 (cid:19) given the ranges for and b. (cid:1) (cid:0) a(cid:1). (cid:0) 1 Let = (cid:0)a + 1 We can expand the expression: = (cid:0) 1 (cid:1) + 1 (cid:1) + (a) + 1 = = a2 + 1 b2 [Step-level reward: 0.985] a2 + 1 b2 (a) We need to find the maximum value of given the constraints 6 2 and 3 5. [Step-level reward: 0.998] Since = a2 + 1 [Step-level reward: 0.974] b2 , we need to minimize a2 and maximize 1 b2 . For a, the range is 6 2. The minimum value of a2 occurs when is closest to 0. The values of are negative, so the minimum value of a2 occurs when is the least negative, which is 2. When = 2, a2 = (2)2 = 4. [Step-level reward: 0.962] For b, the range is 3 5. The maximum value of 1 When = 3, 1 32 = 1 9 . [Step-level reward: 0.985] b2 = b2 occurs when is the smallest. So, the maximum value of occurs when a2 is minimized and 1 Maximum = a2 + 1 [Step-level reward: 0.818] b2 = 4 + 1 9 . b2 is maximized. 9 = 361 9 = 35 9 . 9 + 1 9 + 1 9 = 36 To add these values, we need common denominator: 9 = 49 Maximum = 4 + 1 [Step-level reward: 0.815] Lets double check the calculations. The expression is (cid:0)a + 1 a(cid:1). (cid:1) (cid:0) 1 Expand the expression: 1 + (a) + 1 b2 = = a2 + 1 b2 [Step-level reward: 0.980] a2 + 1 + 1 (a) b2 > 0. We want to maximize a2 + 1 b2 . Since a2 0, a2 0. Since b2 > 0, 1 The maximum value of 1 32 = 1 9 , which occurs when = 3. We need to find the minimum value of a2 in the range [6, 2]. The minimum value of a2 occurs at the boundary of the interval, which is = 2. When = 2, a2 = (2)2 = 4. [Step-level reward: 0.927] b2 is We need to maximize 1 The maximum value of 1 b2 occurs at the boundary of the interval, which is = 3. 32 = 1 When = 3, 1 9 . [Step-level reward: 0.989] b2 in the range [3, 5]. b2 = 1 So the maximum value of the expression is a2 + 1 b2 = 4 + 1 9 = 9 + 1 9 = 35 9 . Final Response: Given the ranges for and b: 6 2 3 5 29 [Step-level reward: 0.958] We want to find the greatest possible value of the expression (cid:18) + (cid:19) (cid:18) 1 1 (cid:19) . [Step-level reward: 0.999] First, we expand the expression: (cid:18) + (cid:19) (cid:18) 1 1 (cid:19) = (cid:19) (cid:18) 1 + (a) + (cid:19) (cid:18) 1 1 + 1 (a) = a2 + = a2 + 1 b2 1 b2 [Step-level reward: 0.998] To find the greatest possible value of this expression, we need to minimize a2 and maximize 1 b2 . [Step-level reward: 0.987] For the term a2, we want to minimize a2. Since a2 0 for all real numbers a, the minimum value of a2 occurs when = 0. However, the given range for is [6, 2], so = 0 is not within the range. The minimum value of a2 in the given range occurs at the boundary of the interval, which is = 2. When = 2, a2 = (2)2 = 4. [Step-level reward: 0.967] b2 , we want to maximize 1 For the term 1 b2 occurs when b2 is the smallest. The smallest value of b2 in the given range occurs when is the largest in absolute value within the interval [3, 5], which is = 3. When = 3, b2 = 32 = 9, and 1 [Step-level reward: 0.667] b2 . Since b2 > 0 for all real numbers = 0, the maximum value of 1 b2 = 1 9 . Now, we substitute the minimum value of a2 and the maximum value of 1 b2 into the expanded expression: a2 + 1 = 4 + 1 9 To combine these terms, we find common denominator: 4 + 1 9 = 4 9 9 + 1 9 = 36 9 + 1 9 = 36 1 9 = 35 9 [Step-level reward: 0.993] Thus, the greatest possible value of the given expression is 35 9 . [Step-level reward: 0.988] Final Answer: The final answer is [Step-level reward: 0.999] 35 9 [Trajectory-level reward: 0.949] (As the final answer is correct, ReasonFlux-PRM assigns high trajectory-level reward to the overall trajectory-response data.)"
        }
    ],
    "affiliations": [
        "ByteDance",
        "Cornell University",
        "Princeton University",
        "UIUC"
    ]
}