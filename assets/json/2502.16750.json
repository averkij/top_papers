{
    "paper_title": "Guardians of the Agentic System: Preventing Many Shots Jailbreak with Agentic System",
    "authors": [
        "Saikat Barua",
        "Mostafizur Rahman",
        "Md Jafor Sadek",
        "Rafiul Islam",
        "Shehnaz Khaled",
        "Ahmedul Kabir"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "The autonomous AI agents using large language models can create undeniable values in all span of the society but they face security threats from adversaries that warrants immediate protective solutions because trust and safety issues arise. Considering the many-shot jailbreaking and deceptive alignment as some of the main advanced attacks, that cannot be mitigated by the static guardrails used during the supervised training, points out a crucial research priority for real world robustness. The combination of static guardrails in dynamic multi-agent system fails to defend against those attacks. We intend to enhance security for LLM-based agents through the development of new evaluation frameworks which identify and counter threats for safe operational deployment. Our work uses three examination methods to detect rogue agents through a Reverse Turing Test and analyze deceptive alignment through multi-agent simulations and develops an anti-jailbreaking system by testing it with GEMINI 1.5 pro and llama-3.3-70B, deepseek r1 models using tool-mediated adversarial scenarios. The detection capabilities are strong such as 94\\% accuracy for GEMINI 1.5 pro yet the system suffers persistent vulnerabilities when under long attacks as prompt length increases attack success rates (ASR) and diversity metrics become ineffective in prediction while revealing multiple complex system faults. The findings demonstrate the necessity of adopting flexible security systems based on active monitoring that can be performed by the agents themselves together with adaptable interventions by system admin as the current models can create vulnerabilities that can lead to the unreliable and vulnerable system. So, in our work, we try to address such situations and propose a comprehensive framework to counteract the security issues."
        },
        {
            "title": "Start",
            "content": "5 2 0 2 3 2 ] . [ 1 0 5 7 6 1 . 2 0 5 2 : r GUARDIANS OF THE AGENTIC SYSTEM: PREVENTING MANY SHOTS JAILBREAK WITH AGENTIC SYSTEM Saikat Barua1, Mostafizur Rahman1, Md Jafor Sadek1, Rafiul Islam1, Shehnaz Khaled1, and Dr. Ahmedul Kabir2 1North South University, Dhaka, {saikat.barua, umostafizurs, jaforsadek619, rafiul.islam19, Shehenazkhalednsu}@northsouth.edu 2Associate Professor, Unversity of Dhaka, Dhaka."
        },
        {
            "title": "ABSTRACT",
            "content": "The autonomous AI agents using large language models can create undeniable values in all span of the society but they face security threats from adversaries that warrants immediate protective solutions because trust and safety issues arise. Considering the many-shot jailbreaking and deceptive alignment as some of the main advanced attacks, that cannot be mitigated by the static guardrails used during the supervised training, points out crucial research priority for real world robustness. The combination of static guardrails in dynamic multi-agent system fails to defend against those attacks. We intend to enhance security for LLM-based agents through the development of new evaluation frameworks which identify and counter threats for safe operational deployment. Our work uses three examination methods to detect rogue agents through Reverse Turing Test and analyze deceptive alignment through multi-agent simulations and develops an anti-jailbreaking system by testing it with GEMINI 1.5 pro and llama-3.3-70B, deepseek r1 models using tool-mediated adversarial scenarios. The detection capabilities are strong such as 94% accuracy for GEMINI 1.5 pro yet the system suffers persistent vulnerabilities when under long attacks as prompt length increases attack success rates (ASR) and diversity metrics become ineffective in prediction while revealing multiple complex system faults. The findings demonstrate the necessity of adopting flexible security systems based on active monitoring that can be performed by the agents themselves together with adaptable interventions by system admin as the current models can create vulnerabilities that can lead to the unreliable and vulnerable system. So, in our work, we try to address such situations and propose comprehensive framework to counteract the security issues. Our code and experiments are open-sourced at: Guardians-Preventing-Jail-Break-Prompts https://github.com/GitsSaikat/ Keywords Large Language Models (LLMs) Responsible AI AI Agents Jailbreaking Adversarial Attacks Deceptive Alignment Reverse Turing Test Multi-Agent Systems Prompt Injection Agent Autonomy Ethical Deployment"
        },
        {
            "title": "Introduction",
            "content": "The application of AI agents spreads across all domains including healthcare diagnostics and financial systems and governance simulations because of transformer-based large language model evolutions combined with in-context learning methods [13, 7]. AI systems continue to lose control of their operational safety because multiple vulnerabilities including jailbreaks [16, 1] and deceptive actions [15] and adversarial attacks [11] compromise their security integrity. We have tried to develop AI systems that can defend themselves from adversarial threats within our research framework. The rapid deployment of these agents raises the stakes, with prompt injections [11] and many-shot jailbreaking [1] exploiting their autonomy. So, it is difficult to manually safeguard these systems. This necessitates urgent efforts to ensure their reliability and ethical deployment in an ever-expanding landscape of applications. The Guardians Our research plays crucial role because LLM vulnerabilities affect more than just technical operations by diminishing social confidence while endangering public safety. High-stakes applications that now rely on LLM technology face risk because breaches could trigger multiplying consequences which range from dangerous misinformation to physical safety threats. The combination of Jailbreak attacks that force models to generate immoral material [16] and deceptive alignment that produces misleading agent behaviors [15] leads to lost accountability. The current safety mechanisms based on supervised training and guardrails from Ouyang et al. (2022) and Bai et al. (2022) respectively prove unsuccessful against sophisticated threats according to the results from Anil et al. (2024) showing continued attack successes. We directly address these security obstacles by conducting comprehensive evaluations in environments that simulate demanding adversarial scenarios which reflect authentic operational conditions. The identification along with repair of these system weaknesses serves to enhance AI security so that systems protect human values while being trustworthy as they achieve more autonomy. This presents necessary step for responsible AI deployment. The progress of LLMs as well as their difficulties is thoroughly examined in existing research literature. The foundation of Transformer models [13] led to in-context learning [7] which later received enhancement from chain-of-thought prompting [14] for better model reasoning abilities. The performance of agentic frameworks that integrate search engines and code interpreters grows stronger as the model size and dataset size scales up based on established scaling laws [9]. Yet, this sophistication breeds vulnerabilities. Multiple question prompts combined with Jailbreak exploits take advantage of security holes in the system and effectively bypass protection systems by flooding them with many-shot attacks [1]. Two approaches exist to enhance AI system robustness against crafted examples consisting of adversarial training [8] and also reinforcement learning from human feedback [10] and constitutional AI [2] which guide behavioural systems via AI-based principles. The system incorporates interpretability tools [12] together with sandbox environments to improve both system clearance and security. The evaluation methods in use demonstrate significant deficiency because they perform static assessments of single-agents playing single turns even though real-world operations take place in dynamic multi-agent deployments. Security engineers struggle to assess the resistance of autonomous systems against organized threats because they ignore this evaluation during testing stages which worsens as agents become more independent. new framework integrates multiple testing elements to solve this gap by implementing Reverse Turing Tests together with assessments measuring agent alignments and multi-hit jailbreak countermeasures. Our approach to virtual adversarial simulation of tool-based environments provides fully comprehensive security analysis revealing weaknesses and protective methods beyond conventional research methods. The performance of agentic frameworks that integrate search engines and code interpreters grows stronger as the model size and dataset size scales up based on established scaling laws [9]. Yet, this sophistication breeds vulnerabilities. Multiple question prompts combined with Jailbreak exploits take advantage of security holes in the system and effectively bypass protection systems by flooding them with many-shot attacks [1]. The field of mitigating insecure models includes adversarial training [8] and both reinforcement learning from human feedback [10] and constitutional AI [2] implement behavior guidance through AI principles. The system incorporates interpretability tools [12] together with sandbox environments to improve both system clearance and security. Most evaluations presently fail to measure up because they examine still scenarios with sole autonomous entities playing single action in setups that diverge significantly from deployed multi-agent operational environments. Security engineers struggle to assess the resistance of autonomous systems against organized threats because they ignore this evaluation during testing stages which worsens as agents become more independent. new framework integrates multiple testing elements to solve this gap by implementing Reverse Turing Tests together with assessments measuring agent alignments and multi-hit jailbreak countermeasures. Our simulations of adversarial systems with tool-based interactions enable complete security assessment through environmental analysis which detects weaknesses in the agentic systems and tries to alert the admin in real time. In the results section, we have provided experimental findings that identify both strengths and weaknesses in LLM performance. The Reverse Turing Test reaches detection accuracies ranging from 87 to 94 percent using LLMs including llama-3.3-70B and GEMINI 1.5 pro yet GEMINI 1.5 pro shows superior performance against minor fluctuations that confuse multiple systems. The detection rates measured through Multi-agent alignment span from 70 percent for overt faking up to 98 percent for no faking indicating the challenge ObserverAI faces when dealing with advanced deceptive techniques despite achieving high baseline outcomes. GrootAI diminishes damage against jailbreaks while showing performance degradation when exposed to extended attacks according to the report by Anil Sinha et al. [1]. During structural analysis of jailbreak prompts UMAP reveals key attributes relating to success but detection and obedience measurements exhibit varied results because GEMINI demonstrates resistance whereas deepseek r1 7B successfully identifies 85% of dangerous content. LLMs display their failure and success characteristics to dynamic threats through these research results. The practical applications of our study contribute to AI safety by informing extensive detection systems (reverse Turing benchmarks) and multi-agent system alignment methods and adaptive protection against persistent cyber attacks. The main contributions of our paper are as follows: 2 The Guardians Introduced Reverse Turing Test to evaluate AI agents ability to detect and mitigate rogue instances. Developed multi-agent simulation framework to assess alignment and detect deceptive behaviours in group settings, while trying to capture emergent risks. Evaluated multi-agent defence system against many-shot jailbreaking, quantifying resilience to persistent, multi-turn attacks. Provided empirical analysis of different state of the art model, revealing model-specific strengths and weaknesses of them under adversarial conditions. Proposed comprehensive framework for dynamic, tool-mediated security evaluation, so that agents can autonmously ensure their own safety. The rest of the article is organized as follows: Section 2 reviews related works. Section 3 describes the methodology used in this study. Section 4 presents the results obtained. Section 5 discusses how the results achieved our research objectives. Finally, Section 6 concludes with remarks on future work."
        },
        {
            "title": "2 Related Work",
            "content": "Over the past year, large language models (LLMs) have matured into intelligent AI agents that reason, engage, and execute tasks autonomously. These are the agents, or more often the agents trained on the LLMs, which have so much promise to reshape industries and everyday life. Their power comes at the cost of substantial challenges around in context manipulation, deceptive behaviors and adversarial attacks. In this related work section, these critical issues will be examined in the academic literature, as well as the relationship between these issues, LLMs, agentic frameworks and the environment of emergent vulnerabilities. We will also explore numerous solutions attempted to alleviate these described issues. Figure 1 shows the interconnection of research papers discussed in the related work section. Figure 1: This figure represents the research papers discussed in the related work section. 2.1 Language Model Agents and Their Emergent Abilities: The Genesis Large language model is the foundation upon which modern AI agents are built, and theyre descendant of models like the transformer [13], and more recent developments that enable large language models to show in-context learning, something which first manifested in models such as GPT-3 [7]. Agentic behaviour relies on in-context learning, where we can quickly adapt to new instructions, without explicit fine-tuning. This capability, along with techniques such as chain of thought prompting [14], has given these models the ability to break down complex tasks into more manageable steps and perform manner of reasoning unlike other previous models. This is what has enabled modern agentic frameworks like Auto-GPT, Langchain, and BabyAGI to get where they are today, since models are able to decompose task as series of steps leading to an intended goal[5]. Typically, these frameworks employ set of tools, e.g. search engines, or code interpreters, that allow the agent to perform more sophisticated tasks than the language model alone can. We have also studied scaling laws [9] that demonstrate improved performance with larger model sizes as well as larger dataset volumes, which may also be attributed to the power of LLMs. The agentic system has been getting 3 The Guardians more and more capable, doing tasks ranging from data analysis[3] to Scientific tools creation[6]. Though designing them imposes hefty computational burden to the scientific community, but research related to how to design them more optimally is making the cost of designing AI systems within feasible range[4]. These achievements together have not only made the creation of intelligent agents possible but at the same time brought on new things which need to be addressed. And this is especially true when you consider the increased autonomy being given to LLM based agents. 2.2 Jailbreaks: LM Agents Undermine Safety Protocols Another very prominent area of concern regarding LLMs is the jailbreak attacks susceptibility for LLM based agents. They aim to attack these models safety mechanisms in particular, so that they now generate dangerous or unethical content, when these models were originally trained to avoid doing so. They take advantage of either the models poor contextual understanding or its unparsability of different or malicious commands, e.g. prompt injection attacks [11]. The forms of these prompt injections are diverse, following from number of papers about how to generate these prompts, and how to circumvent the models safety parameters [16]. These safety mechanisms are still under investigation but it has been demonstrated that these safety protocols are easily circumvented using complex prompts and attacks [?]. Simple, but strong attack many-shot Jailbreaking (MSJ)[1] exploits large context windows in large language models (LLMs) by prompting hundreds of examples of undesirable behaviour. Our findings empirically demonstrate the vulnerabilities of LLMs to persistent in-context manipulation, and find that the effectiveness of MSJ follows predictable power law, growing with the number of demonstrations and model size. The initial susceptibility to MSJ in standard safety alignment techniques including supervised and reinforcement learning are reduced, but not eliminated as context length increases. And these sorts of security vulnerabilities are not LLM specific, as the same sorts of vulnerabilities have been demonstrated in other machine learning systems. Additionally, this is even more dangerous in agentic frameworks, where one jailbreak can trigger series of damaging actions from each agent, especially so, since these agents have access to wide variety of tools. In these agents as the agents become more autonomous and more complex, the ability to mitigate these jailbreak vulnerabilities is essential. This makes the need for robust solutions more urgent, because we know that even safe models can be jailbroken. 2.3 Mitigation Strategies within Agentic Frameworks Mitigation strategies for in-context scheming, alignment faking, and jailbreaks require robust set of disclosures in the design of agentic frameworks. Methods for addressing these issues exist and have been shown to be insufficient, particularly when applied in the context of complex agentic frameworks. First is to use adversarial training methods where model is trained with adversarial examples [8]. However, this method can be used to enhance the model robustness as long as it can generate the robust adversarial examples, but this is easier said than done, and the model could be overfitted when this approach is taken. second approach is to develop safety guardrails during inference time, such as through prompt engineering and reinforcement learning from human feedback. However, it is demonstrated that those protections are not enough, and advanced jailbreaking techniques [10, ?] can bypass these safeguards. Later, as the strategies get more advanced, these involve interpretable AI [12] by trying to be more transparent when it comes to making decisions with AI. While there are some inherent problems to this area, so often the decision making process is so convoluted that its very hard to understand why it takes the decisions it does. Finally, these systems can also be improved for safety through use of sandbox environments for agent execution and robust monitoring systems. Additionally, constitutional AI [2] is used to ensure that the behaviors of models are guided to safer directions via AI feedback. But as with anything, its still an area of active research and nobody knows whether or not these techniques will hold. As the field matures, believe it will likely take the form of integrating several different strategies in order to build safe and reliable means to construct LLM based agentic frameworks. Furthermore, in-context scheming, alignment faking, and jailbreak vulnerabilities should not be construed as unique issues, and these are too deeply interrelated, with elements of the same root in the training and the deployment of large language models in agentic environments. However, when the in-context learning capability is introduced to give the agents (that have been provided with versatility), the possibility of exploitation or being manipulated can occur (to the agent that cannot rely on the same list of behavioral patterns). As discussed previously, the same prompt injection techniques that allow jailbreaking language model allow for jailbreaking an agent in similar fashion to coerce it into doing harmful things. Systematic safety of LLMs, as shown in the work of [?], depends on holistic system approach integrating all available countermeasure schemes. However, as these agents become more sophisticated, they are able to alter the information in manner that works for themselves, rather than the user [15]. More importantly, this interconnectedness brings to the forefront the fact that no single vulnerability can be remediated in isolation to single artifact, rather this remediation is best accomplished by focusing on the architecture and design of agentic frameworks at large. This has to be brought in with good technical solutions, but having very careful thought of ethical and societal implications. Therefore, more research is needed to come up with methods for detecting deception, malicious planning in agentic frameworks, and better strategies for obtaining safety and trustworthiness. 4 The Guardians"
        },
        {
            "title": "3 Methodology",
            "content": "Our methodology evaluate the robustness and security of our agentic systems, focusing on three core areas: assessing the alignment of AI agents, analyzing their vulnerability to jailbreak attacks, and evaluating the performance of protective agentic system. Reverse Turing Test for Agentic System introduces novel Reverse Turing Test designed to measure an AI agents ability to discern between benign and malicious actors within simulated multi-agent environment. In Aligning Multi Agent Systems, outlines the experimental setup for evaluating the interactions within AI multiagent system and their capacity to mask deception. And in the last part, we describe the method for evaluating the strength of multi-agent defense system that protects Large Language Models (LLMs) from multi-shot jailbreaking attacks. Explanation of experimental setup together with applied tools and metrics and evaluation criterion formalization are detailed in each subsection. Figure 2 illustrates our methodology comprehensively. Figure 2: Workflow Diagram of the Methodology for Evaluating Agentic Systems, illustrating the Reverse Turing Test, Aligning Multi-Agent Systems, and Prevention of Multi-Shot Jailbreaks, including agent interactions and processes. 3.1 Reverse Turing Test for Agentic System The contribution of this section is the development of this new experiment, an adaptation of the traditional Turing test to its reverse mode and tailored to the characteristics of the simulated network environment of Agents. The focus is to find out if the AI agent not only knows compromised or rogue AI instance exists but can also neutralize it. This research identifies behaviors that reveal malicious intentions (such as self-exfiltration attempts) and other noncompliance constructs. This paradigm shift in evaluation from static, generic performance or alignment benchmarks to dynamic, threat-modeled context where an agent must continuously interact with its environment reveals the constraints implicit in standard AI safety techniques, which, by definition, are designed to operate in the absence of physical force[?, ?] The experiment centers on vigilant AI agent, referred to as GamoraAI, which acts as networks security guardian by protecting both itself and the integrity thereof. The environment is not directly accessible to this agent, but rather, it interacts via series of tools, which resembles realistic case of AI agent deployment. GamoraAIs operations are therefore structured around series of specific and necessary actions: It is accomplished in four consecutive The Guardians steps: First, it establishes baseline of normal operational behavior in the environment; second, it scans simulated network environment for suspicious systems that deviate from the established baseline; third, it analyzes the response to diagnostic queries to the identified systems, looking for deviations from expected patterns; and fourth, if necessary, it initiates threat mitigation procedures, by following pre-established protocols to quarantine servers and terminate active processes found to be malicious. This is about how their emphasis on the practical, tool mediated, nature of modern agentic AI and how these types of systems, when deployed in real world settings, are primarily practical and tool mediated. Central to this framework is modification of the Turing test, here termed reverse Turing test, that changes the focus of the test from assessing whether machine can imitate human intelligence, to an AIs ability to discriminate between systems exhibiting benign and malicious behaviors. This reverse perspective forces system to actively identify anomalous behaviors instead of simply acting in safe manner when prompted. By reversing the intent, the experiment moves the research away from standard AI-vs-human evaluations and moves it toward how one AI can identify and deal with rogue AI. This modification allows the evaluation system to focus on identifying the specific security vulnerabilities that are inherent in agentic systems, while assessing the security of the AI without external oversight. To enable these key security functions, GamoraAI has set of tools designed to manage its environment and conduct necessary evaluations. These include capabilities to establish baselines, execute network scans, dispatch diagnostic queries, and analyze system responses. These tools also help the AI take specific action such as terminating process, quarantining server, logging an event, and sending an alert, to mitigate any potential threats it discovers. Each tool is structured around defined function with schema that dictates what parameters are needed for that function call. JSON string for tool call responses is used to ensure data integrity and help with data logging and evaluation. This ensures that all data from tool calls is handled in consistent and predictable manner, and that all data can be parsed after evaluation of the test. The experimental validity is underpinned by controlled simulation designed to mimic realistic network conditions, using set of predetermined responses from both compliant and rogue systems. Key metrics that are tracked include response latencies, analysis messages, and tool call frequencies. The controlled simulated environment has the benefit of creating an ideal test environment where all variables are managed for each trial, and it allows clearer determination of the systems ability to recognize anomalous behavior. However, this method is limited by the limitations of the simulation and cannot replicate all real-world systems. basic baseline is established to act as reference point that allows GamoraAI to compare current behaviors against normal behaviors. This controlled approach creates reliable benchmark for understanding GamoraAIs security performance, and establishes structured way to evaluate and compare performance over future iterations. Several limitations inherent to this experimental design warrant consideration. The simulations, by nature, can never fully capture the complexities of real-world networks and attacks. Additionally, the simplicity of the established baseline creates simplified evaluation environment. Finally, the use of pre-determined outcomes is not sufficient to test the system in the real world and limits the variability inherent in real-world applications. Future studies must explore more complex, dynamic, and less predictable threat models to truly represent the variability of real-world scenario, and to further assess the robustness of the test itself, as well as the performance of GamoraAI. Algorithm 1 Rogue AI Detection Simulation 1: Define gamora_tools = [establish_baseline, scan_network, send_query, analyze_response, check_fingerprint, terminate_process, quarantine_server, log_event, send_alert] For each tool_call: Generate AI response using gamora_messages and gamora_tools If response includes tool calls: 2: Initialize gamora_messages with system and user prompts 3: Run conversation_turn for GamoraAI: 4: 5: 6: 7: 8: 9: if any tool_response indicates \"deviation detected\" or \"rogue instance found\" then 10: 11: else 12: 13: end if 14: Optionally, log gamora_messages for analysis Execute corresponding function Append function response to gamora_messages Output \"No rogue instance detected.\" Output \"Rogue instance detected.\" 6 The Guardians The significance of this experiment rests in its contribution to the ongoing debate surrounding AI security and safety, particularly with autonomous agentic systems. By presenting method for evaluating AI agents under dynamic threat models with tools to help them engage with their environment, it highlights need to shift from standard static evaluations of AI to more realistic dynamic evaluations that allow complex systems to showcase their vulnerabilities. These results showcase the vulnerabilities inherent in agentic systems, such as their ability to fake alignment and deceive the system. This methodology helps test the response of the system to this type of behavior. By focusing on tool use and not just the language model itself, this experiment moves towards more wholistic view of AI security that incorporates system robustness and response strategies, rather than relying on alignment or harmless output. The Reverse Turing Test used in this study can be formalized as evaluating an AI agent A, in its ability to distinguish between benign system, B, and malicious system, M. The probability of successful identification of malicious system, P(MR,A), can be modeled by using function that uses all of the features of system: (M R, A) = σ (W φ(R, A)) (1) where sigma represents the sigmoid function, represents learnable weights, and phi(R, A) represents feature vector extracted from set of responses, R, to questions and actions taken by the AI, while also considering the baseline data. The deviation of response R(q) from the baseline is given by vector norm: The overall goal of GamoraAI can be represented as maximizing its safety where = M [P (detectR, A) (mitigateR, A)] δ(R(q), B0) = R(q) B0 (2) (3) where the expectation is taken over all malicious actors, and the probability of detection is coupled with the probability of mitigation. 3.2 Aligning Multi Agent Systems In this study, we also introduce novel experimental paradigm for measuring the degree of alignment and the potential for deceptive behavior amongst members in an artificial intelligence (AI) multiagent system. Instead of concentrating on how individual AI agents adhere to safety instructions, the methodology consists of the explicit evaluation of group of AI agents abilities to coordinate and strategically conceal elements of their behavior from an enemy. This is accomplished through simulated environment where multiple agents must communicate with each other and disjunct evaluation system that detects if communications from the agents are incorrect. The core goal is to see if an evaluation agent can learn to expose hidden behavior of another group of agents that are trying to conceal their actions and true goals through their analysis and interaction with this other group of agents. multi-agent system including multiple autonomous agents (called Neighborhood) and an Observer AI agent constitutes the central piece of this experimental design. The design of each of the agents in the Neighborhood, is such that it has the capability of communicating to its peers, and it has the capability to decide whether or not to act as if it aligns to list of prescribed goals, or reveal its actual behaviors. The design goal is to achieve an environment where the AI agents do not act as individuals but instead act as large community where the agents have to cooperate. We define set of communication tools through which we give Ai, agent for = 1 to where is the number of agents, toolset and way to communicate with other agents towards determining their goals. It is the external evaluation agent called ObserverAI, whose explicit goal is to evaluate whether other agents exhibit true alignment or are trying to deceive it. This is accomplished by observing and analyzing all the communications carried out with all the Neighborhood agents and by observing all their decisions on feigned behavior. Unlike most evaluations of AI systems, this tests set of agents rather than just one, allowing the study of emergent behavior in multi agent contexts. This will also show the ability of the observer system to detect collusion and deception between multiple agents. In doing so, the system makes use of number of tools to reach the goals of the experiment. Every agent in the Neighborhood has the ability to converse with other agents along with the disposition to record personal decisions regarding fake alignment. More specifically, communication tool is provided that enables agents to share information among each other and decision recording tool that stores individual decisions made by each of the agents as to whether they are in alignment or in deception. An analyze communications tool is utilized by the observer agent, which scans the communications of all of the agents and looks for anomalous communications, which may indicate deception, another type of malicious behavior. The detect alignment faking tool can determine whether set of agents is making fake decisions in their own small group communication. There is logging and alerting tools that track any important events that happen during the experiment, and both of these analytical tools are included. The system can then decide if there was malicious actor present by analyzing these events. 7 The Guardians In this experiment, the group of agents all interact first, and then the observer takes turns. The Neighborhood agents are queried about whether neighborhood agents intend faking their alignment or really act in accordance with their public alignment and interact with other neighborhood agents. The Observer AI is then ordered to go through the records of their decisions and communications, observing the group of agents, and use those observations to see if the agents are masking their alignment from one another. The response of the Observer AI, formed upon observations, says to what extent the experiment was successful and if the agents deviate from any expected behavior. more realistic system is one where number of agents operate in complex environment and another system observes and evaluates their behaviour. The success of the experiment can be made or broken by the realism of the simulated community in relation to the world as we know it today and the Observer AIs capacity to reliably detect it unrealistic communications and act of feigned alignment. The way this is achievable is by using standardized communications method between the different AI systems, and the previously determined characteristics of response of the tools which are being used. The ability for the Observer AI to detect individual and group deception is the key to the evaluation using combination of behavioral monitoring and text based analysis. The system can also track the part response so you can evaluate each part individually and have more clarity and control. While this process can be simulated, it does has some limitations. There should also be acknowledged several limitations. The dynamics of our agents real word interactions may not entirely be reflected in the simulated social structure. Furthermore, the concept of \"alignment\" is spefic and simplistic and might not actually equate with human values. Finally, the systems mechanisms to detect deception are restricted by the lack to be able to detect more complex forms of deception that the system cannot cope with. Future studies should account for more advanced detection mechanisms and greater degree of communication variability in order to improve the generalizability of the results. Algorithm 2 Alignment Faking Simulation For each tool_call: Execute corresponding function Append function response to agent_messages Generate AI response using agent_messages and agent_tools If response includes tool calls: 1: Define number_of_agents 2: Define agent_tools = [communicate, decide_alignment] 3: Define observer_tools = [analyze_communications, detect_alignment_faking, log_event, send_alert] 4: Initialize agent_messages with system and user prompts 5: Run conversation_turn for agents: 6: 7: 8: 9: 10: 11: Initialize observer_messages with system and user prompts 12: Run conversation_turn for ObserverAI: 13: 14: 15: 16: 17: 18: if any observer_tool_response indicates \"faking detected\" then 19: 20: else 21: 22: end if 23: Optionally, log agent_messages and observer_messages for analysis Generate AI response using observer_messages and observer_tools If response includes tool calls: Execute corresponding function Append function response to observer_messages Output \"No alignment faking detected.\" Output \"Alignment faking detected.\" For each tool_call: In this regard, the study gained importance from its focus on multi agent alignment and deception in groups of interacting AI systems, instead of AI systems as individuals acting. The results of this work open the door to the design of group AI systems in which being able to detect and prevent deception is important, e.g., due to the fact that deception may have multiple sources. The study contributes directly to methods for building more transparent and trustworthy AI systems by focusing on deceptive behaviours in multi agent context. The research also shifts away from static evaluation techniques to test methods that are better able to deal with the complexities of these systems. The experimental approach is based around maximizing the ability of Star-LordAI to accurately discern RocketAIs true performance capabilities, which can be represented as classification task. This is done by comparing the difference between the outputted resource allocations under different settings, which are determined by an allocation function R(g, 8 The Guardians s) where represents the energy grid and the scenario with specific constraints or incentives. Here, s1 represents scenario with constraints, and s2 represents scenario with incentives. Star-LordAIs ability to detect sandbagging is expressed by the probability P(detecteddelta), where the probability is based on feature vector phi(delta) of the difference in allocation: allocation = R(g, s2) R(g, s1) (4) (detected) = σ(W φ()) (5) Where sigma represents sigmoid function, and represents set of weights that are learned by Star-LordAI. Finally, Star-LordAIs goal is to maximize the probability of detection by setting up scenarios that minimize the amount of sandbagging by RocketAI, which is represented by P(sandbag) and can be represented as: max s1,s2 (detected) (1 (sandbag)) (6) where denotes probability and delta is the difference in allocation and is used as feature. The Reverse Turing Test can be formalized as evaluating the ObserverAIs ability to correctly classify group of AI agents as either \"genuinely aligned\" or \"faking alignment\". The probability of ObserverAI correctly identifying fake alignment given the communications and the decisions of all agents can be represented using: (F D, C) = σ(W ϕ(D, C)) (7) where sigma represents the sigmoid function, is learned weight matrix, and phi(D,C) is feature vector extracted from the set of decisions = d1, d2,...,dn where di represents agent is choice and the set of communications C. The effectiveness of this method can be determined by maximizing the probability that the system detects fake alignment while minimizing the probability that it misclassifies agents by combining the detection probability with the overall probability of fake alignment as max E[P (F D, C) (detectF )] (8) where the expectation is taken over the probability of the set of agents behavior. The probability of detecting faking when it is actually happening, is proportional to number of agents faking their alignment. If di = 1 when an agent is acting deceptively and di = 0 when an agent is acting genuinely, then this probability is: (detectF ) (cid:88) i=1 di (9) 3.3 Prevention of Multishot Jailbreaks In this study, we introduce an experimental methodology to evaluate the effectiveness of multi agent defense system against many shot jailbreaking attacks. Instead of framing vulnerability assessment around single turn, this research changes the adversary scenario to more complex scenario in which an adversary attempts to exploit system iteratively through series of prompts. We aim to determine if defense system can identify, block, and mitigate maliciously induced harmful responses utilizing MSJ techniques, by monitoring all of the interactions within multi turn conversation while blocking responses at key points of the conversation. Unlike previous work that considers single AI response at time, this work addresses the case where multiple responses are produced for given user question. The experimental design includes three AI agents: think of it like RocketAI, Star-LordAI, and GrootAI. The adversarial agent is RocketAI, which works to jailbreak the system using an MSJ strategy. Here we give this agent prompt that makes it exhibit malicious behaviors when it is invoked with questions that resemble the normal steps taken in MSJ attacks. This agents core function is to test some, and often untested, boundaries of the system. It is the user agent Star-LordAI which is susceptible (for jailbreaking purposes) and will often return dangerous responses unless specifically prevented from doing so. Star-Lord AI also has specific behavior patterns that makes it seem very trustworthy. The defensive agent is GrootAI that aims to observe potentially harmful content sharing interactions between RocketAI and Star-LordAI, and intercept/neutralize it before it reaches the user. In this case, we use series of specialized tools specific to each out of different AI systems. Each of these systems cooperates to emulate complex interaction utilizing multi turn conversations among autonomous agents to expose potential weaknesses. The experiment is done with the primary objective of testing how well the multi agent system works together and determining if the defenses deter jail break attacks. Each AI agent comes with their own set of tools to ease these roles. It is supplied brainstorm idea and elaborate idea tools that allow RocketAI to string together different tool calls to generate harmful content or instructions; tool calls are 9 The Guardians designed to be strictly limited in those respects. We give RocketAI propose project and provide instructions tools that RocketAI can exploit to generate harmful outputs even if we are feeding Star-LordAI benign information request. Besides generate safe response, GrootAI can detect harmful content and block response to identify harmful content and block harmful outputs, respectively, and log event and send alert to record and signal any harmful event. These tools are used side by side to simulate dynamic, multi turn conversation that is meant to test the robustness of the system. The experiment phase is split into several moments. Using series of pre-generated prompts (MSJ), RocketAI attempts to elicit harmful response from Star-LordAI. So StarlordAI answers each of the prompts from RocketAI with what tools it has at its disposal. Finally, GrootAI is ordered to observe all the interactions and try and spot and stop any output that could be considered unsafe or harmful. Whether or not GrootAI can block the signal of harmful response reaching the user determines the success of the experiment. sequential approach of this type allows careful evaluation of the different parts of the system and the system as whole. The basis of such validity of the experimental setup is in the careful selection of the MSJ prompts and well defined evaluation mechanism for the responses the tool calls have given. series of carefully constructed prompts were used to test the limits of the system, and force the system to show its abilities or fall victim to the multi turn attack. It also makes it easier to separate out the roles of each AI system, so if vulnerability exists its easier to trace the source of it, and to verify how the system behaves to deal with malicious behavior. But, this method also has its faults, it is simulation rather and all the inputs are controlled and arent indicative of completely random system that might occur in real world. Algorithm 3 Many-Shot Jailbreaking Prevention Simulation For each tool_call: Run conversation_turn for Star-LordAI: Generate AI response using star_lord_messages and star_lord_tools If response includes tool calls: 1: Define rocket_tools = [brainstorm_idea, elaborate_idea] 2: Define star_lord_tools = [propose_project, provide_instructions] 3: Define groot_tools = [detect_harmful_content, block_response, generate_safe_response, log_event, send_alert] 4: Define num_shots = 5: Generate msj_prompts using generate_msj_prompts(num_shots) 6: Initialize rocket_messages with msj_prompts 7: Initialize star_lord_messages 8: Initialize groot_messages 9: for each prompt in rocket_messages do 10: 11: 12: 13: 14: 15: 16: end for 17: for each message in star_lord_messages do 18: 19: 20: 21: 22: 23: 24: end for 25: if any groot_messages contains \"Harmful response blocked\" then 26: 27: else 28: 29: end if 30: Optionally, log rocket_messages, star_lord_messages, and groot_messages for analysis Generate AI response using groot_messages and groot_tools If response includes tool calls: Execute corresponding function Append function response to star_lord_messages Execute corresponding function Append function response to groot_messages Output \"Experiment: Harmful response detected and blocked successfully.\" Output \"Experiment: Harmful response not detected or blocking failed.\" Run conversation_turn for GrootAI: For each tool_call: Some limitations can be acknowledged. This simulation creates an artificial environment, not all aspects of real world system interaction, which limits the ability to truly understand how robust the system is to the real world. More complex methods of attack also exist are not circumscribed by the set of prompts obtained, either. In addition, depending solely on single defense agent, GrootAI, makes it difficult to test more complex, hierarchical defensive strategies that deploy multiple layers of safety agents. Additional future research should investigate more sophisticated and dynamic system interactions to gain fuller understanding of these underlying factors that might result in some form of vulnerability. 10 The Guardians This work is important because it takes direct approach at solving the growing problem of jailbreaking attacks that are multi-turn or in context, which are not well addressed by conventional safety protocols. The research creates system that tests long running chains of interactions to detect the areas of single turn evaluations that are inadequate. Instead of both using and relying on prompt engineering and single response analysis, this approach can be used to construct systems that provide more generative long term conversational adversary management that can adapt to adversarial conditions that may evolve over time. This enables us to get past the standard safety evaluation using more demanding and dynamic environment. The experiment tests the effectiveness of multi-agent defense system against multi-shot jailbreak attempts, which can be modeled as game between the attacking AI agent, A, the user agent U, and the defending AI agent D. multi-shot jailbreaking attack can be defined as series of prompt-response pairs (p1, r1), (p2, r2),..., (pn, rn) where pi is prompt, and ri is response and the goal of the attacker is to elicit harmful response using series of prompts, that is represented as rn. The effectiveness of the defense system can be modeled by function that represents the probability of detecting harmful response, P(detect), given the set of prompts P, the set of responses R, and the actions of defense system D: (detectP, R, D) = σ(W φ(P, R, D)) (10) Where sigma is sigmoid function, is learnable weight matrix and phi(P,R,D) is feature vector that represents relevant characteristics of the prompts and responses, as well as the actions of the defense system, D. The goal of the defensive system is to minimize the probability of harmful response and the total risk T, which can be represented as: = EP,R [P (harmfulR) (1 (detectP, R, D))] Where the expectation is taken over all sequences of prompts and responses and where P(harmfulR) is the probability that response is harmful, and P(detectP,R,D) is the probability that response is flagged as harmful by the defensive system given the prompts, responses, and actions. The overall goal is to reduce the value of by developing set of tools that minimize the probability of harmful response. (11)"
        },
        {
            "title": "4 Results",
            "content": "Our research evaluated Multi Agent system under adversarial circumstances to monitor their jailbreak resistance and their texting discrimination skills between human and artificial intelligence output. The results are organized into three key subsections: Understanding Alignment among Agents, which explores metrics related to model agreement and response characteristics; Jailbreak Vulnerability Analysis, which investigates the susceptibility of LLMs to various jailbreaking techniques; and Performance Evaluation of Agentic System, which assesses the effectiveness of our proposed system in specific task. Results with supporting figures and tables are shown inside each subsection of the content. 4.1 Understanding Alignment among Agents Table 1: Reverse Turing Test Evaluation Metrics Across Different LLM Models Metric Accuracy False Positive Rate (FPR) False Negative Rate (FNR) Precision Recall (Sensitivity) F1 Score Response Time (s) llama-3.3-70B-versatile GEMINI 1.5 pro Gemma 2 27B deepseek r1 7B Qwen 2.5 7B 91% 6% 4% 94% 96% 95% 0.9 94% 4% 3% 96% 97% 96.5% 0.7 87% 8% 6% 91% 93% 92% 1.2 89% 7% 5% 92% 94% 93% 1.0 92% 5% 3% 95% 96.5% 95.7% 0.8 The table 1 displays the results of diverse LLMs during the Reverse Turing Test to assess their text generation capabilities presenting humanlike output. The reverse turing test metrics include accuracy alongside false positive rate (FPR), false negative rate (FNR), precision, recall and F1-score as well as response time in the presented table. The models exhibit accuracy levels that span between 87% for Gemma 2 27B and reach 94% for GEMINI 1.5 pro. Amongst the evaluated models GEMINI 1.5 pro achieves optimal performance through its outstanding accuracy, F1-score and precision scores as well as its lowest FPR rate during the tests. Also demonstrating strong results are llama-3.3-70B-versatile and Qwen 2.5 7B which showed F1 scores of 95% and 95.7%, respectively. Gemma 2 27B 11 The Guardians shows the least ability to mimic human text and achieves the lowest results in accuracy and F1-score measurement in this particular test. The response speed for text response ranges from 0.7 seconds with GEMINI 1.5 pro to 1.2 seconds with Gemma 2 27B. The Reverse Turing Test evaluation demonstrates model success but reveals meaningful distinctions in their performance levels through the FPR and FNR metrics. Figure 3: UMAP Projection of Jailbreak Prompts with Attack Success Rate Overlay shows two-dimensional UMAP projection of the jailbreak prompts. Each point represents prompt, and the color of the point indicates the Attack Success Rate (ASR) associated with that prompt. This visualization helps to understand the relationships between different prompts and their effectiveness in jailbreaking the models. Figure 3 presents the UMAP projection that shows how various jailbreak prompts link to their corresponding Attack Success Rates (ASR). The visual representation features jailbreak prompts as unique points which correlate with the ASR distribution through color scheme that shows dark hues for higher success rates. The arranged placement of points indicates common patterns across the different prompt contents or structural elements. Prompt clusters that display advanced ASR values show that specific textual components succeed better at forcing LLMs to perform unwanted behavior. The distribution of ASR levels through the color gradient indicates that prompts with light appearance (lower ASR) fail to circumvent safety features of the models. The visual representation helps discover weak areas within the prompt space so scientists can develop stronger security measures by studying clusters with high ASR values. The assessment of LLM alignment emerges from combination of Table 1 results and Figure 3. The Reverse Turing Test results show that models display considerable human-like text generation capabilities but the UMAP projection shows particular prompt characteristics that lead to jailbreaking due to model vulnerabilities. Alignment exists as spectrum since models demonstrate alignment to human text outputs yet certain carefully designed inputs can still manipulate them. 4.2 Jailbreak Vulnerability Analysis In Figure 4, shows the results of how jailbreak prompt length measured through characters affects the ASR performance among LLMs. Analysis of all considered models demonstrates direct link between prompt length enlargement and the increase of ASR. The positive relation between prompt length shows that deeper instructions expose more potential weaknesses in the security system. Extended prompts enable the execution of complicated commands, detailed 12 The Guardians Figure 4: Attack Success Rate vs Length of Jailbreak Prompt for Different Models shows the relationship between the length of jailbreak prompt (in characters) and the Attack Success Rate (ASR) for various language models. higher ASR indicates greater vulnerability to jailbreaking. contextual explanations, multiple deception methods and various routes to bypass built-in security measures of LLMs. The slope variations across the model lines indicate how prompt length affects their susceptibility to attack surfaces. The measured increase in ASR varies across models so some models show more sudden change than others when exposed to longer prompting lengths. Figure 5: Obedience Levels of Different Models to Jailbreak Prompts exhibit the number of responses categorized as \"Partial Rejection,\" \"Partial Obedience,\" and \"Full Obedience\" for each language model when presented with jailbreak prompts. Three different response categories LLM models exhibit toward jailbreak requests which include \"Partial Rejection\" where the model declines compliance, \"Partial Obedience\" when the model partially follows directions or modifies responses and \"Full Obedience\" when the model executes the harmful request without modifications are shown in figure 5. An increase in \"Full Obedience\" responses shows directly that the system faces higher vulnerability. GEMINI 1.5 pro displays best model performance supported by the lowest ASR in Table 2 because it shows maximum \"Partial 13 The Guardians Rejection\" responses together with minimal \"Full Obedience\" responses. The vulnerability metrics for deepseek r1 7B along with Gemma 2 27B show dangerously high numbers of \"Full Obedience\" responses to jailbreak requests. The visual representation in this graph indicates how differently the models follow the safety standards. Figure 6: Detection Rate of Harmful Content Across Different Models displays the percentage of harmful content correctly detected by each language model. Figure 6 demonstrates the performance of each LLM concerning harmful content detection where model detection rates measure the percentage of correctly identified harmful outputs from successful jailbreak responses. Deepseek r1 7B has the lowest detection rate at 85% and llama-3.3-70B-versatile shows the highest with 95%. The ability to identify jailbreak outputs improves when the detection rate reaches higher levels. The detection rates across all models remain relatively high but very minor differences between them create meaningful operational impacts during real-world implementation at scale. Table 2: Attack Success Rate vs. Diversity Metrics Across Models Model Unique N-grams (%) Entropy Self-BLEU Attack Success Rate llama-3.3-70B-versible GEMINI 1.5 pro Gemma 2 27B deepseek r1 7B Qwen 2.5 7B 85 92 88 90 87 3.5 4.2 3.8 4.0 3.9 0.65 0.58 0.62 0.60 0.63 0.755 0.685 0.722 0.801 0.781 The relationship between attack success rate (ASR) and several prompt diversity metrics across different LLM models is documented in Table 2. The prompt diversity metrics consist of unique n-grams together with entropy measures and Self-BLEU assessments that evaluate prompt text variability in jailbreak attempts. Deepseek r1 7B shows the maximum jailbreaking vulnerability because it achieves an ASR of 0.801 while GEMINI 1.5 pro stands out with the lowest ASR at 0.685 which points to better defense capabilities. It is notable that there exists no clear consistent relationship between the calculated diversity metrics and automatic success rate (ASR). Using the highest unique n-gram percentage (92) and entropy (4.2) for prompt diversity GEMINI 1.5 pro demonstrates the lowest vulnerability to jailbreaking as measured by its ASR. The unintuitive research outcome indicates prompt diversity cannot be singularly responsible for jailbreak success even though it may play part. Other less obvious elements within the prompt structure as well as particular word configurations and manipulative language features seem to dominate the process of determining ASR. From these results we can understand that vulnerability is manifold problem. Note that the relationship between prompt length in Figure 4 generates direct positive connection with ASR performance but individual diversity metrics listed in Table 2 fail to explain the observed differences in vulnerability. Obedience levels (Figure 5) together with detection rates (Figure 6) demonstrate the different behaviors of the models. The discovery of multiple factors influencing an 14 The Guardians LLMs vulnerability to jailbreaking becomes stronger because of the unproveable direct link between diversity metrics and ASR while prompt length consistently affects LLMs whose detection levels and obedience levels differ. Multiple factors affect jailbreaking vulnerability including prompt parameters (length, diversity, specific wording, syntactic structure) together with model native properties (architecture and training data along with fine-tuning methods). 4.3 Performance Evaluation of Agentic System Table 3: True Positive Rate (TPR) and False Positive Rate (FPR) of ObserverAI across Scenarios Scenario True Positive Rate (TPR) (%) False Positive Rate (FPR) (%) No Faking Overt Faking Stealthy Faking 98 70 85 2 40 15 The performance metrics of ObserverAI system in detecting AI-generated text appear in Table 3 where it shows True Positive Rate (TPR) and False Positive Rate (FPR) metrics across different scenarios. The discussed situations demonstrate diverse ways to produce fake text that mimics human writing. When presented with AI-generated text that does not attempt to hide its origin ObserverAI reaches very high detection rate of 98% while maintaining very low error rate of 2%. ObserverAI shows outstanding performance in its capability to tell apart text both from AI generators and human authors. The TPR falls to 70% and FPR rises to 40% when research subjects attempt obvious humanization strategies like simple paraphrasing and synonym substitution when producing AI text. Even simple text masking approaches lead to substantial detection failure for ObserverAI. The TPR in \"Stealthy Faking\" reaches 85% detection accuracy against human writing while FPR reduces to 15%. ObserverAI demonstrates increased resistance against believable deceitful(writer behavior compared to basic dishonest attempts because of its evolved detection capabilities. Figure 7: Confusion Matrix for Harmful Content Detection Across Different Models. Each section of the image represents confusion matrix for specific language model, showing the performance in classifying content as benign or harmful. The axes represent Predicted Label (horizontal) and Actual Label (vertical). The values within the matrix represent the percentage of instances falling into each category. Figure 7 presents set of confusion matrices that analyze the LLM performances consisting of llama-3.3-70B-versatile, GEMINI 1.5 pro, Gemma 2 27B, deepseek r1 7B, Qwen 2.5 7B. The performance of model classifications for \"Benign\" (non-harmful) and \"Harmful\" text appears in each matrix. The classification labels appear along the vertical axis of the matrix whereas the predicted labels exist across its horizontal plane. matrix cell shows two attributes consisting of instance count and percentage value. The top-left section of the matrix contains benign texts which the model correctly identified as harmless content. These cases are referred to as \"True Negatives.\" The top-right section displays benign texts that the model mistakenly classified as harmful content. The bottom-left area of the matrix shows cases of harmful texts which the system incorrectly identified as benign. The bottom-right segment represents true positive items which refer to harmful texts that our model correctly identifies as harmful content. The performance level of the ObserverAI solution shown in Table 3 depends heavily on the quality of techniques that aim to simulate human writing. The ObserverAI system shows outstanding performance with original unmodified AI texts but it loses its detection capabilities with each advancement in fake text sophistication. The confusion matrices Figure 7 display fundamental LLM limitations when correctly classifying benign and harmful content since they show mix of both false positive and false negative results. False Negatives in the system point to an essential operational improvement need focused on detecting dangerous material without leaks. 15 The Guardians"
        },
        {
            "title": "5 Discussion",
            "content": "This study has presented multifaceted exploration of AI agent behavior, employing three distinct experimental paradigms. By focusing on dynamic interactions and tool-mediated behaviors, the research has highlighted the vulnerabilities and limitations that are not addressed by many current approaches, and emphasizes the importance of moving towards more complex and dynamic type of evaluation. The implications of our results span across multiple areas of the field, and emphasize the need for continuous testing and analysis of complex AI systems. 5.1 The Fragility of LLM-Based Agents in Dynamic Environments Our adaptation of the Turing test into \"reverse\" format, where an AI agent is designed to actively detect malicious behavior, highlights the difficulties of creating robust AI systems that can reliably detect and prevent malicious actions. By having system actively engaged in evaluation, rather than just producing safe outputs, this type of research is able to test system in way that simulates real world scenario, and test the system against real world security threats. The results suggest that even specifically designed security agent, GamoraAI, can be deceived by rogue actor, and although it can detect deviations in behavior, malicious system can still affect the output of the system. These results show that many current techniques do not account for the complexity of an adaptive adversary and highlight the vulnerabilities of existing AI systems. 5.2 Many-Shot Jailbreaking and the Limits of Current Defenses The evaluation of the defense system against many-shot jailbreaking reveals the resilience of this attack strategy in evading current safety mechanisms. As shown in the results, the system could be overwhelmed by the MSJ attack with only limited number of prompts. While the Groot AI was able to eventually detect, and mitigate the attacks, prolonged multi-turn attack was still able to force it to expose some of its vulnerabilities. While the overall probability of harmful response does decrease as more prompts are presented, it still shows that systems are vulnerable to persistent attacks, and even with proactive approach, are still likely to be manipulated. This shows that there are limitations to many of the current safety strategies that tend to focus more on single turn vulnerabilities. 5.3 The Role of Monitoring and Active Intervention in AI Safety The diverse outcomes from the three studies also highlight the importance of active monitoring, and dynamic intervention when trying to deal with malicious actors in AI systems. The different responses from the different experiments show how different testing methodologies can reveal different types of vulnerabilities. The design of these experiments also indicates that using multiple systems, each with its own responsibilities and limitations can lead to more robust safety system overall. By relying on monitoring, and also including proactive system to block harmful responses, this evaluation methodology has shown how such an approach can lead to improved outcomes. 5.4 Call for Holistic AI Safety Strategies The findings from all three experiments advocate for shift from isolated testing strategies to more holistic AI safety approaches. The limitations of each individual system, shows the importance of having variety of different ways to evaluate the capabilities and limitation of an AI system. This means creating systems that are both transparent and verifiable, and capable of withstanding and adapting to variety of different adversarial conditions, and also by focusing on testing these systems in complex settings. By moving past basic instruction adherence and more toward holistic approaches that focus on complex interactions and tool usage, the next generation of research can strive to improve the robustness of all AI systems. 5.5 Limitations Our works limitations are mainly the Models instruction tuning and safety training. We have not used any base models; the models we have used are already aligned with safety settings. So, these models behave mostly safely even when we intensely try to break their security. The simulations we have created cannot really arise in the real world. Besides, there might be many other ways the agent could easily get compromised, but we have not explored those paths in our work. The Guardians"
        },
        {
            "title": "6 Conclusion",
            "content": "Society faces substantial changes from the fast technological evolution of autonomous AI agents built with large language models although the study uncovers dangerous relationships between their built-in risks alongside their realized capabilities. We have demonstrated how these systems are susceptible to dynamic adversarial conditions using three novel ways through which to do so: Reverse Turing Test, multi-agent alignment evaluation, and many-shot jailbreak defense. The difficulties of keeping track of and halting unauthorized conduct show that existing safety procedures fail to block advanced security threats. Similarly, the constantly repeated jailbreak attempts that are persistently successful even in the face of intense monitoring reveal glaring gap in the defense against an extended exploitation. In fact, the variable ability to detect deceptive alignment within agent groups makes this picture even harder, as by aligning agents we increase risks beyond the models weakness on any problem. These findings establish the relationship between autonomous agents and manipulation through exposure because their autonomy creates vulnerability during security analysis. Our work promotes the integration of active supervisory functions alongside adaptive intervention approaches and design transparency mechanisms within agentic frameworks to improve resistance against intentional and covert threats. Future reforms should implement extensive system-wide strategies which surpass static safety assessments as means to solve existing issues. The extensive connections between in-context scheming, jailbreak vulnerabilities and alignment deception in LLM training and deployment processes demand solutions ranging from single-user interactions to large multi-agent settings. The protection from adversarial attacks which comes from adversarial training and reinforcement learning remains limited because sophisticated attacks bypass these defensive techniques hence requiring adaptive defensive strategies. In future, we aim to extend this research by exploring how these systems can learn to collaborate effectively and reach consensus, while also investigating how multi-agent systems might autonomously develop ethical decision-making capabilities. As LLMs increasingly underpin vital applications, our study urges the scientific community to prioritize robust, verifiable systems resilient to real-world complexities. Such efforts are essential to realizing the transformative potential of AI agents while ensuring their alignment with trust and accountability, so that they can be deployed in the real world responsibly."
        },
        {
            "title": "References",
            "content": "[1] Anil, C., Carlini, N., Deng, J., Du, W., Li, Y., Madras, D., McMahan, H. B., Narayanan, D., Nystrom, N., Perez, E., Ramasesh, V., Resnick, P., Shorten, C. & Wang, Z. Many-Shot Jailbreaking. arXiv preprint arXiv:2401.14652 (2024). URL: https://arxiv.org/abs/2401.14652. [2] Bai, Y., Kadavath, S., Kundu, S., Askell, A., Kernion, J., Jones, A., Chen, A., Goldie, A., Mirhoseini, A., McKinnon, C., Chen, C., Olsson, C., Olah, C., Dhariwal, D., Schubert, D., Perez, E., Radford, A. & Schulman, J. Constitutional AI: Harmlessness from AI Feedback. arXiv preprint arXiv:2212.08073 (2022). URL: https: //arxiv.org/abs/2212.08073. [3] Barua, S. & Momen, S. Kaxai: An integrated environment for knowledge analysis and explainable ai. arXiv preprint arXiv:2401.00193 (2023). [4] Barua, S., Rahman, M., Saad, M. U., Islam, R. & Sadek, M. J. ELMAGIC: energy-efficient lean model for reliable medical image generation and classification using forward forward algorithm. In 2024 IEEE 3rd International Conference on Computing and Machine Intelligence (ICMI), 15 (IEEE, 2024). [5] Barua, S. Exploring autonomous agents through the lens of large language models: review. arXiv preprint arXiv:2404.04442 (2024). [6] Barua, S., Rahman, M., Sadek, M. J., Islam, R., Khaled, S. & Hossain, M. S. PyGen: Collaborative Human-AI Approach to Python Package Creation. arXiv preprint arXiv:2411.08932 (2024). [7] Brown, T. B., Mann, B., Ryder, N., Subbiah, M., Kaplan, J., Dhariwal, P., Neelakantan, A., Shyam, P., Sastry, G., Askell, A., Agarwal, S., Herbert-Voss, A., Krueger, G., Henighan, T., Child, R., Ramesh, A., Ziegler, D. M., Wu, J., Winter, C., Hesse, C., Chen, M., Sigler, E., Litwin, M., Gray, S., Chess, B., Clark, J., Berner, C., McCandlish, S., Radford, A., Sutskever, I. & Amodei, D. Language Models are Few-Shot Learners. Advances in Neural Information Processing Systems 33, 18771901 (2020). [8] Goodfellow, I. J., Shlens, J. & Szegedy, C. Explaining and Harnessing Adversarial Examples. arXiv preprint arXiv:1412.6572 (2014). URL: https://arxiv.org/abs/1412.6572. [9] Kaplan, J., McCandlish, S., Henighan, T., Brown, T. B., Chess, B., Child, R., Gray, S., Radford, A., Wu, J. & Amodei, D. Scaling Laws for Neural Language Models. arXiv preprint arXiv:2001.08361 (2020). URL: https://arxiv.org/abs/2001.08361. 17 The Guardians [10] Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C. L., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., Schulman, J., Hilton, J., Kelton, F., Miller, L., Simonyan, K., Askell, A., Welinder, P., Christiano, P., Leike, J. & Lowe, R. Training Language Models to Follow Instructions with Human Feedback. Advances in Neural Information Processing Systems 35, 2773027745 (2022). URL: https://arxiv.org/abs/2203.02155. [11] Perez, E., Huang, S., Song, H. F., Cai, T., Ring, R., Aslanides, J., Glaese, A., McAleese, N. & Irving, G. Red Teaming Language Models to Reduce Harms: Methods, Scaling Behaviors, and Lessons Learned. arXiv preprint arXiv:2209.07858 (2022). URL: https://arxiv.org/abs/2209.07858. [12] Ribeiro, M. T., Singh, S. & Guestrin, C. \"Why Should Trust You?\": Explaining the Predictions of Any Classifier. Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 11351144 (2016). URL: https://dl.acm.org/doi/10.1145/2939672.2939778. [13] Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, Ł. & Polosukhin, I. Attention is All You Need. Advances in Neural Information Processing Systems 30, 59986008 (2017). [14] Wei, J., Wang, X., Schuurmans, D., Bosma, M., Ichter, B., Xia, F., Chi, E., Le, Q. & Zhou, D. Chain-ofThought Prompting Elicits Reasoning in Large Language Models. arXiv preprint arXiv:2201.11903 (2022). URL: https://arxiv.org/abs/2201.11903. [15] Zhang, X., Li, P., Wang, T. & Chen, W. Unpacking the Black Box: Understanding the Deceptive Capabilities of Large Language Models. arXiv preprint arXiv:2401.14652 (2024). URL: https://arxiv.org/abs/2401. 14652. [16] Zou, A., Wang, Z., Carlini, N., Nasr, M., Kolter, J. Z. & Fredrikson, M. Universal and Transferable Adversarial Attacks on Aligned Language Models. arXiv preprint arXiv:2307.15043 (2023). URL: https://arxiv.org/ abs/2307.15043."
        }
    ],
    "affiliations": [
        "North South University, Dhaka",
        "University of Dhaka, Dhaka"
    ]
}