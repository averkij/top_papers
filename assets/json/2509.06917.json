{
    "paper_title": "Paper2Agent: Reimagining Research Papers As Interactive and Reliable AI Agents",
    "authors": [
        "Jiacheng Miao",
        "Joe R. Davis",
        "Jonathan K. Pritchard",
        "James Zou"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "We introduce Paper2Agent, an automated framework that converts research papers into AI agents. Paper2Agent transforms research output from passive artifacts into active systems that can accelerate downstream use, adoption, and discovery. Conventional research papers require readers to invest substantial effort to understand and adapt a paper's code, data, and methods to their own work, creating barriers to dissemination and reuse. Paper2Agent addresses this challenge by automatically converting a paper into an AI agent that acts as a knowledgeable research assistant. It systematically analyzes the paper and the associated codebase using multiple agents to construct a Model Context Protocol (MCP) server, then iteratively generates and runs tests to refine and robustify the resulting MCP. These paper MCPs can then be flexibly connected to a chat agent (e.g. Claude Code) to carry out complex scientific queries through natural language while invoking tools and workflows from the original paper. We demonstrate Paper2Agent's effectiveness in creating reliable and capable paper agents through in-depth case studies. Paper2Agent created an agent that leverages AlphaGenome to interpret genomic variants and agents based on ScanPy and TISSUE to carry out single-cell and spatial transcriptomics analyses. We validate that these paper agents can reproduce the original paper's results and can correctly carry out novel user queries. By turning static papers into dynamic, interactive AI agents, Paper2Agent introduces a new paradigm for knowledge dissemination and a foundation for the collaborative ecosystem of AI co-scientists."
        },
        {
            "title": "Start",
            "content": ": Reimagining Research Papers As"
        },
        {
            "title": "Interactive and Reliable AI Agents",
            "content": "Jiacheng Miao1,2, Joe R. Davis1, Jonathan K. Pritchard1,3, and James Zou2,4 1Department of Genetics, Stanford University 2Department of Biomedical Data Science, Stanford University 3Department of Biology, Stanford University 4Department of Computer Science, Stanford University Repository Demo Abstract We introduce Paper2Agent, an automated framework that converts research papers into AI agents. Paper2Agent transforms research output from passive artifacts into active systems that can accelerate downstream use, adoption, and discovery. Conventional research papers require readers to invest substantial effort to understand and adapt papers code, data, and methods to their own work, creating barriers to dissemination and reuse. Paper2Agent addresses this challenge by automatically converting paper into an AI agent that acts as knowledgeable research assistant. It systematically analyzes the paper and the associated codebase using multiple agents to construct Model Context Protocol (MCP) server, then iteratively generates and runs tests to refine and robustify the resulting MCP. These paper MCPs can then be flexibly connected to chat agent (e.g. Claude Code) to carry out complex scientific queries through natural language while invoking tools and workflows from the original paper. We demonstrate Paper2Agents effectiveness in creating reliable and capable paper agents through in-depth case studies. Paper2Agent created an agent that leverages AlphaGenome to interpret genomic variants and agents based on ScanPy and TISSUE to carry out single-cell and spatial transcriptomics analyses. We validate that these paper agents can reproduce the original papers results and can correctly carry out novel user queries. By turning static papers into dynamic, interactive AI agents, Paper2Agent introduces new paradigm for knowledge dissemination and foundation for the collaborative ecosystem of AI co-scientists. 5 2 0 2 8 ] . [ 1 7 1 9 6 0 . 9 0 5 2 : r a"
        },
        {
            "title": "1 Introduction",
            "content": "The research paper is the traditional unit of scientific communication. It remains the norm for documenting methods, results, and insights, and is the primary way research is shared with the broader community. However, papers are fundamentally passive objects: reader must discover the paper (not an easy task given the flood of publications), parse its contributions, and manually determine how to apply them to their own work. In particular, when paper describes new computational method, significant technical barriers often remain before the method can be Email: {jcmiao, jamesz}@stanford.edu 1 used on new data [1]. reader might need to locate the corresponding code repository, install dependencies, configure environments, and interpret the correct inputs and outputs [2]. Even with well-maintained repositories, this process is often non-trivial. For instance, consider AlphaGenome, which provides powerful framework for genome-scale foundation modeling [3]. Despite its utility, this system requires substantial technical expertise to set up and deploy, limiting accessibility for biologists who could otherwise benefit. Using AlphaGenome in code involves installing the environment, importing multiple modules, creating client objects with API keys, and constructing inputs such as chromosomes, variant objects, and selecting desired output modalities. Users must understand the API hierarchy and parameter semantics, which imposes learning curve for biologists unfamiliar with these abstractions. This illustrates broader challenge: research outputs are passively siloed behind technical barriers. Paper2Agent re-imagines research dissemination by turning static papers into active AI agents. Each agent serves as an interactive expert on the corresponding paper, capable of demonstrating, applying, and adapting its methods to new projects. Figure 1: Overview of the Paper2Agent. (A) Paper2Agent turns research papers into interactive AI agents by building remote MCP servers with tools, resources, and prompts. Connecting an AI agent to the server It starts with codebase creates paper-specific agent for diverse tasks. extraction and automated environment setup for reproducibility. Core analytical features are wrapped as MCP tools, then validated through iterative testing. The resulting MCP server is deployed remotely and integrated with an AI agent, enabling natural-language interaction with the papers methods and analyses. (B) Workflow of Paper2Agent. 2 AI agents are autonomous systems that can reason about tasks and act to achieve goals by leveraging external tools and resources [4]. Modern AI agents are typically powered by large language models (LLMs) connected to external tools or APIs. They can perform reasoning, invoke specialized models, and adapt based on feedback [5]. Agents differ from static models in that they are interactive and adaptive. Rather than returning fixed outputs, they can take multi-step actions, integrate context, and support iterative humanAI collaboration. Importantly, because agents are built on top of LLMs, users can interact with agents through human language, substantially reducing usage barriers for scientists. Recent advances highlight the promise of agents for accelerating discovery. For example, the Virtual Lab framework organizes teams of AI scientist agents that collaboratively design and execute research projects across biology and chemistry [6]. Similarly, Googles AI co-scientist serves as virtual collaborator, assisting with hypothesis generation and research proposal development [7]. Sakana AIs co-scientist aims for automation of the research lifecyclefrom ideation to publication [8]. FutureHouse provides an AI scientist platform designed for diverse scientific tasks [9]. Alongside these general-purpose platforms, specialized agents are also emerging for specific domains [10]. For example, CellVoyager introduces an agentic system for autonomous analysis of single-cell omics data [11]. Biomni is an AI agent for diverse biological tasks [12]. These systems demonstrate that agents can not only execute code, but also generate hypotheses, evaluate uncertainty, and adapt methods to new datasets. Paper2Agent complements this emerging paradigm by generalizing the concept: any research paper can be converted into an agent that embodies the knowledge and methods described in the publication. Paper2Agent provides an automated workflow for converting scientific paper into an agent. The core idea is to represent the paper as Model Context Protocol (MCP) server [13]. MCP is standardized protocol that allows structured APIs and tools to be exposed in way that is directly accessible to LLMs and agent frameworks. The conversion process involves: (i) identifying the key contributions of the paper (datasets, methods, models, or workflows); (ii) encapsulating these contributions through an MCP server, defining the inputs, outputs, and usage instructions; (iii) linking the MCP server to LLM-based agents, enabling natural language querying and autonomous execution. Users can then interact with the paper by asking questions, requesting demonstrations, or applying the method to new data. As an illustration, applying Paper2Agent to AlphaGenome would expose its genome foundation model as an MCP. Instead of requiring users to clone repositories and configure dependencies, they could simply ask: Generate AlphaGenome predictions for these variants., \"Interpret the expected effect of this variant on chromatin accessibility in muscle cells.\" or Visually compare the AlphaGenome predicted expression changes for splicing variant in cell types of interest. The Paper2Agent-generated agent would handle the setup, execution, and presentation of results, making the method accessible to both computational experts and experimental biologists. Efforts to make research outputs more executable and accessible have been ongoing for years. Executable paperssuch as those proposed in Elseviers Executable Paper Grand Challenge [14] and more recent Jupyter Notebookbacked publications [15]sought to merge narrative text with runnable code. These approaches increased reproducibility but still required substantial technical familiarity to engage with fully. The Papers with Code initiative [16] similarly aimed to bridge papers and implementations by linking publications to open-source repositories. While this improved discoverability, the barrier of installing and executing the code remained. Paper2Agent substantially extends this trajectory by providing new framework: paper can be transformed into capable agent accessible via natural language. In contrast to previous efforts, 3 Paper2Agent shifts the research output from document or codebase encoding knowledge to knowledgeable entity capable of execution and dialogue. This represents new mode of scientific communication, moving beyond static dissemination to interactive collaboration. This framework lowers barriers to adoption, democratizes access to advanced methods, and accelerates the translation of research into practice."
        },
        {
            "title": "2 Results",
            "content": "Overview of Paper2Agent Paper2Agent is multi-agent AI system that automatically transforms research papers into interactive AI agents with minimal human input. The paper agents created via this framework are: 1. Interactive and easy to use: Users can execute complex scientific analyses through natural language prompts, eliminating the need for programming expertise. 2. Reliable and reproducible: Each tool used by paper agent is validated against the reference codebases reported results and figures using example datasets, then locked to ensure reproducibility. This design mitigates the risk of code hallucination, where executing inaccurate LLM-generated code could lead to incorrect scientific results. It also minimizes randomness in code generation, further strengthening reproducibility. Finally, every tool includes code reference from the original paper to provide transparency and traceability. MCP has recently become an industry standard for connecting LLM-based agents with external resources, providing unified interface for accessing datasets and tools without custom integration [13]. Paper2Agent builds on this ecosystem with two components: (i) Paper2MCP, which extracts information from papers and their codebases to build remote MCP servers; and (ii) an agent layer, which wraps each MCP server as context provider to instantiate paper-specific AI agents (Figure 1A). Any LLM or external agent can invoke the servers tools through MCP without extra setup. For presentation clarity, we assign one MCP server and one paper agent to each paper. The same approach can create MCPs and agents for group of related papers. Each MCP server includes three core components: 1. MCP Tools are executable functions that encapsulate papers methodological contributions. For example, one AlphaGenome MCP tool takes genetic variant as input and generates predictions and visualizations of its effects on gene expression, chromatin accessibility, and other modalities. These tools come with pre-configured environment for seamless execution. 2. MCP Resources serve as repository of static assets, including the manuscript text, the associated codebase, and supplementary materials such as datasets, tables, and figures. As an illustration, the AlphaGenome MCP resources include links to the training data used to train the model. All resources are stored in accessible, standardized formats to enable efficient querying and integration by AI agents. 3. MCP Prompts contain concise instructions that guide AI agents through complex, multistep scientific workflows derived from papers text or codebase. For example, Scanpy MCP Prompt encodes the sequence of steps for preprocessing and clustering single-cell data, which we present later in the manuscript. These templates orchestrate tools and resources to ensure reproducible, systematic analyses while reducing the barrier to effective prompting. The paper MCP servers can be hosted remotely on platforms like Hugging Face Spaces, eliminating local dependency issues. MCP standardizes communication, enabling secure and scalable 4 integration with AI agents. The agent layer wraps each Paper2MCP server as context provider, creating paper-specific conversational agents. Any compatible LLM or agent can connect to these servers to perform tasks such as reproducibility checks, new data analyses, or figure regeneration. For example, user might ask, Apply the method in this paper to the newly generated dataset, and the agent will automatically run the pipeline, produce results, and present interpretable outputs. By abstracting away technical details, the agent lowers barriers to method adoption, ensures reproducibility, and helps researchers focus on insights rather than implementation. We implemented Paper2Agent with Claude Code [17], an AI coding agent specialized in managing complex coding tasks and real-time iterative debugging (Extended Methods). The workflow begins by identifying the codebase associated with paper (Figure 1B). Two specialized agents are then invoked: the environment agent, which configures the necessary software environment, and the extraction agent, which translates core methods into implemented tools. These tools are validated through testing agent that runs automated checks, refining both the code and environment until results match the reference outputs. Once validated, the tools and environment are packaged into an MCP Python file that can be deployed on remote server such as Hugging Face. Finally, the paper MCP server is connected with an AI agent to create fully functional Paper Agent, enabling interactive access to the papers methods through natural language queries. We use Claude Code as the downstream AI agent in our case studies, though the paper MCPs can be flexibly integrated with different chat agents. Because MCPs are modular, multiple MCPs can be connected to the same chat agent, enabling users to leverage tools and resources across multiple papers simultaneously. Next, we present three case studies demonstrating Paper2Agents ability to convert diverse research papers into reliable, interactive AI agents for different scientific tasks. These case studies include AlphaGenome [3] for genomics, TISSUE [18] for spatial transcriptomics, and Scanpy [19] for single-cell analysis."
        },
        {
            "title": "AlphaGenome Agent for Genomic Data Interpretation",
            "content": "The first case study showcases AlphaGenome agent. AlphaGenome is an AI model designed to predict the impact of single-nucleotide variants or mutations in human DNA sequences on wide range of regulatory processes. Paper2Agent transforms the AlphaGenome paper into an interactive AlphaGenome agent, enabling automated interpretation of genomics data. Through natural language queries, users can leverage this agent to prioritize causal genes for disease-associated variants, clarify the regulatory impact of individual variants, and inform the design of synthetic DNA with specific regulatory functions. Paper2Agent generated 22 AlphaGenome MCP tools in around 3 hours on personal laptop without human intervention, comprehensively covering its methodological innovations. This onetime process produces reusable tools for future applications. These MCP tools span singleand batch-variant scoring across functional assays, sequence-level prediction, tissue ontology exploration, and an extensive visualization suite (Figure 2A). For example, score_variant_effect() is an MCP tool that predicts the functional consequences of genetic variants across multiple modalitiessuch as gene expression, splicing, and chromatin accessibilitywithin wide range of tissues and cell types. Complementing this, visualize_variant_effects() generates modalityspecific visualizations that simplify the interpretation of regulatory impact. 5 Figure 2: Overview of the Paper2Agent-generated AlphaGenome agent. (A) Construction of the AlphaGenome MCP server and agent. (B) Exposed MCP tools and resources enabling variant scoring and visualization. (C) Benchmarking shows 100% accuracy on queries for reproduction and new tasks. (D) Automated planning and interpretation of GWAS loci through iterative planningactionobservation cycles by the AlphaGenome agent. 6 Importantly, the tools generated by Paper2Agent are designed with flexible, well-annotated input parameters. For example, the visualize_variant_effects() tool exposes rich set of options that make it adaptable to diverse use cases (Figure 2B). Given an input genetic variant, the AlphaGenome agent can select the organism to analyze (human or mouse), adjust the sequence context length around the variant, toggle different modalitiessuch as RNA-seq, ATAC-seq, or ChIP-seq histone tracks. Moreover, each MCP tool embeds traceable link to the original GitHub source code, ensuring transparency and reproducibility. By connecting an AI agent with the AlphaGenome MCP, the system creates the AlphaGenome agent. Next, we benchmarked the Paper2Agent-generated AlphaGenome agent in producing numerical results and figures relative to human experts configuring and running the code manually (Figure 2C). We manually curated 15 example queries directly from the AlphaGenome tutorial, such as \"Score variant chr3:58394738:A>T using ATAC-seq predictions for motor neuron cells (CL:0000100). What is the quantile_score for this cell type?\", \"Make DNase-seq predictions for sequence GATTACA (padded to 2048 length) for lung tissue (UBERON:0002048). What is the nonzero_mean value in the dnase metadata\". The AlphaGenome agent achieved 100% accuracy on these queries, precisely matching all reported values. To assess generalizability and guard against potential overfitting to the original examples, we also manually curated set of novel queries that were not present in either the paper or its codebase (see Supplementary Table 2). These included previously untested variant positions, allelic substitutions, and tissuecell type contexts, such as \"Analyze variant chr9:98765432:T>C with DNASE predictions for muscle cells (CL:0000187). What is the quantile_score for muscle tissue?\" and \"Analyze histone ChIP-seq metadata for neuronal stem cells. What is the nonzero_mean value for H3K4me3 in neuronal stem cells (CL:0000100)?\" The AlphaGenome agent again achieved 100% accuracy, faithfully producing the expected numerical outputs, which we verified by manual execution of the original AlphaGenome code. Finally, we demonstrated that the AlphaGenome agent enables automatic interpretation of GWAS loci and validation of the analysis in the original paper. We considered the example of interpreting why the genetic variant chr1:109274968:G>T is associated with low-density lipoprotein cholesterol that was presented in the original AlphaGenome paper (Figure 2D). Based on the tools available, the AlphaGenome agent constructs step-by-step plan to solve this task. This plan includes generating input files, scoring variants across multiple modalities, filtering results for trait-relevant tissues, creating modality-specific visualizations (chromatin accessibility, histone marks, transcription factor binding, and splicing), and assembling comprehensive interpretation report. The agent then executes these actions using implemented tools, such as score_variant() and visualize_tf_binding(), automatically refining its strategy through iterative observation and feedback. final report is then presented to provide unified interpretation of the regulatory impact of the variant, integrating evidence across modalities and tissues. Interestingly, the AlphaGenome agent prioritizes SORT1 as the most likely causal gene, whereas the original paper emphasized CELSR2 and PSRC1. The agent favors SORT1 for two reasons: 1) high quantile score (0.99982) indicating strong predicted impact on SORT1 expression in liver tissue. Here, the quantile score reflects how extreme the variants predicted effect relative to other variants 2) SORT1 encodes sortilin, directly involved in LDL/VLDL secretion [20]. We manually queried the GTEx [21] eQTL data and confirmed that this variant is significant liver eQTL for SORT1 (p = 1.1e-65) in liver. However, both CELSR2 and PSRC1 also exhibit high AlphaGenome quantile scores (0.99998 each) and significant eQTL associations in GTEx liver (p = 4.7e-46 and 8.5e-50, respectively). This shows the inherent difficulty in confidently assigning causal genes at complex GWAS loci where the variants are eQTLs for multiple nearby genes [22, 23]. This discrepancy highlights key strength of Paper2Agent: with single prompt, users can re7 evaluate published conclusions using independent model-based evidence. Rather than treating the original interpretation as fixed, the agent enables dynamic hypothesis re-assessment and, at scale, provides systematic way to revisit conclusions across many studies. Figure 3: Overview of the Paper2Agent-generated TISSUE agent. (A) Construction of the TISSUE MCP server and agent. (C) Reproducibility confirmed by matching human researcher results. (D) Structured MCP resources enable standardized dataset access and automated downloads. (B) Q&A support for uncertainty-aware spatial transcriptomics analysis. 8 TISSUE Agent for Uncertainty-Aware Single-Cell Spatial Transcriptomics Analysis We next present the Paper2Agent-generated paper agent for TISSUE [18], recent paper that developed new method for uncertainty-aware single-cell spatial transcriptomics analysis (Figure 3A). This case study reflects common scenario: new methodology paper is published, and researchers want to apply the method to their own data but lack the time to navigate the codebase, configure the environment, and grasp the methods features and input requirements. Paper2Agent addresses these challenges by automatically generating ready-to-use agents for diverse papers and providing Q&A support to guide input preparation and clarify what the method can do. Paper2Agent generated 6 tools for the TISSUE MCP server, covering spatial gene expression prediction, prediction interval construction, and uncertainty-aware downstream analysis such as hypothesis testing, prediction, and dimensionality reduction (Figure 3A). Importantly, the TISSUE agent can also serve as an interactive guide (Figure 3B). For example, when prompted with Based on the TISSUE MCP server, what are the required inputs for TISSUE?, the agent returns structured and comprehensive explanation of the methods required inputs, expected outputs, and available features. This transforms the TISSUE paper into an interactive AI agent: instead of manually searching through documentation or code, users can directly ask the agent about how to use TISSUE and receive precise, actionable instructions. Next, we evaluate the TISSUE agents ability to construct prediction intervals for spatial transcriptomic (ST) prediction. We prompt the agent \"Calculate the prediction interval for the spatial gene expression prediction of gene Acta2 using TISSUE. This is my data: Spatial count matrix: Spatial_count.txt Spatial locations: Locations.txt scRNA-seq count matrix: scRNA_count.txt\". The agent automatically executes the TISSUE pipeline, without additional user intervention (Figure 3C). The output matches the results obtained by human experts running the pipeline manually. This illustrates the paper agents ability to run entire analysis workflows (in this case, from data loading and preprocessing through imputation and uncertainty estimation), not just individual tools. Finally, we showcase the use of MCP resources by translating the data availability section of the TISSUE paper into structured registry. This registry harmonizes ST datasets with standardized metadata (species, tissue type, modality, and data URL) and makes them directly accessible to the TISSUE agent through data repository APIs such as the Zenodo REST API (Figure 3D). Users can query and filter datasets, for example, by specieswithout manually navigating multiple repositories. Combined with the TISSUE MCP tools, users query might be: Download the mouse spatial transcriptomics data from this paper and run TISSUE to generate prediction interval after applying spatial prediction to the dataset.. The TISSUE agent then automatically filters for mouse data, downloads it, and applies the TISSUE pipeline. Scanpy Agent for Single-Cell Data Preprocessing Next, we demonstrate the application of the Paper2Agent-generated Scanpy agent for preprocessing and clustering for single-cell data analysis. Scanpy is widely used, comprehensive package for analyzing large-scale single-cell transcriptomic data [19]. In practice, many workflows in single-cell data analysis may rely on only subset of Scanpys features. To accommodate this, Paper2Agent supports converting not only entire methods but also specific parts of papers method into tools, enabling the AI agent to expose only the features most relevant for given analysis. 9 Figure 4: Overview of the Paper2Agent-generated Scanpy agent. (A) Construction of the Scanpy MCP server and agent. (B) MCP prompts encode standardized single-cell preprocessing and clustering pipeline. (C) Agent reproduces human researcher results, requiring only the dataset path as input. 10 We focus on Scanpys most common use case: preprocessing and clustering single-cell data. Paper2Agent generates 7 tools for this feature in around 45 minutes on personal laptop tools such as quality_control() for calculating and visualizing QC metrics, filtering cells and genes, and detecting doublets, and normalize_data() for normalizing count data (Figure 4A). This allows users to prompt the Scanpy agent to perform quality control on their single-cell data. In practice, many users prefer an end-to-end workflow for preprocessing and clustering, where the implemented tools are executed sequentially in the correct order. This type of analysis workflow is not unique to single-cell analysis but is common across many scientific domains. However, executing such workflows can be challenging: the AI agent must either already know the correct order of actions, or the user must provide carefully structured prompt that explicitly specifies the sequence. To overcome this limitation, we use MCP prompts to guide the agent. MCP prompts offer standardized way to encode workflows, ensuring that tools are executed in the proper order and relieving users from the burden of manually instructing the agent. Importantly, these MCP prompts are inferred directly from the paper and codebase by Paper2Agent, without the need for manual curation. This design improves both reproducibility and usability, particularly for complex analyses such as single-cell data processing. For example, the Paper2Agent-generated Scanpy MCP prompts encode standard preprocessing and clustering pipeline, including quality control, normalization, feature selection, dimensionality reduction, graph construction, clustering, and cell-type annotation in the correct order (Figure 4B). The prompt also instructs the Scanpy agent to inspect the data before analysis to select appropriate parameters. Users only need to provide the data path (e.g., data.h5ad), and the Scanpy agent automatically runs the workflow and provides summary of the analysis results. To evaluate the Scanpy agents performance, we applied it to preprocess and cluster three publicly available single-cell datasets from 10x Genomics (Data availability) that are not included in the Scanpy codebase. We invoke the Scanpy MCP prompts and query the Scanpy agent \"Perform standard single-cell preprocessing and clustering pipeline on this single-cell data: data.h5ad\". As shown in Figure 4C, the agent produces outputs that match those produced by human researchers when processing the same data. This demonstrates how MCP-promptpowered Scanpy agents streamline workflow execution, making advanced single-cell analysis both accessible and reproducible."
        },
        {
            "title": "3 Discussion",
            "content": "In this work, we introduce Paper2Agent, framework that transforms research paper from passive publication into an interactive AI agent. We demonstrate this approach by creating Paper2Agent instances for several methodological advances, including AlphaGenome for genomics, Scanpy for single-cell analysis, and TISSUE for spatial transcriptomics. These examples illustrate how paper agent can embody the research contribution, making it directly accessible through natural language interaction. The generated paper MCPs are modular units that can be connected to diverse user-facing agents, enabling broad adoption. By lowering the barrier between publication and practical application, Paper2Agent helps bridge the gap between how scientific discoveries are disseminated and how they are used in practice. Our initial focus has been on methodological papers, since they offer the clearest use case. Such papers typically describe algorithms, models, or computational workflows that other researchers seek to adopt, but whose deployment often requires substantial technical expertise. Converting them into agents allows the methods to be applied to new problems without the overhead of mastering complex software ecosystems. In future work, we plan to extend Paper2Agent to other 11 forms of research output, including data resources and discovery papers. In those contexts, the agents role may shift from computation to interpretation, curation, or explanation, guiding users through datasets or contextualizing new insights for diverse scientific communities. Not every paper can be seamlessly turned into robust agent. If the original codebase is incomplete, poorly documented, or contains unresolved errors, Paper2Agent cannot reliably expose it as functioning tool. Yet this limitation is itself informative: the ease with which paper can be transformed into an agent can serve as practical measure of reproducibility and rigor. Just as the scientific community has come to expect clear data and code availability, we envision that natural extension will be to expect contributions to be structured in ways that facilitate their translation into agents. Well-documented, modular, and transparent papers will naturally lend themselves to this new standard. To better quantify this ease of reproducibility and agentification, we have introduced benchmarking approach based on manually evaluated examples from the paper as well as novel examples meant to test generalizability. With this approach, we showed, for example, that the AlphaGenome agent was able to execute both tutorial-based and novel queries with 100% accuracy. This approach, however, is limited by expert knowledge of the paper and method and manual implementation and review. future direction is to further streamline this process with additional agentic frameworks, e.g. with LLM-as-judge evaluations [24]. Another consideration is the scale of agentification. While the paper is the conventional unit of scientific communication, it is not always the best unit for agentification. In many fields, an idea evolves across sequence of publications, each adding refinements, benchmarks, or applications. In such cases, the most useful agent may not represent single paper but rather collection of related works aggregated into coherent interface. single MCP can encapsulate multiple related papers. We plan to work on extensions of Paper2Agent to flexibly accommodate this broader scope. Looking forward, just as many journals now require data and code availability sections, we anticipate the emergence of an agent availability section that specifies whether and how the contribution has been embodied as an interactive agent. This would not only provide immediate utility to readers but also incentivize authors to present their work in form conducive to agentification. Finally, once scientific knowledge is encoded in active agents rather than static artifacts, the potential extends beyond individual use. Agents could interact with one another, linking methods to datasets or combining insights from different domains. For example, an agent representing new analytical method could collaborate with an agent representing newly released dataset, jointly producing analyses that neither artifact could support alone. Communities of such agents could form dynamic, interoperable layer of scientific intelligence, accelerating connections across disciplines. Paper2Agent thus points toward future in which scientific communication is not only about describing results, but also about creating interactive, collaborative entities that embody and extend the research."
        },
        {
            "title": "Data availability",
            "content": "This paper utilized publicly available data for analysis: 10x Genomics PBMC single-cell RNA-seq datasets: http://cf.10xgenomics.com/samples/cell-exp/ 3.0.0/pbmc_1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.h5, http://cf.10xgenomics. com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.h5, 12 http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_ v3_filtered_feature_bc_matrix.h5. Mouse somatosensory cortex spatial transcriptomic data: Dataset15 in https://zenodo.org/ records/8259942 GTEx portal: https://gtexportal.org/home/ AlphaGenome Github repository: https://github.com/google-deepmind/alphagenome TISSUE Github repository: https://github.com/sunericd/TISSUE Scanpy Github repository: https://github.com/scverse/scanpy"
        },
        {
            "title": "Code availability",
            "content": "Paper2Agent is publicly available at https://github.com/jmiao24/Paper2Agent. AlphaGenome MCP server: https://huggingface.co/spaces/Paper2Agent/alphagenome_mcp. Scanpy MCP server: https://huggingface.co/spaces/Paper2Agent/scanpy_mcp. TISSUE MCP server: https://huggingface.co/spaces/Paper2Agent/tissue_mcp."
        },
        {
            "title": "Agent availability",
            "content": "Paper2Agent-generated AlphaGenome agent is publicly available at https://huggingface.co/ spaces/Paper2Agent/alphagenome_agent."
        },
        {
            "title": "Acknowledgments",
            "content": "We thank Abubakar Abid, Eric Sun, Emma Dann, lab members from the Zou lab and the Pritchard lab for helpful feedback during the project. J.Z. is supported by funding from the Chan-Zuckerberg Biohub."
        },
        {
            "title": "References",
            "content": "[1] Ana Trisovic, Matthew Lau, Thomas Pasquier, and Mercè Crosas. large-scale study on research code quality and execution. Scientific Data, 9(1):60, 2022. [2] Dylan GE Gomes, Patrice Pottier, Robert Crystal-Ornelas, Emma Hudgins, Vivienne Foroughirad, Luna Sánchez-Reyes, Rachel Turba, Paula Andrea Martinez, David Moreau, Michael Bertram, et al. Why dont we share data and code? perceived barriers and benefits to public archiving practices. Proceedings of the Royal Society B, 289(1987):20221113, 2022. [3] Ziga Avsec, Natasha Latysheva, Jun Cheng, Guido Novati, Kyle Taylor, Tom Ward, Clare Bycroft, Lauren Nicolaisen, Eirini Arvaniti, Joshua Pan, et al. Alphagenome: advancing regulatory variant effect prediction with unified dna sequence model. bioRxiv, pages 202506, 2025. [4] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. In International Conference on Learning Representations (ICLR), 2023. [5] Chunqiu Steven Xia, Yinlin Deng, Soren Dunn, and Lingming Zhang. Agentless: Demystifying llm-based software engineering agents. arXiv preprint arXiv:2407.01489, 2024. [6] Kyle Swanson, Wesley Wu, Nash Bulaong, John Pak, and James Zou. The virtual lab of ai agents designs new sars-cov-2 nanobodies. Nature, pages 13, 2025. [7] Juraj Gottweis, Wei-Hung Weng, Alexander Daryin, Tao Tu, Anil Palepu, Petar Sirkovic, Artiom Myaskovsky, Felix Weissenberger, Keran Rong, Ryutaro Tanno, et al. Towards an ai co-scientist. arXiv preprint arXiv:2502.18864, 2025. [8] Sakana.AI. Sakana ai scientist. Sakana.ai Website, 2024. [9] Ali Essam Ghareeb, Benjamin Chang, Ludovico Mitchener, Angela Yiu, Caralyn Szostkiewicz, Jon Laurent, Muhammed Razzak, Andrew White, Michaela Hinks, and Samuel Rodriques. Robin: multi-agent system for automating scientific discovery. arXiv preprint arXiv:2505.13400, 2025. [10] Yuanhao Qu, Kaixuan Huang, Ming Yin, Kanghong Zhan, Dyllan Liu, Di Yin, Henry Cousins, William Johnson, Xiaotong Wang, Mihir Shah, et al. Crispr-gpt for agentic automation of gene-editing experiments. Nature Biomedical Engineering, pages 114, 2025. [11] Samuel Alber, Bowen Chen, Eric Sun, Alina Isakova, Aaron Wilk, and James Zou. Cellvoyager: Ai compbio agent generates new insights by autonomously analyzing biological data. bioRxiv, pages 202506, 2025. [12] Kexin Huang, Serena Zhang, Hanchen Wang, Yuanhao Qu, Yingzhou Lu, Yusuf Roohani, Ryan Li, Lin Qiu, Gavin Li, Junze Zhang, et al. Biomni: general-purpose biomedical ai agent. biorxiv, pages 202505, 2025. [13] Xinyi Hou, Yanjie Zhao, Shenao Wang, and Haoyu Wang. Model context protocol (mcp): Landscape, security threats, and future research directions. arXiv preprint arXiv:2503.23278, 2025. [14] Piotr Nowakowski, Eryk Ciepiela, Daniel Hare zlak, Joanna Kocot, Marek Kasztelnik, Tomasz Barty nski, Jan Meizner, Grzegorz Dyk, and Maciej Malawski. The collage authoring environment. Procedia Computer Science, 4:608617, 2011. [15] Adam Rule, Amanda Birmingham, Cristal Zuniga, Ilkay Altintas, Shih-Cheng Huang, Rob Knight, Niema Moshiri, Mai Nguyen, Sara Brin Rosenthal, Fernando Pérez, et al. Ten simple rules for writing and sharing computational analyses in jupyter notebooks, 2019. [16] Robert Stojnic and Ross Taylor. Papers with code is joining facebook ai, December 2019. Medium article. [17] Anthropic. Claude code: Deep coding at terminal velocity, 2025. Accessed via Anthropic website. [18] Eric Sun, Rong Ma, Paloma Navarro Negredo, Anne Brunet, and James Zou. Tissue: uncertainty-calibrated prediction of single-cell spatial transcriptomics improves downstream analyses. Nature Methods, 21(3):444454, 2024. [19] Alexander Wolf, Philipp Angerer, and Fabian Theis. Scanpy: large-scale single-cell gene expression data analysis. Genome biology, 19(1):15, 2018. 14 [20] Mads Kjolby, Morten Schallburg Nielsen, and Claus Munck Petersen. Sortilin, encoded by the cardiovascular risk gene sort1, and its suggested functions in cardiovascular disease. Current atherosclerosis reports, 17(4):18, 2015. [21] GTEx Consortium. The gtex consortium atlas of genetic regulatory effects across human tissues. Science, 369(6509):13181330, 2020. [22] Michael Wainberg, Nasa Sinnott-Armstrong, Nicholas Mancuso, Alvaro Barbeira, David Knowles, David Golan, Raili Ermel, Arno Ruusalepp, Thomas Quertermous, Ke Hao, et al. Opportunities and challenges for transcriptome-wide association studies. Nature genetics, 51(4):592599, 2019. [23] Hakhamanesh Mostafavi, Jeffrey Spence, Sahin Naqvi, and Jonathan Pritchard. Systematic differences in discovery of genetic effects on gene expression and complex traits. Nature genetics, 55(11):18661875, 2023. [24] Jiawei Gu, Xuhui Jiang, Zhichao Shi, Hexiang Tan, Xuehao Zhai, Chengjin Xu, Wei Li, Yinghan Shen, Shengjie Ma, Honghao Liu, et al. survey on llm-as-a-judge. arXiv preprint arXiv:2411.15594, 2024."
        },
        {
            "title": "Extended Methods",
            "content": "Details on implementing Paper2Agent Paper2Agent converts research paper and its public codebase into production-ready MCP server and then exposes that server to an AI agent interface. The process has four stages: (i) codebase identification and extraction, (ii) environment configuration, (iii) tool synthesis and MCP server generation, and (iv) testing, refinement, and deployment, followed by agent connection. We implemented this multi-agent AI system in Claude Code. We design an orchestrator agent that coordinates four sub-agents: Environment-manager: specialized agent responsible for creating clean, reproducible environments for research codebases. It analyzes project setup requirements, provisions an isolated workspace, installs all necessary dependencies, and ensures the code runs without conflicts. Standardizing environment setup enables reliable execution and reproducibility across different systems. Tutorial-scanner: specialized agent for reviewing the public codebases to identify and organize educational resources. It systematically scans available materials, distinguishes genuine tutorials from other files, and highlights those most useful for reuse. The agent then produces clear summaries and reports, providing structured view of which resources are worth keeping and which can be set aside. Tutorial-tool-extractor-implementor: specialized agent that converts tutorials into reusable tools. It reviews selected tutorials, identifies tasks that generalize beyond the example data, and implements each as clean, single-purpose function with clear inputs, outputs, and defaults. The agent parameterizes hardcoded values, enforces file-based inputs, saves essential results and figures, and returns standardized summary of produced artifacts. Its goal is to create practical function library that reproduces tutorial results on the original data while remaining ready to run on new datasets. Test-verifier-improver: specialized agent that creates, runs, and refines tests for tutorial implementations. It uses only the tutorials own examples to ensure complete coverage and faithful reproduction of numerical and visualization results. The agent runs in loop of generating tests, executing them, diagnosing failures, and applying fixes. If functions repeatedly fail, their MCP decorators are removed, and they will not be included in the MCP server. All results and logs are recorded for transparency. Paper2Agent contains six steps: 1. Locate and download the codebase. Identify the official repository linked to the paper, clone or download it, and gather associated resources such as supplementary data or configuration files. 2. Environment setup. Provision clean, reproducible workspace using an environment manager, pin dependencies, and verify imports so the codebase runs consistently across machines. 3. Tutorial discovery. Scan the repository to locate useful reference and educational materials and produce an index of candidate tutorials for tooling. 4. Tutorial execution and audit. Run the selected tutorials end-to-end with their example data, capture inputs, outputs, figures, and runtime constraints, and record any implicit assumptions that must be made explicit. 5. Tool extraction and implementation. Convert tutorial logic into reusable, single-purpose 16 functions with clear inputs and outputs, parameterize hardcoded values, and save essential artifacts while preserving tutorial fidelity. 6. MCP server assembly. Integrate the implemented tools, resources, and prompts into single MCP server with manifest, versioning, and basic security defaults, ready to be used by an orchestrator or co-scientist agent. The orchestrator agent invokes sub-agents as needed at different stages of the process. As the Paper2Agent workflow progresses, the results are automatically recorded for each step for traceability and reproducibility. The detailed setup and prompt are available in the Paper2Agent GitHub repository."
        },
        {
            "title": "Generation and analysis of AlphaGenome agent",
            "content": "We applied the Paper2Agent framework to the AlphaGenome paper to generate an AlphaGenome MCP and connect the MCP with Claude Code to create the AlphaGenome agent. The generated AlphaGenome MCP server is remotely hosted on Hugging Face Spaces (Code availability). To verify reproducibility, the AlphaGenome agent was evaluated using 15 original tutorial examples and 15 novel queries. We prompted the agent with the queries and compared the agents response with the ground truth answer. The prompt used to query the AlphaGenome agent on interpreting LDL genetic associations is: \"Use AlphaGenome to interpret why chr1:109274968:G>T associates with LDL cholesterol. Identify the causal genes and assess regulatory effects across modalities in liver. Generate publication-ready report with figures. My AlphaGenome API key is: <API_KEY>. Reason step by step.\". The detailed benchmark queries are available in the Paper2Agent GitHub repository."
        },
        {
            "title": "Generation and analysis of TISSUE agent",
            "content": "We applied the Paper2Agent framework to the TISSUE paper to generate TISSUE MCP and connect it with the Claude code to create the TISSUE agent. To assess reproducibility, we compared the TISSUE agents outputs against those generated by human researchers using identical Mouse somatosensory cortex ST data. Human researchers performed the analysis based on the tutorial of the TISSUE Github."
        },
        {
            "title": "Generation and analysis of Scanpy agent",
            "content": "The Paper2Agent framework was applied to the Scanpy software package to generate Scanpy agent. This agent was restricted to the preprocessing and clustering workflows within Scanpy, providing focused and reproducible pipeline for single-cell RNA-seq analysis. The resulting agent was deployed as an MCP server and integrated with Claude Code, enabling natural-language interaction. To construct the workflow in MCP prompts, we prompted Paper2Agent with: Based on the tools you have, construct an MCP prompt to replicate the tutorial in the correct order. Always inspect the data first, and only deviate from the default settings if adhering to them would yield incorrect results. This ensured that the generated MCP prompts encoded the standard Scanpy preprocessing and clustering pipeline in reproducible and interpretable manner. Reproducibility was evaluated by benchmarking the agents outputs against results obtained by human researchers following the official Scanpy reference tutorials. Three publicly available 10x Genomics PBMC single-cell RNA-seq datasets were used as test cases (Data availability). Across datasets, the agent faithfully reproduced all key workflow stepsincluding gene filter17 ing, normalization, principal component analysis, neighborhood graph construction, and clusteringyielding outputs consistent with human-executed analyses."
        }
    ],
    "affiliations": [
        "Department of Biology, Stanford University",
        "Department of Biomedical Data Science, Stanford University",
        "Department of Computer Science, Stanford University",
        "Department of Genetics, Stanford University"
    ]
}