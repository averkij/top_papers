{
    "paper_title": "PyGDA: A Python Library for Graph Domain Adaptation",
    "authors": [
        "Zhen Zhang",
        "Meihan Liu",
        "Bingsheng He"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Graph domain adaptation has emerged as a promising approach to facilitate knowledge transfer across different domains. Recently, numerous models have been proposed to enhance their generalization capabilities in this field. However, there is still no unified library that brings together existing techniques and simplifies their implementation. To fill this gap, we introduce PyGDA, an open-source Python library tailored for graph domain adaptation. As the first comprehensive library in this area, PyGDA covers more than 20 widely used graph domain adaptation methods together with different types of graph datasets. Specifically, PyGDA offers modular components, enabling users to seamlessly build custom models with a variety of commonly used utility functions. To handle large-scale graphs, PyGDA includes support for features such as sampling and mini-batch processing, ensuring efficient computation. In addition, PyGDA also includes comprehensive performance benchmarks and well-documented user-friendly API for both researchers and practitioners. To foster convenient accessibility, PyGDA is released under the MIT license at https://github.com/pygda-team/pygda, and the API documentation is https://pygda.readthedocs.io/en/stable/."
        },
        {
            "title": "Start",
            "content": "5 2 0 2 3 1 ] . [ 1 4 8 2 0 1 . 3 0 5 2 : r Journal of Machine Learning Research 23 (2025) 1-6 Submitted ; Revised ; Published PyGDA: Python Library for Graph Domain Adaptation Zhen Zhang1 Meihan Liu2 Bingsheng He1 1National University of Singapore, Singapore 2Zhejiang University, Hangzhou, China Editor: My editor zhen@nus.edu.sg lmh zju@zju.edu.cn hebs@comp.nus.edu.sg Abstract Graph domain adaptation has emerged as promising approach to facilitate knowledge transfer across different domains. Recently, numerous models have been proposed to enhance their generalization capabilities in this field. However, there is still no unified library that brings together existing techniques and simplifies their implementation. To fill this gap, we introduce PyGDA, an open-source Python library tailored for graph domain adaptation. As the first comprehensive library in this area, PyGDA covers more than 20 widely used graph domain adaptation methods together with different types of graph datasets. Specifically, PyGDA offers modular components, enabling users to seamlessly build custom models with variety of commonly used utility functions. To handle large-scale graphs, PyGDA includes support for features such as sampling and minibatch processing, ensuring efficient computation. In addition, PyGDA also includes comprehensive performance benchmarks and well-documented user-friendly API for both researchers and practitioners. To foster convenient accessibility, PyGDA is released under the MIT license at https://github.com/pygda-team/pygda, and the API documentation is https://pygda.readthedocs.io/en/stable/. Keywords: Unsupervised Graph Domain Adaptation, Graph Neural Networks, Unsupervised Learning, Node/Graph Classification"
        },
        {
            "title": "1 Introduction",
            "content": "Graph Neural Networks (GNNs) have achieved great success in various graph learning tasks, such node classification, and social recommendation (Kipf and Welling, 2016; Zhang et al., 2018; Fan et al., 2019), etc. Nevertheless, their performance heavily depends on sufficient amount of high-quality labels, which can be especially challenging to obtain for graph-structured data, often being time-consuming and resource-intensive. To address this challenge, domain adaptation offers promising solution by transferring valuable knowledge from labeled source domains to unlabeled target domains under domain discrepancies (Liu et al., 2024c, 2023, 2024b; Wu et al., 2020; Zhang et al., 2024; Zhang and He, 2025). Over the past few years, significant efforts have been made to improve the models generalization capabilities across different domains. Despite this progress, practitioners still face significant challenges when it comes to comparing different graph domain adaptation methods and selecting the most suitable approach for real-world scenario deployment. We believe this challenge stems from variety of complex factors, including inconsistencies in 2025 Zhen Zhang, Meihan Liu, and Bingsheng He. License: CC-BY 4.0, see https://creativecommons.org/licenses/by/4.0/. Attribution requirements are provided at http://jmlr.org/papers/v23/21-0000.html. Zhang, Liu, and He experimental settings and discrepancies in evaluation metrics. Therefore, unified library is essential to streamline the implementation, evaluation, and deployment of graph domain adaptation methods for practitioners. While existing libraries like PyGDebias (Dong et al., 2024) target debiasing in graph learning, PyGOD (Liu et al., 2024a) specializes in graph anomaly detection, and DIG (Liu et al., 2021) emphasizes tasks such as graph generation and fair learning, none provides comprehensive support for graph domain adaptation task. To bridge this gap, we introduce comprehensive Python Graph Domain Adaptation library called PyGDA, with series of key technical advancements. We summarize the primary contributions of PyGDA as follows: (1) Comprehensive Graph Domain Adaptation Models. PyGDA encompasses diverse collection of algorithms tailored to various settings, such as source-needed, source-free and multi-source free graph domain adaptations, as well as tasks including node-level and graph-level classifications. It supports for over 20 graph domain adaptation models. (2) Extensive Real-World Graph Datasets. PyGDA provides 7 categories of real-world graph datasets widely utilized in the graph domain adaptation community. These datasets are formatted in standardized manner for user convenience, and the framework is open to contributions for future expansion. (3) Flexible and Modularized Components. PyGDA empowers users to customize their models by providing variety of commonly used utility functions, simplifying the creation of graph domain adaptation workflows. Additionally, it is equipped to handle large-scale graphs through features like sampling and mini-batch processing. (4) Comprehensive API Documentation and Examples. PyGDA offers thorough API documentation to guide users through the librarys functionalities, ensuring seamless user experience. To further support users, PyGDA provides collection of ready-to-run code examples and tutorials, covering various graph domain adaptation scenarios."
        },
        {
            "title": "2 Library Design and Implementation",
            "content": "The overview of PyGDAs design is illustrated in Figure 1, illustrating the workflow from dataset preparation to model evaluation. Engine and Dependencies. PyGDA is designed to be compatible with Python 3.8 and higher. It leverages the powerful PyTorch (Paszke et al., 2019) and PyTorch Geometric (Fey and Lenssen, 2019) libraries, which are essential for scalable and efficient graph learning tasks. For data processing and manipulation, PyGDA relies on key libraries such as Numpy (Harris et al., 2020) for array operations, SciPy (Virtanen et al., 2020) for scientific computations, and scikit-learn (Pedregosa et al., 2011) for wide range of machine learning tools, including model evaluation and preprocessing. Additionally, NetworkX (Hagberg et al., 2008) is utilized for graph manipulation, offering comprehensive set of graph algorithms and utilities. Together, these dependencies provide PyGDA with robust foundation for performing advanced graph domain adaptation tasks. Storage and Dataset Preparation. PyGDA provides comprehensive collection of popular graph domain adaptation datasets, including social graphs (Rozemberczki et al., 2021), citation graphs (Tang et al., 2008) and transportation graphs (Ribeiro et al., 2017), etc. Each dataset is accompanied by detailed documentation outlining its characteristics, preprocessing steps, and suitability for various graph domain adaptation tasks. These datasets, originated from diverse formats and data types, are automatically preprocessed 2 PyGDA: Python Library for Graph Domain Adaptation # Step 1: Load Data from pygda.datasets import CitationDataset source_dataset = CitationDataset(path, args.source) target_dataset = CitationDataset(path, args.target) # Step 2: Build Model from pygda.models import A2GNN model = A2GNN(in_dim=num_features, hid_dim=args.nhid, num_classes=num_classes, device=args.device) # Step 3: Fit Model model.fit(source_data, target_data) # Step 4: Prediction & Evaluation from pygda.metrics import eval_micro_f1, eval_macro_f1 logits, labels = model.predict(target_data) preds = logits.argmax(dim=1) mi_f1 = eval_micro_f1(labels, preds) ma_f1 = eval_macro_f1(labels, preds) Figure 1: The overview for the deFigure 2: Using A2GNN (Liu et al., 2024b) on Cisign of PyGDA v1.2.0. tation dataset with PyGDA v1.2.0. by PyGDA to ensure uniformity and consistency. By converting them into standardized formats and data structures, PyGDA ensures compatibility and simplifies their integration into the subsequent workflows. Users can conveniently load these datasets by instantiating the corresponding submodules. Furthermore, PyGDA offers users with the flexibility to tailor datasets through customized transformations, enabling operations like data augmentation or enriching node features with synthetic structural properties. Such capabilities are highly beneficial for customized datasets to meet specific requirements. When loading these graphs, PyGDA employs efficient techniques like sampling, mini-batch, or full-batch processing, ensuring scalability and enhancing computational efficiency. Models and Implementation. PyGDA supports comprehensive graph domain adaptation algorithms from recent research advancements. With unified API design, initializing and executing these algorithms is not only straightforward but also highly adaptable. Each algorithm within PyGDA is encapsulated in its own class, adhering to standardized and intuitive API pattern. mode flag is employed to distinguish between node-level and graph-level tasks. Another key feature of PyGDA is its ability to customize user-defined algorithms to meet specific requirements. To facilitate easy customization, users are encouraged to create their own models by inheriting from the BaseGDA class. This inheritance structure ensures that custom models benefit from the core functionalities of PyGDA while enabling users to extend them according to their specific needs. The fit() method is used to train models, allowing users to optimize the model using either user-specified hyperparameters or default settings. The fit() method is versatile and can accept different datasets as input, making it adaptable to variety of scenarios. For inference, PyGDA provides the predict() method, which enables users to run their models on the test set and evaluate performance. This method returns the models outputs, making it easier to assess the effectiveness of the model. By simplifying both training and evaluation processes, 3 Zhang, Liu, and He PyGDA ensures that practitioners can quickly prototype, test, and refine their models with ease. Empirical Evaluation. PyGDA comes with comprehensive set of evaluation approaches, enabling users to effectively assess the performance of the collected algorithms after they have been optimized. Just like the dataset handling capabilities, the evaluation metrics in PyGDA are standardized, providing consistent and user-friendly interface for performance assessment. These metrics are designed to work directly with the outputs generated by the algorithms, ensuring that the evaluation process is streamlined and efficient. It includes broad range of commonly used evaluation metrics such as AUC, Accuracy, Micro-F1, and Macro-F1, etc. Beyond these common metrics, PyGDAs flexibility allows for the addition of custom evaluation criteria, enabling users to define their own metrics suited to specific tasks or domains. Figure 2 presents detailed example of the end-to-end training process for the A2GNN model (Liu et al., 2024b), showcasing its seamless implementation using PyGDA. This example highlights how the PyGDA library simplifies the process, allowing users to execute the entire workflow with just 5 lines of core code."
        },
        {
            "title": "3 Library Robustness and Accessibility",
            "content": "PyGDA has been designed to prioritize both robustness and accessibility, ensuring seamless experience for users. (1) Robustness and Quality. To ensure seamless and reliable automation for our project, PyGDA leverages the powerful capabilities of GitHub Actions to automate package releases. This integration streamlines the development lifecycle by automatically packaging and publishing updates, thereby reducing manual intervention and ensuring timely delivery of new features and fixes. PyGDA has been thoroughly tested on local devices with CUDA support, ensuring its compatibility with GPU-accelerated environments for high-performance computations. (2) Accessibility. PyGDA ensures seamless user experience by offering clear and concise guidance on installation and dependency requirements directly within its repository. This allows users to quickly set up the library and begin working on graph domain adaptation tasks with minimal effort. To further assist users, PyGDA provides comprehensive documentation rendered by Read the Docs that includes detailed instructions for utilizing each API. For those seeking to replicate or compare results, benchmark scripts are showcased within the repository, offering transparency and enabling straightforward reproduction of existing graph domain adaptation methods."
        },
        {
            "title": "4 Conclusion and Future Plans",
            "content": "In this paper, we introduce PyGDA, the first comprehensive library designed for graph domain adaptation. PyGDA streamlines the research process by offering an extensive collection of state-of-the-art algorithms coupled with intuitive, hands-on APIs, all seamlessly integrated into standardized workflow. In the future, we aim to further enhance PyGDA from the following aspects: (1) We plan to continually integrate PyGDAs with border datasets and algorithms. (2) Future updates will extend the librarys capabilities to include more settings like open-set domain adaptation. (3) To maximize the librarys versatility, we will integrate advanced methodologies such as automated hyperparameter optimization, making it easier for users to fine-tune models without extensive manual intervention. 4 PyGDA: Python Library for Graph Domain Adaptation"
        },
        {
            "title": "References",
            "content": "Yushun Dong, Zhenyu Lei, Zaiyi Zheng, Song Wang, Jing Ma, Alex Jing Huang, Chen Chen, and Jundong Li. Pygdebias: python library for debiasing in graph learning. In Companion Proceedings of the ACM on Web Conference 2024, pages 10191022, 2024. Wenqi Fan, Yao Ma, Qing Li, Yuan He, Eric Zhao, Jiliang Tang, and Dawei Yin. Graph In The world wide web conference, pages neural networks for social recommendation. 417426, 2019. Matthias Fey and Jan Eric Lenssen. Fast graph representation learning with pytorch geometric. arXiv preprint arXiv:1903.02428, 2019. Aric Hagberg, Pieter Swart, and Daniel Schult. Exploring network structure, dynamics, and function using networkx. Technical report, Los Alamos National Laboratory (LANL), Los Alamos, NM (United States), 2008. Charles Harris, Jarrod Millman, Stefan Van Der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, Julian Taylor, Sebastian Berg, Nathaniel Smith, et al. Array programming with numpy. Nature, 585(7825):357362, 2020. Thomas Kipf and Max Welling. Semi-supervised classification with graph convolutional networks. arXiv preprint arXiv:1609.02907, 2016. Kay Liu, Yingtong Dou, Xueying Ding, Xiyang Hu, Ruitong Zhang, Hao Peng, Lichao Sun, and Yu Philip. Pygod: python library for graph outlier detection. Journal of Machine Learning Research, 25(141):19, 2024a. Meihan Liu, Zeyu Fang, Zhen Zhang, Ming Gu, Sheng Zhou, Xin Wang, and Jiajun Bu. Rethinking propagation for unsupervised graph domain adaptation. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 38, pages 1396313971, 2024b. Meihan Liu, Zhen Zhang, Jiachen Tang, Jiajun Bu, Bingsheng He, and Sheng Zhou. Revisiting, benchmarking and understanding unsupervised graph domain adaptation. In The Thirty-eight Conference on Neural Information Processing Systems Datasets and Benchmarks Track, 2024c. Meng Liu, Youzhi Luo, Limei Wang, Yaochen Xie, Hao Yuan, Shurui Gui, Haiyang Yu, Zhao Xu, Jingtun Zhang, Yi Liu, et al. Dig: turnkey library for diving into graph deep learning research. Journal of Machine Learning Research, 22(240):19, 2021. Shikun Liu, Tianchun Li, Yongbin Feng, Nhan Tran, Han Zhao, Qiang Qiu, and Pan Li. Structural re-weighting improves graph domain adaptation. In International Conference on Machine Learning, pages 2177821793. PMLR, 2023. Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-performance deep learning library. Advances in neural information processing systems, 32, 2019. 5 Zhang, Liu, and He Fabian Pedregosa, Gael Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter Prettenhofer, Ron Weiss, Vincent Dubourg, et al. Scikit-learn: Machine learning in python. the Journal of machine Learning research, 12:28252830, 2011. Leonardo FR Ribeiro, Pedro HP Saverese, and Daniel Figueiredo. struc2vec: Learning node representations from structural identity. In Proceedings of the 23rd ACM SIGKDD international conference on knowledge discovery and data mining, pages 385394, 2017. Benedek Rozemberczki, Carl Allen, and Rik Sarkar. Multi-scale attributed node embedding. Journal of Complex Networks, 9(2):cnab014, 2021. Jie Tang, Jing Zhang, Limin Yao, Juanzi Li, Li Zhang, and Zhong Su. Arnetminer: extraction and mining of academic social networks. In Proceedings of the 14th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 990998, 2008. Pauli Virtanen, Ralf Gommers, Travis Oliphant, Matt Haberland, Tyler Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren Weckesser, Jonathan Bright, et al. Scipy 1.0: fundamental algorithms for scientific computing in python. Nature methods, 17(3):261272, 2020. Man Wu, Shirui Pan, Chuan Zhou, Xiaojun Chang, and Xingquan Zhu. Unsupervised In Proceedings of the web conference domain adaptive graph convolutional networks. 2020, pages 14571467, 2020. Zhen Zhang and Bingsheng He. Aggregate to adapt: Node-centric aggregation for multisource-free graph domain adaptation. arXiv preprint arXiv:2502.03033, 2025. Zhen Zhang, Hongxia Yang, Jiajun Bu, Sheng Zhou, Pinggang Yu, Jianwei Zhang, Martin Ester, and Can Wang. Anrl: attributed network representation learning via deep neural networks. In Ijcai, volume 18, pages 31553161, 2018. Zhen Zhang, Meihan Liu, Anhui Wang, Hongyang Chen, Zhao Li, Jiajun Bu, and Bingsheng He. Collaborate to adapt: Source-free graph domain adaptation via bi-directional adaptation. In Proceedings of the ACM on Web Conference 2024, pages 664675, 2024."
        }
    ],
    "affiliations": [
        "National University of Singapore, Singapore",
        "Zhejiang University, Hangzhou, China"
    ]
}