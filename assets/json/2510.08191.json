{
    "paper_title": "Training-Free Group Relative Policy Optimization",
    "authors": [
        "Yuzheng Cai",
        "Siqi Cai",
        "Yuchen Shi",
        "Zihan Xu",
        "Lichao Chen",
        "Yulei Qin",
        "Xiaoyu Tan",
        "Gang Li",
        "Zongyi Li",
        "Haojia Lin",
        "Yong Mao",
        "Ke Li",
        "Xing Sun"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Recent advances in Large Language Model (LLM) agents have demonstrated their promising general capabilities. However, their performance in specialized real-world domains often degrades due to challenges in effectively integrating external tools and specific prompting strategies. While methods like agentic reinforcement learning have been proposed to address this, they typically rely on costly parameter updates, for example, through a process that uses Supervised Fine-Tuning (SFT) followed by a Reinforcement Learning (RL) phase with Group Relative Policy Optimization (GRPO) to alter the output distribution. However, we argue that LLMs can achieve a similar effect on the output distribution by learning experiential knowledge as a token prior, which is a far more lightweight approach that not only addresses practical data scarcity but also avoids the common issue of overfitting. To this end, we propose Training-Free Group Relative Policy Optimization (Training-Free GRPO), a cost-effective solution that enhances LLM agent performance without any parameter updates. Our method leverages the group relative semantic advantage instead of numerical ones within each group of rollouts, iteratively distilling high-quality experiential knowledge during multi-epoch learning on a minimal ground-truth data. Such knowledge serves as the learned token prior, which is seamlessly integrated during LLM API calls to guide model behavior. Experiments on mathematical reasoning and web searching tasks demonstrate that Training-Free GRPO, when applied to DeepSeek-V3.1-Terminus, significantly improves out-of-domain performance. With just a few dozen training samples, Training-Free GRPO outperforms fine-tuned small LLMs with marginal training data and cost."
        },
        {
            "title": "Start",
            "content": "Training-Free GRPO Training-Free Group Relative Policy Optimization Youtu-Agent Team Recent advances in Large Language Model (LLM) agents have demonstrated their promising general capabilities. However, their performance in specialized real-world domains often degrades due to challenges in effectively integrating external tools and specific prompting strategies. While methods like agentic reinforcement learning have been proposed to address this, they typically rely on costly parameter updates, for example, through process that uses Supervised Fine-Tuning (SFT) followed by Reinforcement Learning (RL) phase with Group Relative Policy Optimization (GRPO) to alter the output distribution. However, we argue that LLMs can achieve similar effect on the output distribution by learning experiential knowledge as token prior, which is far more lightweight approach that not only addresses practical data scarcity but also avoids the common issue of overfitting. To this end, we propose Training-Free Group Relative Policy Optimization (TrainingFree GRPO), cost-effective solution that enhances LLM agent performance without any parameter updates. Our method leverages the group relative semantic advantage instead of numerical ones within each group of rollouts, iteratively distilling high-quality experiential knowledge during multi-epoch learning on minimal ground-truth data. Such knowledge serves as the learned token prior, which is seamlessly integrated during LLM API calls to guide model behavior. Experiments on mathematical reasoning and web searching tasks demonstrate that Training-Free GRPO, when applied to DeepSeek-V3.1-Terminus, significantly improves out-of-domain performance. With just few dozen training samples, Training-Free GRPO outperforms fine-tuned small LLMs with marginal training data and cost. Date: October 9, 2025 Correspondence: tristanli@tencent.com Code: https://github.com/TencentCloudADP/youtu-agent/tree/training_free_GRPO 5 2 0 O 9 ] . [ 1 1 9 1 8 0 . 0 1 5 2 : r Figure 1. Applying Training-Free GRPO on both prompting (without tools) and ReAct [1] (with tools) achieve improved Mean@32 on AIME benchmarks [2] with DeepSeek-V3.1-Terminus [3]. It consumes significantly fewer training data and lower costs on the 671B LLM than fine-tuning 32B model [4], serving as cost-effective alternative to RL methods. *Full author list in contributions. Training-Free GRPO"
        },
        {
            "title": "1 Introduction",
            "content": "Large Language Models (LLMs) are emerging as powerful general-purpose agents capable of interacting with complex, real-world environments. They have shown remarkable capabilities across wide range of tasks, including complex problem-solving [4, 5, 6], advanced web research [7, 8, 9, 10], code generation and debugging [11, 12], and proficient computer use [13, 14, 15]. Despite their impressive capabilities, LLM agents often underperform in specialized, real-world domains. These scenarios typically demand the integration of external tools (e.g., calculators, APIs, databases), along with domain-specific task definitions and prompting strategies. Deploying general-purpose agent out-of-the-box in such settings often results in suboptimal performance due to limited familiarity with domain-specific requirements or insufficient exposure to necessary tools. To bridge this gap, agentic training has emerged as promising strategy to facilitate the adaptation of LLM agents to specific domains and their associated tools [4, 7, 8, 16]. Recent advancements in agentic reinforcement learning (Agentic RL) approaches have employed Group Relative Policy Optimization (GRPO) [17] and its variants [18, 19, 20] to align model behaviors in the parameter space. Although these methods effectively enhance task-specific capabilities, their reliance on tuning LLM parameters poses several practical challenges: Computational Cost: Even for smaller models, fine-tuning demands substantial computational resources, making it both costly and environmentally unsustainable. For larger models, the costs become prohibitive. Furthermore, fine-tuned models require dedicated deployment and are often limited to specific applications, rendering them inefficient for low-frequency use cases compared to more versatile general-purpose models. Poor Generalization: Models optimized via parameter tuning often suffer from unsatisfactory crossdomain generalization, limiting their applicability to narrow tasks. Consequently, multiple specialized models must be deployed to handle comprehensive set of tasks, significantly increasing system complexity and maintenance overhead. Data Scarcity: Fine-tuning LLMs typically necessitates large volumes of high-quality, carefully annotated data, which are often scarce and prohibitively expensive to obtain in specialized domains. Additionally, with limited samples, models are highly susceptible to overfitting, leading to poor generalization. Diminishing Returns: The prohibitive training costs usually compel existing approaches to fine-tune smaller LLMs with fewer than 32 billion parameters, due to resource constraints rather than optimal design choices. While larger models would be preferred, the computational expense of fine-tuning necessitates this compromise. Paradoxically, API-based or open-source larger LLMs often deliver better cost-performance ratios through scalability and continuous model updates. However, these generalpurpose models underperform in specialized domains where fine-tuning is necessary, creating costperformance dilemma. Such limitations inherent in parameter tuning motivate fundamental research question: Is applying RL in parametric space the only viable approach? Can we enhance LLM agent performance in non-parametric way with lower data and computational costs? We answer this question affirmatively by proposing Training-Free Group Relative Policy Optimization (Training-Free GRPO), novel and efficient method that improves LLM agent behavior in manner similar to vanilla GRPO, while preserving the original model parameters unchanged. Our approach is motivated by the insight that LLMs already possess the fundamental capability to adapt to new scenarios, requiring only minimal practice through limited samples to achieve strong performance. Thus, instead of adapting their output distribution through parameter tuning, in-context learning [21] that leverages lightweight token prior can also encapsulate experiential knowledge learned from minimal training dataset. 2 Training-Free GRPO Training-Free GRPO retains the multi-epoch learning mechanism of vanilla GRPO. In each epoch, multiple outputs are generated to deliver group of rollouts for every query, which helps to explore the policy space and evaluate potential strategies. While vanilla GRPO relies on gradient-based parameter updates to iteratively improve policy performance, Training-Free GRPO eliminates this requirement by employing inference-only operations using LLMs. At each optimization step, rather than calculating numerical advantage for gradient ascent within each group of rollouts, our method leverages LLMs to introspect on each group and distill semantic advantage. Such advantage refines external experiential knowledge and guide policy outputs based on evolving contextual priors, thereby achieving policy optimization effects without modifying any model parameters. By evaluating challenging mathematical reasoning and interactive web searching tasks, we demonstrate that our method significantly enhances the performance of frozen policy models such as DeepSeek-V3.1Terminus [3] with only dozens of training samples. It surpasses fine-tuned 32B models in performance while requiring only fraction of the computational resources, offering simple and much more efficient alternative to traditional fine-tuning techniques. Our principal contributions are threefold: New Training-Free RL Paradigm: We introduce Training-Free GRPO, which shifts policy optimization from the parameter space to the context space by leveraging evolving experiential knowledge as token priors without gradient updates. Semantic Group Advantage: We replace numerical group advantage in vanilla GRPO with semantic group advantage, enabling LLMs to introspect their own rollouts and continuously updating experiential knowledge at multiple optimization steps. Data and Computational Efficiency: Experiments confirm that Training-Free GRPO effectively enhances the performance of frozen policy with minimal training samples, offering practical and cost-effective alternative across different domains. Superior Generalization: By leaving model parameters frozen and plugging in different token priors, our approach fully preserves the generalization power, eliminating the cost and complexity of deploying multiple fine-tuned specialists."
        },
        {
            "title": "2 Training-Free GRPO",
            "content": "In this section, we introduce our Training-Free GRPO, method designed to replicate the alignment benefits of the GRPO algorithm without performing any gradient-based updates to the policy models parameters. Vanilla GRPO. As shown in Figure 2, the vanilla GRPO procedure operates by first generating group of outputs {o1, o2, . . . , oG} for given query using the current policy LLM πθ, i.e., πθ(oi q). Each output oi is then independently scored with reward model R. Subsequently, with rewards = {r1, . . . , rG}, it calculates group-relative advantage ˆAi = rimean(r) for each output oi. By combining KL-divergence penalty against reference model, it constructs PPO-clipped objective function JGRPO(θ), which is then maximized to update the LLM parameters θ. std(r) Training-Free GRPO repurposes the core logic of this group-based relative evaluation but translates it into non-parametric, inference-time process. Instead of updating the parameters θ, we leave θ permanently frozen and maintain an external experiential knowledge , which is initialized to . 3 Training-Free GRPO Figure 2. Comparison of vanilla GRPO and Training-Free GRPO. Rollout and Reward. As shown in Figure 2, our rollout and reward process mirrors that of GRPO exactly. Given query q, we perform parallel rollout to generate group of outputs {o1, o2, . . . , oG} using the LLM. Notably, while GRPO uses the current trainable policy πθ, our policy conditions on the experiential knowledge, πθ(oiq, ). Identical to the standard GRPO setup, we score each output oi by the reward model to obtain scalar reward ri = R(q, oi). Group Advantage Computation. To provide an optimization direction for policy parameters, vanilla GRPO computes numerical advantage ˆAi that quantifies each output ois relative quality within its group. Similarly, Training-Free GRPO performs an analogous comparison within each group but produces group relative semantic advantage in the form of natural language experience, as shown in Figure 3. Since ˆAi = 0 when all outputs receive identical rewards (i.e., std(r) = 0) in vanilla GRPO, we generate such semantic advantages only for groups with both clear winners and losers. Specifically, for each output oi, we first ask the same LLM to provide corresponding summary si = M(psummary, q, oi) separately, where psummary is prompt template that incorporates the query and output oi to form structured summarization request. Given the summaries {s1, s2, . . . , sG} and the current experiential knowledge , the LLM articulates the reasons for the relative success or failure of the outputs, followed by extracting concise natural language experience Atext = M(pextract, q, si, ), where pextract is another prompt template for experience extraction. This natural language experience Atext serves as our semantic advantage, functionally equivalent to vanilla GRPOs ˆAi, encoding the critical experiential knowledge of what actions lead to high rewards. Optimization. Whereas vanilla GRPO updates its model parameters θ via gradient ascent on JGRPO(θ) computed by all advantages in single batch, we update our experience library using all semantic advantages Atext from the current batch. Specifically, given the existing experiences library , we prompt the LLM to generate list of operations based on all these Atext, where each operation could be: Add: Directly append the experience described in Atext to the experience library . Delete: Based on Atext, remove low-quality experience from the experience library . Modify: Refine or improve an existing experience in the experience library based on insights from Atext. Keep: The experience library remains unchanged. 4 Training-Free GRPO Figure 3. Example of Training-Free GRPO learning step. After updating the experience library , the conditioned policy πθ(yq, ) produces shifted output distribution in subsequent batches or epochs. This mirrors the effect of GRPO policy update by steering the model towards higher-reward outputs, but achieves this by altering the context rather than the models fundamental parameters. The frozen base model πθ acts as strong prior, ensuring output coherence and providing built-in stability analogous to the KL-divergence constraint in GRPO that prevents the policy from deviating excessively from πref."
        },
        {
            "title": "3 Evalution",
            "content": "To compare Training-Free GRPO with competitive baselines, we conduct comprehensive experiments on both mathematical reasoning and web searching benchmarks."
        },
        {
            "title": "3.1 Mathematical Reasoning",
            "content": "Benchmarks. We conduct our evaluation on the challenging AIME24 and AIME25 benchmarks [2], which are representative of complex, out-of-domain mathematical reasoning challenges. To ensure robust and statistically reliable results, we evaluate each problem with 32 independent runs and report the average Pass@1 score, which we denote as Mean@32. 5 Training-Free GRPO Table 1. Mean@32 on AIME 2024 and AIME 2025 benchmarks (%). Method Learning Cost Training Set Model Tool AIME24 AIME25 Direct + Training-Free GRPO ReAct [1] + Training-Free GRPO ReAct [1] + Training-Free GRPO - $8 - $18 - $8 - DAPO-100 - DAPO-100 - DAPODeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus DeepSeek-V3.2-Exp DeepSeek-V3.2-Exp - - CI CI CI CI 68.6 72.6 (4.0) 52.9 54.0 (1.1) 80.0 82.7 (2.7) 67.9 73.3 ( 5.4) 71.0 73.1 (2.1) 61.8 63.2 (1.4) Figure 4. Statistics at each Training-Free GRPO step with tool use and DeepSeek-V3.1-Terminus. Setup. We primarily focus on large powerful LLMs that are usually hard and expensive to be fine-tuned in real-world applications, such as DeepSeek-V3.1-Terminus [3]. We include two basic configurations: (1) Direct Prompting without tool use (a text-only input/output process), and (2) ReAct [1] with code interpreter (CI) tool. To apply Training-Free GRPO experiments, we randomly sample 100 problems from the DAPO-Math-17K dataset [19], denoted as DAPO-100. We run the learning process for 3 epochs with single batch per epoch (i.e., 3 steps), using temperature of 0.7 and group size of 5 during the learning phase. For out-of-domain evaluation on AIME 2024 and 2025 benchmarks, we use temperature of 0.3. Main Results. As illustrated in Table 3, Training-Free GRPO achieves substantial gains in mathematical reasoning, showing clear advantage in performance across both the tool-use and non-tool-use scenarios. The strong baseline established by DeepSeek-V3.1-Terminus with ReAct [1] yields scores of 80.0% on AIME24 and 67.9% on AIME25. Critically, applying Training-Free GRPO to the frozen DeepSeek-V3.1-Terminus elevates its performance significantly, reaching 82.7% on AIME24 and 73.3% on AIME25. This represents substantial absolute gain of +2.7% and +5.4%, respectively, which is achieved with only 100 out-of-domain training examples and zero gradient updates. This performance surpasses various state-of-the-art RL methods like ReTool [4] and AFM [16] trained on 32B LLMs (see Table 3), which typically require thousands of training examples and incur costs exceeding $10, 000. In contrast, Training-Free GRPO utilizes only 100 data points with an approximate cost of $18. Such outcome suggests that in real-world applications, guiding powerful but frozen model through context-space optimization is more effective and efficient than exhaustively fine-tuning less capable model in parameter space. For quantitative evaluation and learned experiences of Training-Free GRPO, please refer to Appendices and C, respectively. Learning Dynamics. As shown in Figure 4, during the 3-step learning process, we observe steady and significant improvement in Mean@5 on the training set. Concurrently, the Mean@32 performance on both 6 Training-Free GRPO Table 2. Ablation study on DeepSeek-V3.1-Terminus (Mean@32, %). Method Training Set AIME24 AIME25 ReAct [1] ReAct [1] + Directly Generated Experiences ReAct [1] + Training-Free GRPO (w/o ground truths) ReAct [1] + Training-Free GRPO (w/o group computation) ReAct [1] + Training-Free GRPO - - DAPO-100 DAPO-100 DAPO-100 80.0 79.8 80.7 80.4 82.7 67.9 67.3 68.9 69.3 73.3 Table 3. Mean@32 with smaller LLMs on AIME 2024 and AIME 2025 benchmarks (%). Learning Cost Model Tool AIME AIME25 Method ReAct [1] ZeroTIR [5] SimpleTIR [6] ReTool [4] AFM [16] - $20, 000 $20, 000 $10, 000 $10, 000 Qwen2.5-32B-Instruct Qwen2.5-32B-Instruct Qwen2.5-32B-Instruct Qwen2.5-32B-Instruct Qwen2.5-32B-Instruct ReAct [1] + Training-Free GRPO ReAct [1] + Training-Free GRPO ReAct [1] + Training-Free GRPO - $4 - $3 - $18 Qwen3-32B (Non-Thinking) Qwen3-32B (Non-Thinking) Qwen2.5-72B-Instruct Qwen2.5-72B-Instruct DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus CI CI CI CI CI CI CI CI CI CI CI 29.6 56.7 59.9 67.0 66.7 23.1 33.3 49.2 49.3 59.8 29.1 33.5 (4.4) 19.5 25.4 (5.9) 13.5 14.9 (1.4) 9.6 11.4 (1.8) 80.0 82.7 (2.7) 67.9 73.3 ( 5.4) AIME24 and AIME25 also improves with each step, demonstrating that the learned experiences from only 100 problems generalize effectively and the necessity of multi-step learning. Also, the average number of tool calls decreases during both training and out-of-domain evaluation on AIME benchmarks. This suggests that Training-Free GRPO not only encourages correct reasoning and action, but also teaches the agent to use tools more efficiently and judiciously. The learned experiential knowledge helps the agent to discover some shortcuts and avoid erroneous or redundant tool calls, validating the effectiveness of our semantic advantage guided optimization. Effectiveness of Learned Experiences. In Table 2, we also include the ReAct enhanced with the experiences directly generated by DeepSeek-V3.1-Terminus, matching the quantity learned from Training-Free GRPO. However, such directly generated experiences fail to improve the performance, highlighting the effectiveness of learned experiential knowledge from Training-Free GRPO. Robustness to Reward Signal. Table 2 also presents variant of Training-Free GRPO, where the ground truth answers are not provided during learning process. In such cases, the semantic advantage is directly obtained by comparing the rollouts within each group, where the LLM can only rely on implicit majority voting, self-discrimination and self-reflection to optimize the experiences. Although it does not surpass the default version with ground truths, Training-Free GRPO still achieves an impressive results of 80.7% on AIME24 and 68.9% on AIME25. It shows the robustness and applicability to domains where ground truths are scarce or unavailable, further broadening its practical utility. Removing Group Computation. We also remove the group computation by setting the group size of 1 in Training-Free GRPO, where the LLM can only distill semantic advantage from the single rollout of each query. The results in Table 2 show that it significantly harm the performance comparing with the default group size of 5. It confirms the necessity of group relative computation, which enables the LLM to compare different trajectories within each group for better semantic advantage and experience optimization. 7 Training-Free GRPO Table 4. Pass@1 on WebWalkerQA (%). Method Training Set Model ReAct [1] + Training-Free GRPO - AFM-100 DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus pass@1 63.2 67.8 (4.6) Table 5. Ablation results on WebWalkerQA subset (%). Method Training Set Model pass@1 pass@3 ReAct [1] ReAct [1] + Training-Free GRPO ReAct [1] ReAct [1] + Directly Generated Experiences ReAct [1] + Training-Free GRPO (w/o ground truths) ReAct [1] + Training-Free GRPO - AFM-100 - AFM-100 AFM-100 AFM-100 QwQ-32B QwQ-32B DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus DeepSeek-V3.1-Terminus 27.5 25.5 66.7 64.7 66.7 68. 43.1 45.1 74.5 76.5 78.4 78.4 Applicability to Different Model Sizes. By applying Training-Free GRPO on smaller LLMs, specifically Qwen3-32B [22] and Qwen2.5-72B-Instruct [23] with DAPO-100 dataset, we observe consistent improvements on the out-of-domain AIME benchmarks in Table 3. Training-Free GRPO requires significantly fewer data and much lower learning cost, contrasting sharply with recent RL methods like ZeroTIR [5], SimpleTIR [6], ReTool [4], and AFM [16], which often necessitate thousands of data points and substantial computational resources for parameter tuning. Furthermore, powered by larger models like DeepSeek-V3.1-Terminus, our approach achieves much higher Mean@32 on AIME benchmarks than all RL-trained models, while only incurring about $18 for the learning process."
        },
        {
            "title": "3.2 Web Searching",
            "content": "In this section, we evaluate the effectiveness of Training-Free GRPO in addressing web searching tasks by leveraging minimal experiential data to enhance agent behavior. Datasets. For training, we constructed minimal training set by randomly sampling 100 queries from the AFM (Chain-of-Agents) web interaction RL dataset [16], denoted as AFM-100. AFM provides high-quality, multi-turn interactions between agents and web environments, collected via reinforcement learning in realistic browsing scenarios. For evaluation, we employ WebWalkerQA benchmark [24], widely-used dataset for assessing web agent performance. Its tasks require understanding both natural language instructions and complex web page structures, making it rigorous evaluation framework for generalist agents. Methods. Our proposed Training-Free GRPO is applied to DeepSeek-V3.1-Terminus without any gradientbased updates. We perform 3 epochs of training-free optimization with group size of = 3. The temperature settings follow those used in prior mathematical experiments. Main Results. We evaluate the effectiveness of our proposed Training-Free GRPO method on the WebWalkerQA benchmark. As shown in Table 4, our method achieves pass@1 score of 67.8% using DeepSeek-V3.1Terminus, significant improvement over the baseline of 63.2%. This result indicates that our approach effectively steers model behavior by leveraging learned experiential knowledge, surpassing the capabilities of static prompting ReAct strategy. Ablation. We conduct ablation studies on stratified random sample of 51 instances from the WebWalkerQA Training-Free GRPO Table 6. Cross-domain transferability (Averaged pass@1, %)."
        },
        {
            "title": "Math Reasoning Web Searching",
            "content": "AIME24 AIME"
        },
        {
            "title": "WebWalker",
            "content": "ReAct [1] (Qwen2.5-32B-Instruct) - ReTool [4] (Qwen2.5-32B-Instruct) MiroThinker [10] (Qwen3-32B) Training-Free GRPO (DeepSeek-V3.1-Terminus) Math Web Math / Web 29.6 67.0 43.5 82. 23.1 49.3 36.8 73.3 31.9 18.3 53.6 67.8 test set, where the sampling is proportionally stratified by difficulty level to ensure balanced representation across different levels of complexity. All ablated models are evaluated after 2 epochs of experience optimization. The results are summarized in Table 5. Using directly generated experiences slightly degrades over ReAct (64.7% vs. 66.7% pass@1), confirming that mere in-context examples without proper optimization may not yield gains. Training-Free GRPO without ground truth maintains the same pass@1 as ReAct (66.7%) but improves pass@3 to 78.4%, demonstrating that relative reward evaluation can enhance consistency even without ground truth. The full Training-Free GRPO achieves the best performance (68.6% pass@1 and 78.4% pass@3), highlighting the importance of combining ground truth guidance with semantic advantage and experience optimization. Applying Training-Free GRPO to QwQ-32B [25] yields only 25.5% pass@1, significantly lower than the 66.7% achieved with DeepSeek-V3.1-Terminus, and even under performing its own ReAct baseline (27.5%). This may suggest that the effectiveness of our method is dependent on the underlying models reasoning and tool-use capabilities in complex tool use scenarios, indicating that model capability is prerequisite for effective experience-based optimization."
        },
        {
            "title": "4.1 Cross-domain Transfer Analysis",
            "content": "A critical strength of Training-Free GRPO lies in its ability to achieve strong performance across diverse domains without suffering from the domain specialization trade-off observed in parameter-tuned methods. As demonstrated in Table 6, we observe the unsatisfactory performance when domain-specialized models are transferred to different domains. For instance, ReTool [4] specifically trained on mathematical reasoning tasks, achieves competitive performance on AIME24 and AIME25 within its specialized domain. However, when transferred to web searching tasks on WebWalker, its performance drops dramatically to only 18.3%, which is much lower than ReAct [1] without fine-tuning. Similarly, though optimized for web interactions, MiroThinker [10] significantly underperforms ReTool that is trained in the math domain on the AIME benchmarks. Such phenomenon highlights that parameter-based specialization narrows the models capabilities to excel in the training domain at the expense of generalizability. In contrast, Training-Free GRPO applied to the frozen LLM achieves state-of-the-art performance in both domains simultaneously by simply plugging in domain-specific learned experiences. Such cross-domain robustness makes Training-Free GRPO particularly valuable for real-world applications where agents must operate in multifaceted environments with diverse requirements. 9 Training-Free GRPO"
        },
        {
            "title": "4.2 Computational Costs",
            "content": "As shown in Figure 1, we further analyze the economic benefits of Training-Free GRPO by comparing its computational costs with vanilla RL training approach, specifically ReTool [4], on mathematical problemsolving tasks. This comparison highlights the practical benefits of our method in scenarios characterized by limited data, constrained budgets, or volatile inference demand. Training Cost. By replicating the training process of ReTool [4] on Qwen2.5-32B-Instruct [23], we find that it requires approximately 20,000 GPU hours with the rental price of $0.5 per GPU hour, resulting in the total training expense amounts to roughly $10,000. In contrast, Training-Free GRPO, when applied to DeepSeek-V3.1-Terminus, achieves superior performance on the AIME benchmarks  (Table 3)  while requiring only minimal costs. It requires only 3 training steps over 100 samples completed within 6 hours, which consumes 38M input tokens and 6.6M output tokens, amounting to total cost of approximately $18 based on the official DeepSeek AI pricing1. The drastic reduction in training cost by over two orders of magnitude makes our approach especially cost-effective. Inference Cost. Deploying trained model like ReTool-32B entails significant fixed infrastructure costs. In typical serving setup with 4 GPUs at the price of $0.5 per GPU-hour, vLLM-based batching requests can process about 400 problems per hour from the AIME benchmarks. The inference cost per problem averages $0.005. While this per-instance cost is relatively low, it presupposes continuous GPU availability, which becomes inefficient under fluctuating or low request volumes. In contrast, Training-Free GRPO incurs token-based cost. On average, each request consumes 60K input tokens and 8K output tokens, totaling about $0.02 per problem with cache hit pricing for reused contexts. Although per-query inference with large API-based model is more expensive than with dedicated small model, many real-world applications, particularly specialized or low-traffic services, experience irregular and modest usage patterns. In such cases, maintaining dedicated GPU cluster is economically unjustifiable. By leveraging the shared, on-demand infrastructure of large model services like DeepSeek, Training-Free GRPO eliminates fixed serving overhead and aligns costs directly with actual usage. This pay-as-you-go model is distinctly advantageous in settings where demand is unpredictable or sparse."
        },
        {
            "title": "5 Related Work",
            "content": "LLM Agents. By leveraging external tools, Large Language Models (LLMs) can overcome inherent limitations, such as lacking real-time knowledge and precise computation. This has spurred the development of LLM agents that interleave reasoning with actions. Foundational frameworks like ReAct [1] prompt LLMs to generate explicit chain-of-thought (CoT) and actionable steps, enabling dynamic planning through tool use. Furthermore, Toolformer [26] demonstrates that LLMs can learn to self-supervise the invocation of APIs via parameter fine-tuning. Building on these principles, subsequent research has produced sophisticated singleand multi-agent systems, such as MetaGPT [27], CodeAct [28], and OWL [29], which significantly enhance the quality of planning, action execution, and tool integration. Reinforcement Learning. Reinforcement learning (RL) has proven highly effective for aligning LLMs with complex and long-horizon goals. Foundational algorithms like Proximal Policy Optimization (PPO) [30] employ policy model for generation and separate critic model to estimate token-level value. Group Relative Policy Optimization (GRPO) [17] eliminates the need for critic by estimating advantages directly from groups of responses. Recent research try to apply RL to transform LLMs from passive generators into autonomous agents that learn through environmental interaction. GiGPO [31] implements two-level 1https://api-docs.deepseek.com/quick_start/pricing. Most of the input tokens qualify for the lower cache hit pricing with ReAct framework, as each processing step typically involves reusing extensive prior context. 10 Training-Free GRPO grouping mechanism for trajectories, enabling precise credit assignment at both the episode and individual step levels. ReTool [4] uses PPO to train an agent to interleave natural language with code execution for mathematical reasoning. Chain-of-Agents [16] facilitates multi-agent collaboration within single model by using dynamic, context-aware activation of specialized tool and role-playing agents. Furthermore, Tongyi Deep Research [7] introduces synthetic data generation pipeline and conduct customized on-policy agentic RL framework. However, such parameter-updating approaches result in prohibitive computational cost, which typically restricts application to LLMs with fewer than 32B parameters. Moreover, they only achieve diminishing returns compared to simply using larger, more powerful frozen LLMs. In contrast, our proposed Training-Free GRPO method seeks to achieve comparable or even better performance on state-of-the-art LLMs without any parameter updates, drastically reducing both data and computational requirements. Training-Free Methods. parallel line of research aims to improve LLM behavior at inference time without updating model weights. The general approach is in-context learning (ICL) [21], which leverages external or self-generated demonstrations within prompt to induce desired behaviors. More recent methods introduce iterative refinement mechanisms. Self-Refine [32] generates an initial output and then uses the same LLM to provide verbal feedback for subsequent revisions. Similarly, Reflexion [33] incorporates an external feedback signal to prompt the model for reflection and new attempt. In-context reinforcement learning (ICRL) [34, 35] demonstrates that LLMs can learn from scalar reward signals by receiving prompts containing their past outputs and associated feedback. TextGrad [15] proposes more general framework, treating optimization as process of back-propagating textual feedback through structured computation graph. key characteristic of these methods is their focus on iterative, within-sample improvement for single query. In contrast, our Training-Free GRPO more closely mirrors traditional RL by learning from separate dataset across multiple epochs to iteratively refine shared, high-quality experience library for out-of-domain queries. Furthermore, given each query, unlike self-critique or context updates for single trajectory, our method explicitly compares multiple rollouts per query for semantic advantage to compare different trajectories in each group, which has been confirmed effective in Section 3.1. Specifically in the context for optimizing agent systems, Agent KB [36] constructs shared, hierarchical knowledge base to enable the reuse of problem-solving experiences across tasks. Unlike the complex reason-retrieve-refine process of Agent KB, Training-Free GRPO simply injects the learned experiences into the prompt. Moreover, Agent KB relies on hand-crafted examples and employs an off-policy learning paradigm only once by collecting trajectories in the different way of online inference. In contrast, our Training-Free GRPO uses consistent pipeline and more closely mirrors on-policy RL with multi-epoch learning."
        },
        {
            "title": "6 Conclusion",
            "content": "In this paper, we introduced Training-Free GRPO, novel paradigm that shifts RL policy optimization from the parameter space to the context space. By leveraging group-based rollouts to iteratively distill semantic advantage into an evolving experiential knowledge which serves as the token prior, our method successfully steers the output distribution of frozen LLM agent, achieving significant performance gains in specialized domains. Experiments demonstrate that Training-Free GRPO not only surmounts the practical challenges of data scarcity and high computational cost but also outperforms traditional parameter-tuning methods. Our work establishes new, highly efficient pathway for adapting powerful LLM agents, making advanced agentic capabilities more accessible and practical for real-world applications."
        },
        {
            "title": "Contributions",
            "content": "Training-Free GRPO Authors Yuzheng Cai1,2* Tan1 Gang Li1 Zongyi Li1 Haojia Lin1 Yong Mao1 Ke Li1Q Xing Sun1 Siqi Cai1* Yuchen Shi1* Zihan Xu1* Lichao Chen1,3 Yulei Qin1 Xiaoyu"
        },
        {
            "title": "Affiliations",
            "content": "1Tencent Youtu Lab 2Fudan University 3Xiamen University *Equal Contributions Yuzheng Cai"
        },
        {
            "title": "References",
            "content": "[1] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. In International Conference on Learning Representations (ICLR), 2023. [2] AIME. Aime problems and solutions, 2025. URL https://artofproblemsolving.com/wiki/index. php/AIME_Problems_and_Solutions. [3] DeepSeek-AI. Deepseek-v3 technical report, 2024. URL https://arxiv.org/abs/2412.19437. [4] Jiazhan Feng, Shijue Huang, Xingwei Qu, Ge Zhang, Yujia Qin, Baoquan Zhong, Chengquan Jiang, Jinxin Chi, and Wanjun Zhong. Retool: Reinforcement learning for strategic tool use in llms. arXiv preprint arXiv:2504.11536, 2025. [5] Xinji Mai, Haotian Xu, Weinong Wang, Jian Hu, Yingying Zhang, Wenqiang Zhang, et al. Agent rl scaling law: Agent rl with spontaneous code execution for mathematical problem solving. arXiv preprint arXiv:2505.07773, 2025. [6] Zhenghai Xue, Longtao Zheng, Qian Liu, Yingru Li, Xiaosen Zheng, Zejun Ma, and Bo An. Simpletir: End-to-end reinforcement learning for multi-turn tool-integrated reasoning. arXiv preprint arXiv:2509.02479, 2025. [7] Tongyi DeepResearch Team. Tongyi-deepresearch. https://github.com/Alibaba-NLP/DeepResearch, 2025. [8] Zhengwei Tao, Jialong Wu, Wenbiao Yin, Junkai Zhang, Baixuan Li, Haiyang Shen, Kuan Li, Liwen Zhang, Xinyu Wang, Yong Jiang, et al. Webshaper: Agentically data synthesizing via informationseeking formalization. arXiv preprint arXiv:2507.15061, 2025. [9] Bowen Jin, Hansi Zeng, Zhenrui Yue, Jinsung Yoon, Sercan Arik, Dong Wang, Hamed Zamani, and Jiawei Han. Search-r1: Training llms to reason and leverage search engines with reinforcement learning. arXiv preprint arXiv:2503.09516, 2025. [10] MiroMind AI Team. Mirothinker: An open-source agentic model series trained for deep research and complex, long-horizon problem solving. https://github.com/MiroMindAI/MiroThinker, 2025. [11] Kechi Zhang, Jia Li, Ge Li, Xianjie Shi, and Zhi Jin. Codeagent: Enhancing code generation with toolintegrated agent systems for real-world repo-level coding challenges. arXiv preprint arXiv:2401.07339, 2024. [12] Dong Huang, Jie Zhang, Michael Luck, Qingwen Bu, Yuhao Qing, and Heming Cui. Agentcoder: Multi-agent-based code generation with iterative testing and optimisation. arXiv preprint arXiv:2312.13010, 2023. 12 Training-Free GRPO [13] Shuai Wang, Weiwen Liu, Jingxuan Chen, Yuqi Zhou, Weinan Gan, Xingshan Zeng, Yuhan Che, Shuai Yu, Xinlong Hao, Kun Shao, et al. Gui agents with foundation models: comprehensive survey. arXiv preprint arXiv:2411.04890, 2024. [14] Junyang Wang, Haiyang Xu, Haitao Jia, Xi Zhang, Ming Yan, Weizhou Shen, Ji Zhang, Fei Huang, and Jitao Sang. Mobile-agent-v2: Mobile device operation assistant with effective navigation via multi-agent collaboration. Advances in Neural Information Processing Systems, 37:26862710, 2024. [15] Mert Yuksekgonul, Federico Bianchi, Joseph Boen, Sheng Liu, Pan Lu, Zhi Huang, Carlos Guestrin, and James Zou. Optimizing generative ai by backpropagating language model feedback. Nature, 639(8055): 609616, 2025. [16] Weizhen Li, Jianbo Lin, Zhuosong Jiang, Jingyi Cao, Xinpeng Liu, Jiayu Zhang, Zhenqiang Huang, Qianben Chen, Weichen Sun, Qiexiang Wang, Hongxuan Lu, Tianrui Qin, Chenghao Zhu, Yi Yao, Shuying Fan, Xiaowan Li, Tiannan Wang, Pai Liu, King Zhu, He Zhu, Dingfeng Shi, Piaohong Wang, Yeyi Guan, Xiangru Tang, Minghao Liu, Yuchen Eleanor Jiang, Jian Yang, Jiaheng Liu, Ge Zhang, and Wangchunshu Zhou. Chain-of-agents: End-to-end agent foundation models via multi-agent distillation and agentic rl. 2025. URL https://arxiv.org/abs/2508.13167. [17] Zhihong Shao, Peiyi Wang, Qihao Zhu, Runxin Xu, Junxiao Song, Xiao Bi, Haowei Zhang, Mingchuan Zhang, YK Li, Yang Wu, et al. Deepseekmath: Pushing the limits of mathematical reasoning in open language models. arXiv preprint arXiv:2402.03300, 2024. [18] Zichen Liu, Changyu Chen, Wenjun Li, Penghui Qi, Tianyu Pang, Chao Du, Wee Sun Lee, and Min Lin. Understanding r1-zero-like training: critical perspective. arXiv preprint arXiv:2503.20783, 2025. [19] Qiying Yu, Zheng Zhang, Ruofei Zhu, Yufeng Yuan, Xiaochen Zuo, Yu Yue, Weinan Dai, Tiantian Fan, Gaohong Liu, Lingjun Liu, et al. Dapo: An open-source llm reinforcement learning system at scale. arXiv preprint arXiv:2503.14476, 2025. [20] Chujie Zheng, Shixuan Liu, Mingze Li, Xiong-Hui Chen, Bowen Yu, Chang Gao, Kai Dang, Yuqiong Liu, Rui Men, An Yang, et al. Group sequence policy optimization. arXiv preprint arXiv:2507.18071, 2025. [21] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:18771901, 2020. [22] An Yang, Anfeng Li, Baosong Yang, Beichen Zhang, Binyuan Hui, Bo Zheng, Bowen Yu, Chang Gao, Chengen Huang, Chenxu Lv, et al. Qwen3 technical report. arXiv preprint arXiv:2505.09388, 2025. [23] An Yang, Baosong Yang, Beichen Zhang, Binyuan Hui, Bo Zheng, Bowen Yu, Chengyuan Li, Dayiheng Liu, Fei Huang, Haoran Wei, Huan Lin, Jian Yang, Jianhong Tu, Jianwei Zhang, Jianxin Yang, Jiaxi Yang, Jingren Zhou, Junyang Lin, Kai Dang, Keming Lu, Keqin Bao, Kexin Yang, Le Yu, Mei Li, Mingfeng Xue, Pei Zhang, Qin Zhu, Rui Men, Runji Lin, Tianhao Li, Tianyi Tang, Tingyu Xia, Xingzhang Ren, Xuancheng Ren, Yang Fan, Yang Su, Yichang Zhang, Yu Wan, Yuqiong Liu, Zeyu Cui, Zhenru Zhang, and Zihan Qiu. Qwen2.5 technical report, 2025. URL https://arxiv.org/abs/2412.15115. [24] Jialong Wu, Wenbiao Yin, Yong Jiang, Zhenglin Wang, Zekun Xi, Runnan Fang, Linhai Zhang, Yulan He, Deyu Zhou, Pengjun Xie, and Fei Huang. Webwalker: Benchmarking llms in web traversal. 2025. URL https://arxiv.org/abs/2501.07572. [25] Qwen Team. Qwq-32b: Embracing the power of reinforcement learning, March 2025. URL https: //qwenlm.github.io/blog/qwq-32b/. [26] Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Luke Zettlemoyer, Nicola Cancedda, and Thomas Scialom. Toolformer: Language models can teach themselves to use tools, 2023. arXiv preprint arXiv:2302.04761, 2023. 13 Training-Free GRPO [27] Sirui Hong, Mingchen Zhuge, Jonathan Chen, Xiawu Zheng, Yuheng Cheng, Ceyao Zhang, Jinlin Wang, Zili Wang, Steven Ka Shing Yau, Zijuan Lin, et al. MetaGPT: Meta programming for multi-agent collaborative framework. International Conference on Learning Representations, ICLR, 2024. [28] Xingyao Wang, Yangyi Chen, Lifan Yuan, Yizhe Zhang, Yunzhu Li, Hao Peng, and Heng Ji. Executable code actions elicit better llm agents. In Forty-first International Conference on Machine Learning, 2024. [29] Mengkang Hu, Yuhang Zhou, Wendong Fan, Yuzhou Nie, Bowei Xia, Tao Sun, Ziyu Ye, Zhaoxuan Jin, Yingru Li, Qiguang Chen, Zeyu Zhang, Yifeng Wang, Qianshuo Ye, Bernard Ghanem, Ping Luo, and Guohao Li. OWL: Optimized workforce learning for general multi-agent assistance in real-world task automation, 2025. URL https://arxiv.org/abs/2505.23885. [30] John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy optimization algorithms. arXiv preprint arXiv:1707.06347, 2017. [31] Lang Feng, Zhenghai Xue, Tingcong Liu, and Bo An. Group-in-group policy optimization for llm agent training. arXiv preprint arXiv:2505.10978, 2025. [32] Aman Madaan, Niket Tandon, Prakhar Gupta, Skyler Hallinan, Luyu Gao, Sarah Wiegreffe, Uri Alon, Nouha Dziri, Shrimai Prabhumoye, Yiming Yang, et al. Self-refine: Iterative refinement with selffeedback. Advances in Neural Information Processing Systems, 36:4653446594, 2023. [33] Noah Shinn, Federico Cassano, Ashwin Gopinath, Karthik Narasimhan, and Shunyu Yao. Reflexion: Language agents with verbal reinforcement learning. Advances in Neural Information Processing Systems, 36:86348652, 2023. [34] Kefan Song, Amir Moeini, Peng Wang, Lei Gong, Rohan Chandra, Yanjun Qi, and Shangtong Zhang. Reward is enough: Llms are in-context reinforcement learners. arXiv preprint arXiv:2506.06303, 2025. [35] Giovanni Monea, Antoine Bosselut, Kianté Brantley, and Yoav Artzi. Llms are in-context reinforcement learners. 2024. [36] Xiangru Tang, Tianrui Qin, Tianhao Peng, Ziyang Zhou, Daniel Shao, Tingting Du, Xinming Wei, Peng Xia, Fang Wu, He Zhu, et al. Agent KB: Leveraging cross-domain experience for agentic problem solving. arXiv preprint arXiv:2507.06229, 2025. 14 Training-Free GRPO"
        },
        {
            "title": "A Case Study",
            "content": "On math reasoning and web searching scenarios, we provide examples illustrating how Training-Free GRPO enhances ReAct [1] with DeepSeek-V3.1-Terminus and corresponding tools. A.1 Experience-Guided Tool-Integrated Math Reasoning We consider geometric configuration with two rectangles ABCD and EFGH where D, E, C, are collinear in that order, and A, D, H, are concyclic. Given BC = 16, AB = 107, FG = 17, EF = 184, the task is to determine CE. Tool-integrated Math Reasoning (without experiences) Question Rectangles ABCD and EFGH are drawn such that D, E, C, are collinear. Also, A, D, H, all lie on circle. If BC = 16,AB = 107,FG = 17, and EF = 184, what is the length of CE? Trajectory [Agent] Ill place point at the origin (0, 0) and use horizontal line for D, E, C, F. For rectangle ABCD, set = (0, 16), = (107, 16), = (107, 0), = (0, 0). Set coordinates accordingly. [Tool] [Agent] Because EFGH is rectangle with EF horizontal and FG = 17, set = (x , 0), = (x 184, 0), and [Agent] initially set = (x , +17), = (x 184, +17). Impose concyclicity of A(0, 16), D(0, 0), G(x , 17), H(x 184, 17) using the 4-point determinant condition, derive an equation in . Solve the resulting quadratic for ; obtain 184.092 and thus xe = 184 0.092. [Tool] [Agent] Compute CE = 107 xe 106.9076. [Agent] Swap point orderings (DCEF, EDCF) and re-derive. At one point, use an angle-sine relation and get xe(xe + 184) = 17 leading to xe = 92 + 8481 0.0923, hence CE 106.9076. [Agent] Present an exact form CE = 199 8481 as the final answer. Outcome Incorrect: CE 106.9076 (reported as 199 8481). Figure 5. Example trajectory without experience in Math Reasoning. Baseline (without experiences). As shown in Figure 5, the unassisted agent initializes coordinate system with = (0, 0) and models ABCD as axis-aligned. For EFGH, it places = (x 184, 0), = (x , 0) and, critically, sets = (x , +17), = (x 184, +17), i.e., with positive vertical orientation for the short side. It then enforces the four-point concyclicity of A(0, 16), D(0, 0), G, via determinant condition and solves for , yielding 184.092 and consequently xe = 184 0.092. From this, it reports CE 106.9076 and an exact expression 199 8481. This trajectory exhibits three systemic issues: (i) misinterpretation of the vertical orientation (wrong sign for the y-coordinates of G, H), (ii) inconsistent handling of the order DECF and the lack of unified parameterization for segment relations, and (iii) absence of systematic, comprehensive post-solution verificationi.e., no integrated check that the final coordinates simultaneously satisfy rectangle dimensions. These issues lead to an incorrect cyclic constraint (e.g., an intermediate relation of the form x(x + 184) = 17) and 15 Training-Free GRPO acceptance of spurious solution without full geometric verification. Note that although CE 106.91 lies within 0 < CE < 107, this alone does not validate the solution; the critical failure was the lack of holistic consistency checks across all problem constraints. Tool-integrated Math Reasoning (with experiences) Question Rectangles ABCD and EFGH are drawn such that D, E, C, are collinear. Also, A, D, H, all lie on circle. If BC = 16,AB = 107,FG = 17, and EF = 184, what is the length of CE? Experiences [1] When solving geometry problems with intersections, validate solutions lie within bounded regions or segments, not on extensions, to avoid extraneous answers. [7] When solving geometry with constraints (e.g., trapezoids), validate all conditions: parallel sides via slopes, convexity via cross products, to avoid extraneous solutions. [29] When constructing points on line extensions, carefully interpret directional phrases like beyond B. [37] In geometry problems with points on sides of triangle and given segment lengths, first determine all three side lengths by summing the appropriate segments. For example, if points on AB, AC, BC are given with AM, MB, AN, NC, BP, PC, then AB = AM + MB, AC = AN + NC, BC = BP + PC. This ensures the triangle is consistently defined before coordinate placement or area calculations. Trajectory [Agent] Fix the order DECF on horizontal line. Set CE = with the segment constraint 0 < < 107. (By [Tool] [G29],[G1]) Record relations: DE = 107 and CF = 184 (from [G37]). Place = (0, 0), = (107 x, 0), = (107, 0), = (291 x, 0), ensuring EF = 184. [Tool] [Agent] Choose the vertical orientation consistently: since = (0, 16) and = (0, 0), set the short side FG = 17 downward, i.e., = (107 x, 17) and = (291 x, 17). (This corrects the sign error in the no-experience path) Impose concyclicity using the circle equation x2 + y2 + Dx + Ey + = 0. With A(0, 16) and D(0, 0), get = 0, = 16. Substitute H(107 x, 17) and G(291 x, 17) to obtain two equations. Subtract to eliminate constants and get = 2x 398. [Agent] [Tool] [Agent] Substitute back to get the quadratic x2 398x + 30576 = 0. Compute the discriminant: 3982 4 30576 = 36100 = 1902. Roots: = 294 and = 104. [Tool] [Agent] Apply the segment constraint 0 < < 107 to discard = 294 and select = 104 (by [G1]) [Agent] (Full verification by [G7]) DE = 107 104 = 3, CF = 184 104 = 80, EF = 184, FG = 17. The circle x2 + y2 190x 16y = 0 passes through = (0, 16), = (0, 0), = (3, 17), = (187, 17). All constraints satisfied. Outcome Correct: CE = 104. Figure 6. Example trajectory with experiences in Math Reasoning. Enhanced (With Experiences). Refer to Figure 6, with curated experience pool, the agent follows structured pipeline: Directional ordering ([29]) and boundedness validation ([1]): It fixes the order DECF on line and sets 16 Training-Free GRPO CE = with 0 < < 107, ensuring lies on segment DC and lies beyond C. Segment-addition parameterization ([37]): It uses DE + EC = DC = AB = 107 and EC + CF = EF = 184 to obtain DE = 107 x, CF = 184 x, and places = (0, 0), = (107 x, 0), = (107, 0), = (291 x, 0). Consistent vertical orientation and cyclic modeling: Noting = (0, 16), = (0, 0), it orients the short side downward (FG = 17) so = (107 x, 17), = (291 x, 17). Using the circle equation x2 + y2 + Dx + Ey + = 0 with and yields = 0, = 16. Substituting and G, subtracting the two equations gives = 2x 398; back-substitution reduces to the quadraticx2 398x + 30576 = 0, with discriminant 3982 4 30576 = 36100 = 1902 and roots = 104, 294. Root selection and full verification ([1], [7]): Applying 0 < < 107 filters out = 294, selecting = 104. The agent then verifies all constraints: DE = 107 104 = 3, CF = 184 104 = 80, EF = 184, FG = 17, and confirms that the circle x2 + y2 190x 16y = 0 passes through = (0, 16), = (0, 0), = (3, 17), = (187, 17). Comparative Analysis. This case reveals clear causal link between experience-guided behaviors and correctness. Experience [29] eliminates directional ambiguity and enforces the correct collinearity order, directly addressing the baselines misplacement of G, H. Experience [37] induces clean single-variable parameterization (DE = 107 x, CF = 184 x), which simplifies the cyclic constraint to solvable quadratic. Experience [1] imposes necessary boundedness filter (0 < < 107) to discard extraneous roots. Finally, experience [7] mandates comprehensive post-solution verification (rectangle dimensions, collinearity, concyclicity), preventing acceptance of spurious solutions. Compared to the unassisted trajectory, the experience-informed reasoning corrects the vertical orientation, resolves ordering and parameterization inconsistencies, and installs principled validation gates. This case demonstrates the positive impact of integrating domain-specific experiences on reliability and accuracy in tool-integrated mathematical reasoning. A.2 Experience-Guided Web Searching We consider web searching task from WebWalkerQA: quantify 2024 rewards for (i) creators in the Creator Program (weekly amount), and (ii) players in the Play-2-Airdrop during Private Beta 4 (total pool and duration). Baseline (without experiences). As summarized in Figure 7, the unassisted agent issues multiple broad searches and relies heavily on result snippets and third-party summaries, delaying clicks into authoritative pages. It eventually opens the PB4 registration post to confirm Play-2-Airdrop Campaign: 200,000 ILV over six months, but continues to scan snippets for the Creator Program value without opening the relevant official post. Connection errors to one official page cause the agent to revert to broad searches rather than alternative primary-source strategies (e.g., site-specific queries or adjacent official posts). The trajectory remains incomplete: it reports the Play-2-Airdrop figure but fails to confirm the Creator Programs 100 ILV weekly from an official source, yielding an incorrect/incomplete answer. Enhanced (With Experiences). Refer to Figure 8. With curated experience pool, the agent follows disciplined pipeline: (1) prioritize official sources ([14], [4]) and open the PB4 overview and registration posts to extract the 200,000 ILV over six months and Testnet/Mainnet allocation structure; (2) refine search terms to target formal titles ([2], [12], [1]) and open The Illuvium Creator Program Is Getting An Upgrade!; (3) extract the exact line The prize pool of 100 ILV tokens awaits participating Creators each week, and (4) synthesize both verified statements into complete answer aligned with the question requirements ([25]). 17 Training-Free GRPO This results in the correct, fully supported output: creators earn 100 ILV weekly; players have 200,000 ILV pool distributed over six months in PB4s Play-2-Airdrop. Web Searching (without experiences) Question In 2024, how much ILV reward can creators participating in the Creator Program and players engaging in the Play-2-Airdrop during Private Beta 4 on the Illuvium platform earn? Trajectory [Agent] [Tool] Ill start with broad web search for both program names and rewards in 2024. google_search(\"Illuvium Creator Program Play-2-Airdrop Private Beta 4 2024 rewards ILV\") [Agent] From snippets, PB4 mentions Play-2-Airdrop campaign and 200,000 ILV over six months. This [Agent] [Tool] [Agent] likely answers half the question. (continue searching rather than opening) Ill search specifically for the Creator Program rewards. google_search(\"Ïlluvium Creator Program2024 rewards ILV allocation\") see references (Binance Square, media blogs) to 100 ILV per week, but cant confirm from illuvium.io quickly. Ill keep searching. [Agent] Avoids clicking potential official announcements; keeps scanning search result snippets. [Agent] Ill fetch the PB4 registration page to confirm the Play-2-Airdrop details. [Tool] get_content(\"https://illuvium.io/news/register-now-for-private-beta-4\") [Agent] Extracted: Play-2-Airdrop Campaign: 200,000 ILV tokens over six months. That confirms the second quantity. Ill look for the Airdrop Season details page. google_search(\"Ïlluvium Airdrop Season Details blog post 2024\") get_content(\"https://illuvium.io/news/illuvium-airdrop-season-details\") [Agent] [Tool] [Tool] [Agent] Connection fails; instead of trying alternative official sources or site-specific queries, returns to broad searches. [Agent] More searches for Illuvium 100 ILV per week creator rewards April 2024 and site:illuvium.io Creator Program 100 ILV yield sparse official confirmation; Ill defer the creator number. [Agent] Fails to open likely official Creator Program pages; leaves the creator number unconfirmed. [Agent] Synthesis: will answer with whats confirmed officially (Play-2-Airdrop 200,000 ILV over 6 months) and note the creator reward as unclear. Outcome Creators: (not clearly specified; mentions unverified 100 ILV per week). Players (PB4 Play-2-Airdrop): 200,000 ILV over six months. Figure 7. Example trajectory without experiences in Web Searching. Comparative Analysis. Experience-guided behaviors directly address baseline deficiencies: primary source prioritization ([14], [4]) removes reliance on snippets and third-party coverage; document identification ([1]) and iterative refinement ([2], [12]) ensure the agent locates and opens the exact Creator Program post; partial match evaluation ([25]) steers the agent to confirm numerical claims at their authoritative origin. In contrast, the baseline wastes context on searches without content acquisition, leaves critical values unverified, and produces an incomplete answer. 18 Training-Free GRPO Web Searching (with experiences) Question In 2024, how much ILV reward can creators participating in the Creator Program and players engaging in the Play-2-Airdrop during Private Beta 4 on the Illuvium platform earn? Experiences [1] Document identification: Focus on extracting formal titles and collection names from official metadata and headers rather than inferring relationships from content descriptions. [2] Systematic exploration: Progress from broad initial queries to targeted content extraction using adaptive search strategies that balance discovery with precision. [4] Source prioritization: Prioritize systematic extraction from authoritative comprehensive documents over fragmented information for coherent topic coverage. [12] Iterative refinement: Continuously refine search terms based on emerging patterns while periodically re-evaluating previously encountered information to avoid overlooking correct solutions and maintain essential contextual elements. [14] Primary source prioritization: Prioritize locating official primary source documents over secondary coverage to ensure accuracy and capture exact language for definitive metadata and hierarchical relationships. [25] Partial match evaluation: Systematically evaluate partial matches from initial searches against all criteria before pursuing alternative paths. Trajectory [Agent] Start with broad search, then pivot to official illuvium.io pages for PB4 and Creator Program. (By [2], [Tool] [Agent] [Tool] [14], [4]) google_search(\"Illuvium Creator Program rewards 2024 Private Beta 4 ILV earnings\", num_results=5) Identify official pages in results: Illuvium Beta 4: All You Need to Know and Register Now for Private Beta 4. Open them to confirm Play-2-Airdrop details. (By [14], [25]) get_content(\"https://illuvium.io/news/illuvium-beta-4-all-you-need-to-know\") [Agent] Extracted from official PB4 overview: Testnet phases get 10% of the Play-2-Airdrop pool; clarifies [Tool] structure and timeline. get_content(\"https://illuvium.io/news/register-now-for-private-beta-4\") [Agent] Extracted explicit official number: Play-2-Airdrop Campaign: 200,000 ILV tokens over six months. [Agent] This covers the player reward for PB4 context. Iteratively refine search for the Creator Program exact weekly reward using formal title cues like Creator Program . . . upgrade. (key behavior; By [12], [1]) [Tool] google_search(\"Ïlluvium Creator Programrewards ILV 2024\", num_results=5) [Agent] Click the official post: The Illuvium Creator Program Is Getting An Upgrade!. (By [14], [1], [4]) [Tool] get_content(\"https://illuvium.io/news/illuvium-creator-program-is-getting-an-upgrade\") [Agent] Extracted exact statement from official source: The prize pool of 100 ILV tokens awaits participating Creators each week. This provides the creator reward. Outcome Creators can earn 100 ILV weekly in the Creator Reward Program, and 200,000 ILV will be distributed over six months for players in the Play-2-Airdrop during Private Beta 4. Figure 8. Example trajectory with experiences in Web Searching. 19 Training-Free GRPO"
        },
        {
            "title": "B Prompts",
            "content": "In this appendix, we provide the prompts used in math reasoning tasks. Figures 9 and 10 present the prompts for solving math tasks. Figures 11 and 12 are used in group relative semantic advantage. Figure 13 works for optimizing the experiential knowledge . System Prompt Solve the following problem step by step. You now have the ability to selectively write executable Python code to enhance your reasoning process, e.g., calulating numbers and verifying math computations. Never directly just printing your semantic reasoning in Python. The Python code will be executed by an external sandbox, and the output (returned as dict with the message in the \"message\" field) can be returned to aid your reasoning and help you arrive at the final answer. The Python code should be complete scripts, including necessary imports. Each code snippet is wrapped with ```python code snippet ```. The last part of your final response should be in the following format: <answer> boxed{The final answer goes here.} </answer> Figure 9. System prompt for ReAct framework in Math Reasoning. Prompt for Involving Experiential Knowledge Please solve the problem: {problem} When solving problems, you MUST first carefully read and understand the helpful instructions and experiences: {experiences} Figure 10. Prompt for supplementing math problems with experiential knowledge . Prompt for Trajectory Summarization in Group Advantage Computation An agent system may be provided with some experiences, and then it produces the following trajectory to solve the given problem. Please summarize the trajectory step-by-step: 1. For each step, describe what action is being taken, and which experience has been used in this step. 2. Given the grading of this rollout and the correct answer, identify and explain any steps that represent detours, errors, or backtracking, highlighting why they might have occurred and what their impact was on the trajectorys progress. 3. Maintain all the core outcome of each step, even if it was part of flawed process. <trajectory> {trajectory} </trajectory> <evaluation> {whether the answer is correct or not} </evaluation> <groundtruth> {the ground truth answer} </groundtruth> Only return the trajectory summary of each step, e.g., 1. what happened in the first step and the core outcomes 2. what happened in the second step and the core outcomes 3. ... Figure 11. Prompt for summarizing each trajectory in Math Reasoning. 20 Training-Free GRPO Prompt for Group Advantage Computation An agent system is provided with set of experiences and has tried to solve the problem multiple times with both successful and wrong solutions. Review these problem-solving attempt and extract generalizable experiences. Follow these steps: 1. Trajectory Analysis: For successful steps: Identify key correct decisions and insights For errors: Pinpoint where and why the reasoning went wrong Note any important patterns or strategies used/missed Review why some trajectories fail? Is there any existing experiences are missed, or experiences do not provide enough guidance? 2. Update Existing Experiences Some trajectories may be correct and others may be wrong, you should ensure there are experiences can help to run correctly You have three options: [modify, add, delete] modify: You can modify current experiences to make it helpful add: You can introduce new experiences to improve future performance delete: You can delete existing experiences You can update at most {max number of operations} clear, generalizable lessons for this case Before updating each experience, you need to: Specify when it would be most relevant List key problem features that make this experience applicable Identify similar problem patterns where this advice applies 3. Requirements for each experience that is modified or added. Begin with general background with several words in the experience Focus on strategic thinking patterns, not specific calculations Emphasize decision points that could apply to similar problems Please provide reasoning in details under the guidance of the above 3 steps. After the step-by-step reasoning, you will finish by returning in this JSON format as follows: ```json [ { }, { }, { \"option\": \"modify\", \"experience\": \"the modified experience\", \"modified_from\": \"G17\" # specify the ID of experience that is modified \"option\": \"add\", \"experience\": \"the added experience\", \"option\": \"delete\", \"delete_id\": \"the deleted experience ID\", }, ... ] ``` Note that your updated experiences may not need to cover all the options. You can only use one type of updates or choose to remain all experiences unchanged. <problem> {problem} </problem> <trajectories> {G summarized trajectories in the same group} </trajectories> <groundtruth> {answer} </groundtruth> <experience> {experiences} </experience> Figure 12. Prompt for group advantage computation in Math Reasoning. 21 Training-Free GRPO Prompt for the Optimization Step An agent system is provided with set of experiences and has tried to solve the problem multiple times. From the reflections, some suggestions on the existing experiences have been posed. Your task is to collect and think for the final experience revision plan. Each final experience must satisfy the following requirements 1. It must be clear, generalizable lessons for this case, with no more than 32 words 2. Begin with general background with several words in the experience 3. Focus on strategic thinking patterns, not specific calculations 4. Emphasize decision points that could apply to similar problems 5. Avoid repeating saying similar experience in multiple different experiences <experience> {experiences} </experience> <suggested_updates> {all group advantage in current batch} </suggested_updates> Please provide reasoning in each of the suggestions, and think for how to update existing experiences You have three update options: [modify, merge, delete] - modify: You can modify current experiences to make it helpful - merge: You can merge some similar experiences into more general forms to reduce duplication - delete: You can delete an experience After generating the step-by-step reasoning, you need to give the final experience revision details by returning in this JSON format as follows: ```json [ \"option\": \"modify\", \"experience\": \"the modified experience\", \"modified_from\": \"G17\" # specify the ID of experience that is modified { }, { \"option\": \"merge\", \"experience\": \"the merged experience\", \"merged_from\": [\"C1\", \"C3\", \"S4\", ...] # specify the str IDs of experiences that is merged from, at least 2 IDs are needed }, { \"option\": \"delete\", \"delete_id\": \"the deleted experience ID\", }, ... ] ``` Note that your updated experiences may not need to cover all the options. You can only use one type of updates or choose to remain all experiences unchanged. Figure 13. Prompt for optimizing experiential knowledge based on group advantages in the same batch in Math Reasoning. 22 Training-Free GRPO"
        },
        {
            "title": "C Examples of Learned Experiences",
            "content": "In this appendix, we provide some examples in Figure 14, which are extracted from 48 learned experiences by Training-Free GRPO with tool use in Math Reasoning. Examples of Learned Experiences [1]. When solving geometry problems with intersections, validate solutions lie within bounded regions or segments, not on extensions, to avoid extraneous answers. [2]. When multiple locations are described relative to common point using compass directions (e.g., southwest, southeast), analyze the angle between these directions. Southwest and southeast from the same point form 90 angle, suggesting right triangle configuration. This insight often allows using the Pythagorean theorem rather than more complex coordinate geometry approaches. [3]. When scoring systems reward consecutive successes, analyze whether bonuses are additive or replace base scores. Test small examples to resolve ambiguity. [10]. When using mathematical invariants to prove impossibility, always validate them against known achievable states or small cases. If an invariant suggests state is unreachable but you can construct valid sequence reaching it, re-examine your invariant analysis - you may have made an error in the mathematical reasoning or the invariant may not be preserved as claimed. [11]. When solving smallest prime problems involving divisibility of large expressions like geometric series, first handle primes 2 and 3 as special cases. Then systematically check primes in ascending order using multiplicative order properties: for prime > 3, divides the sum if the multiplicative order of the base modulo divides the exponent in the closed form. This avoids unnecessary direct computation of huge numbers. [12]. For expected extreme statistics in combinatorial problems, use direct enumeration for small sizes. For larger problems, develop combinatorial counting methods instead of expectation formulas. [21]. For complex polynomials with real parameters, separate real and imaginary parts to find when real roots exist or all are non-real. [22]. For right triangles with symmetric points on circle, assume equal y-coordinates and opposite to simplify area maximization. [32]. For points on concentric circles, collinearity along ray minimizes the circumradius to half the max-min radius difference. [33]. In state transition problems with additive operations, consider binary representation invariants. The number of 1s often determines extremal states or transition possibilities. Figure 14. Example of learned experiences from Training-Free GRPO with tool use in Math Reasoning."
        }
    ],
    "affiliations": [
        "Tencent",
        "Youtu-Agent Team"
    ]
}