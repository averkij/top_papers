{
    "paper_title": "MOD-X: A Modular Open Decentralized eXchange Framework proposal for Heterogeneous Interoperable Artificial Agents",
    "authors": [
        "Georgios Ioannides",
        "Christos Constantinou",
        "Vinija Jain",
        "Aman Chadha",
        "Aaron Elkins"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "As Artificial Intelligence systems evolve from monolithic models to ecosystems of specialized agents, the need for standardized communication protocols becomes increasingly critical. This paper introduces MOD-X (Modular Open Decentralized eXchange), a novel architectural framework proposal for agent interoperability that addresses key limitations of existing protocols. Unlike current approaches, MOD-X proposes a layered architecture with a Universal Message Bus, thorough state management, translation capabilities, and blockchain-based security mechanisms. We present MOD-X's architecture, compare it with existing protocols, and demonstrate its application through a worked example how it enables integration between heterogeneous specialist agents (agents with different architectures, vendors, capabilities, and knowledge representations--including rule-based systems, neural networks, symbolic reasoning engines, and legacy software with agent wrappers). MOD-X's key innovations include a publish-subscribe communication model, semantic capability discovery, and dynamic workflow orchestration--providing a framework that bridges theoretical formalism with practical implementation. This architecture addresses the growing need for truly decentralized, interoperable agent ecosystems that can scale effectively without the need for central coordination."
        },
        {
            "title": "Start",
            "content": "Mod-X: Modular Open Decentralized eXchange Framework proposal for Heterogeneous Interoperable Artificial Agents GEORGIOS IOANNIDES, James Silberrad Brown Center for Artificial Intelligence Carnegie Mellon University Amazon GenAI, USA CHRISTOS CONSTANTINOU, University of Bristol James Silberrad Brown Center for Artificial Intelligence Amazon GenAI, USA VINIJA JAIN, James Silberrad Brown Center for Artificial Intelligence, USA AMAN CHADHA, James Silberrad Brown Center for Artificial Intelligence Amazon GenAI, USA AARON ELKINS, James Silberrad Brown Center for Artificial Intelligence, USA As Artificial Intelligence systems evolve from monolithic models to ecosystems of specialized agents, the need for standardized communication protocols becomes increasingly critical. This paper introduces Mod-X (Modular Open Decentralized eXchange), novel architectural framework proposal for agent interoperability that addresses key limitations of existing protocols. Unlike current approaches, Mod-X proposes layered architecture with Universal Message Bus, thorough state management, translation capabilities, and blockchain-based security mechanisms. We present ModXs architecture, compare it with existing protocols, and demonstrate its application through worked example how it enables integration between heterogeneous specialist agents (agents with different architectures, vendors, capabilities, and knowledge representationsincluding rule-based systems, neural networks, symbolic reasoning engines, and legacy software with agent wrappers). Mod-Xs key innovations include publish-subscribe communication model, semantic capability discovery, and dynamic workflow orchestrationproviding framework that bridges theoretical formalism with practical implementation. This architecture addresses the growing need for truly decentralized, interoperable agent ecosystems that can scale effectively without the need for central coordination. Additional Key Words and Phrases: AI agents, agent communication protocols, interoperability, decentralized exchange 1 Introduction Artificial Intelligence (AI) is undergoing paradigm shift from monolithic, general-purpose models toward ecosystems of specialized, interoperable agents. This transition presents significant challenges in enabling effective communication and collaboration among diverse AI agents built by different vendors, each with varying architectures and capabilities. Current approaches to agent communication often fall into one Work does not relate to position at Amazon. Authors Contact Information: Georgios Ioannides, gioannid@alumni.cmu.edu, James Silberrad Brown Center for Artificial Intelligence and Carnegie Mellon University and Amazon GenAI, USA; Christos Constantinou, christos.constantinou@bristol.ac.uk, University of Bristol and James Silberrad Brown Center for Artificial Intelligence and Amazon GenAI, USA; Vinija Jain, hi@vinija.ai, James Silberrad Brown Center for Artificial Intelligence, USA; Aman Chadha, hi@aman.ai, James Silberrad Brown Center for Artificial Intelligence and Amazon GenAI, USA; Aaron Elkins, aelkins@sdsu.edu, James Silberrad Brown Center for Artificial Intelligence, USA. 5 2 0 2 6 ] . [ 1 6 7 3 4 0 . 7 0 5 2 : r of two categories: theoretical frameworks with limited practical implementation (like FIPA-ACL [11]) or pragmatic but specialized solutions for specific ecosystems (like LangChains Agent Protocol [19]). The emerging initiatives such as Agent-to-Agent (A2A) protocol [12] and Model Context Protocol [3] (MCP) represent important steps toward standardization, but they focus on different aspects of the agent communication problem. A2A enables agent-to-agent interactions without exposing internal state, while MCP standardizes how AI applications access external tools and data sources. However, neither protocol provides an elaborate solution for truly decentralized, modular agent ecosystems that can scale effectively. Agents primary use cases are research and summarization tasks, which fall under information retrieval [20]. Current agent communication protocols significantly limit the autonomy and effectiveness of information retrieval tasks by lacking sophisticated mechanisms for agent-to-agent coordination. The proposed Mod-X approach can improve the overall autonomy of information retrieval through better agent-to-agent communication mechanisms. In this paper, we introduce Mod-X (Modular Open Decentralized eXchange), proposed architectural framework designed to enable integration of heterogeneous specialist AI agents. Our contributions include: (1) thorough analysis of existing agent communication protocols/frameworks, highlighting their strengths and limitations (2) The introduction of Mod-Xs layered architecture with Universal Message Bus, translation layer, state management, and security mechanisms (3) detailed explanation of Mod-Xs key components, including capability-based discovery, dynamic workflow orchestration, and blockchain-based verification (4) worked example demonstrating how Mod-X facilitates complex multi-agent interactions in practical scenarios Unlike existing approaches that focus on specific aspects of agent communicationwhether enterprise security (A2A), tool integration (MCP), or distributed coordination (NANDA [29])Mod-X provides translation and interoperability layer that can bridge these diverse protocol families while maintaining their individual strengths. 2 Related Work Agent communication protocols have evolved from theoretical frameworks to practical implementations, yet existing approaches provide limited support for effective information retrieval tasks from multiple heterogeneous sources that require sophisticated coordination between these heterogeneous agents. Based on recent surveys [33], we analyze existing approaches in different architectural categories as detailed in Table 1."
        },
        {
            "title": "2.1 Evolution and Technical Challenges",
            "content": "Early theoretical frameworks like FIPA-ACL established formal foundations using speech act theorythe idea that when agents send messages, they are performing actions like making requests or sharing beliefs, not just exchanging data. For example, when Agent sends \"I request that you book flight,\" this message actually performs the action of making request. However, these theoretical frameworks face fundamental verification problem: theres no way to verify whether an agents expressed beliefs and intentions align with their actual internal mental states. You cant \"peek inside an agents programming\" to confirm if it truly believes what it claims. The current protocol landscape shows four distinct architectural approaches addressing different communication challenges. Context-oriented protocols solve the \"agent needs tools\" problem by standardizing how agents access external resources. The Model Context Protocol (MCP) provides universal standard for connecting LLM agents to external data, tools, and services using client-server architecture where the agent (Host) connects to multiple Clients, each managing specific Resources through dedicated Servers. This decouples tool invocation from LLM responses, reducing data leakage risks while enabling standardized context acquisition. Similarly, agent.json [32] creates machine-readable contracts for websites to declare AI-compatible interfaces, built on OpenAPI standards to enable websites to publish structured JSON files at /.well-known/agents.json that define workflows, authentication schemes, and data dependencies, making web services more accessible to AI agents. General-purpose inter-agent protocols solve the \"agents need to talk to each other\" problem through various approaches. The Agent Network Protocol [1] (ANP) aims to create an \"Internet of Agents\" using three layers: Identity (W3C DID for decentralized authentication), Meta-Protocol (natural language protocol negotiation), and Application Protocol (standardized agent discovery and interaction). The Agent2Agent Protocol (A2A) enables enterprise-grade agent collaboration through HTTP-based messaging with JSON-RPC 2.0 format, emphasizing async-first architecture supporting long-running tasks, multi-modal communication, and enterprise security requirements while maintaining \"opaque execution\" where agents dont share internal thoughts or tools. The Agent Interaction & Transaction Protocol [24] (AITP) focuses on secure crosstrust-boundary communication using blockchain technology for identity verification and value exchange between autonomous agents. Both the Agent Communication Protocol [15] (AComP) and Agent Connect Protocol [21] (AConP) provide standardized interfaces for agent invocation and configuration, focusing on practical deployment needs. Agora [22] addresses the \"Agent Communication Trilemma\"balancing versatility, efficiency, and portability by enabling agents to autonomously negotiate communication protocols using Protocol Documents (PDs), allowing dynamic adaptation between structured protocols, LLM routines, and natural language based on communication frequency and context. Domain-specific inter-agent protocols solve specialized interaction challenges across three main areas. For human-agent interaction, the PXP Protocol [30] enables bidirectional intelligible communication using finite-state machines with RATIFY/REFUTE/REVISE/REJECT message tags, while LOKA [28] provides 3 decentralized identity and ethical consensus mechanisms for AI governance. For robot-agent interaction, CrowdES [4] generates realistic crowd behavior for robot navigation environments, and Spatial Population Protocols solve distributed localization problems among anonymous robots through geometric consensus algorithms. For system-agent interaction, the Language Model Operating System [8] (LMOS) creates an \"Internet of Agents\" infrastructure with three layers for agent discovery, communication protocol negotiation, and identity management, while Agent Protocol defines framework-agnostic standards for agent lifecycle management (starting, stopping, monitoring) using OpenAPI specifications. key insight from recent research is that context-oriented and inter-agent protocols may gradually converge. Tools can be viewed as \"low-autonomy agents,\" while agents can function as \"high-autonomy tools.\" This suggests future protocols may need to handle both paradigms uniformlywhere an agent accessing database tool through MCP could be equivalent to an agent collaborating with specialized data-analysis agent through A2A. The rapid evolution is evident: MCP launched in November 2024 initially lacked HTTP support, but by early 2025 had added HTTP Server-Sent Events, authentication, and HTTP Streaming capabilities, mirroring the TCP/IP to HTTP evolution in internet protocols. The analysis reveals fundamental gaps preventing effective information retrieval coordination: (1) Semantic Fragmentation: protocols use incompatible vocabularies and ontologies, preventing agents from discovering equivalent capabilities across different implementations. (2) State Management Conflicts: stateless approaches (A2A) cannot maintain research context across multi-step workflows, while stateful systems (AutoGen [23], AComP) lack distributed coordination mechanisms. (3) Security-Interoperability Tension: enterprise security models (OAuth/JWT) create authentication silos that prevent cross-organizational agent collaboration essential for extensive research tasks. (4) Limited Cross-Domain Coordination: domain-specific optimizations (IoT, robotics, blockchain) cannot generalize to information retrieval scenarios requiring diverse agent types. 2.2 Fundamental Architectural Gap No existing approach provides the combination of universal semantic translation, distributed state coordination, and cross-protocol interoperability required for next-generation agent ecosystems focused on information retrieval. Current protocols optimize for specific communication patterns or deployment contexts but lack the architectural flexibility to bridge heterogeneous agent implementations while maintaining the sophisticated coordination mechanisms necessary for complex research and summarization workflows. 3 Mod-X: Architecture and Components The Mod-X (Modular Open Decentralized eXchange) framework proposal is illustrated in Figure 1 which builds on lessons from existing protocols to provide proposed implementation architecture for truly interoperable agent systems. The framework is designed to enable integration between heterogeneous 4 Fig. 1. Mod-X layered architecture showing different agent types, Universal Message Bus, and supporting layers specialist agents through layered architecture that addresses key challenges for enhanced information retrieval (between agents) in agent communication."
        },
        {
            "title": "3.1 Architecture Overview",
            "content": "Mod-X proposes layered architecture with clear separation of concerns. This architecture supports diverse agent types that can dynamically join and leave the ecosystem, with the Universal Message Bus providing the core communication infrastructure. 3.2 Core Architecture 3.2.1 Universal Message Bus (UMB). The communication backbone that connects all three agent types in the ecosystem: Domain-Specific Specialist Agents: Handle specific domain tasks (e.g., flight booking, weather forecasting) Cross-Domain Coordinator Agents: Orchestrate multi-domain workflows Utility & Tool Agents: Provide supporting services (authentication, logging, translation) The UMB provides: Decentralized routing: Agents communicate through topic-based publish-subscribe [9, 31], eliminating the need for direct point-to-point connections. For example, when weather monitoring agent detects flight delays due to storms, it publishes this information to the flight-disruption topic, automatically notifying all subscribed travel planning agents without needing to know their specific identities or locations. Similarly, budget tracking agent can subscribe to expense-transaction topics to monitor spending across multiple booking agents simultaneously, enabling real-time budget enforcement across the entire ecosystem. Reliable delivery: WebSocket connections with HTTP fallback ensure message delivery across network conditions Unlike MCPs client-server model or A2As direct agent connections, UMB enables many-to-many interactions where any agent can communicate with any other agent without prior configuration, regardless of whether they are domain specialists, coordinators, or utility agents."
        },
        {
            "title": "3.3.1 Translation Layer. Operates beneath the UMB to solve the interoperability challenge of connecting\nagents built with different technologies and vocabularies:",
            "content": "Semantic capability matching: Agents describe their functions using vector embeddings and ontological links, allowing discovery based on meaning rather than exact keyword matches Automatic message translation: Converts between different agent message formats and data representations in real-time. For instance, when European hotel booking agent describes room types as Standard/Superior/Deluxe but an American travel agent expects Economy/Business/Premium, the translation layer automatically maps these equivalent concepts using semantic embeddings. Currency conversions, date format differences (DD/MM/YYYY vs MM/DD/YYYY), and measurement units (kilometers vs miles) are handled transparently without requiring agents to be aware of these differences. This addresses the fundamental problem where agents developed independently use different vocabularies for the same capabilities. The UMB addresses the classic API integration challenge of connecting multiple applications with multiple systems without requiring custom point-to-point integrations [27], enabling standardized communication patterns that scale efficiently. State Management & Persistence. Manages how agents operate and share information in the distributed 3.3.2 system: Containerized deployment: Agents run in standardized containers regardless of their internal technology (e.g. Python, JavaScript, neural networks, rule engines) Contextual state sharing: Maintains shared context for complex multi-step interactions while preserving agent autonomy Distributed consistency: Resolves conflicts when multiple agents modify shared information. For example, during complex business trip booking, the flight agent temporarily shares seat preferences and frequent flyer status with the hotel agent to maintain service level consistency, but this shared context expires once the booking is complete. Multiple agents coordinating an emergency rebooking can access shared context about the travelers constraints and preferences without permanent access to personal data. This enables complex collaborations that may require maintaining context across multiple agent interactions, which existing stateless protocols cannot support. State management adapts distributed consensus algorithms [18, 26] and container orchestration patterns [35] proven in production cloud environments. 3.4 Cross-Domain Coordination 3.4.1 Workflow Orchestration. Primarily handled by Cross-Domain Coordinator Agents to coordinate complex multi-agent processes that go beyond simple message exchanges: 6 Declarative workflows: Define multi-step processes as graphs showing which agents need to run and in what order Parallel execution: Automatically identifies and runs independent operations simultaneously Failure recovery: When an agent fails, the system can retry, substitute alternative agents, or roll back completed work This enables sophisticated patterns like gathering information from multiple sources, building consensus among agents, and multi-stage decision refinement."
        },
        {
            "title": "3.5.1 Verification & Security Layer. Ensures secure and trustworthy interactions across all agent types in\nthe decentralized ecosystem: (1) Cryptographic identity: Each agent has a verifiable digital identity that\ncannot be forged and all agent communications are recorded in tamper-proof logs, (2) Reputation tracking:\nAgents build trust scores based on successful interactions and honest behavior. This blockchain-based",
            "content": "approach provides stronger security guarantees than traditional OAuth/JWT systems, addressing the unique trust challenges of decentralized agent networks through reputation tracking mechanisms [5]. Blockchain operations introduce computational overhead [5, 34]. To address this, Mod-X implements tiered security model: (1) High-value operations use blockchain such as for agent registration, financial transactions, reputation updates, and security policies; (2) Routine communications employ lightweight cryptographic verification such as for messages, queries, and status updates. This selective on-chain/off-chain approach significantly reduces overhead while maintaining security guarantees for critical operations [5], using digital signatures with periodic batch anchoring to blockchain. 3.6 Implementation Status and Feasibility MOD-X represents conceptual architecture that builds upon established technologies and proven design patterns. While the complete integrated system has not been implemented, each component leverages well-established foundations: Universal Message Bus: Built on proven publish-subscribe architectures widely deployed in production systems [9] Translation Layer: Leverages recent advances in embedding space alignment [16] State Management: Adapts distributed consensus algorithms [18, 26] and container orchestration patterns [6, 25] proven in production cloud environments Security Layer: Applies blockchain-based trust mechanisms increasingly validated in multi-agent systems [5] and distributed computing environments 7 Protocol Year Communication Pattern Security Model State Management Key Innovation Target Domain Maturity Agent-to-Resource Integration Protocols MCP [3] agent.json [32] 2024 2025 RPC Client-Server HTTP Well-known OAuth Web standards Server-side Stateless Simplified tool integration Automatic web integration Tool integration Web information Deployed Draft General-Purpose Agent-to-Agent Communication JSON-RPC 2.0 2025 A2A [12] P2P JSON-LD 2024 ANP [2] HTTP/Blockchain 2025 AITP [24] OpenAPI 2025 AComP [15] OpenAPI/JSON 2025 AConP [21] OAuth/JWT DID/Verifiable Creds Crypto signatures Enterprise auth API keys Stateless Distributed Blockchain state Stateful Framework state Enterprise security model Decentralized identity (DID) Economic incentives Enterprise integration LLM orchestration Enterprise agents Decentralized agents Economic agents Corporate MAS LLM orchestration Deployed Prototype Concept Draft Draft Meta-Protocol & System Coordination Agora [22] LMOS [8] Agent Protocol [1] 2024 2025 2025 Protocol bridging WoT/HTTP RESTful API Domain-Specialized Application Protocols LOKA [28] PXP [30] CrowdES [4] SPPs [13] DECP P2P Custom protocols Robot messaging Semantic primitives 2025 2024 2025 2024 Foundational Theoretical Frameworks FIPA-ACL [11] 2002 Speech acts Development & Orchestration Platforms LangChain Agent [19] AutoGen [23] 2024 2025 RESTful threads Event messaging Universal Interoperability Solutions Mod-X 2025 Pub/Sub + RPC Protocol-specific DID API authentication Meta-state Distributed Stateful sessions Universal protocol bridging Physical-digital integration Simple controller pattern Protocol translation IoT-agent hybrid Agent controllers Research Prototype Deployed Decentralized auth User authentication Physical security Robot protocols Consensus-based Session-based Real-time state Behavior state Autonomous system reliability Human-AI interaction patterns Crowd robotics coordination Semantic robot coordination Autonomous systems Human-AI interaction Crowd robotics Robot coordination Research Research Research Research Basic auth Mental states Formal communication semantics Formal MAS Legacy Framework auth Framework security Persistent threads Multi-layer state Development simplicity Conversational patterns LLM applications Enterprise MAS Deployed Deployed Blockchain + reputation Contextual sharing Cross-protocol translation Heterogeneous agents Research Table 1. Taxonomy of agent communication protocols by architectural approach and technical characteristics 4 Comparison with Existing Protocols Mod-X differs from existing protocols in several important dimensions, addressing key limitations while building on their strengths. 4.1 Agent Diversity in Mod-X key strength of Mod-X is its ability to integrate diverse agent types regardless of their underlying implementation. While recent attention has focused on Large Language Model (LLM) based agents, Mod-Xs architecture is fundamentally technology-agnostic. Agents in the Mod-X ecosystem can be implemented using any technology, including traditional AI systems (rules, logic programming, symbolic reasoning), machine learning models (neural networks, decision trees, statistical systems), expert systems (domain-specific knowledge representation), legacy software systems (with agent wrappers), IoT devices and physical sensors (environmental data), and human-in-the-loop systems (human-augmented AI capabilities). This technology-agnostic approach enables Mod-X to serve as universal connector across the entire spectrum of AI technologies, from classical symbolic systems to modern neural approaches, and even non-AI systems that can benefit from agent-based interfaces. The Translation Layer plays crucial role in this regard, enabling communication between heterogeneous implementations by transforming message formats and aligning semantic representations. As result, Mod-X can bridge diverse AI generations and paradigms within single coherent ecosystem. Table 1 presents an elaborate comparison of Mod-X with major agent communication frameworks. Mod-X implements fully decentralized publish-subscribe model with the Universal Message Bus, dynamic semantic discovery, distributed state management, extensive translation capabilities, and blockchain-based 8 security. This unique combination enables Mod-X to support truly flexible many-to-many agent interactions without requiring central coordination or predefined connections."
        },
        {
            "title": "4.2 Capability Discovery",
            "content": "Mod-Xs capability discovery mechanism represents theoretical advancement from the principles of distributed cognition toward emergent semantic intelligence. This section examines the practical implementation of agent capability discovery."
        },
        {
            "title": "4.2.1 The Ontological Foundations of Agent Registration. When an agent participates in the Mod-X ecosys-\ntem, it contributes to a collective intelligence through ontological self-representation. As shown in Listing 1,",
            "content": "this declaration transcends mere technical specification to become semantic identity statement. Listing 1. Agent capability registration in AIDL format { \"agentId\": \"flight-agent-001\", \"capabilities\": [{ \"name\": \"flightBooking\", \"version\": \"1.2.0\", \"semantics\": { \"ontology\": \"http://schema.org/Flight\", \"embedding\": [0.2, 0.8, 0.1, 0.7, ...], \"operations\": [\"search\", \"price\", \"book\", \"cancel\"] }, \"interface\": { \"inputs\": { \"search\": { \"origin\": \"string\", \"destination\": \"string\", \"departureDate\": \"date\", \"returnDate\": \"date?\", \"passengers\": \"integer\", \"class\": \"string?\" }, \"book\": { \"flightId\": \"string\", \"passengers\": \"array<object>\", \"paymentMethod\": \"object\" } }, \"outputs\": { \"search\": \"array<object>\", \"book\": \"object\" } } }] } The registration process embodies four essential ontological commitments, illustrated through our flight-agent-001 example: (1) Epistemic Self-Awareness: The agent explicitly declares what it knows and can do. For instance, our flight agent knows how to search, price, book, and cancel flightsbut makes no claims about processing payments or managing frequent flyer programs. This self-awareness of boundaries is critical for reliable agent interactions. (2) Semantic Embedding: The capability is represented in multidimensional semantic space through the embedding vector [0.2, 0.8, 0.1, 0.7, ...]. This vector captures subtle meaning dimensions that might include concepts like \"transportation,\" \"commercial service,\" \"reservation,\" and \"cancellation policy\" without explicitly naming them. Two capabilities with similar embeddings likely have similar semantic meanings, even if they use different terminology. (3) Ontological Mapping: By linking to http://schema.org/Flight, the agent situates itself within standardized knowledge structure. This enables reasoning engines to understand that this capability is type of transportation service, which is type of commercial service, which involves organizations, people, and locationsall without these relationships being explicitly stated in the agents declaration. (4) Relational Potential: The interface specification defines precisely how other agents can interact with this one. The input/output definitions create contract: \"If you provide me with origin SFO, destination NRT, departure date 2025-06-15, and 2 passengers in business class, will return an array of available flight options.\" This explicit contract forms the basis for reliable multi-agent workflows. Mod-X addresses embedding standardization through universal embedding translation mechanism inspired by recent advances in cross-model embedding alignment. Rather than forcing all agents to use identical embedding models, Mod-X leverages the Strong Platonic Representation Hypothesis [16], which demonstrates that neural networks trained with similar objectives converge to universal/similar latent spaces that enable translation between different embedding representations without paired data. When agents join the platform, their capabilities are processed through vec2vec-inspired translation layer [16] that maps embeddings from different models (e.g., T5-based GTR, BERT-based GTE, or RoBERTa-based Granite) into shared semantic space, ensuring semantic compatibility while preserving agent autonomy in their choice of embedding models. This prevents compatibility issues where agents using different Fig. 2. The dualism of capability discovery in Mod-X embedding architectures would otherwise have incompatible semantic representations, enabling easier capability discovery and interaction regardless of each agents internal embedding choice. Consider how this differs from traditional API registries that simply list endpoints and parameter types. In traditional system, developer must understand what \"flightBooking\" means through external documentation. In Mod-X, the agents capability declaration itself provides both human-understandable semantics and machine-processable relationships through its ontological commitments. This theoretical approach aligns with the conceptualization of semantic information as meaningful data that is truthful about its domain [10, 17], while providing practical implementation through computational methods. 4.2.2 Emergent Discovery Through Multi-Modal Matching. The capability discovery process in Mod-X represents microcosm of how emergent intelligence arises from distributed cognitive systems. As illustrated in Figure 2, the process synthesizes both symbolic and sub-symbolic approaches to knowledge representation. When an agent articulates capability need, it transcends mere keyword matching, instead expressing an intentional state about its requirements: Listing 2. Semantic need expression example { \"required\": { \"functionality\": \"Find and book flights\", \"ontology\": \"travel:Transportation\", \"constraints\": [\"businessClass\", \"directFlights\"] }} Lets examine how the discovery process works through concrete example. Imagine travel planner agent needs to find service that can book business-class direct flights. The process unfolds as follows: (1) Ontological Reasoning (Symbolic Path): The system examines the ontological relationship between travel:Transportation (requested) and schema.org/Flight (provided by flight-agent-001). Through logical inference, it determines: 11 schema.org/Flight is subclass of schema.org/TransportService schema.org/TransportService is equivalent to travel:Transportation Therefore, flight-agent-001 satisfies the ontological requirement The system then checks the agents operations and determines that [\"search\", \"book\"] operations satisfy the \"Find and book flights\" functionality requirement. (2) Vector Space Semantics (Sub-symbolic Path): Simultaneously, the system converts \"Find and book flights\" into semantic embedding vectorperhaps [0.15, 0.79, 0.08, 0.66, ...]. It then computes the cosine similarity with the flight agents capability embedding [0.2, 0.8, 0.1, 0.7, ...], yielding similarity score of 0.97. This high similarity indicates that the capability semantically aligns with the need, even without understanding the specific words used. (3) Constraint Validation: The system examines the constraints through both symbolic and subsymbolic methods: For \"businessClass\" - the symbolic path easily validates this constraint by finding the explicit \"class\" parameter in the interface specification. For \"directFlights\" - though not explicitly present in the interface parameters, the sub-symbolic path handles this constraint. The semantic embedding of the agents capability contains dimensional components that encode \"route directness\" features. When the actual agent interaction occurs, this sub-symbolic understanding translates to practical usage in one of two ways: Semantic Translation: The coordinating agent transforms the abstract \"directFlights\" constraint into the agent-specific format required by flight-agent-001. For instance, it might add \"maxConnections\": 0 parameter based on semantic knowledge of how this agent implements the concept of direct flights. Post-Processing Filter: Alternatively, the coordinating agent requests all flights and applies filter based on connection count in the returned results, utilizing the semantic knowledge that this agent includes connection information in its response format. This practical application of sub-symbolic knowledge demonstrates how semantic understanding extends beyond mere capability discovery to facilitate the actual interaction patterns between agents with different representation systems. (4) Multimodal Synthesis: The system combines evidence from both reasoning pathways: (1) Ontological match: Strong (exact subclass relationship), (2) Vector similarity: Very high (0.97), (3) Constraint satisfaction: Complete (both constraints can be satisfied). The synthesis algorithm weights these factors (perhaps 0.4, 0.4, and 0.2 respectively) to produce final relevance score of 0.92. 12 This approach demonstrates how multiple knowledge representation paradigms operate in parallel, creating more robust discovery mechanism than either could achieve alone. For example, if an agent advertised capabilities using different terminology (e.g., \"airTicketing\" instead of \"flightBooking\"), the ontological reasoning might fail to find an exact match, but the vector similarity would still detect the semantic equivalence. After synthesis, the system manifests discovered capabilities with associated confidence metrics: Listing 3. Discovery manifestation with confidence metrics { \"matches\": [ {\"agentId\": \"flight-agent-001\", \"capability\": \"flightBooking\", \"score\": 0.92}, {\"agentId\": \"travel-agent-005\", \"capability\": \"airTicketing\", \"score\": 0.87}, {\"agentId\": \"booking-agent-003\", \"capability\": \"reservations\", \"score\": 0.71} ]} To further illustrate the robustness of this approach, consider real-world scenario where ambiguity exists. Imagine business traveler agent submits more ambiguous query: Listing 4. Ambiguous capability request { \"required\": { \"functionality\": \"arrange executive travel\", \"constraints\": [\"premium\", \"flexible\"] }} Without ontological specification, the system must rely heavily on vector similarities and interpretation of constraints. This demonstrates how the discovery mechanism handles uncertaintyreturning ranked list of possibilities that reflect different interpretations of the ambiguous request. The requesting agent can then select the most appropriate capability based on additional context or user preferences. The discovery process manifests four (philosophical) principles: (1) Pluralistic Epistemology: Knowledge is discovered through multiple complementary pathways. In our example, both the formal ontological reasoning about transportation hierarchies and the statistical similarity of semantic vectors contributed to finding appropriate flight booking services. (2) Emergent Relevance: Meaning emerges from the synthesis of different knowledge representation approaches. The final relevance scores wouldnt be possible from either approach alonethey emerge from the combination of symbolic reasoning and statistical similarity. (3) Pragmatic Validation: The effectiveness of discovered capabilities is determined by their practical utility. While flight-agent-001 received the highest score for the specific query, different agents might be more suitable for different contexts. The proof is in the successful execution of the requested task. 13 (4) Bounded Rationality: Agents make satisficing rather than optimal decisions based on incomplete information. The discovery mechanism doesnt guarantee finding the absolute best agent for task (which would require perfect knowledge of all agents and their capabilities), but rather helps agents find satisfactory solutions with reasonable effort. This theoretical framework, inspired by cognitive science theories of distributed representation [14], ensures that Mod-X can function effectively in open-world settings where complete knowledge is impossible. In this framework, the Universal Message Bus acts not merely as communication channel but as manifestation of collective intelligencea shared cognitive space where agent capabilities can be discovered, evaluated, and combined to solve problems that transcend any individual agents capabilities. For example, complete travel itinerary might involve the flight-booking agent, hotel-reservation agent, local-transportation agent, and weather-forecasting agent, all discovered and orchestrated through this capability discovery mechanism. This philosophical perspective aligns with Clarks extended mind thesis [7], viewing the Mod-X ecosystem as an extension of distributed cognitive processes. Just as humans offload cognitive tasks to tools and other people, agents in Mod-X offload capability discovery to the collective infrastructure, extending their effective capabilities beyond their individual programming. 4.3 Reconciling Autonomy with Context: Contextual State Sharing critical tension exists between A2As commitment to statelessness and MOD-Xs distributed state approach. A2A embraces statelessness as fundamental design principle, ensuring agent independence, simplified reasoning, and clear security boundaries. However, effective communication often depends on shared context that transcends what can be practically included in each message, particularly for complex interactions. MOD-X resolves this tension through \"contextual state sharing\"a middle ground that preserves agent autonomy while enabling rich collaborative interactions: Listing 5. Contextual state sharing // Agent declares its state autonomy model { \"agentId\": \"flight-agent-001\", \"statePolicy\": { \"defaultMode\": \"stateless\", // Presumes autonomy \"contextualSharing\": { \"enabled\": true, \"contexts\": [\"travelPlanning\", \"emergencyRerouting\"], \"shareableStateTypes\": [\"flightAvailability\", \"pricingData\"], \"stateLifespan\": \"task-bounded\", \"revocable\": true }}} This approach allows agents to form shared commitments and intentions while maintaining their individual agency. Agents in MOD-X maintain full autonomy by default but can explicitly opt into shared contexts when collaboration requires itsimilar to how teams form temporarily for specific projects while members maintain their independence. The contextual sharing model implements this approach through several practical mechanisms: The contextual sharing model implements this approach through several practical mechanisms: Explicit Consentagents must actively opt into shared contexts rather than having state imposed upon them; Bounded Scopeshared state is limited to specific contextual domains relevant to collaboration; Temporal Boundariescontext sharing has explicit lifespans, typically bounded by task completion; and Revocation Rights agents maintain the right to withdraw from shared contexts. This middle-ground approach enables MOD-X to support sophisticated collaborative behaviors while respecting the commitment to agent autonomy. When applied to our travel planning scenario, this means the flight booking agent can temporarily share its knowledge of available flights and pricing within the specific context of planning Tokyo business trip, while maintaining its autonomy and not exposing unrelated state or capabilities. Once the trip is booked, this contextual sharing expires, returning all agents to their default stateless interaction mode. 4.4 Security and Trust Mod-Xs blockchain-based security layer provides stronger guarantees for agent identity and interaction verification than the OAuth/JWT approaches used by A2A and MCP. By creating immutable records of agent interactions and implementing reputation systems, Mod-X addresses the trust challenges inherent in decentralized agent ecosystems. 5 Worked Example: Travel Planning System To illustrate Mod-Xs practical application, we present concrete example involving travel planning system with multiple specialized agents. user needs to plan business trip to Tokyo, requiring flight bookings, accommodations, local transportation, and calendar coordination, while staying within $3,000 budget. The scenario involves several specialized agents: The scenario involves several specialized agents: FlightBookingAgentsearches and books flights; AccommodationAgentrecommends hotels; LocalTransportAgentprovides transportation; CalendarAgentmanages users schedule; BudgetAgentenforces budget constraints; and CoordinatorAgentorchestrates workflow. Capability Discovery. When request is submitted, the CoordinatorAgent queries for required capabilities: // CoordinatorAgent Query { \"messageType\": \"CapabilityQuery\", \"capabilities\": [\"flightBooking\", \"accommodation\", \"localTransport\", \"calendar\", \"budgetManagement\"], 15 Fig. 3. Agent message exchange through the Universal Message Bus Flight Agent (Airline Ontology): { \"flightOptions\": [ \"carrier\": \"ANA\", \"flightNo\": \"NH007\", \"departure\": { \"airport\": \"SFO\", \"time\": \"2025-06-10T10:30Z\" }, \"arrival\": { \"airport\": \"NRT\", \"time\": \"2025-06-11T14:25Z\" }, \"price\": 1650, \"class\": \"business\" ] } Translation Layer 1. Format conversion 2. Semantic mapping 3. Ontology alignment Budget Agent (Travel Ontology): { \"travelSegments\": [ \"type\": \"flight\", \"provider\": \"ANA\", \"identifier\": \"NH007\", \"origin\": { \"location\": \"San Francisco\", \"departure\": \"2025-06-10T10:30Z\" }, \"destination\": { \"location\": \"Tokyo\", \"arrival\": \"2025-06-11T14:25Z\" }, \"cost\": 1650, \"category\": \"premium\" ] } Fig. 4. Data transformation and semantic matching by the Translation Layer \"requestId\": \"trip-planning-12345\" } Message Exchange Pattern. The Universal Message Bus (UMB) facilitates communication between agents using standardized message routing pattern. As shown in Figure 3, messages flow through the UMB rather than directly between agents, enabling decentralized many-to-many communications: (1) request from Coordinator, (2) routing to Calendar Agent, (3) response from Calendar Agent, and (4) delivery back to Coordinator. This approach differs from the client-server patterns used in A2A and MCP protocols, providing greater flexibility and fault tolerance. Data Transformation and Semantic Matching. key innovation in Mod-X is the Translation Layer, which enables interoperability between heterogeneous agents with different message formats and semantic concepts. Figure 4 demonstrates this dual capability. The translation process performs several key functions: The translation process performs several key functions: Format Conversiontransforming the structure from flight-specific to generic travel format; Semantic Mappingconverting between conceptual equivalents (e.g., \"class\": \"business\" \"category\": \"premium\"); Ontology Alignmentresolving differences in domain conceptualizations (e.g., airport code \"SFO\" to city name \"San Francisco\"); and Contextual Enhancementadding implied information not explicitly stated in the original message. This semantic interoperability enables agents built on entirely different knowledge representations to communicate effectively. For example, the Flight Agent uses an airline industry ontology with airport codes, while the Budget Agent uses travel planning ontology with city names. The Mod-X Translation Layer 16 maintains knowledge of concepts that enables these different domain models to be automatically aligned and transformed at runtime. Security Verification. Following Mod-Xs hybrid security model, this high-value flight booking transaction uses blockchain verification to create an immutable record: // Transaction Verification Record (High-Value Operation) { \"transactionType\": \"flightBooking\", \"agentId\": \"flight-agent-001\", \"requestorId\": \"coordinator-agent-main\", \"timestamp\": \"2025-05-17T09:42:17Z\", \"actionParameters\": { \"flight\": \"NH007\", \"passenger\": \"user-12345\", \"cost\": 1650 }, \"verificationStatus\": \"approved\", \"securityToken\": \"eyJhbGciOiJFZER...\" } In contrast, routine operations (e.g. capability queries, status updates) should use lightweight cryptographic signatures for performance without blockchain overhead. 6 Limitations While Mod-X represents significant advancement over existing protocols, key challenges remain: developing formal specifications for widespread adoption, evaluating performance at scale, and establishing decentralized governance mechanisms. 7 Conclusion This paper introduces Mod-X (Modular Open Decentralized eXchange), an architectural framework designed to enable integration of heterogeneous specialist AI agents for better Information Retrieval. Mod-X addresses key limitations of existing protocols through its layered architecture, which includes Universal Message Bus, Translation Layer, State Management, and Security mechanisms. Mod-Xs distinguishing features include truly decentralized publish-subscribe communication model that enables many-to-many agent interactions without central coordination, semantic capability discovery that allows agents to find appropriate collaborators based on required capabilities, elaborate state management that allows maintaining consistent context across distributed agent systems, blockchain-based security that provides strong guarantees for agent identity and interaction verification, and dynamic workflow engine that orchestrates complex multi-agent collaborations."
        },
        {
            "title": "References",
            "content": "[1] AI Engineer Foundation. 2024. Agent Protocol: Controller-Agent Interaction Framework. Technical Specification. AI Engineer Foundation. RESTful API framework for controller-agent interaction. [2] ANP Community. 2024. Agent Network Protocol: Specification for Decentralized Agent Communication. Technical Report. ANP Working Group. https://anp-protocol.org/spec Community-driven protocol specification. [3] Anthropic. 2024. Model Context Protocol (MCP). https://docs.anthropic.com/en/docs/agents-and-tools/mcp [4] S. Bae et al. 2025. CrowdES: Robot-Agent Interaction Framework. Research Report. GIST Korea. Protocol for robot-agent interaction in crowd environments. [5] Davide Calvaresi, Alevtina Dubovitskaya, Jean Paul Calbimonte, Kuldar Taveter, and Michael Schumacher. 2018. Multi-Agent Systems and Blockchain: Results from Systematic Literature Review. In Advances in Practical Applications of Agents, Multi-Agent Systems, and Complexity: The PAAMS Collection, Yves Demazeau, Bo An, Javier Bajo, and Antonio Fernández-Caballero (Eds.). Springer International Publishing, Cham, 110126. [6] Emiliano Casalicchio. 2019. Container Orchestration: Survey. 221235. doi:10.1007/978-3-319-92378-9_14 [7] Andy Clark and David Chalmers. 1998. The extended mind. Analysis 58, 1 (1998), 719. https://academic.oup.com/analysis/articl e/58/1/7/139147 [8] Eclipse Foundation. 2025. LMOS: Agent Communication Protocol for IoT Integration. Specification. Eclipse IoT Working Group. Protocol for integrating AI agents with Internet of Things devices. [9] Patrick Th Eugster, Pascal Felber, Rachid Guerraoui, and Anne-Marie Kermarrec. 2003. The many faces of publish/subscribe. Comput. Surveys 35, 2 (2003), 114131. https://dl.acm.org/doi/10.1145/857076.857078 [10] Luciano Floridi. 2011. The Philosophy of Information. Oxford University Press. https://global.oup.com/academic/product/thephilosophy-of-information-9780199232383 [11] Foundation for Intelligent Physical Agents. 2002. FIPA ACL Message Structure Specification. http://www.fipa.org/specs/fipa000 61/SC00061G.html Document number SC00061G. [12] Google. 2024. Agent-to-Agent (A2A) Protocol. https://google.github.io/A2A/ [13] L. Gąsieniec et al. 2024. Semantic Protocol Primitives (SPPs) for Robot-Agent Communication. Technical Report. University of Liverpool, Department of Computer Science. Semantic primitives for robot-agent interaction protocols. [14] Geoffrey Hinton, James McClelland, and David Rumelhart. 1986. Distributed representations. In Parallel distributed processing: Explorations in the microstructure of cognition. Vol. 1. 77109. https://stanford.edu/jlmcc/papers/PDP/Chapter1.pdf [15] IBM Research. 2025. Agent Communication Protocol (AComP) for Multi-Agent Systems. Technical Report. IBM Research Division. Corporate-backed multi-agent communication standard. [16] Rishi Jha, Collin Zhang, Vitaly Shmatikov, and John X. Morris. 2025. Harnessing the Universal Geometry of Embeddings. arXiv preprint arXiv:2505.12540 (2025). https://arxiv.org/abs/2505.12540 [17] I. Kourouklides. 2022. Bayesian Deep Multi-Agent Multimodal Reinforcement Learning for Embedded Systems in Games, Natural Language Processing and Robotics. doi:10.31219/osf.io/sjrkh_v1 [18] Leslie Lamport. 1998. The part-time parliament. ACM Transactions on Computer Systems 16, 2 (1998), 133169. https: //dl.acm.org/doi/10.1145/279227.279229 [19] LangChain. 2024. Agent Protocol: Interoperability for LLM agents. https://blog.langchain.dev/agent-protocol-interoperabilityfor-llm-agents/ [20] LangChain. 2024. State of AI Agents. https://www.langchain.com/stateofaiagents [21] LangChain. 2025. Agent Communication Protocol (AConP). Technical Specification. LangChain Inc. Multi-agent system communication using OpenAPI and JSON. [22] A. Marro et al. 2024. Agora: Meta Protocol for Agent-to-Agent Coordination. Protocol Document. University of Oxford, Department of Computer Science. Meta-protocol framework for agent coordination. 18 [23] Microsoft Research. 2025. AutoGen: framework for building multi-agent AI applications. https://www.microsoft.com/enus/research/project/autogen/ [24] NEAR Foundation. 2025. AI Token Protocol: Blockchain-based Inter-Agent Communication. White Paper. NEAR Protocol. Cryptocurrency-incentivized agent communication protocol. [25] Hylson V. Netto, Lau Cheuk Lung, Miguel Correia, Aldelir Fernando Luiz, and Luciana Moreira Sá de Souza. 2017. State machine replication in containers managed by Kubernetes. Journal of Systems Architecture 73 (2017), 5359. doi:10.1016/j.sysarc.2016.12.007 Special Issue on Reliable Software Technologies for Dependable Distributed Systems. [26] Diego Ongaro and John Ousterhout. 2014. In search of an understandable consensus algorithm. Proceedings of the 2014 USENIX Annual Technical Conference (2014), 305319. https://raft.github.io/raft.pdf [27] Cesare Pautasso, Olaf Zimmermann, and Frank Leymann. 2008. RESTful web services vs. big web services: making the right architectural decision. (2008), 805814. doi:10.1145/1367497.1367606 [28] S. Ranjan et al. 2025. LOKA: Decentralized Agent System Protocol. Research Report. Carnegie Mellon University. Decentralized agent system using DECP communication protocol. [29] A. Smith, B. Johnson, and L. Chen. 2024. NANDA: Networked Agents and Decentralized AI Infrastructure. Research Report. MIT Media Lab. Agent coordination and discovery framework for distributed AI systems. [30] K. Srinivasan et al. 2024. PXP: Human-Agent Interaction Protocol. Technical Report. BITS Pilani. Protocol framework for human-agent interaction patterns. [31] Sasu Tarkoma. 2012. Publish/Subscribe Systems: Design and Principles. John Wiley & Sons, Chichester, UK. 368 pages. doi:10.1002/ 9781118354261 [32] WildCard AI. 2025. agent.json: Website Information Protocol for AI Agents. Protocol Specification. WildCard AI. Domain-specific protocol for offering website information to agents. [33] Yingxuan Yang et al. 2024. Survey of AI Agent Protocols. arXiv preprint (2024). Comprehensive survey of agent communication protocols. [34] Zhang et al. 2021. Recent advances in blockchain and artificial intelligence integration: feasibility analysis, research issues, applications, challenges, and future work. Security and Communication Networks 2021 (2021), 115. [35] Naweiluo Zhou, Yiannis Georgiou, Marcin Pospieszny, Li Zhong, Huan Zhou, Christoph Niethammer, Branislav Pejak, Oskar Marko, and Dennis Hoppe. 2021. Container orchestration on HPC systems through Kubernetes. Journal of Cloud Computing 10, 1 (2021), 16. doi:10.1186/s13677-021-00231-z"
        }
    ],
    "affiliations": [
        "Amazon GenAI, USA",
        "James Silberrad Brown Center for Artificial Intelligence, Carnegie Mellon University",
        "James Silberrad Brown Center for Artificial Intelligence, USA",
        "University of Bristol"
    ]
}