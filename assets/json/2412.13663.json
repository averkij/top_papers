{
    "paper_title": "Smarter, Better, Faster, Longer: A Modern Bidirectional Encoder for Fast, Memory Efficient, and Long Context Finetuning and Inference",
    "authors": [
        "Benjamin Warner",
        "Antoine Chaffin",
        "Benjamin Clavié",
        "Orion Weller",
        "Oskar Hallström",
        "Said Taghadouini",
        "Alexis Gallagher",
        "Raja Biswas",
        "Faisal Ladhak",
        "Tom Aarsen",
        "Nathan Cooper",
        "Griffin Adams",
        "Jeremy Howard",
        "Iacopo Poli"
    ],
    "sections": [
        {
            "title": "Abstract",
            "content": "Encoder-only transformer models such as BERT offer a great performance-size tradeoff for retrieval and classification tasks with respect to larger decoder-only models. Despite being the workhorse of numerous production pipelines, there have been limited Pareto improvements to BERT since its release. In this paper, we introduce ModernBERT, bringing modern model optimizations to encoder-only models and representing a major Pareto improvement over older encoders. Trained on 2 trillion tokens with a native 8192 sequence length, ModernBERT models exhibit state-of-the-art results on a large pool of evaluations encompassing diverse classification tasks and both single and multi-vector retrieval on different domains (including code). In addition to strong downstream performance, ModernBERT is also the most speed and memory efficient encoder and is designed for inference on common GPUs."
        },
        {
            "title": "Start",
            "content": "4 2 0 2 8 1 ] . [ 1 3 6 6 3 1 . 2 1 4 2 : r Smarter, Better, Faster, Longer: Modern Bidirectional Encoder for Fast, Memory Efficient, and Long Context Finetuning and Inference Benjamin Warner1 Antoine Chaffin2 Benjamin Clavié1 Orion Weller3 Oskar Hallström2 Said Taghadouini2 Alexis Gallagher1 Raja Biswas1 Faisal Ladhak4* Tom Aarsen5 Nathan Cooper1 Griffin Adams1 Jeremy Howard1 Iacopo Poli2 1Answer.AI 2LightOn 3Johns Hopkins University 4NVIDIA 5HuggingFace : core authors, *: work done while at Answer.AI Correspondence: {bw,bc}@answer.ai, antoine.chaffin@lighton.ai"
        },
        {
            "title": "Abstract",
            "content": "Encoder-only transformer models such as BERT offer great performance-size tradeoff for retrieval and classification tasks with respect to larger decoder-only models. Despite being the workhorse of numerous production pipelines, there have been limited Pareto improvements to BERT since its release. In this paper, we introduce ModernBERT, bringing modern model optimizations to encoder-only models and representing major Pareto improvement over older encoders. Trained on 2 trillion tokens with native 8192 sequence length, ModernBERT models exhibit state-ofthe-art results on large pool of evaluations encompassing diverse classification tasks and both single and multi-vector retrieval on different domains (including code). In addition to strong downstream performance, ModernBERT is also the most speed and memory efficient encoder and is designed for inference on common GPUs."
        },
        {
            "title": "Introduction",
            "content": "After the release of BERT (Devlin et al., 2019), encoder-only transformer-based (Vaswani et al., 2017) language models dominated most applications of modern Natural Language Processing (NLP). Despite the rising popularity of Large Language Models (LLMs) such as GPT (Radford et al., 2018, 2019; Brown et al., 2020), Llama (Touvron et al., 2023; Dubey et al., 2024), and Qwen (Bai et al., 2023; Yang et al., 2024), encoder-only models remain widely used in variety of nongenerative downstream applications. The encoders popularity is largely due to their modest inference requirements, enabling them to efficiently process corpora of documents at scale for retrieval and quickly perform discriminative tasks. Encoder models offer compelling tradeoff in quality versus size, making them popular option against encoder-decoder and decoder-only 1 language models when dealing with substantial amounts of data (Penedo et al., 2024). Encoder models are particularly popular in Information Retrieval (IR) applications, e.g., semantic search, with notable progress on leveraging encoders for this task (Karpukhin et al., 2020; Khattab and Zaharia, 2020). While LLMs have taken the spotlight in recent years, they have also motivated renewed interest in encoder-only models for IR. Indeed, encoder-based semantic search is core component of Retrieval-Augmented Generation (RAG) pipelines (Lewis et al., 2020), where encoder models are used to retrieve and feed LLMs with context relevant to user queries. Encoder-only models are also still frequently used for variety of discriminative tasks such as classification (Tunstall et al., 2022) or Natural Entity Recognition (NER) (Zaratiana et al., 2024), where they often match the performance of specialized LLMs. Here again, they can be used in conjunction with LLMs, for example detecting toxic prompts (Ji et al., 2023; Jiang et al., 2024b) and preventing responses, or routing queries in an agentic framework (Yao et al., 2023; Schick et al., 2023). Surprisingly, these pipelines currently rely on older models, and quite often on the original BERT itself as their backbone (Wang et al., 2022; Xiao et al., 2023), without leveraging improvements developed in recent years. Practitioners face many drawbacks: sequence lengths limited to 512 tokens, suboptimal model design (Anthony et al., 2024) and vocabulary sizes (Karpathy, 2023), and generally inefficient architectures, whether in terms of downstream performance or computational efficiency. Finally, training data is limited in volume and restricted to narrow domains (especially lacking code data) or lacking knowledge of recent events. Recent modernization efforts have only partially addressed the shortcomings of encoder-only models due to limited breadth. MosaicBERT (Portes et al., 2023), CrammingBERT (Geiping and Goldstein, 2023), and AcademicBERT (Izsak et al., 2021) focused on matching BERT performance with better training efficiency. NomicBERT (Nussbaum et al., 2024) and GTE-en-MLM (Zhang et al., 2024) (developed concurrently to this work) introduced longer-context encoder models focused on retrieval applications, but did not optimize for efficiency or classification performance, and re-used older training data mixtures which is especially apparent in programming-related tasks. Contributions We present ModernBERT, modernized encoder-only transformer model, with an improved architecture designed to increase downstream performance and efficiency, especially over longer sequence lengths. We also bring encoderonly models to modern, larger data scales, by training on 2 trillion tokens, with data mixture including code data. We release two models, ModernBERT-base and ModernBERT-large, which reach state-of-the-art overall performance against all existing encoder models on wide variety of downstream tasks. These results are achieved with considerably higher inference efficiency, processing sequences of 8192 tokens almost two times faster than previous models. To support future research on encoder-only models, we release FlexBERT1, our modular architecture framework allowing easy experimentation, and inspired by Pythia (Biderman et al., 2023), all intermediate training checkpoints (further detailed in Section 2.2.2)."
        },
        {
            "title": "2.1 Architectural Improvements",
            "content": "Our model architecture extends the standard transformer architecture (Vaswani et al., 2017) by incorporating extensively tested recent advances (Section 2.1.1). We introduce additional efficiencyoriented modifications, through both architectural and implementation improvements (Section 2.1.2) and GPU optimized model design (Section 2.1.3). All of our architectural decisions were informed by ablations, which we detail in Appendix D."
        },
        {
            "title": "2.1.1 Modern Transformer",
            "content": "Bias Terms Following (Dayma et al., 2021), we disable bias terms in all linear layers except for the 1FlexBERT is built on top of saicBERT (Portes et al., 2023) codebase. revised Mofinal decoder linear layer2. We also disable all bias terms in Layer Norms (Xu et al., 2019). These two changes allow us to spend more of our parameter budget in linear layers. Positional Embeddings We use rotary positional embeddings (RoPE) (Su et al., 2024) instead of absolute positional embeddings. This choice is motivated by the proven performance of RoPE in shortand long-context language models (Black et al., 2022; Dubey et al., 2024; Gemma et al., 2024), efficient implementations in most frameworks, and ease of context extension. Normalization We use pre-normalization block (Xiong et al., 2020) with the standard layer normalization (Lei Ba et al., 2016), which is known to help stabilize training (Xiong et al., 2020). Similar to CrammingBERT (Geiping and Goldstein, 2023) which also uses pre-normalization, we add LayerNorm after the embedding layer. To avoid repetition, we remove the first LayerNorm in the first attention layer. Activation We adopt GeGLU (Shazeer, 2020), Gated-Linear Units (GLU)-based (Dauphin et al., 2017) activation function built on top of the original BERTs GeLU (Hendrycks and Gimpel, 2016) activation function. This is in line with recent work showing consistent empirical improvements when using GLU variants (Shazeer, 2020; Geiping and Goldstein, 2023)."
        },
        {
            "title": "2.1.2 Efficiency Improvements",
            "content": "Alternating Attention Following recent work on efficient long context models (Gemma et al., 2024), attention layers in ModernBERT alternate between global attention, where every token within sequence attends to every other token, and local attention, where tokens only attend to each other within small sliding window (Beltagy et al., 2020). In ModernBERT, every third layer employs global attention with RoPE theta of 160,000 and the remaining layers use 128 token, local sliding window attention with RoPE theta of 10,000. Unpadding ModernBERT follows MosaicBERT (Portes et al., 2023) and GTE (Zhang et al., 2024) in employing unpadding (Zeng et al., 2022) for both training and inference. Encoderonly language models typically use padding tokens to ensure uniform sequence length in batch, 2While many efficient BERT training recipes disable the bias term in the decoder, e.g. Geiping and Goldstein (2023), we hypothesized decoder bias might help alleviate weight tyings negative effects (Gao et al., 2019; Welch et al., 2020). 2 wasting compute on semantically empty tokens. Unpadding avoids this inefficiency by removing padding tokens, concatenating all sequences from minibatch into single sequence, and processing it as batch of one. Prior unpadding implementations unpad and repad sequences internally for different model layers, wasting compute and memory bandwidth. We use Flash Attentions variable length attention and RoPE implementations, allowing jagged attention masks and RoPE applications on one unpadded sequence. ModernBERT unpads inputs before the token embedding layer and optionally repads model outputs leading to 10-to-20 percent performance improvement over other unpadding methods. Flash Attention Flash Attention (Dao et al., 2022) is core component of modern transformerbased models, providing memory and compute efficient attention kernels. At the start of this work, Flash Attention 3 (Shah et al., 2024), the most recent iteration for Nvidia H100 GPUs, did not include support for sliding window attention. ModernBERT uses mixture of Flash Attention 3 for global attention layers and Flash Attention 2 (Dao, 2023) for local attention layers. torch.compile We leverage PyTorchs built-in compiling (Ansel et al., 2024) to improve the training efficiency by compiling all compatible modules. This yields 10 percent improvement in throughput with negligible compilation overhead."
        },
        {
            "title": "2.1.3 Model Design",
            "content": "At the same parameter count, models with more narrow layers (Deep & Narrow) have different learning patterns than models with fewer wide layers (Shallow & Wide) (Nguyen et al., 2021). Tay et al. (2022) and (Liu et al., 2024) have shown that Deep & Narrow language models have better downstream performance than their shallower counterparts, at the expense of slower inference. Anthony et al. (2024) highlighted that large runtime gains can be unlocked by designing models in hardware-aware way, which had previously been anecdotally observed by many practitioners (Shoeybi et al., 2019; Karpathy, 2023; Black et al., 2022). ModernBERT was designed through many small-scale ablations to maximize the utilization of basket of common GPUs3, while 3Which, at the time of this work, are server GPUs: NVIDIA T4, A10, L4, A100, and H100 and consumer GPUs: NVIDIA RTX 3090 and 4090. Prioritization was given to inference GPUs (excluding A100 & H100). aiming to be as Deep & Narrow as possible without significant inference slowdown. ModernBERT has 22 and 28 layers for the base and large models, for total parameter count of 149 and 395 million, respectively, striking the balance between downstream performance and hardware efficiency. ModernBERT base has hidden size of 768 with GLU expansion of 2,304, while large has hidden size of 1,024 and GLU expansion of 5,248. These ratios allow optimal tiling across tensor cores and the most efficient tiling across the differing number of streaming multiprocessors on our target basket of GPUs. More details on model design are provided in Appendix B. 2.2 Training 2.2.1 Data Mixture Both ModernBERT models are trained on 2 trillion tokens of primarily English data from variety of data sources, including web documents, code, and scientific literature, following common modern data mixtures. We choose the final data mixture based on series of ablations. Tokenizer Unlike the majority of recent encoders which reuse the original BERT tokenizer (Nussbaum et al., 2024; Portes et al., 2023; Zhang et al., 2024), we opt to use modern BPE tokenizer. We use modified version of the OLMo tokenizer (Groeneveld et al., 2024) which provides better token efficiency and performance on coderelated tasks. The ModernBERT tokenizer uses the same special tokens (e.g., [CLS] and [SEP]) and templating as the original BERT model (Devlin et al., 2019), facilitating backwards compatibility. To ensure optimal GPU utilization (Anthony et al., 2024; Karpathy, 2023), the vocabulary is set to 50,368, multiple of 64 and includes 83 unused tokens to support downstream applications. Sequence Packing In order to avoid high minibatch-size variance within our training batches as result of unpadding, we adopt sequence packing (Raffel et al., 2020; Krell et al., 2022) with greedy algorithm, which resulted in sequence packing efficiency of over 99 percent, ensuring batch size uniformity."
        },
        {
            "title": "2.2.2 Training Settings\nMLM We follow the Masked Language Modeling\n(MLM) setup used by MosaicBERT (Portes et al.,\n2023). We remove the Next-Sentence Prediction\nobjective which introduces noticeable overhead for\nno performance improvement (Liu et al., 2019a;",
            "content": "3 Izsak et al., 2021), and use masking rate of 30 percent, as the original rate of 15 percent has since been shown to be sub-optimal (Wettig et al., 2023). Optimizer We use the StableAdamW optimizer (Wortsman et al., 2023), which improves upon AdamW (Loshchilov and Hutter, 2019) by adding Adafactor-style (Shazeer and Stern, 2018) update clipping as per-parameter learning rate adjustment. StableAdamWs learning rate clipping outperformed standard gradient clipping on downstream tasks and led to more stable training. Hyperparameters details are given in Appendix A. Learning Rate Schedule During pretraining, we use modified trapezoidal Learning Rate (LR) schedule (Xing et al., 2018), also known as Warmup-Stable-Decay (WSD) (Zhai et al., 2022; Hu et al., 2024). After short LR warmup, the trapezoidal schedule holds the LR constant for the majority of training, followed by short LR decay. This schedule has been shown to match the performance of cosine scheduling (Hägele et al., 2024; Hallström et al., 2024) with the benefit of enabling continual training on any checkpoint without cold restart issues (Ash and Adams, 2019). Unlike most trapezoidal schedules, we use 1 sqrt LR decay (Hägele et al., 2024), as we found it to outperform linear and cosine decay. We trained ModernBERT-base at constant LR of 8e-4 for 1.7 trillion tokens following 3 billion token warmup. After 2 billion token warmup, we trained ModernBERT-large at LR of 5e-4 for 900 billion tokens. We rolled back and restarted training at 5e-5 for the remaining 800 billion tokens after larges loss plateaued for few hundred billion tokens at 5e-4. Batch Size Schedule Batch size scheduling starts with smaller gradient accumulated batches, increasing over time to the full batch size. In ablations, this schedule accelerated training progress. We warmup the batch size from 768 to 4,608 over 50 billion tokens and from 448 to 4,928 over 10 billion tokens, for ModernBERT-base and -large, respectively, with an uneven token schedule so each batch size has the same number of update steps. Details are provided in Appendix A.1. Weight Initialization and Tiling We initialize ModernBERT-base with random weights following the Megatron initialization (Shoeybi et al., 2019). For ModernBERT-large, we follow the Phi model family (Li et al., 2023; Javaheripi et al., 2023)4 and 4As detailed in their 2023 NeurIPS presentation. initialize -larges weights from ModernBERT-base. In ablation runs, this consistently matched Phis improved training results and greatly speed up the initial loss decrease of our model training5. Details are provided in Appendix A.2. Context Length Extension After training on 1.7 trillion tokens at 1024 sequence length and RoPE theta of 10,000, we extend the native context length of ModernBERT to 8192 tokens by increasing the global attention layers RoPE theta to 160,000 and train for an additional 300 billion tokens. We first train at constant lower learning rate6 of 3e-4 for 250 billion tokens on an 8192 token mixture of the original pretraining dataset sampled following Fu et al. (2024). Next, we upsample higher-quality sources following Gao et al. (2024) and conduct the decay phase with 1 sqrt LR schedule over 50 billion tokens. This context extension process yielded the most balanced model on downstream tasks, as most of our ablations using only one of these strategies resulted in performance loss on either retrieval or classification tasks."
        },
        {
            "title": "3 Downstream Evaluation",
            "content": "We performed an extensive set of evaluations, across large range of tasks, aiming to demonstrate the versatility of ModernBERT in common scenarios. For all tasks, ModernBERT is evaluated against existing encoders of similar size. The BASE size, conventionally defined as under 150 million parameters, includes BERT-base (Devlin et al., 2019), DeBERTa-v3-base (He et al., 2023), RoBERTabase (Liu et al., 2019a), as well as the more recent 8192 context NomicBERT (Nussbaum et al., 2024) and GTE-en-MLM-base (Zhang et al., 2024). The LARGE size, conventionally defined as above 300 million and under 500 million parameters, includes BERT-large-uncased (Devlin et al., 2019), DeBERTa-v3-large (He et al., 2023) and RoBERTalarge (Liu et al., 2019a) and GTE-en-MLMlarge (Zhang et al., 2024)."
        },
        {
            "title": "3.1.1 Natural Language Understanding\nThe General Language Understanding Evaluation\n(GLUE) benchmark (Wang et al., 2018) is the\nstandard Natural Language Understanding (NLU)",
            "content": "5This initialization reduced the amount of batch size and LR warmup needed for ModernBERT-large 6We only lowered the LR for ModernBERT-base, as large already decreased LR during the 1024 token training phase. 4 benchmark for encoder models, aiming to measure how well model performs across range of sentence or sentence-pair understanding tasks, such as sentiment detection (Liu et al., 2019b) or language entailment, through tasks such as MNLI (Williams et al., 2018). Although GLUE is often regarded as saturated by the best-performing models, such as large language models (Zhao et al., 2023), it remains one of the most commonly used evaluation suites for smaller encoder-based models, and provides good impression of models performance on common classification tasks (Portes et al., 2023; Zhang et al., 2024; He et al., 2023). We follow the practice of previous studies (Devlin et al., 2019; Liu et al., 2019a; He et al., 2023) and conduct hyperparameter search on each GLUE subset (detailed in Appendix E.1) in order to provide values comparable to other models. 3.1.2 Text Retrieval Information Retrieval (IR) is one of the most common applications of encoder-only models,8 where they are used to represent documents and queries in semantic search (Karpukhin et al., 2020). This domain has recently seen considerable growth and interest following the spread of LLMs where semantic search powered by lightweight models is used to provide relevant context to LLMs as part of Retrieval-Augmented Generation pipelines. We evaluate models in both the single-vector Dense Passage Retrieval (DPR) (Karpukhin et al., 2020) setting and the multi-vector ColBERT (Khattab and Zaharia, 2020) setting. We report retrieval results on the popular BEIR evaluation suite (Thakur et al., 2021), the common standard for evaluating retrieval performance across variety of tasks and domains, using the nDCG@10 metric. For each setting detailed below, we conduct learning rate sweep based on results over subset of the BEIR benchmarks to select the final model, detailed in Appendix E.2. Single vector retrieval One of the most common approaches to neural retrieval using encoders is DPR (Karpukhin et al., 2020), where singlevector is used to represent an entire document. The 7As (Zhang et al., 2024) do not explicitly mention parameter sweep, we initially ran the same hyperparameter sweep as we did for ModernBERT, but observed inconsistencies in the results. To avoid under-representing GTE-en-MLMs capabilities, we choose to use their reported GLUE results. 8At the time of this papers writing, over half of the 100 most downloaded models on the HuggingFace Model Hub were encoder-based retrieval models. similarity between query and document can then be computed through distance operations, such as cosine similarity. Models are finetuned using contrastive learning to create representations which are close if document is relevant to query, and distant if not (van den Oord et al., 2018). We train every base model using the MSMARCO (Bajaj et al., 2016) dataset with mined hard negatives (Xuan et al., 2020) on 1.25M samples with batch size of 16 and learning rate warmup for 5% of the training using sentencetransformers (Reimers and Gurevych, 2019). Multi vector retrieval Multi-vector retrieval, championed by ColBERT (Khattab and Zaharia, 2020), seeks to mitigate lost information from compressing an entire sequence into single vector. In multi-vector retrieval, each document is represented by all of its individual token vectors, and the similarity between query and document is computed using the MaxSim9 operator. the We adopt training setup of JaColBERTv2.5 (Clavié, 2024), an update on the ColBERTv2 (Santhanam et al., 2022) training procedure, with batch size of 16 and 5% learning rate warmup. We train all models by distilling the knowledge of teacher model by using the KL-Divergence between the normalized teacher and student scores. Models are trained on 810k samples from MS-Marco (Bajaj et al., 2016) and teacher scores from BGE-M3 (Chen et al., 2024), using the PyLate library (Chaffin and Sourty, 2024)."
        },
        {
            "title": "3.1.3 Long-Context Text Retrieval\nWith a native 8192 context length, ModernBERT\nimproves long-context performance over most ex-\nisting encoders. However, there are relatively\nfew standardized long-context benchmarks for\nencoder-only models, and most benchmarks, such\nas Needle-in-a-haystack (Kamradt, 2023) and\nRULER (Hsieh et al., 2024) are geared towards gen-\nerative tasks. Given this limitation, we demonstrate\nimproved long-context performance on the English\nsubset of MLDR (Chen et al., 2024), a long-context\nretrieval benchmark comprised of over 200,000\nlong documents. We evaluate three settings:",
            "content": "Single Vector Out-Of-Domain Models are trained on short-context MS-MARCO as described above, and is evaluated on long context MLDR without any further fine-tuning. 9The sum for every query token of its similarity with the most similar document token 5 Model BEIR MLDROOD MLDRID BEIR MLDROOD GLUE CSN SQA IR (DPR) IR (ColBERT) NLU Code 38.9 BERT 37.7 RoBERTa 20.2 DeBERTaV3 NomicBERT 41.0 GTE-en-MLM 41.4 41.6 ModernBERT BERT 38.9 RoBERTa 41.4 25.6 DeBERTaV3 GTE-en-MLM 42.5 44.0 ModernBERT a r 23.9 22.9 5.4 26.7 34.3 27.4 23.3 22.6 7.1 36.4 34.3 32.2 32.8 13.4 30.3 44.4 44.0 31.7 36.1 19.2 48.9 48. 49.0 48.7 47.1 49.9 48.2 51.3 49.5 49.8 46.7 50.7 52.4 28.1 28.2 21.9 61.3 69.3 80.2 28.5 28.8 23.0 71.3 80.4 84.7 86.4 88.1 84.0 85.6 88.4 85.2 88.9 91.4 87.6 90. 41.2 44.3 17.5 41.6 44.9 56.4 41.6 47.3 21.2 40.5 59.5 59.5 59.6 18.6 61.4 71.4 73.6 60.8 68.1 19.7 66.9 83.9 Table 1: Results for all models across an overview of all tasks. CSN refers to CodeSearchNet and SQA to StackQA. MLDRID refers to in-domain (fine-tuned on the training set) evaluation, and MLDROOD to out-of-domain. Single Vector In Domain Models trained on MS-MARCO are further fine-tuned on longcontext MLDR training set before being evaluated. Multi-Vector Out-Of-Domain Due to its token-level MaxSim mechanism, ColBERT models are able to generalize to long-context without any specific training (Bergum, 2024). We directly evaluate the best checkpoints from Section 3.1.2 without any further fine-tuning on MLDR."
        },
        {
            "title": "3.1.4 Code Retrieval",
            "content": "Fueled by increasingly good code completion models (Jiang et al., 2024a), downstream applications have quickly grown in popularity following the emergence of code assistants.10 Encoder-only models are used to process and retrieve large quantities of code-related information under resource constraints, increasing the importance of measuring and improving code capabilities of encoder models (Li et al., 2024). Unlike most previous encoders which were largely trained only on textual data (Devlin et al., 2019; Liu et al., 2019a; Portes et al., 2023; Zhang et al., 2024; Nussbaum et al., 2024), ModernBERT is pre-trained on code and uses code-aware tokenizer11. To measure programming-related performance, we evaluate all models on CodeSearchNet (Husain et al., 2019), code-to-text benchmark where the model must identify relevant docstring or comments for code blocks, and StackOverflow-QA (Li 10Spearheaded by GitHub Copilot in 2021 11Avoiding issues such as the ones seen in T5 (Raffel et al., 2020), whose vocabulary did not include curly braces. et al., 2024), where the model must identify relevant responses to StackOverflow questions, in \"hybrid\" setting where documents contain both text and code. The latter benchmark also leverages longcontext capabilities, as its queries and documents respectively contain 1,400 and 1,200 words on average, leading to average token counts of over 2000. We evaluate these benchmarks using the CoIR (CodeIR) framework (Li et al., 2024), as singlevector retrieval tasks. All models are trained by re-using the best hyper-parameters identified in Section 3.1.2."
        },
        {
            "title": "3.2 Downstream Results and Discussion",
            "content": "Aggregated results for all evaluations are presented in Table 1. For BEIR and GLUE, the two common evaluation suites, we follow existing practice in reporting the average results. Detailed results are provided in Appendix E. In terms of downstream performance, ModernBERT is the strongest overall model at both the BASE and LARGE model sizes. ModernBERT represents Pareto improvement on all tasks over the original BERT and RoBERTA models, with better performance on every evaluation category. Short-Context Retrieval On BEIR, both variants of ModernBERT outperform existing encoders in both the DPR and ColBERT settings, including the recent GTE-en-MLM and NomicBERT models designed to serve as better backbones for retrieval (Zhang et al., 2024; Nussbaum et al., 2024). While ModernBERT-base only narrowly edges out GTE-en-MLM-base on DPR evaluations, 6 Short Long Model Params BS Fixed Variable BS Fixed Variable B a BERT RoBERTa DeBERTaV3 NomicBERT GTE-en-MLM GTE-en-MLMxformers ModernBERT BERT RoBERTa DeBERTaV3 GTE-en-MLM GTE-en-MLMxformers ModernBERT 110M 1096 125M 664 183M 236 137M 588 137M 640 137M 640 149M 1604 330M 792 355M 460 434M 134 435M 472 435M 472 395M 770 180.4 179.9 70.2 117.1 123.7 122.5 148.1 54.4 42.0 24.6 38.7 38.5 52.3 90.2 89.9 35.1 58.5 61.8 128.6 147. 27.2 21.0 12.3 19.3 40.4 52.9 36 38 38 98 28 28 48 46.1 46.8 47.5 123.7 16.2 16.5 46.8 23.1 23.4 67.3 133. 8.1 22.8 49.8 Table 2: Memory (max batch size, BS) and Inference (in thousands of tokens per second) efficiency results on an NVIDIA RTX 4090, averaged over 10 runs. Dashes indicate unsupported configurations. ModernBERT-large increases its lead despite having comparatively fewer parameters at 395M to GTE-en-MLM-larges 435M. Long-Context Retrieval - Single Vector In the DPR setting, ModernBERT achieves impressive performance on MLDR, long-context text retrieval task. However, these results also highlight an interesting phenomenon: without long-context finetuning ModernBERT outperforms both shortercontext models and the long-context NomicBERT but performs noticeably worse than GTE-en-MLM. The performance gap narrows considerably when evaluated in-domain, with both models performing similarly. This suggests that ModernBERT can effectively process long context sequences as dense encoder but may require more adapted tuning. We plan to explore multiple potential explanations for this phenomenon in future work, including the impact of local attention or GTE-en-MLM having spent larger part of its pretraining compute budget on longer sequence lengths (Zhang et al., 2024). Long-Context Retrieval - Multi-Vector In the ColBERT setting, long-context models (GTEen-MLM, NomicBERT, and ModernBERT) all outperform short-context models by at least 40 NDCG@10 points without requiring any specific finetuning. These results confirm the findings of Bergum (2024), who showed that ColBERT models are particularly well-suited to long-context retrieval tasks. Among the long-context models, ModernBERT outperforms other long-context models, with at least 9 NDCG@10 point lead on both model sizes. We theorize that these sizable gains could be explained by our long pretraining ensuring few, if any, tokens are under-trained, as well as potentially synergistic effect of local attention with ColBERT-style retrieval, but leave further exploration of this phenomenon to future work. to do so. Natural Language Understanding Both ModernBERT models demonstrate exceptional NLU results, as measured by GLUE. ModernBERTbase surpasses all existing base models, including DeBERTaV3-base, becoming the first MLMThis is surprising, trained model as DeBERTaV3 was trained with the ReplacedToken-Detection objective, which was previously thought to yield stronger downstream NLU performance (Clark et al., 2020; He et al., 2023). ModernBERT-large is the second-best large encoder on GLUE, almost matching DeBERTaV3large with one-tenth fewer parameters while processing tokens in half the time (see Section 4). Code On programming tasks, in both code-totext (CodeSearchNet) and longer-context hybrid settings (StackQA), ModernBERT outperforms all other models. This result was expected, as it is the only evaluated encoder to be trained on data mixture including programming data. These results, combined with ModernBERTs strong showings on other tasks, indicates that ModernBERT has improved understanding of code at no detriment to its ability to process natural text."
        },
        {
            "title": "4 Efficiency",
            "content": "4.1 Evaluation Setting To measure inference efficiency across multiple sequence lengths, we create 4 synthetic sets of 8192 documents12. The first two document sets are fixed-length: in fixed short-context, all documents contain 512 tokens and in fixed long-context all documents contain 8192 tokens13. To account for the impact of unpadding, we also create two varying-length document sets, where the number of tokens in each set are defined by normal distribution centered on half the maximum sequence length, 256 and 4096 tokens, respectively. Full data statistics are provided in Appendix F. We then evaluate all models based on the number of tokens they can process per second, averaged over ten runs. All efficiency evaluations are ran on single NVIDIA RTX 4090, one of the target GPUs of ModernBERT outlined in Section 2.1.3 We evaluate the GTE-en-MLM models under two settings: out-of-the box, and with the use of the xformers (Lefaudeux et al., 2022) library, which enables efficiency enhancements such as unpadding."
        },
        {
            "title": "4.2 Results",
            "content": "All tokens-per-second efficiency results are presented in Table 2, with absolute run-times provided in Appendix F. ModernBERT stands out as the most efficient model overall. On short context, it processes fixed-length 512 token inputs faster than all other recent encoders, although slower than the original BERT and RoBERTa models14. On longcontext, ModernBERT is faster than all competing encoders, processing documents 2.65 and 3 times faster than the next-fastest encoder at the BASE and LARGE sizes, respectively. ModernBERT-larges processing speed at length 8192 (46,801 tokens per second) is closer to that of GTE-en-MLM base (47,507 tokens per second) than it is to GTE-enMLM-large (16,532 tokens per second). On variable-length inputs, both GTE-en-MLM and ModernBERT models are considerably faster than all other models, largely due to unpadding. However, ModernBERT remains noticeably more efficient than GTE-en-MLM, processing 14.5-30.9 12Many common benchmarks are biased towards low and uniform sequence lengths, which is unrepresentative of many real-world situations. 13512 being the maximum length of most existing encoders, while 8192 is the maximum length of all long-context ones. 14This is partially due to the relatively low parameter count of BERT and RoBERTa compared to more recent encoders. percent more tokens per second at low context lengths and 98.8-118.8 percent more at longer context lengths, thanks to its use of local attention. ModernBERT is the overall most memory efficient model on both model sizes. ModernBERTbase is able to process batch sizes twice as large as every other model on both input lengths. ModernBERT-large is slightly less memory efficient than the original BERT-large on short-context inputs, but can process batches at least 60 percent bigger than every other large model."
        },
        {
            "title": "5 Conclusion",
            "content": "We present ModernBERT, an open family of encoder-only models which set new state of the art over existing encoder models on wide range of classification and retrieval tasks. We show that encoders benefit from both recent pretraining data scales and architecture improvements from autoregressive LLMs. ModernBERT has native sequence length of 8,192 tokens and incorporates recent architecture improvements, such as GeGLU layers, RoPE positional embeddings, and alternating local-global attention. ModernBERT is the first open model to feature entire model unpadding and is the first encoder designed in hardware-aware way to maximize inference efficiency. ModernBERT pushes the encoder state of the art forward across wide range of benchmarks. On GLUE, ModernBERT-base is the first encoder to beat DeBERTaV3-base since its release in 2021. ModernBERT is in class of its own in code and ColBERT-style long-context retrieval benchmarks, scoring at least 6.85 and 9.1 percentage points higher than the closest model, respectively, while remaining state-of-the-art on short-context retrieval in both single and multi-vector settings. At the same time, ModernBERT processes short context inputs twice as fast as DeBERTaV3 and long-context inputs two times faster than the next fastest model with best-in-class memory efficiency. ModernBERT is generational leap over the original encoder models, with notable performance improvements over BERT and RoBERTa on both classification and retrieval tasks. ModernBERT is one of the few encoders to support long-context and programming applications, while simultaneously setting new record in encoder inference efficiency."
        },
        {
            "title": "6 Limitations",
            "content": "Language This study focuses exclusively on the English language, and trains on very large number of tokens. As such, major limitation of our work is that it is not directly applicable to other languages, and potentially even less-so to lower resources languages. Biases Our model is trained largely on web data, as result, all of its representations are subject to the biases present in such data. Harmful Content Generation The MLM objective gives the model some ability to generate text by suggesting given token to replace the [MASK] token (Samuel, 2024), which could result in the generation of harmful content. However, ModernBERT is not, primarily, generative model, and as such, has not been trained to and therefore cannot generate longer sequences of text. As result, it is considerably less likely to be at risk of generating harmful content of any kind. MLM-only objective Given the strong results of DeBERTav3 on classification tasks but weak ones on retrieval, it seems that training leveraging both MLM and RTD might be better suited to achieve best results on classification. Extending our work to RTD is thus promising line of research. Scaling Besides the architectural modifications, key aspect of our studies is data scaling. However, other scaling axes, notably in terms of model parameters are left unexplored."
        },
        {
            "title": "7 Acknowledgements",
            "content": "The authors would like to acknowledge & thank the many people who assisted, supported, or offered insights useful for the completion of this project. We are particularly thankful for the one-off implementation or evaluation work conducted by Jack Cook, Mark Tenenholtz, Johno Whitaker, and Wayde Gilliam. We also extend similar thanks to Zach Nussbaum for assisting in resolving issues we encountered with NomicBERT during evaluation. We would like to acknowledge Enrico Shippole, Daniel Han, Colin Raffel, Pierre-Carl Langlais, Omar Khattab, Urchade Zaratiana, Aurélien Lac, Amélie Chatelain, and Raphaël Sourty, for their helpful contributions to discussions. We also thank Weights&Biases for providing free access to their platform, in particular Morgan McGuire and Thomas Capelle for their support. We thank HuggingFaces Arthur Zucker, Cyril Vallez, and Pedro Cuenca for assisting with dayone HuggingFace support. Finally, we acknowledge Orange Business Cloud Avenue as compute provider and their hardware support throughout the project and thank LightOn for sponsoring the compute."
        },
        {
            "title": "8 Contribution Statement",
            "content": "BW, AC, and BC jointly led the project and contributed to all parts of it. BW worked on all aspects of the project and contributed to all major decisions. He led model design, model training, implemented the majority of the model architecture, and assisted with data selection, elevations, and paper writing. AC co-initiated the project and worked on all aspects of it, including project coordination. Notably, he contributed to monitoring training runs and coled ablations, final evaluations and paper writing. BC initiated the project and worked on all aspects of it. He contributed to model design and co-led final evaluations, led paper writing, and contributed to the context extension data processing. OW led and conducted the majority of the data selection, processing, and discussion, for all stages of training. He also contributed valuable inputs throughout all stages of the project. OH and ST contributed to majority of the stages of the project, in particular model architecture and training, with both discussions, implementations and paper writing. Other contributions include pretraining monitoring, final traditional evaluations, and ablations. ST specifically worked on adapting the RoPE kernel for unpadded sequences and running the final GLUE benchmarks. OH additionally conducted thorough investigation into complex issues that arose during training. RB contributed greatly to the initial evaluation work, focusing on ablations and in-training evals. AG and FL contributed to training efficiency, especially in implementing sequence packing. AG and GA contributed to model evaluations, especially in long context evaluations. the TA contributed to discussions throughout project and assisted in integrating the original research implementation with open source software. NC contributed to context extension data mixtures, and provided insight into model training and on improving the quality of code data. IP and JH provided guidance and support throughout the project, especially on key decisions."
        },
        {
            "title": "References",
            "content": "Jason Ansel, Edward Yang, Horace He, Natalia Gimelshein, Animesh Jain, Michael Voznesensky, Bin Bao, Peter Bell, David Berard, Evgeni Burovski, et al. 2024. Pytorch 2: Faster machine learning through dynamic python bytecode transformation and graph compilation. In Proceedings of the 29th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, volume 2, pages 929947. Quentin Anthony, Jacob Hatef, Deepak Narayanan, Stella Biderman, Stas Bekman, Junqi Yin, Aamir Shafi, Hari Subramoni, and Dhabaleswar Panda. 2024. The case for co-designing model architectures with hardware. Preprint, arXiv:2401.14489. Jordan T. Ash and Ryan P. Adams. 2019. On the difficulty of warm-starting neural network training. CoRR, abs/1910.08475. Jinze Bai, Shuai Bai, Yunfei Chu, Zeyu Cui, Kai Dang, Xiaodong Deng, Yang Fan, Wenbin Ge, Yu Han, Fei Huang, et al. 2023. Qwen technical report. arXiv preprint arXiv:2309.16609. Payal Bajaj, Daniel Campos, Nick Craswell, Li Deng, Jianfeng Gao, Xiaodong Liu, Rangan Majumder, Andrew McNamara, Bhaskar Mitra, Tri Nguyen, et al. 2016. Ms marco: human generated machine reading comprehension dataset. arXiv preprint arXiv:1611.09268. Iz Beltagy, Matthew E. Peters, and Arman Cohan. 2020. Longformer: The long-document transformer. Preprint, arXiv:2004.05150. Jo Kristian Bergum. 2024. Announcing vespa longcontext ColBERT. Vespa Blog. Stella Biderman, Hailey Schoelkopf, Quentin Gregory Anthony, Herbie Bradley, Kyle OBrien, Eric Hallahan, Mohammad Aflah Khan, Shivanshu Purohit, USVSN Sai Prashanth, Edward Raff, et al. 2023. Pythia: suite for analyzing large language modIn International els across training and scaling. Conference on Machine Learning, pages 23972430. PMLR. Sidney Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor Leahy, Kyle McDonell, Jason Phang, et al. 2022. Gpt-neox-20b: An open-source autoregressive language model. In Proceedings of BigScience Episode# 5Workshop on Challenges & Perspectives in Creating Large Language Models, pages 95136. Tom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. 2020. Language models are few-shot learners. In Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual. Antoine Chaffin and Raphaël Sourty. 2024. Pylate: Flexible training and retrieval for late interaction models. Jianlyu Chen, Shitao Xiao, Peitian Zhang, Kun Luo, Defu Lian, and Zheng Liu. 2024. M3embedding: Multi-linguality, multi-functionality, multi-granularity text embeddings through selfIn Findings of the Assoknowledge distillation. ciation for Computational Linguistics, ACL 2024, Bangkok, Thailand and virtual meeting, August 1116, 2024, pages 23182335. Association for Computational Linguistics. Aakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma, Gaurav Mishra, Adam Roberts, Paul Barham, Hyung Won Chung, Charles Sutton, Sebastian Gehrmann, Parker Schuh, Kensen Shi, Sasha Tsvyashchenko, Joshua Maynez, Abhishek Rao, Parker Barnes, Yi Tay, Noam Shazeer, Vinodkumar Prabhakaran, Emily Reif, Nan Du, Ben Hutchinson, Reiner Pope, James Bradbury, Jacob Austin, Michael Isard, Guy Gur-Ari, Pengcheng Yin, Toju Duke, Anselm Levskaya, Sanjay Ghemawat, Sunipa Dev, Henryk Michalewski, Xavier Garcia, Vedant Misra, Kevin Robinson, Liam Fedus, Denny Zhou, Daphne Ippolito, David Luan, Hyeontaek Lim, Barret Zoph, Alexander Spiridonov, Ryan Sepassi, David Dohan, Shivani Agrawal, Mark Omernick, Andrew M. Dai, Thanumalayan Sankaranarayana Pillai, Marie Pellat, Aitor Lewkowycz, Erica Moreira, Rewon Child, Oleksandr Polozov, Katherine Lee, Zongwei Zhou, Xuezhi Wang, Brennan Saeta, Mark Diaz, Orhan Firat, Michele Catasta, Jason Wei, Kathy Meier-Hellstern, Douglas Eck, Jeff Dean, Slav Petrov, and Noah Fiedel. 2023. Palm: Scaling language modeling with pathways. J. Mach. Learn. Res., 24:240:1 240:113. Kevin Clark, Minh-Thang Luong, Quoc V. Le, and Christopher D. Manning. 2020. ELECTRA: pretraining text encoders as discriminators rather than In 8th International Conference on generators. Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020. OpenReview.net. Benjamin Clavié. 2024. Jacolbertv2.5: Optimising multi-vector retrievers to create state-of-theart japanese retrievers with constrained resources. Preprint, arXiv:2407.20750. Tri Dao. 2023. Flashattention-2: Faster attention with In The better parallelism and work partitioning. Twelfth International Conference on Learning Representations. Tri Dao, Dan Fu, Stefano Ermon, Atri Rudra, and Christopher Ré. 2022. Flashattention: Fast and 10 memory-efficient exact attention with io-awareness. Advances in Neural Information Processing Systems, 35:1634416359. Yann N. Dauphin, Angela Fan, Michael Auli, and David Grangier. 2017. Language modeling with gated convolutional networks. In Proceedings of the 34th International Conference on Machine Learning, volume 70 of Proceedings of Machine Learning Research, pages 933941. PMLR. Boris Dayma, Suraj Patil, Pedro Cuenca, Khalid Saifullah, Tanishq Abraham, Phúc Lê Khac, Luke Melas, and Ritobrata Ghosh. 2021. Dalle mini. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019, Minneapolis, MN, USA, June 2-7, 2019, Volume 1 (Long and Short Papers), pages 41714186. Association for Computational Linguistics. Abhimanyu Dubey, Abhinav Jauhri, Abhinav Pandey, Abhishek Kadian, Ahmad Al-Dahle, Aiesha Letman, Akhil Mathur, Alan Schelten, Amy Yang, Angela Fan, et al. 2024. The llama 3 herd of models. arXiv preprint arXiv:2407.21783. Yao Fu, Rameswar Panda, Xinyao Niu, Xiang Yue, Hannaneh Hajishirzi, Yoon Kim, and Hao Peng. 2024. Data engineering for scaling language models to 128k context. Preprint, arXiv:2402.10171. Jun Gao, Di He, Xu Tan, Tao Qin, Liwei Wang, and TieYan Liu. 2019. Representation degeneration problem in training natural language generation models. ArXiv, abs/1907.12009. Tianyu Gao, Alexander Wettig, Howard Yen, and Danqi Chen. 2024. How to train long-context language models (effectively). Preprint, arXiv:2410.02660. Jonas Geiping and Tom Goldstein. 2023. Cramming: Training language model on single GPU in one day. In International Conference on Machine Learning, ICML 2023, 23-29 July 2023, Honolulu, Hawaii, USA, volume 202 of Proceedings of Machine Learning Research, pages 1111711143. PMLR. Team Gemma, Morgane Riviere, Shreya Pathak, Pier Giuseppe Sessa, Cassidy Hardin, Surya Bhupatiraju, Léonard Hussenot, Thomas Mesnard, Bobak Shahriari, Alexandre Ramé, et al. 2024. Gemma 2: Improving open language models at practical size. arXiv preprint arXiv:2408.00118. Alexander Hägele, Elie Bakouch, Atli Kosson, Loubna Ben Allal, Leandro von Werra, and Martin Jaggi. 2024. Scaling laws and compute-optimal training beyond fixed training durations. CoRR, abs/2405.18392. Oskar Hallström, Said Taghadouini, Clément Thiriet, and Antoine Chaffin. 2024. Passing the torch: Training mamba model for smooth handover. Pengcheng He, Jianfeng Gao, and Weizhu Chen. 2023. Debertav3: Improving deberta using electra-style pre-training with gradient-disentangled embedding sharing. In The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023. OpenReview.net. Dan Hendrycks and Kevin Gimpel. 2016. GausarXiv preprint sian error linear units (gelus). arXiv:1606.08415. Cheng-Ping Hsieh, Simeng Sun, Samuel Kriman, Shantanu Acharya, Dima Rekesh, Fei Jia, Yang Zhang, and Boris Ginsburg. 2024. Ruler: Whats the real context size of your long-context language models? arXiv preprint arXiv:2404.06654. Shengding Hu, Yuge Tu, Xu Han, Chaoqun He, Ganqu Cui, Xiang Long, Zhi Zheng, Yewei Fang, Yuxiang Huang, Weilin Zhao, Xinrong Zhang, Zhen Leng Thai, Kai Zhang, Chongyi Wang, Yuan Yao, Chenyang Zhao, Jie Zhou, Jie Cai, Zhongwu Zhai, Ning Ding, Chao Jia, Guoyang Zeng, Dahai Li, Zhiyuan Liu, and Maosong Sun. 2024. Minicpm: Unveiling the potential of small language models with scalable training strategies. CoRR, abs/2404.06395. Hamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, and Marc Brockschmidt. 2019. Codesearchnet challenge: Evaluating the state of semantic code search. arXiv preprint arXiv:1909.09436. Alexander Hägele, Elie Bakouch, Atli Kosson, Loubna Ben Allal, Leandro Von Werra, and Martin Jaggi. 2024. Scaling laws and compute-optimal training beyond fixed training durations. Preprint, arXiv:2405.18392. Peter Izsak, Moshe Berchansky, and Omer Levy. 2021. How to train BERT with an academic budget. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 10644 10652, Online and Punta Cana, Dominican Republic. Association for Computational Linguistics. Mojan Javaheripi, Sébastien Bubeck, Marah Abdin, Jyoti Aneja, Sebastien Bubeck, Caio César Teodoro Mendes, Weizhu Chen, Allie Del Giorno, Ronen Eldan, Sivakanth Gopi, et al. 2023. Phi-2: The surprising power of small language models. Microsoft Research Blog, 1(3):3. Dirk Groeneveld, Iz Beltagy, Pete Walsh, Akshita Bhagia, Rodney Kinney, Oyvind Tafjord, Ananya Harsh Jha, Hamish Ivison, Ian Magnusson, Yizhong Wang, et al. 2024. Olmo: Accelerating the science of language models. arXiv preprint arXiv:2402.00838. Jiaming Ji, Mickel Liu, Juntao Dai, Xuehai Pan, Chi Zhang, Ce Bian, Chi Zhang, Ruiyang Sun, Yizhou Wang, and Yaodong Yang. 2023. Beavertails: Towards improved safety alignment of llm via humanpreference dataset. arXiv preprint arXiv:2307.04657. 11 Juyong Jiang, Fan Wang, Jiasi Shen, Sungju Kim, and Sunghun Kim. 2024a. survey on large language models for code generation. arXiv preprint arXiv:2406.00515. Liwei Jiang, Kavel Rao, Seungju Han, Allyson Ettinger, Faeze Brahman, Sachin Kumar, Niloofar Mireshghallah, Ximing Lu, Maarten Sap, Yejin Choi, and Nouha Dziri. 2024b. Wildteaming at scale: From in-thewild jailbreaks to (adversarially) safer language models. Preprint, arXiv:2406.18510. Gregory Kamradt. 2023. Needle In Haystack - pressure testing LLMs. Github. Andrej Karpathy. 2023. The most dramatic optimization to nanogpt so far ( 25% speedup) is to simply increase vocab size from 50257 to 50304 (nearest multiple of 64). Vladimir Karpukhin, Barlas Oguz, Sewon Min, Patrick S. H. Lewis, Ledell Wu, Sergey Edunov, Danqi Chen, and Wen-tau Yih. 2020. Dense passage retrieval for open-domain question answering. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing, EMNLP 2020, Online, November 16-20, 2020, pages 67696781. Association for Computational Linguistics. Omar Khattab and Matei Zaharia. 2020. Colbert: Efficient and effective passage search via contextualized late interaction over BERT. In Proceedings of the 43rd International ACM SIGIR conference on research and development in Information Retrieval, SIGIR 2020, Virtual Event, China, July 25-30, 2020, pages 3948. ACM. Mario Michael Krell, Matej Kosec, Sergio P. Perez, and Andrew Fitzgibbon. 2022. Efficient sequence packing without cross-contamination: Accelerating large language models without impacting performance. Preprint, arXiv:2107.02027. Benjamin Lefaudeux, Francisco Massa, Diana Liskovich, Wenhan Xiong, Vittorio Caggiano, Sean Naren, Min Xu, Jieru Hu, Marta Tintore, Susan Zhang, Patrick Labatut, Daniel Haziza, Luca Wehrstedt, Jeremy Reizenstein, and Grigxformers: modular and ory Sizov. 2022. https: hackable transformer modelling library. //github.com/facebookresearch/xformers. Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey Hinton. 2016. Layer normalization. ArXiv e-prints, pages arXiv1607. Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel, et al. 2020. Retrieval-augmented generation for knowledge-intensive nlp tasks. Advances in Neural Information Processing Systems (NeurIPS), 33:94599474. Xiangyang Li, Kuicai Dong, Yi Quan Lee, Wei Xia, Yichun Yin, Hao Zhang, Yong Liu, Yasheng Wang, and Ruiming Tang. 2024. Coir: comprehensive benchmark for code information retrieval models. arXiv preprint arXiv:2407.02883. Yuanzhi Li, Sébastien Bubeck, Ronen Eldan, Allie Del Giorno, Suriya Gunasekar, and Yin Tat Lee. 2023. Textbooks are all you need ii: phi-1.5 technical report. Preprint, arXiv:2309.05463. Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. 2019a. Roberta: robustly optimized BERT pretraining approach. CoRR, abs/1907.11692. Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. 2019b. Roberta: robustly optimized BERT pretraining approach. CoRR, abs/1907.11692. Zechun Liu, Changsheng Zhao, Forrest Iandola, Chen Lai, Yuandong Tian, Igor Fedorov, Yunyang Xiong, Ernie Chang, Yangyang Shi, Raghuraman Krishnamoorthi, Liangzhen Lai, and Vikas Chandra. 2024. Mobilellm: Optimizing sub-billion parameter language models for on-device use cases. Preprint, arXiv:2402.14905. Ilya Loshchilov and Frank Hutter. 2019. Decoupled weight decay regularization. In International Conference on Learning Representations. Thao Nguyen, Maithra Raghu, and Simon Kornblith. 2021. Do wide and deep networks learn the same things? uncovering how neural network representations vary with width and depth. In International Conference on Learning Representations. Zach Nussbaum, John X. Morris, Brandon Duderstadt, and Andriy Mulyar. 2024. Nomic embed: Training reproducible long context text embedder. CoRR, abs/2402.01613. Guilherme Penedo, Hynek Kydlíˇcek, Loubna Ben allal, Anton Lozhkov, Margaret Mitchell, Colin Raffel, Leandro Von Werra, and Thomas Wolf. 2024. The fineweb datasets: Decanting the web for the finest text data at scale. Preprint, arXiv:2406.17557. Jacob Portes, Alexander Trott, Sam Havens, Daniel King, Abhinav Venigalla, Moin Nadeem, Nikhil Sardana, Daya Khudia, and Jonathan Frankle. 2023. Mosaicbert: bidirectional encoder optimized for fast pretraining. In Advances in Neural Information Processing Systems 36: Annual Conference on Neural Information Processing Systems 2023, NeurIPS 2023, New Orleans, LA, USA, December 10 - 16, 2023. Rushi Qiang, Ruiyi Zhang, and Pengtao Xie. 2024. Bilora: bi-level optimization framework for overfitting-resilient low-rank adaptation of large pretrained models. CoRR, abs/2403.13037. 12 Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskeve. 2018. Improving language understanding by generative pre-training. In OpenAI Tech Report. Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. 2019. Language models are unsupervised multitask learners. OpenAI Blog. Jack W. Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John Aslanides, Sarah Henderson, Roman Ring, Susannah Young, Eliza Rutherford, Tom Hennigan, Jacob Menick, Albin Cassirer, Richard Powell, George van den Driessche, Lisa Anne Hendricks, Maribeth Rauh, Po-Sen Huang, Amelia Glaese, Johannes Welbl, Sumanth Dathathri, Saffron Huang, Jonathan Uesato, John Mellor, Irina Higgins, Antonia Creswell, Nat McAleese, Amy Wu, Erich Elsen, Siddhant Jayakumar, Elena Buchatskaya, David Budden, Esme Sutherland, Karen Simonyan, Michela Paganini, Laurent Sifre, Lena Martens, Xiang Lorraine Li, Adhiguna Kuncoro, Aida Nematzadeh, Elena Gribovskaya, Domenic Donato, Angeliki Lazaridou, Arthur Mensch, Jean-Baptiste Lespiau, Maria Tsimpoukelli, Nikolai Grigorev, Doug Fritz, Thibault Sottiaux, Mantas Pajarskas, Toby Pohlen, Zhitao Gong, Daniel Toyama, Cyprien de Masson dAutume, Yujia Li, Tayfun Terzi, Vladimir Mikulik, Igor Babuschkin, Aidan Clark, Diego de Las Casas, Aurelia Guy, Chris Jones, James Bradbury, Matthew Johnson, Blake Hechtman, Laura Weidinger, Iason Gabriel, William Isaac, Ed Lockhart, Simon Osindero, Laura Rimell, Chris Dyer, Oriol Vinyals, Kareem Ayoub, Jeff Stanway, Lorrayne Bennett, Demis Hassabis, Koray Kavukcuoglu, and Geoffrey Irving. 2022. Scaling language models: Methods, analysis & insights from training gopher. Preprint, arXiv:2112.11446. Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter Liu. 2020. Exploring the limits of transfer learning with unified text-to-text transformer. Journal of machine learning research, 21(140):167. Nils Reimers and Iryna Gurevych. 2019. Sentence-bert: Sentence embeddings using siamese bert-networks. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics. David Samuel. 2024. Berts are generative in-context learners. CoRR, abs/2406.04823. Effective and efficient Keshav Santhanam, Omar Khattab, Jon Saad-Falcon, Christopher Potts, and Matei Zaharia. 2022. Colbertv2: retrieval via lightweight late interaction. In Proceedings of the 2022 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL 2022, Seattle, WA, United States, July 10-15, 2022, pages 3715 3734. Association for Computational Linguistics. Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Eric Hambro, Luke Zettlemoyer, Nicola Cancedda, and Thomas Scialom. 2023. Toolformer: Language models can teach themselves to use tools. In Advances in Neural Information Processing Systems 36: Annual Conference on Neural Information Processing Systems 2023, NeurIPS 2023, New Orleans, LA, USA, December 10 - 16, 2023. Jay Shah, Ganesh Bikshandi, Ying Zhang, Vijay Thakkar, Pradeep Ramani, and Tri Dao. 2024. Flashattention-3: Fast and accurate attention with arXiv preprint asynchrony and low-precision. arXiv:2407.08608. Noam Shazeer. 2020. Glu variants improve transformer. arXiv preprint arXiv:2002.05202. Noam Shazeer and Mitchell Stern. 2018. Adafactor: Adaptive learning rates with sublinear memory cost. In Proceedings of the 35th International Conference on Machine Learning, volume 80 of Proceedings of Machine Learning Research, pages 45964604. PMLR. Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro. 2019. Megatron-lm: Training multi-billion parameter language models using model parallelism. arXiv preprint arXiv:1909.08053. Jianlin Su, Murtadha H. M. Ahmed, Yu Lu, Shengfeng Pan, Wen Bo, and Yunfeng Liu. 2024. Roformer: Enhanced transformer with rotary position embedding. Neurocomputing, 568:127063. Yi Tay, Mostafa Dehghani, Jinfeng Rao, William Fedus, Samira Abnar, Hyung Won Chung, Sharan Narang, Dani Yogatama, Ashish Vaswani, and Donald Metzler. 2022. Scale efficiently: Insights from pretrainIn International ing and finetuning transformers. Conference on Learning Representations (ICLR) 22. The Mosaic ML Team. 2021. composer. https:// github.com/mosaicml/composer/. Nandan Thakur, Nils Reimers, Andreas Rücklé, Abhishek Srivastava, and Iryna Gurevych. 2021. BEIR: heterogeneous benchmark for zero-shot evaluation of information retrieval models. In Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual. Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. 2023. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288. Lewis Tunstall, Nils Reimers, Unso Eun Seo Jo, Luke Bates, Daniel Korat, Moshe Wasserblat, and Oren Pereg. 2022. Efficient few-shot learning without prompts. arXiv preprint. 13 Aäron van den Oord, Yazhe Li, and Oriol Vinyals. 2018. Representation learning with contrastive predictive coding. CoRR, abs/1807.03748. Chen Xing, Devansh Arpit, Christos Tsirigotis, and Yoshua Bengio. 2018. walk with sgd. Preprint, arXiv:1802.08770. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems 2017, December 4-9, 2017, Long Beach, CA, USA, pages 59986008. Ellen Voorhees, Tasmeer Alam, Steven Bedrick, Dina Demner-Fushman, William Hersh, Kyle Lo, Kirk Roberts, Ian Soboroff, and Lucy Lu Wang. 2021. Trec-covid: constructing pandemic information retrieval test collection. In ACM SIGIR Forum, volume 54, pages 112. ACM New York, NY, USA. Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel Bowman. 2018. GLUE: multi-task benchmark and analysis platform for natural language understanding. In Proceedings of the 2018 EMNLP Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP, pages 353355, Brussels, Belgium. Association for Computational Linguistics. Liang Wang, Nan Yang, Xiaolong Huang, Binxing Jiao, Linjun Yang, Daxin Jiang, Rangan Majumder, and Furu Wei. 2022. Text embeddings by weaklysupervised contrastive pre-training. arXiv preprint arXiv:2212.03533. Benjamin Warner. 2023. optimı: Fast, modern, memory efficient, and low precision pytorch optimizers. Charles Welch, Rada Mihalcea, and Jonathan K. Kummerfeld. 2020. Improving low compute language modeling with in-domain embedding initialisation. Preprint, arXiv:2009.14109. Alexander Wettig, Tianyu Gao, Zexuan Zhong, and Danqi Chen. 2023. Should you mask 15% in masked language modeling? Preprint, arXiv:2202.08005. Adina Williams, Nikita Nangia, and Samuel Bowman. 2018. broad-coverage challenge corpus for sentence understanding through inference. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 11121122. Mitchell Wortsman, Tim Dettmers, Luke Zettlemoyer, Ari Morcos, Ali Farhadi, and Ludwig Schmidt. 2023. Stable and low-precision training for large-scale vision-language models. Preprint, arXiv:2304.13013. Shitao Xiao, Zheng Liu, Peitian Zhang, and Niklas Muennighoff. 2023. C-pack: Packaged resources to advance general chinese embedding. Preprint, arXiv:2309.07597. Ruibin Xiong, Yunchang Yang, Di He, Kai Zheng, Shuxin Zheng, Chen Xing, Huishuai Zhang, Yanyan Lan, Liwei Wang, and Tie-Yan Liu. 2020. On layer normalization in the transformer architecture. In Proceedings of the 37th International Conference on Machine Learning, ICML 2020, 13-18 July 2020, Virtual Event, volume 119 of Proceedings of Machine Learning Research, pages 1052410533. PMLR. Jingjing Xu, Xu Sun, Zhiyuan Zhang, Guangxiang Zhao, and Junyang Lin. 2019. Understanding and improving layer normalization. Advances in neural information processing systems, 32. Hong Xuan, Abby Stylianou, Xiaotong Liu, and Robert Pless. 2020. Hard negative examples are hard, but useful. In Computer VisionECCV 2020: 16th European Conference, Glasgow, UK, August 2328, 2020, Proceedings, Part XIV 16, pages 126142. Springer. An Yang, Baosong Yang, Binyuan Hui, Bo Zheng, Bowen Yu, Chang Zhou, Chengpeng Li, Chengyuan Li, Dayiheng Liu, Fei Huang, et al. 2024. Qwen2 technical report. arXiv preprint arXiv:2407.10671. Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik R. Narasimhan, and Yuan Cao. 2023. React: Synergizing reasoning and acting in language models. In The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023. OpenReview.net. Urchade Zaratiana, Nadi Tomeh, Pierre Holat, and Thierry Charnois. 2024. Gliner: Generalist model for named entity recognition using bidirectional transformer. In Proceedings of the 2024 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (Volume 1: Long Papers), pages 53645376. Jinle Zeng, Min Li, Zhihua Wu, Jiaqi Liu, Yuang Liu, Dianhai Yu, and Yanjun Ma. 2022. Boosting distributed training performance of the unpadded bert model. arXiv preprint arXiv:2208.08124. Xiaohua Zhai, Alexander Kolesnikov, Neil Houlsby, and Lucas Beyer. 2022. Scaling vision transformers. In IEEE/CVF Conference on Computer Vision and Pattern Recognition, CVPR 2022, New Orleans, LA, USA, June 18-24, 2022, pages 12041213. IEEE. Xin Zhang, Yanzhao Zhang, Dingkun Long, Wen Xie, Ziqi Dai, Jialong Tang, Huan Lin, Baosong Yang, Pengjun Xie, Fei Huang, Meishan Zhang, Wenjie Li, and Min Zhang. 2024. mgte: Generalized longcontext text representation and reranking models for multilingual text retrieval. In Proceedings of the 2024 Conference on Empirical Methods in Natural Language Processing: EMNLP 2024 - Industry Track, Miami, Florida, USA, November 12-16, 2024, pages 13931412. Association for Computational Linguistics. Wayne Xin Zhao, Kun Zhou, Junyi Li, Tianyi Tang, Xiaolei Wang, Yupeng Hou, Yingqian Min, Beichen Zhang, Junjie Zhang, Zican Dong, et al. 2023. survey of large language models. arXiv preprint arXiv:2303.18223."
        },
        {
            "title": "A Training Settings",
            "content": "Detailed training settings can be found in Table 3. During training we used MNLI as live evaluation, along with validation loss and token accuracy metrics on 500 million randomly sampled sequences from the source datasets. We use Composer (Team, 2021) as our training framework and optimı (Warner, 2023) for our optimizer implementations. A.1 Batch Size Schedule Batch size warmup is common-knowledge trick to speed up model training when working with medium to large batch sizes. Instead of \"wasting\" full batch on updating the suboptimal initial weight distribution, we update the model weights on gradually increasing batch size. Batch size warmup is usually longer than learning rate warmup, and can be thought of as providing higher initial learning rate with mini-learning rate decay to the defined learning rate schedule. We warmup ModernBERTs batch size from 768 to 4,608 over 50 billion tokens and from 448 to 4,928 over 10 billion tokens, for -base and -large, respectively, with an uneven token schedule so each batch size has the same number of update steps. A.2 Weight Tiling Following the Phi family of models (Li et al., 2023; Javaheripi et al., 2023), we initialized ModernBERT-large directly from ModernBERTbases pretraining weights using center tiling and Gopher layer scaling (Rae et al., 2022). Since Bases weight matrices are smaller than Larges, we centered Base weights, accounting for each token embedding and attention head, then filled rest the of the weights using wraparound. Like Phi, we tested center initialization with random edge values and tiling from an edge, but both of these underperformed center tiling with wraparound. This weight initialization strategy greatly accelerates ModernBERT-larges initial training. A.3 Weight Decay decoupled weight decay, we applied fully decoupled weight decay following Loshchilov and Hutter (2019). A.4 Final Checkpoints Inspired by recent work showing that checkpoint averaging yields stronger final models (Dubey et al., 2024; Clavié, 2024), we selected our final checkpoints by experimenting with various averaging methods and evaluating them on subset of evaluation tasks. In no cases did Exponential Moving Average during annealing, as used by Dubey et al. (2024), result in stronger performance. ModernBERT-base is the result of averaging the 3 best performing annealing checkpoints with the final one. Averaging did not yield successful results on the large size, ModernBERT-Large model is the best performing annealing checkpoint."
        },
        {
            "title": "B Model Design",
            "content": "From Anthony et al. (2024), in addition to setting attention heads as multiples of 64 and setting the embedding matrix as power of 2 or multiple of 64, there are three model design choices to maximize performance (assuming float16 or bfloat16 computation): Tensor Core Requirement: Weight matrix dimensions should be divisible by 64 Tile Quantization: Weight matrix is divisible into 128 256 blocks. Wave Quantization: Number of blocks is divisible by the number of streaming multiprocessors (SM). Given that we wanted to target good performance across multiple GPUs with wide variety of SM counts, wave quantization is an impossible ask. So we selected basket of GPUs (NVIDIA T4, A10, L4, RTX 3090, RTX 4090, A100, and H100) and calculated the approximate SM utilization for each by dividing the modulus blocks by the number of SMs. This appeared to be decent performance heuristic in our spot checking. We then designed our models to maximize performance on the basket of GPUs, putting more weight on inference GPUs."
        },
        {
            "title": "C Training Log",
            "content": "C.1 Sampling Issue We did not apply weight decay to the bias terms or normalization layers. Instead of PyTorch-style Our first pretraining run of ModernBERT-base ended in disaster as the loss exhibited seesaw 15 Pretraining Phase Context Extension: Phase One Context Extension: Phase Two Base Large Base Large Base Large Training Tokens Max Sequence Length 1.719 trillion 1,024 250 billion 8,192 Batch Size Warmup (tokens) Microbatch Size Learning Rate Schedule Warmup (tokens) Decay (tokens) Weight Decay Total Time (hours) Training Time (hours) 4,608 50 billion 96 4,928 10 billion 56 8e5e-4, 5e-5 Trapezoidal 3 billion - 1e-5 194.2 191.1 2 billion - 1e-5, 1e-6 425.3 420. Model Initialization Megatron From Base 72 - 12 3e-4 - - - 1e-5 39.9 36. - 77 - 7 5e-5 - - - 1e-6 80.7 75.1 - 50 billion 8, 78 - 6 5e-5 1-sqrt - 50 billion 1e-6 21.7 15. - 72 - 12 3e-4 - 1e-5 11.5 7. - Dropout (attn out) Dropout (all other layers) 0.1 0.0 Optimizer Betas Epsilon StableAdamW (0.90, 0.98) 1e-06 Training Hardware Training Strategy Software Libraries 8x H100 Distributed DataParallel PyTorch 2.4.0, Cuda 12.4.0, Composer 0.24.1, Flash Attention 2.6.3, FA3 commit 32792d3 Table 3: ModernBERT training settings. Dropout and below are shared across all phases. Base Large Vocabulary Unused Tokens Layers Hidden Size Transformer Block Activation Function Linear Bias Attention Attention Heads Global Attention Local Attention Window Intermediate Size GLU Expansion Normalization Norm Epsilon Norm Bias RoPE theta Local Attn RoPE theta 50,368 83 22 768 Pre-Norm GeLU False Multi-head 12 Every three layers 128 1,152 2,304 LayerNorm 1e-5 False 160,000 10, 50,368 83 28 1024 Pre-Norm GeLU False Multi-head 16 Every three layers 128 2,624 5,248 LayerNorm 1e-5 False 160,000 10,000 Table 4: ModernBERT model design pattern before slowly diverging. Despite using PyTorchs distributed random sampler, training metrics suggested that the model was training on the dataset in non-random order. Like the Olmo authors15, we determined that the PyTorch random sampler returns sequentially biased samples when the number of samples is somewhere between 500 million and 1 billion samples16. We resolved this issue by replacing the PyTorch sampler with NumPys PCG64DXSM random sampler. C.2 Large Rollback We rolled back and restarted ModernBERT-large training at lower learning rate of 5e-5 and lower weight decay of 1e-6 for the last 800 billion to15We found comment and GitHub issue about this in the 16We did not conduct rigorous statistical analysis to deterOlmo codebase after resolving the issue ourselves. mine exactly when this happens. 16 kens. Prior to restarting training, larges training loss, validation metrics, and live evaluations on MNLI had plateaued for few hundred billion tokens at the higher 5e-4 learning rate. In contrast, ModernBERT-base showed continuous, but diminishing, improvement on training loss, validation metrics, and live evaluations through the entire 1.719 trillion token training phase. This highlights one of the risks of training with constant learning rate, other learning rate schedules can mitigate selecting too high learning rate (or too small batch size) by lowering the learning rate throughout training."
        },
        {
            "title": "D Architecture ablations",
            "content": "To select the updates to add in the ModernBERT architecture, we performed different ablations, except where stated, most ablations where ran at the 8-20 billion token scale: We compared two GLU layers, GeGLU and SwiGLU. We find close to no difference between the two and choose to use GeGLU layers. Using different percentage of the head dimension for the RoPE dimension (50, 75, 100). Lower percentages gave slightly better results. However, the observed difference was minimal. As the ablations were conducted at considerably smaller scale than the final training, we choose to err on the side of caution and opt to keep the dimension at 100 % to avoid potentially hindering the capabilities of the fully trained models. Both LayerNorm and RMSNorm yielded very similar results. While RMSNorm is theoretically faster, at the time this work was conducted, PyTorch did not have native RMSNorm implementation, leading to eagermode RMSNorm being the default implementation used for many users. To ensure ModernBERT has the highest possible out-of-the-box efficiency, we choose to use LayerNorm in the final models. We investigated using parallel attention to compute the MLP and attention matrices at the same time, which has been shown to increase processing speeds for larger model sizes (Chowdhery et al., 2023). However, for models within our targe sizes and pre-training sequence length, the speed-up we observed was minimal while we encountered significant degradation in downstream performance. As such, we do not use parallel attention. It is however possible that larger encoders and/or larger sequence lengths might see different trade-off. We explored the use of alternating global/local attention, with global attention every 3 layers and local attention over 128 token sliding window otherwise. This setup yielded identical downstream performance when compared to the use of global attention in every layer, even at 100 billion tokens, while resulting in major speedups. We experimented with multiple tokenizers, before selecting our final one, based on modified OLMo (Groeneveld et al., 2024) tokenizer, which performed the best out of the recent tokenizers evaluated. Tokenizers from the BERT and RoBERTa generation of encoder models had competitive downstream performance on MNLI, but we theorized that their lack of recent training data and lack of code support would hinder downstream applications. Interestingly, we observed significant downstream performance degradation when using the Llama 2 (Touvron et al., 2023) tokenizer."
        },
        {
            "title": "E Extended results",
            "content": "E.1 Full GLUE results The results for all the models each GLUE subsets are presented in Table 5. The values for prior models are extracted from the literature. As mentioned in Section 3.1.1, we follow standard practice (Liu et al., 2019a; Portes et al., 2023; He et al., 2023) and conduct an hyperparameter search on each subset. More specifically, we perform sweep over learning rates in [1e5, 3e5, 5e5, 8e5], weight decay in [1e6, 5e6, 8e6, 1e5], and number of epochs in [1, 2, 3] for tasks in SST-2, MNLI, and RTE, and [2, 5, 10] for tasks in QNLI, QQP, CoLA, MRPC, and STS-B. The final values are detailed in Table 6. Early stopping is used for all the fine-tuning runs which reduces the overall fine-tuning time considerably. RTE MRPC and STS-B checkpoints are trained starting from the MNLI checkpoint. 17 Single Sentence Paraphrase and Similarity Natural Language Inference Model Params Seq. CoLA SST-2 MRPC STS-B QQP MNLI QNLI RTE BERTβ RoBERTaα DeBERTav3ϵ MosaicBERT-128β NomicBERT-2048γ GTE-en-MLMδ ModernBERT BERTβ RoBERTaα DeBERTav3ζ GTE-en-MLMδ ModernBERT B r 512 110M 512 125M 512 183M 137M 128 137M 2048 137M 8192 149M 8192 512 330M 512 355M 434M 512 434M 8192 395M 8192 59.0 63.6 69.2 58.2 50.0 57.0 65.1 56.2 68.0 75.3 60.4 71.4 93.1 94.8 95.6 93.5 93.0 93.4 96. 93.3 96.4 96.9 95.1 97.1 89.5 90.2 89.5 89.0 88.0 92.1 92.2 87.8 90.9 92.2 93.5 91.7 89.4 91.2 91.6 90.3 90.0 90.2 91.8 90.6 92.4 93.0 91.4 92.8 91.4 91.9 92.4 92.0 92.0 88.8 92. 90.9 92.2 93.3 89.2 92.7 85.4 87.6 90.0 85.6 86.0 86.7 89.1 86.3 90.2 91.8 89.2 90.8 91.6 92.8 94.0 91.4 92.0 91.9 93.9 92.8 94.7 96.0 93.9 95.2 78.2 78.7 83.8 83.0 82.0 84.8 87. 83.8 86.6 92.7 88.1 92.1 Table 5: GLUE (Wang et al., 2018) dev set scores. α taken from Table 8 of (Liu et al., 2019a), β taken from Table S3 of (Portes et al., 2023), γ from Table 2 of (Nussbaum et al., 2024), δ from Table 21 of (Zhang et al., 2024), ϵ from Table 2 of (Qiang et al., 2024) and ζ from Table 3 of (He et al., 2023) Base Large Task LR WD Ep LR WD Ep CoLA 8e5 5e5 MNLI MRPC 5e5 8e5 QNLI 5e5 QQP 5e5 RTE 8e5 SST-2 8e5 STSB 1e6 5e6 5e6 5e6 5e6 1e5 1e5 5e6 5 1 10 2 10 3 2 10 3e5 3e5 8e5 3e5 5e5 5e5 1e5 8e5 8e6 1e5 5e6 5e6 8e6 8e6 1e6 1e 5 1 2 2 2 3 3 10 Table 6: Fine-tuning hyperparameters for ModernBERT on GLUE tasks. LR: Learning Rate, WD: Weight Decay, Ep: Epochs. E.2 Full BEIR results In the main body, we only report the average score over the 15 very diverse datasets of BEIR. We report the results on every subsets for both single and multi-vector retrieval in Table 7 and Table 8 respectively. For both settings and for every model, we perform sweep for learning rates in [1e5, 2e5, 3e5, 5e5, 8e5, 1e4] and choose the model obtaining the best average result over subset of datasets composed of NFCorpus, SciFact, TREC-Covid and FiQA as the final model. Best learning rates for every setting are reported in Table 9. Although ModernBERT showcase strong results across the board, it should be noted that an important factor in its performance is TREC-COVID (Voorhees et al., 2021), potentially showcasing the benefits of ModernBERT being trained with more recent knowledge cutoff than most existing encoders. However, NomicBERT and GTE have also been trained on updated data, so the cutoff cannot be the only factor affecting the performance."
        },
        {
            "title": "F Efficiency",
            "content": "Full statistics of the synthetic datasets used to evaluate the efficiency of the models in Section 4 are given in Table 10. The detailed runtimes, alongside with the maximum batch size for every model is detailed in Table 11. The high maximum batch-size achieved by ModernBERT models, considerably higher than any other models, highlight the strong memory efficiency of the model at both sizes. Inversely, it is worth noting that while DeBERTaV3 has competitive GLUE performance, it stands out as particularly inefficient, both in its memory use and processing speed. Indeed, on both model sizes, DeBERTaV3s memory use is 5-to-7 times higher than 18 B a a e L Model NFCorpus SciFact TREC-Covid FiQA ArguAna Climate-FEVER DBPedia FEVER HotpotQA MSMARCO NQ Quora SciDocs Touche2020 CQADupstack Avg. BERT RoBERTa DeBERTaV3 NomicBERT GTE-en-MLM ModernBERT BERT RoBERTa DeBERTaV3 GTE-en-MLM ModernBERT 24.3 20.4 8.0 25.7 26.3 23. 23.3 23.9 9.6 27.7 26.2 51.3 45.6 22.6 52.0 54.1 57.0 50.7 53.4 31.2 57.6 60.4 49.5 52.2 48.4 63.0 49.7 72.1 48.9 55.0 56.6 48.4 74.1 22.8 26.1 11.5 23.5 30.1 28. 24.0 33.4 15.8 34.0 33.1 31.6 35.2 26.1 35.5 35.7 35.7 35.2 37.6 26.3 35.3 38.2 21.9 22.3 9.7 22.9 24.5 23.6 22.1 23.5 14.4 24.0 20.5 28.2 23.1 5.3 30.3 28.9 23. 27.2 25.4 6.8 27.0 25.1 64.1 60.2 17.3 65.0 66.5 59.9 61.7 65.2 29.4 65.4 62.7 47.9 45.0 8.0 48.0 49.9 46.1 45.9 47.1 15.3 50.8 49.2 58.5 56.0 25.2 60.6 63.1 61. 59.8 60.4 32.4 64.1 64.9 37.9 34.7 12.5 42.6 41.7 39.5 39.5 43.3 21.5 44.9 45.5 83.1 84.0 74.7 84.5 85.2 85.9 83.6 85.8 79.1 85.3 86.5 12.9 11.4 5.4 12.6 14.1 12. 13.0 13.7 7.0 15.6 13.8 20.4 21.1 14.2 19.0 19.1 20.8 19.5 21.1 18.8 21.4 23.1 28.5 28.8 14.2 29.2 32.5 33.1 28.9 33.0 19.9 35.5 36.5 38.9 37.7 20.2 41.0 41.4 41. 38.9 41.4 25.6 42.5 44.0 Table 7: BEIR (Thakur et al., 2021) nDCG@10 scores for single-vector retrieval models. Model NFCorpus SciFact TREC-Covid FiQA ArguAna Climate-FEVER DBPedia FEVER HotpotQA MSMARCO NQ Quora SciDocs Touche2020 CQADupstack Avg. BERT RoBERTa DeBERTaV3 NomicBERT GTE-en-MLM ModernBERT BERT RoBERTa DeBERTaV3 GTE-en-MLM ModernBERT 34.2 33.7 31.9 35.5 35.1 35.2 34.6 35.0 31.7 35.2 36.0 71.5 70.8 68.5 72.2 71.5 73.0 72.9 72.3 70.2 72.4 73.2 69.9 69.8 75.5 73.5 69.4 80.5 68.8 74.4 73.3 67.2 81. 35.0 37.4 35.5 35.9 36.0 38.0 35.5 38.7 35.0 39.6 40.3 49.9 48.9 46.5 44.8 48.5 49.1 48.3 50.0 46.2 50.3 50.3 19.2 18.9 18.3 19.0 17.4 22.2 19.7 19.6 18.0 20.8 22. 42.4 39.3 35.6 43.6 41.2 42.0 42.4 41.0 36.5 44.4 44.1 83.1 81.2 78.1 83.9 79.9 85.8 83.6 82.0 79.0 82.5 85.8 69.8 66.1 65.3 71.1 67.0 70.4 70.7 66.2 63.2 72.0 72. 45.4 43.7 39.5 46.3 44.4 45.4 45.9 44.7 39.4 47.0 46.0 55.4 56.3 50.4 58.5 52.8 57.1 57.2 57.5 51.6 60.1 59.9 84.1 83.6 83.7 84.0 85.2 86.3 84.8 85.9 81.1 86.4 86. 14.7 14.8 14.6 15.1 15.0 16.0 15.2 15.3 14.1 15.9 16.9 27.0 31.7 31.1 31.3 25.4 33.9 28.9 27.9 28.6 30.9 34.6 34.2 34.4 32.3 33.9 34.6 35.1 34.9 36.0 33.1 35.4 35. 49.0 48.7 47.1 49.9 48.2 51.3 49.5 49.8 46.7 50.7 52.4 Table 8: BEIR (Thakur et al., 2021) nDCG@10 scores for multi-vector retrieval models. Model Single-vector (DPR) Multi-vector (ColBERT) BERT RoBERTa DeBERTaV3 NomicBERT GTE-en-MLM ModernBERT BERT RoBERTa DeBERTaV3 GTE-en-MLM ModernBERT B a 5 105 3 105 8 105 5 105 5 105 8 105 3 105 3 105 8 105 3 105 1 104 8 105 8 105 5 105 1 104 8 105 1 10 1 104 1 105 1 105 3 105 3 105 Table 9: Learning rate used for reported results on BEIR (Thakur et al., 2021) for both single and multi vector retrieval ModernBERTs, and it processes inputs, two times slower even in the most favorable scenario where all sequences are at the maximum possible length, thus negating any advantage from unpadding."
        },
        {
            "title": "G Licensing",
            "content": "We release the ModernBERT model architecture, model weights, and training codebase under the Apache 2.0 license. 19 Short Long Fixed Variable Fixed Variable Total Token Count Standard deviation Average Length Longest sequence Shortest sequence Number of sequences 4,194,304 0 512 512 512 8,192 2,096,510 64 256 476 32 8,192 67,108,864 0 8,192 8,192 8,192 8, 33,604,913 1,024 4,102 7,624 171 8,192 Table 10: Token statistics for the synthetic datasets used in efficiency evaluations. Model Params BS BERT RoBERTa DeBERTaV3 NomicBERT GTE-en-MLM GTE-en-MLMxformers ModernBERT BERT RoBERTa DeBERTaV3 GTE-en-MLM GTE-en-MLMxformers ModernBERT B a 110M 1096 125M 664 183M 236 137M 588 137M 640 137M 640 149M 1604 330M 792 355M 460 434M 134 435M 472 435M 472 395M 770 Short Fixed 23.3 0.02 23.3 0.19 59.7 0.11 35.8 0.01 33.9 1.21 34.2 0.10 28.3 0.55 77.1 1.50 99.8 1.79 170.8 0.06 108.4 0.07 109.0 0.14 80.1 1.65 Variable BS Long Fixed 16.3 0.04 14.2 0.01 51.9 0.02 39.6 0.02 36 38 38 98 28 28 48 1455.5 0.31 1434.7 3.69 1412.6 3.19 542.4 0.20 4144.7 0.05 4059.1 4.55 1433.9 0. Variable 499.2 0.11 251.2 0.32 1476.3 0.94 674.9 0.15 Table 11: Inference runtime for all models. Bold indicates the best for the column within two SDs."
        }
    ],
    "affiliations": [
        "Answer.AI",
        "HuggingFace",
        "Johns Hopkins University",
        "LightOn",
        "NVIDIA"
    ]
}