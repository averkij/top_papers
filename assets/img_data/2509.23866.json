[
    {
        "header": "Abstract",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.23866/x1.png",
                "caption": "Figure 1:Overview of theDecoupledAgenticRLTraining(DART) framework for GUI agents.",
                "position": 114
            }
        ]
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3DART:DecoupledAgenticRLTrainingFramework",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.23866/x2.png",
                "caption": "Figure 2:Overall architecture of our framework. TheRollout Serviceinteracts with multiple environments in parallel to generate trajectories, which are managed and delivered to theTrainerfor policy updates. Updated actors are synchronized back to theRollout Service, enabling scalable and efficient asynchronous learning. Implementation techniques are annotated within the figure.",
                "position": 174
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x3.png",
                "caption": "Figure 3:Visualization of sampling timelines for 4 tasks in two batches (denoted by different colors) with rollout numberN=4N=4, batch size=2=2, and a total of88environments. Each bar represents the timeline of rollout execution of a task on one environment.",
                "position": 243
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x4.png",
                "caption": "Figure 4:Timeline comparison between all-worker and per-worker model updating for 4 GPUs and 80 environments. The timelines depict idle periods for the GPUs and environments across two model updates. Different model versions are represented by varying shades of color. For per-worker model updating, the device number per worker is set to 2.",
                "position": 259
            }
        ]
    },
    {
        "header": "4Multi-Level Adaptive Data Curation for GUI Tasks",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.23866/figure/dynamic_rollout.png",
                "caption": "Figure 5:Dynamic rolloutNNwith task success rate.",
                "position": 273
            }
        ]
    },
    {
        "header": "5Experiment",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.23866/x5.png",
                "caption": "Table 1:Results on the OSWorld benchmark. Max Steps indicates the maximum number of agent-environment interactions allowed.Boldvalues denote the best performance amongopen-sourcemodels. For brevity, LibreOffice Calc, Impress, and Writer are abbreviated ascalc,impress, andwriter, respectively. Our results are obtained through evaluation on self-deployed devices using the official codebase and Docker environment. * means self-reported results in the method.",
                "position": 377
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x5.png",
                "caption": "Figure 6:(a) Dynamic rollout frequency vs. model accuracy across epochs. (b) Dynamic trajectory length vs. model accuracy over training. (c) Impact of experience trajectory pool on accuracy. (d) Performance comparison with and without distribution alignment.",
                "position": 918
            }
        ]
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "Reproducibility statement",
        "images": []
    },
    {
        "header": "References",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.23866/figure/env_dashboard.png",
                "caption": "Figure 8:Dashboard of the distributed Ubuntu env cluster.",
                "position": 1858
            },
            {
                "img": "https://arxiv.org/html/2509.23866/figure/env_dashboard2.png",
                "caption": "",
                "position": 1861
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x6.png",
                "caption": "Figure 10:Case study comparing UI-TARS-7B and DART-GUI-7B on configuring line wrapping in VS Code. UI-TARS-7B exhibits a reasoning error by modifying the unrelated HTML > Format: Wrap Line Length option, whereas DART-GUI-7B correctly locates and sets the Editor: Word Wrap Column parameter to the desired value.2",
                "position": 2696
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x7.png",
                "caption": "Figure 11:Case study comparing UI-TARS-7B and DART-GUI-7B on editing text in LibreOffice. UI-TARS-7B makes a grounding error by selecting both “H” and “2” in “H2​O\\mathrm{H_{2}O}”, whereas DART-GUI-7B correctly highlights only the “2” for conversion into a subscript.",
                "position": 2699
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x8.png",
                "caption": "Figure 12:Case study on an extremely difficult LibreOffice Impress task. The task requires configuring dual-slide display settings. The baseline model (top) incorrectly clicks \"Slide Show\" in the menu, leading to task failure. Our DART-GUI-7B model (bottom), trained with successful trajectories from the trajectory pool, correctly selects \"Tools\" to access the preferences panel where dual-slide display can be configured. This demonstrates our model’s ability to learn from rare successful trajectories and solve previously intractable tasks through RL training.",
                "position": 2702
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x9.png",
                "caption": "Figure 13:Case study on an extremely difficult bookmark saving task. The task requires saving a webpage to the bookmarks bar for quick access. The baseline model (top) makes a critical error by clicking \"Done\" without changing the bookmark folder from the default \"All Bookmarks\" to \"Bookmarks bar,\" resulting in task failure. Our DART-GUI-7B model (bottom) correctly identifies the need to switch the folder dropdown to \"Bookmarks bar\" before confirming, successfully completing the task. This demonstrates our model’s ability to understand subtle but crucial UI requirements that determine task success, learned through RL training on rare successful trajectories.",
                "position": 2705
            },
            {
                "img": "https://arxiv.org/html/2509.23866/x10.png",
                "caption": "Figure 14:Failure cases of DART-GUI-7B.\n(a) For the task of enabling the “Do Not Track” feature in Chrome, the model incorrectly clicks the “Site settings” option instead of the “Third-party cookies” option required to access the relevant privacy control.\n(b) For the task of opening two workspaces simultaneously in VS Code, the model attempts a Ctrl+click sequence, but due to action space limitations, the execution corresponds to sequentially pressing “Ctrl” and clicking without holding “Ctrl”, which deselects the first workspace and leaves only the second one selected.",
                "position": 2715
            }
        ]
    },
    {
        "header": "Appendix AAppendix",
        "images": []
    }
]