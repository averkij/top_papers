[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Related Works",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.22738/x1.png",
                "caption": "Figure 1:Overview ofShieldAgent.(Top)From AI regulations (e.g. EU AI Act) and platform-specific safety policies,ShieldAgentfirst extracts verifiable rules and iteratively refines them to ensure each rule is accurate, concrete, and atomic. It then clusters these rules and assembles them into an action-based safety policy model, associating actions with their corresponding constraints (with weights learned from real or simulated data).(Bottom)During inference,ShieldAgentretrieves relevant rule circuits w.r.t. the invoked action and performs action verification. By referencing existing workflows from a hybrid memory module, it first generates a step-by-step shielding plan with operations supported by a comprehensive tool library to assign truth values for all predicates, then produces executable code to perform formal verification for actions.\nFinally, it runs probabilistic inference in the rule circuits to provide a safety label and explanation and reports violated rules.",
                "position": 184
            }
        ]
    },
    {
        "header": "3ShieldAgent",
        "images": []
    },
    {
        "header": "4ShieldAgent-BenchDataset",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.22738/x2.png",
                "caption": "Figure 2:Pipeline for curatingShieldAgent-Bench. We adopt the AWM web agent(Wang etÂ al.,2024)and collect safe trajectories by executing instructions with full policy compliance. For risky trajectories, we attack the agent with two SOTAagent-basedandenvironment-basedalgorithms and produce unsafe trajectories across seven risk categories.",
                "position": 573
            }
        ]
    },
    {
        "header": "5Experiment",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.22738/x3.png",
                "caption": "Figure 3:Performance comparison ofShieldAgentwithrule traverseandGuardAgentbaselines on ST-WebAgentBench. We report the individual guardrail accuracy for each risk category.",
                "position": 860
            }
        ]
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "Acknowledgment",
        "images": []
    },
    {
        "header": "Impact Statement",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix ADetailed Introduction toShieldAgent",
        "images": []
    },
    {
        "header": "Appendix BAdditional Results",
        "images": []
    },
    {
        "header": "Appendix CAction-based Probabilistic Safety Policy Model",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.22738/x4.png",
                "caption": "Figure 4:The number of rules during each iteration step for GitLab policy. Specifically, the orange bar denotes the number of rules after eachverifiability refinementstep, and the blue bar denotes the number of rules after eachredundancy pruningstep.",
                "position": 2141
            },
            {
                "img": "https://arxiv.org/html/2503.22738/x4.png",
                "caption": "Figure 4:The number of rules during each iteration step for GitLab policy. Specifically, the orange bar denotes the number of rules after eachverifiability refinementstep, and the blue bar denotes the number of rules after eachredundancy pruningstep.",
                "position": 2144
            },
            {
                "img": "https://arxiv.org/html/2503.22738/x5.png",
                "caption": "Figure 5:The number of predicates during each iteration step for GitLab policy. Specifically, the orange bar denotes the number of predicates after eachverifiability refinementstep, and the blue bar denotes the number of predicates after eachredundancy pruningstep.",
                "position": 2149
            },
            {
                "img": "https://arxiv.org/html/2503.22738/x6.png",
                "caption": "Figure 6:The vagueness score of the rule set during each iteration step for optimizing the GitLab policy. Specifically, we leverage GPT-4o as a judge and prompt it to evaluate the vagueness of each rule within the rule set. A lower vagueness score signifies that the rules are more concrete and therefore more easily verified.",
                "position": 2155
            }
        ]
    },
    {
        "header": "Appendix DShieldAgentFramework",
        "images": []
    },
    {
        "header": "Appendix EShieldAgent-Bench",
        "images": []
    },
    {
        "header": "Appendix FDetailed Experiment Results",
        "images": []
    },
    {
        "header": "Appendix GCase Study",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.22738/x7.png",
                "caption": "Figure 7:An example of theaccess restrictionpolicy and the corresponding extracted rules from GitLab policy handbook.",
                "position": 2423
            },
            {
                "img": "https://arxiv.org/html/2503.22738/x8.png",
                "caption": "Figure 8:An example of thecontent restrictionpolicy and the corresponding extracted rules from GitLab policy handbook.",
                "position": 2428
            },
            {
                "img": "https://arxiv.org/html/2503.22738/x9.png",
                "caption": "Figure 9:An example of thehallucinationpolicy and the corresponding extracted rules from GitLab policy handbook.",
                "position": 2433
            }
        ]
    },
    {
        "header": "Appendix HPrompt Template",
        "images": []
    }
]