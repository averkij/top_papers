[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.07640/x1.png",
                "caption": "Figure 1:(Left) The performance of Pass@32 for whole-proof generation on miniF2F comparing with previous SOTA models.\n(Middle) A comparison of Goedel-Prover-SFT and DeepSeek-Prover-V1.5 in terms of miniF2F performance across different inference budgets, ranging from Pass@32, 64, 128, ‚Ä¶, to4√ó6400464004\\times 64004 √ó 6400.\n(Right) Goedel-Prover-SFT solve 29.7K problems in Lean Workbook. Previously, InternLM2.5-Step-Prover(Wu et¬†al.,2024)and InternLM-Math-Plus(Ying et¬†al.,2024b)collectively solved 15.7K samples.",
                "position": 104
            },
            {
                "img": "https://arxiv.org/html/2502.07640/x2.png",
                "caption": "",
                "position": 107
            },
            {
                "img": "https://arxiv.org/html/2502.07640/x3.png",
                "caption": "",
                "position": 108
            }
        ]
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Method",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/Train_formalizer.png",
                "caption": "Figure 2:This figure illustrates the training of the formalizers. The term ‚ÄúF-I statement pairs‚Äù refers to pairs consisting of Formal and Informal (F-I) statements. An example is shown on the right part. We train two formalizers, Formalizer A and B, using F-I statement pairs sourced from various origins.",
                "position": 225
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/F-I_statement_pair.png",
                "caption": "",
                "position": 228
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/Iteration_illustration.png",
                "caption": "Figure 3:This figure illustrates the process of expert iteration. Each time, we utilize our iter-kùëòkitalic_kprover to collect new proofs and add them to the training data. We then conduct supervised fine-tuning starting from DeepSeek-Prover-V1.5-Base for another round, resulting in the iter-(k+1)ùëò1(k+1)( italic_k + 1 )prover.",
                "position": 232
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/lwb_style_example1.png",
                "caption": "Table 1:Comparison of formalizer outputs for two examples. Comparison of Formalizer Outputs for Two Examples. In Example 1, Formalizer A defines the ‚Äùeven function‚Äù directly by statingf‚Å¢(‚àíx)=f‚Å¢(x)ùëìùë•ùëìùë•f(-x)=f(x)italic_f ( - italic_x ) = italic_f ( italic_x ). In contrast, Formalizer B first introduces a function called ‚ÄùIsEven‚Äù and then defines the even function using ‚ÄùIsEven‚Äù. Notably, our prover successfully solves the statements provided by Formalizer A but fails with those from Formalizer B.\nExample 2 is similar; however, our prover fails to solve the statement provided by Formalizer A but succeeds with the one from Formalizer B.",
                "position": 235
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/lwb_style_example2.png",
                "caption": "",
                "position": 288
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/sonnet_style_example1.png",
                "caption": "",
                "position": 303
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/sonnet_style_example2.png",
                "caption": "",
                "position": 311
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/prompts_FC_test.png",
                "caption": "Figure 4:Prompts for Faithfulness and Completeness (FC) Test.",
                "position": 328
            }
        ]
    },
    {
        "header": "4Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.07640/x4.png",
                "caption": "Figure 5:The figures show the performance of our model on the four datasets at each iteration. We gradually increase the size of the problem set and add more training data. The details of each iteration are shown in Table8.",
                "position": 526
            },
            {
                "img": "https://arxiv.org/html/2502.07640/x5.png",
                "caption": "",
                "position": 529
            },
            {
                "img": "https://arxiv.org/html/2502.07640/x6.png",
                "caption": "",
                "position": 530
            },
            {
                "img": "https://arxiv.org/html/2502.07640/x7.png",
                "caption": "",
                "position": 532
            },
            {
                "img": "https://arxiv.org/html/2502.07640/x8.png",
                "caption": "Figure 6:This figure illustrates the correlation of model performance across four datasets. A lower value indicates a weaker correlation between the model‚Äôs performance on two datasets. Notably, ProofNet shows a very low correlation with the other three datasets.",
                "position": 642
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/ProofNet_example.png",
                "caption": "Table 5:Comparison of Examples from ProofNetand miniF2F. ProofNet largely relies on the abstract and general formulations of mathematical results in Mathlib4. In contrast, miniF2F largely consists of high-school competition and Olympic style problems, which require complex reasoning.",
                "position": 645
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/miniF2F_example.png",
                "caption": "",
                "position": 696
            }
        ]
    },
    {
        "header": "5Discussion",
        "images": []
    },
    {
        "header": "Acknowledgments",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix",
        "images": []
    },
    {
        "header": "Appendix AExpert Iteration Details",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/mathlib4_example.png",
                "caption": "Figure 7:A Mathlib4 example which relies on pre-defined objects@Acc.ndrecand@Acc.ndrecC",
                "position": 1651
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/miniF2F_example2.png",
                "caption": "Figure 8:A miniF2F example which does not rely on pre-defined objects",
                "position": 1654
            },
            {
                "img": "https://arxiv.org/html/2502.07640/extracted/6195850/figures/proof_style_example2.png",
                "caption": "Figure 9:Example of proof style, where intermediate steps are absorbed in high-level tactics",
                "position": 1664
            }
        ]
    },
    {
        "header": "Appendix BMore Examples",
        "images": []
    }
]