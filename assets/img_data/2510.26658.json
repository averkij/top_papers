[
    {
        "header": "Abstract",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.26658/x1.png",
                "caption": "Figure 1:Comparison among our asynchronous thinking paradigm, sequential thinking, and parallel thinking. Sequential thinking employs a purely sequential decoding trajectory; parallel thinking executes multiple independent traces with an outcome aggregation. Differently, AsyncThink learns to form an agentic organization to think concurrently and collaboratively.",
                "position": 128
            }
        ]
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.26658/x2.png",
                "caption": "Figure 2:An example of the thinking protocol of AsyncThink. The protocol achieves asynchronous thinking through theFork-Joinactions, which controls the trajectory of thinking.",
                "position": 173
            }
        ]
    },
    {
        "header": "2Organizer-Worker Thinking Protocol",
        "images": []
    },
    {
        "header": "3Learning to Organize",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.26658/x3.png",
                "caption": "Figure 3:Illustration of the reinforcement learning framework for AsyncThink.",
                "position": 370
            },
            {
                "img": "https://arxiv.org/html/2510.26658/x4.png",
                "caption": "Figure 4:Illustration of the subproblem structure used in the dynamic programming formulation for computing the critical-path latency of an AsyncThink thinking trajectory.",
                "position": 442
            }
        ]
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.26658/x5.png",
                "caption": "Figure 5:Evaluation results on the multi-solution countdown task. ‘≥a\\geq aCorrect’ measures whether the model successfully findsaaunique and correct solutions for a given question. Results are averaged across55random seeds.",
                "position": 503
            },
            {
                "img": "https://arxiv.org/html/2510.26658/x6.png",
                "caption": "Figure 6:Trajectories of accuracy, thinking concurrency ratio, average number ofFork, and critical-path latency throughout training.",
                "position": 713
            },
            {
                "img": "https://arxiv.org/html/2510.26658/x7.png",
                "caption": "Figure 7:Accuracy-latency frontier of AsyncThink and baseline methods. The data points are collected by inference under various configurations of maximum response length.",
                "position": 725
            },
            {
                "img": "https://arxiv.org/html/2510.26658/x8.png",
                "caption": "Figure 8:An AsyncThink thinking trajectory on the multi-solution countdown task with an agent pool capacity ofc=2c=2. The organizer has learned to actively performForkandJoinoperations without external intervention. After the firstJoin, it checks the remaining gaps and launches a new sub-query as needed. The process finally yields four distinct valid expressions.",
                "position": 731
            }
        ]
    },
    {
        "header": "5Related Work",
        "images": []
    },
    {
        "header": "6Conclusion and Future Work",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix AAsyncThink Thinking Cases",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.26658/x9.png",
                "caption": "Figure 9:An AsyncThink thinking trajectory on mathematical reasoning with an agent pool capacityc=4c=4. The organizer spawns three workers, each using a different geometric formulation. These workers run in parallel and derive consistent results (cos⁡θ=1/3\\cos\\theta=1/3). They then rejoin for verification, converging to the final answer.",
                "position": 1595
            },
            {
                "img": "https://arxiv.org/html/2510.26658/x10.png",
                "caption": "Figure 10:An example of AsyncThink on a minimum vertex cover problem from MMLU-Pro (with agent pool capacityc=2c=2). The organizer generalizes to this unseen graph theory task, performingForkandJoinoperations without prior training on such problems. While a worker explores combinations with node 4, the organizer concurrently analyzes alternatives, ultimately determining the minimum vertex cover [0, 4].",
                "position": 1598
            },
            {
                "img": "https://arxiv.org/html/2510.26658/x11.png",
                "caption": "Figure 11:An example of AsyncThink on a genetics cross problem from MMLU-Pro (with agent pool capacityc=2c=2). The organizer generalizes to this biology domain, performingForkandJoinoperations without domain-specific training. While a worker explores the dihybrid cross (AaBb × AaBb), the organizer concurrently evaluates multi-gene combinations, ultimately identifying AaBbCcDd × AaBbCcDd as the most probable parental genotypes.",
                "position": 1601
            }
        ]
    },
    {
        "header": "Appendix BPrompt Templates",
        "images": []
    }
]