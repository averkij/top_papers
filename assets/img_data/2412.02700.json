[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2412.02700/x1.png",
                "caption": "Figure 1:Motion Prompting.1) We train a general-purpose track-conditioned ControlNet adapter on top of a video diffusion model. 2) To use this model, we designmotion promptsfrom user inputs, and show a variety of capabilities from this single trained model, such as object control, camera control, simultaneous object and camera control, motion transfer, and model probing. We visualize the motion prompt tracks and corresponding frames from the generated videos underneath. The tracks are colored only for the purpose of visualization, with trails denoting the direction and magnitude of motion. Additionally, some of our motion prompts are derived from user mouse motions, for which we visualize the mouse locations.We highly encourage the reader to view video results on ourwebpage.",
                "position": 109
            }
        ]
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Method",
        "images": [
            {
                "img": "https://arxiv.org/html/2412.02700/x2.png",
                "caption": "Figure 2:Conditioning Tracks.During training, we take estimated tracks from a video (left) and encode them into aT√óH√óW√óCùëáùêªùëäùê∂T\\!\\times\\!H\\!\\times\\!W\\!\\times\\!Citalic_T √ó italic_H √ó italic_W √ó italic_Cdimensional space-time volume (middle). Each track has a unique embedding (right), written to every location the track visits and is visible at. All other locations are set to zeros. This strategy can encode any number and configuration of tracks.",
                "position": 246
            }
        ]
    },
    {
        "header": "4Motion Prompts",
        "images": [
            {
                "img": "https://arxiv.org/html/2412.02700/x3.png",
                "caption": "Figure 3:‚ÄúInteracting‚Äù with an Image.We translate a simple user input, mouse motions and drags, and expand it into a more complex motion prompt which helps to achieve the user‚Äôs intention. The mouse trajectories are visualized as a hand when dragging, and as a black cursor otherwise. A grid of tracks centered on the cursor are created when the mouse is dragged, as shown in the top row. Frames from the generated video are shown in the bottom row. Prompting our model in this way, we can (a) move the head of a parrot or (c) a cow (b) play with hair or (d) ‚Äúinteract‚Äù with an image of sand. We can also keep the background still by specifying static tracks, as in (b) or (d).Note these samples are not generated in real-time and are not temporally causal. More examples can be found on ourwebpage.",
                "position": 282
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x4.png",
                "caption": "Figure 4:Drag-Based Image Editing.We show the input images in the first row, and resulting drag-based edits in the bottom row, with the drag visualized in both rows. In addition, in the final example we show how we can keep areas of the images static.",
                "position": 286
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x5.png",
                "caption": "Figure 5:Camera Control with Depth.We can construct motion prompts for camera control by specifying a camera trajectory and computing a point cloud with an off-the-shelf monocular depth estimator. We then project the points onto the sequence of cameras, which results in the shown point trajectories. We can also convert user mouse input into camera trajectories, as in example (c).",
                "position": 306
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x6.png",
                "caption": "Figure 6:Object Control with Primitives.By defining geometric primitives (e.g., a sphere) manipulated by a user with a mouse, we can obtain tracks exerting more fine-grain control over objects (e.g., rotations), which cannot be specified with a single track.",
                "position": 309
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x7.png",
                "caption": "Figure 7:Compositions of Motion Prompts.By composing motion prompts together, we can attain simultaneous object and camera control. For example, here we move the dog and horse‚Äôs head while orbiting the camera from left to right.",
                "position": 346
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x8.png",
                "caption": "Figure 8:Motion Transfer.By conditioning our model on extracted motion from a source video we can puppeteer a macaque, or even transfer the motion of amonkey chewingto a photo of trees.Best viewed as videos on ourwebpage.",
                "position": 362
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x9.png",
                "caption": "Figure 9:Probing by Failures.We can use motion prompts to probe limitations of the underlying model. For example, dragging the chess piece results in the creation of a new piece.",
                "position": 368
            }
        ]
    },
    {
        "header": "5Quantitative Results",
        "images": []
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix AImplementation Details",
        "images": [
            {
                "img": "https://arxiv.org/html/2412.02700/x10.png",
                "caption": "Figure A1:Mouse Motion GUI.We show a screenshot of the GUI that we use to record mouse motions. For more information please seeSec.A.3.",
                "position": 2237
            },
            {
                "img": "https://arxiv.org/html/2412.02700/x11.png",
                "caption": "Figure A2:Test and Train Metrics.Here we plot out training loss, along with PSNR, SSIM, LPIPS, and EPE on our DAVIS test set. Note that there is no correlation between the training loss and the test metrics, and that the test metrics show no signs of improvement until step 20,000 at which point the network learns quite rapidly.",
                "position": 2284
            }
        ]
    },
    {
        "header": "Appendix BTraining Observations",
        "images": []
    },
    {
        "header": "Appendix CFull Quantitative Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2412.02700/x12.png",
                "caption": "Figure A3:Motion Magnification.We show the result of using our model to perform motion magnification. We show the first frame of two videos, and space-time slices through the blue line at different magnification factors.",
                "position": 2499
            }
        ]
    },
    {
        "header": "Appendix DMotion Magnification",
        "images": []
    }
]