[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2505.16175/x1.png",
                "caption": "Figure 1:An overview of howQuickVideooverlaps video decoding on CPU (QuickCodec) and prefill on GPU (QuickPrefill).QuickCodecconcurrently processes intervals of the compressed video bit stream.QuickPrefilluses independent groups of frames, therefore it can begin prefill once the first frames are decoded, outputting carefully selected KV vectors. AsQuickCodecloads frames synchronously,QuickPrefillcan process the next prefill group immediately. This results in video decoding and prefill being almost enirely overlapped.",
                "position": 127
            }
        ]
    },
    {
        "header": "2Background",
        "images": []
    },
    {
        "header": "3Method",
        "images": []
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2505.16175/x2.png",
                "caption": "Figure 2:Speed comparison of Decord, TorchCodec (with Resize), andQuickCodecon loading hour-long video. We ablate across different levels of parallelization (core counts).",
                "position": 461
            },
            {
                "img": "https://arxiv.org/html/2505.16175/x3.png",
                "caption": "Figure 3:Video decoding performance for different video durations with 1 FPS sampling.",
                "position": 492
            },
            {
                "img": "https://arxiv.org/html/2505.16175/extracted/6465290/figures/kv_pruning_avg_performance.png",
                "caption": "Figure 4:Ablation study on the group size and retention ratio. Data fromTable 2.",
                "position": 725
            },
            {
                "img": "https://arxiv.org/html/2505.16175/x4.png",
                "caption": "Figure 5:Latency from video loading, prefill and LLM decoding in an end-to-end inference setting. We compare a baseline implementation of Qwen2.5-VL[4], Qwen2.5-VL implemented withQuickPrefillandQuickCodec, and lastly, our block overlapped design.",
                "position": 745
            }
        ]
    },
    {
        "header": "5Discussion and Related Work",
        "images": []
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix AParallelized Interval Algorithm",
        "images": []
    },
    {
        "header": "Appendix BEffect of sampling rates onQuickCodec’s efficiency",
        "images": [
            {
                "img": "https://arxiv.org/html/2505.16175/x5.png",
                "caption": "Figure 6:Video decoding performance for different video durations with 1 FPS sampling.",
                "position": 1683
            }
        ]
    },
    {
        "header": "Appendix CContainers and Video Decoding",
        "images": []
    },
    {
        "header": "Appendix DQuickPrefillEfficiency Analysis Details",
        "images": []
    },
    {
        "header": "Appendix EAblation Study on Group Size and Retention Ratio",
        "images": []
    },
    {
        "header": "Appendix FReproducibility Statement",
        "images": []
    },
    {
        "header": "Appendix GLimitations and Broader Impact",
        "images": []
    }
]