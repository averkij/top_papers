[
    {
        "header": "Abstract",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.02263/x1.png",
                "caption": "Figure 1:Reasoning abstractions illustrated in the solution-space graph for a problem.We depict the solution space as a graph of intermediate steps leading to correct or incorrect answers.(1)Standard reasoning explores this space along one sequential chain.(2)We generate textual abstractions by summarizing which intermediate steps led to which outcomes.(3)Such abstractions can be reused to guide reasoning more efficiently.",
                "position": 117
            },
            {
                "img": "https://arxiv.org/html/2510.02263/x2.png",
                "caption": "Figure 2:Benefits from abstractions rely crucially on strength of the solver, abstraction length, and solution model. Most configurations fail to yield gains; only o4-mini with long and detailed abstractions shows consistent improvements across the GSM8k and GSMPlus datasets (left). The capability of the problem solver conditioned on abstractions also matters: even strong abstractions help only if the solution model is sufficiently capable (middle, right).",
                "position": 251
            },
            {
                "img": "https://arxiv.org/html/2510.02263/figures/workflow.png",
                "caption": "Figure 3:RLADtraining paradigm.We train an abstraction generator,œÄŒ∏abs\\pi^{\\mathrm{abs}}_{\\theta}, that proposes some reasoning abstractions conditioned on the questionùê±\\mathbf{x}, denoted asùê≥\\mathbf{z}. Then, the solution generator,œÄŒ∏sol\\pi^{\\mathrm{sol}}_{\\theta}, is trained to produce a response,ùê≤~\\tilde{\\mathbf{y}}, conditioned on the generated abstractionùê≥\\mathbf{z}. The reward used for trainingœÄŒ∏abs\\pi^{\\mathrm{abs}}_{\\theta}corresponds to the average success rate of the solution generator conditioned on the proposed abstraction.",
                "position": 281
            },
            {
                "img": "https://arxiv.org/html/2510.02263/x3.png",
                "caption": "Figure 4:A typical example of a reasoning abstraction proposed by our abstraction generator.In the solution, we see (in blue) references to the abstraction (‚Äúcheatsheet‚Äù) and keywords from the abstraction being used meaningfully in the reasoning trace of the solution generator model.",
                "position": 333
            },
            {
                "img": "https://arxiv.org/html/2510.02263/figures/abstraction_scaling_joint.png",
                "caption": "Figure 5:Tradeoff of abstraction and solution generation on AIME 2025.As the total inference compute budget increases (color scheme on the right), we find better performance efficiency when allocating our budget to abstraction generation rather than solution generation, for all values of normalization offsetk0k_{0}given to us.",
                "position": 589
            },
            {
                "img": "https://arxiv.org/html/2510.02263/figures/combined_figure_unified_colors.png",
                "caption": "Figure 6:Abstraction-conditioned solution generation analysis.RLADproduces solutions with(left)greater semantic diversity across different abstractions and(right)higher abstraction adherence than baselines.",
                "position": 635
            },
            {
                "img": "https://arxiv.org/html/2510.02263/x4.png",
                "caption": "Figure 7:Examples of good reasoning abstractions in non-math domains. Adding the abstraction to the prompt of GPT-4o-mini consistently improves performance on unseen instances.",
                "position": 1712
            },
            {
                "img": "https://arxiv.org/html/2510.02263/figures/abstraction_classification.png",
                "caption": "Figure 8:Abstraction CategorizationRLADproduces a diverse characterization of abstractions, which we characterize by promptingo4-mini.",
                "position": 1719
            }
        ]
    },
    {
        "header": "Appendices",
        "images": []
    }
]