[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.12088/x1.png",
                "caption": "Figure 1:OneLifesynthesizes world laws from a single unguided (no environment-specific rewards / goals) episode in a hostile, stochastic environment.OneLifemodels the world as mixture of laws written in code with a precondition-effect structure, each governing an aspect of the world, and infers parameters for the mixture that best explain the observed dynamics of the world.\nThe resulting world model (WM) provides a probability distribution over attributes of an object-oriented world state, such as thepositionof a particular zombie.OneLifeoutperforms a strong baseline in modeling16/2316/23core game mechanics tested, measured by MRR (Mean Reciprocal Rank) of the true next state (Sec.4) under the WM’s likelihood.\nSeeAppendixAfor a synthesized zombie law.",
                "position": 149
            }
        ]
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Overview ofOneLife",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.12088/x2.png",
                "caption": "Figure 2:Illustration of the inference process. The active laws for each observable (defined byℐk​(st,a)\\mathcal{I}_{k}(s_{t},a)) determine the structure of the computation graph, i.e., which laws and their corresponding parametersθi\\theta_{i}are related to which observables. This structure in turn informs the parameter updates.\nShown here is a dataset with a single transition instance, in which the player (P) moves right; at the same time, a zombie (Z) independently moves left.\nthis implicates two laws,PlayerMovementLawandZombieMovementLaw, while not implicating theInventoryUpdateLaw.\nAs a result, the loss computation is only a function ofθ1\\theta_{1}andθ2\\theta_{2}. Note we useZZhere to denote the normalizing factor.\nExamples of synthesized laws can be seen inAppendixA.",
                "position": 257
            }
        ]
    },
    {
        "header": "4Evaluation Protocols and Metrics",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.12088/x3.png",
                "caption": "Figure 3:Two evaluation metric categories described inSec.4.\nA world state of an environment usually has more than two keys (i.e. Crafter-OO’s state (SectionB.2) when populated has 100+ key-value pairs,) and often has nested values, but here we show a simplest case to explain the calculation of (normalized) edit distance.\nWe create distractors for state ranking usingmutators(AppendixC), which programatically modify the next states′s^{\\prime}in a transition(s,a,s′)(s,a,s^{\\prime})to be illegal under the true transition function.\nFor example, one of our mutators allows a crafting action (e.g. making a stone pickaxe) to succeed even when the prequisites for the crafting are not met.",
                "position": 383
            }
        ]
    },
    {
        "header": "5Experimental Setup and Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.12088/x4.png",
                "caption": "Figure 4:Per-scenario state ranking performance ofOneLife(Ours) versusPoE-World, measured by Mean Reciprocal Rank (MRR↑\\uparrow). Scenarios are grouped by the core game mechanic they test. Horizontal lines show the average MRR across all scenarios in a group forOneLifeandPoE-World.OneLifedemonstrates a more accurate understanding of the environment’s laws, achieving a higher average MRR and outperforming the baseline on the majority of individual scenarios.",
                "position": 559
            },
            {
                "img": "https://arxiv.org/html/2510.12088/x5.png",
                "caption": "Figure 5:We show an example of plan executionwithinOneLife’s world model for the “Stone Miner” scenario.\nThe task is to mine stone, and can only be successfully completed if a wooden pickaxe is obtained before attempting to mine stone.\nWe simulate two plans within the world model.\nThe effective plan carries out a multi-step sequence of gathering wood, crafting a wooden pickaxe, and then attempting to mine. The ineffective plan attempts to mine the stone directly. The world learned byOneLifecorrectly simulates causal game mechanics that cause the effective plan to succeed and the ineffective plan to fail. The frames are generated by rendering the structured states constructed byOneLife’s learned transition function.",
                "position": 652
            }
        ]
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "Acknowledgements",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix ALaw Examples",
        "images": []
    },
    {
        "header": "Appendix BThe Crafter-OO Environment",
        "images": []
    },
    {
        "header": "Appendix CMutators",
        "images": []
    },
    {
        "header": "Appendix DScenarios",
        "images": []
    },
    {
        "header": "Appendix EEvaluation Implementation Details",
        "images": []
    },
    {
        "header": "Appendix FSynthesis and Exploration Implementation Details",
        "images": []
    }
]