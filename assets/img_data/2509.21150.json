[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21150/x1.png",
                "caption": "Figure 1:Overview of theunifiedtext-based CAD prototyping task, which includes the Text-to-CAD generation and text-based CAD Editing. Our approach introduces a CAD-specific tokenization method that produces primitive-level tokens instead word pieces. This paradigm allows LLMs to capture relationships among CAD primitives more effectively, improves compression and performance.",
                "position": 117
            }
        ]
    },
    {
        "header": "2Related Works",
        "images": []
    },
    {
        "header": "3Methodology",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21150/x2.png",
                "caption": "Figure 2:Overview of the CAD-Tokenizer framework. (1) A primitive-based VQ-VAE tokenizes CAD sequences into discrete primitive tokens. (2) Adapter modules align these tokens with the LLM embedding space. (3) The backbone LLM is fine-tuned using CAD-specific tokens. (4) At inference, an FSA-guided sampling strategy ensures syntactically valid CAD generation.",
                "position": 222
            }
        ]
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21150/x3.png",
                "caption": "Table 2:The reconstruction quality of the CAD-Tokenizer variants andHNC-CAD.\nOnly the sketch scores are reported for theF1score because the CAD-Tokenizer encodes objects by sketch-extrusion pairs and always achieves full score for this sub-metric.CAD-Tokenizer(curve)is the default variant which we reported in the main quantitative results.",
                "position": 552
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x3.png",
                "caption": "Figure 3:The Compression ratio of the different tokenization algorithms. The compression ratio is 100% for no compression.",
                "position": 616
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x4.png",
                "caption": "Figure 4:Qualitative results. The upper and lower sections display results for the Text-to-CAD and CAD editing tasks, respectively. In each subfigure, the top-left corner shows the input instruction and CAD object (or only the instruction in Text-to-CAD), the top-right corner shows the ground truth, and the bottom three show outputs from CADFusion/CAD-Editor, Vanilla-LLaMA, and CAD-Tokenizer.",
                "position": 622
            }
        ]
    },
    {
        "header": "5Limitations",
        "images": []
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "Ethics Statement",
        "images": []
    },
    {
        "header": "Reproducibility Statement",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix AAdditional Information of the CAD Representation",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21150/x5.png",
                "caption": "Figure 5:An overview of the CAD sequence structure. Top: sketch components; bottom: extrusion components.",
                "position": 1283
            }
        ]
    },
    {
        "header": "Appendix BImplementation Details",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21150/x6.png",
                "caption": "Figure 6:A detailed overview of the VQ-VAE pretraining and finetuning.",
                "position": 1402
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x7.png",
                "caption": "Figure 7:An overview of our primitive pooling procedure for each sequence.",
                "position": 1405
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x8.png",
                "caption": "Figure 8:An overview of our FSA design. At each step, the FSA receives an input action, transitions to the corresponding new state (i.e., updates its internal state), and returns the mask(s) associated with that new state (node).",
                "position": 1530
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x9.png",
                "caption": "Figure 9:Additional qualitative results for CAD editing.",
                "position": 1726
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x10.png",
                "caption": "Figure 10:Additional qualitative results for Text-to-CAD generation.",
                "position": 1729
            },
            {
                "img": "https://arxiv.org/html/2509.21150/x11.png",
                "caption": "Figure 11:An overview of our modelâ€™s failure cases. The layout follows that of Figures9and10.",
                "position": 1763
            }
        ]
    },
    {
        "header": "Appendix CExperimental Results",
        "images": []
    }
]