[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.15682/extracted/6549653/plots/teaser_simpler.png",
                "caption": "Figure 1:We conceptualize diffusion caching as a Pareto optimization problem over image quality and inference time and propose ECAD to discover such Pareto frontiers using a genetic algorithm.Left: performance progression over generations for FLUX-1.dev.Right: example1024√ó1024102410241024{\\times}10241024 √ó 1024results with corresponding speedups.",
                "position": 97
            }
        ]
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Methods",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.15682/x1.png",
                "caption": "Figure 2:In the context of a transformer-based diffusion model, we describe how the transformer architecture allows for caching of attention and feedforward results separately(left). We then give a toy illustration of how our method might transition from one generation to the next, prioritizing mating for schedules with the best quality-speed trade-offs(right).",
                "position": 176
            }
        ]
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.15682/x2.png",
                "caption": "Figure 3:PartiPrompt Image Reward vs.¬†latencyfor PixArt-Œ±ùõº\\alphaitalic_Œ±(left) and FLUX.1-dev (right).",
                "position": 335
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x3.png",
                "caption": "",
                "position": 338
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x4.png",
                "caption": "Figure 4:Qualitative resultscomparing our ‚Äúfast‚Äù schedule for PixArt-Œ±ùõº\\alphaitalic_Œ±256√ó256256256256{\\times}256256 √ó 256with ToCa. ‚Äú‚Ä¶‚Äù represent omitted text, see AppendixA.10for full prompts for the first and fifth columns.",
                "position": 744
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x5.png",
                "caption": "Figure 5:Figure that shows our ‚Äúfast‚Äù schedule for PixArt-Œ±ùõº\\alphaitalic_Œ±(left) and FLUX-1.dev (right). Reds are cached components and grays are recomputed (for PixArt-Œ±ùõº\\alphaitalic_Œ±, from left to right: self-attention, cross-attention, and feedforward). See AppendixA.9for more details.",
                "position": 754
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x6.png",
                "caption": "",
                "position": 757
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x7.png",
                "caption": "Figure 6:ECAD evolution.ECAD iteratively improves quality/time trade-offs as it evolves across generations as measured by Image Reward (PixArt-Œ±ùõº\\alphaitalic_Œ±256√ó256256256256{\\times}256256 √ó 256).",
                "position": 1069
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x7.png",
                "caption": "Figure 6:ECAD evolution.ECAD iteratively improves quality/time trade-offs as it evolves across generations as measured by Image Reward (PixArt-Œ±ùõº\\alphaitalic_Œ±256√ó256256256256{\\times}256256 √ó 256).",
                "position": 1072
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x8.png",
                "caption": "Figure 7:Faster ECAD optimization strategies.We compare ‚ÄúFull‚Äù ECAD to smaller population size, fewer images per prompt, and fewer prompts (PixArt-Œ±ùõº\\alphaitalic_Œ±256√ó256256256256{\\times}256256 √ó 256).",
                "position": 1077
            }
        ]
    },
    {
        "header": "5Discussion",
        "images": []
    },
    {
        "header": "Acknowledgments and Disclosure of Funding",
        "images": []
    },
    {
        "header": "References",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.15682/x9.png",
                "caption": "Figure 8:Pareto frontiers of Image Reward vs. computational cost for the handcrafted schedules described in SectionA.4, evaluated on the Image Reward Benchmark. Notably, caching a single component (e.g., cross-attention or feedforward) offers slight gains over baseline. Among all heuristics, FORA achieves the best trade-off, with slightly lower quality but superior efficiency.",
                "position": 2017
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x10.png",
                "caption": "Figure 9:Progress of ECAD optimization as measured by Image Reward and TMACs.Left: PixArt-Œ£Œ£\\Sigmaroman_Œ£optimized for 50 generations, initialized using 200 generations of PixArt-Œ±ùõº\\alphaitalic_Œ±optimization.Right: FLUX-1.dev optimized for 250 generations, initialized using basic heuristics.",
                "position": 2302
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x11.png",
                "caption": "",
                "position": 2305
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x12.png",
                "caption": "Figure 10:PartiPrompt Image Reward vs. latencyfor PixArt-Œ£Œ£\\Sigmaroman_Œ£. Note that ToCa is not optimized for PixArt-Œ£Œ£\\Sigmaroman_Œ£and its parameters are transferred from PixArt-Œ±ùõº\\alphaitalic_Œ±. Our method achieves Pareto dominance with a significant margin, but does not reach baseline performance.",
                "position": 2309
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x13.png",
                "caption": "Figure 11:ECAD optimization progress and final Pareto frontier using a reduced population size of 24 (compared to the default of 72), with 100 prompts and 10 images per prompt. The resulting frontiers are noisier and exhibit slower convergence.",
                "position": 2376
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x14.png",
                "caption": "Figure 12:ECAD optimization progress and final Pareto frontier using only 3 images per prompt (default is 10), with 100 prompts and a population size of 72. This configuration demonstrates stable convergence and achieves stronger overall performance.",
                "position": 2388
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x15.png",
                "caption": "Figure 13:ECAD optimization progress and final Pareto frontier using only 33 prompts (a random subset of the default 100), with 10 images per prompt and population size 72. Although convergence is relatively smooth, the final frontier is constrained by the reduced prompt diversity.",
                "position": 2486
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x16.png",
                "caption": "Figure 14:Illustrative example of per-generation and overall Pareto frontiers in ECAD. Points represent candidate schedules, with lines interpolated between them for visualization. Half-colored points lie on both the generational and overall frontiers. In this example, the frontier from generationGùê∫Gitalic_Gappears to exceed the overall frontier, highlighting interpolation ‚Äòartifacts‚Äô that can occur between discrete candidate solutions.",
                "position": 2489
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x17.png",
                "caption": "Figure 15:ECAD calibration prompt set ablation.We show performance change when using the DrawBench200 prompts benchmark set for calibration instead of the Image Reward set. Performance is measured in Image Reward (IR) on the both calibration prompts, unseen PartiPrompts, and MJHQ-30K FID and CLIP. Latency is provided as well. The schedule with the most TMACs that lies on the Pareto frontier across all 100 generations is used in each instance.",
                "position": 2492
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x18.png",
                "caption": "Figure 16:ECAD schedules for PixArt-Œ±ùõº\\alphaitalic_Œ±from Table1: ‚Äúfaster‚Äù (left) and ‚Äúfastest‚Äù (right). Despite being separate schedules with no guarantee of relation, the ‚Äúfaster‚Äù schedule has near identical structure to ‚Äúfast‚Äù, with more caching along steps 6 and 16. Furthermore, it appears cross-attention matters less than self-attention and the feedforward network during steps 16 and 17 and can safely be cached.",
                "position": 2564
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x19.png",
                "caption": "",
                "position": 2567
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x20.png",
                "caption": "Figure 17:ECAD schedule for PixArt-Œ£Œ£\\Sigmaroman_Œ£‚Äúfast‚Äù from Table1. Initial DiT blocks in steps 6, 9, and 12 are more important to recompute than the final blocks. Cross-attention has less of an impact than the other components in the final three steps, with it as the only component cached in step 17.",
                "position": 2571
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x21.png",
                "caption": "Figure 18:ECAD schedules ‚Äúslow‚Äù (left) and ‚Äúfastest‚Äù (right) for FLUX-1.dev from Table4and Table1respectively. Despite being almost 200 generations apart, both schedules share similar structures for the first 5 steps, particularly at step 2 for blocks 9 through 12.",
                "position": 2574
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x22.png",
                "caption": "",
                "position": 2578
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x23.png",
                "caption": "Figure 19:Highest-TMACs schedules from generation 50 (left), 200 (center), and 400 (right) during PixArt-Œ±ùõº\\alphaitalic_Œ±ECAD optimization. While steps between 8 and 15 remain somewhat similar in structure, early and late steps change more.",
                "position": 2583
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x24.png",
                "caption": "",
                "position": 2587
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x25.png",
                "caption": "",
                "position": 2589
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x26.png",
                "caption": "Figure 20:Highest-TMACs schedules after 100 generations for PixArt-Œ±ùõº\\alphaitalic_Œ±under different hyperparameter ablations: (top-left) reduced population size; (top-right) fewer images per prompt; (bottom-left) fewer prompts; (bottom-right) baseline configuration. All configurations realize the cacheability of cross attention for steps where other components cannot safely be cached.",
                "position": 2593
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x27.png",
                "caption": "",
                "position": 2598
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x28.png",
                "caption": "",
                "position": 2601
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x29.png",
                "caption": "",
                "position": 2602
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x30.png",
                "caption": "Figure 21:FLUX-1.dev256√ó256256256256{\\times}256256 √ó 256qualitative comparisons.Displayed left-to-right are generations from the uncached baseline, ToCa (ùí©=5,‚Ñõ=90%formulae-sequenceùí©5‚Ñõpercent90\\mathcal{N}=5,\\mathcal{R}=90\\%caligraphic_N = 5 , caligraphic_R = 90 %; 1.75x speedup), and our ‚Äúfast‚Äù ECAD schedule (Table1; 1.97x speedup). ECAD consistently yields sharper images with improved prompt adherence.",
                "position": 2608
            },
            {
                "img": "https://arxiv.org/html/2506.15682/x31.png",
                "caption": "Figure 22:FLUX-1.dev1024√ó1024102410241024{\\times}10241024 √ó 1024qualitative comparisons.Outputs, top-to-bottom, are ToCa (ùí©=4,‚Ñõ=90%formulae-sequenceùí©4‚Ñõpercent90\\mathcal{N}=4,\\mathcal{R}=90\\%caligraphic_N = 4 , caligraphic_R = 90 %; 2.47x speedup), and our ‚Äúfast‚Äù ECAD schedule (as shown in Table4; 2.63x speedup). Our method yields greater visual complexity with stronger prompt-alignment, despite higher acceleration.",
                "position": 2611
            }
        ]
    },
    {
        "header": "Appendix AAppendix",
        "images": []
    }
]