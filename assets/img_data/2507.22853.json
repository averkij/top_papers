[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "IIntroduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2507.22853/x1.png",
                "caption": "Figure 1:This is a real-world example of bug fixing related to email format validation. To fix the bug, the APR model possibly generates four types of test cases. The first test case passes both the buggy code and the correct code, and thus does not have the ability to expose the bug. The second test case fails in both the buggy and correct code, making it completely incorrect and having no reference value. The third test case passes the buggy code but fails in the correct one — which is exactly the opposite of what is expected. The fourth test case passes the correct code but fails in the buggy code, precisely covering the scenario where the bug is triggered. For the purpose of repair, the fourth type of test case has the capability to distinguish between buggy and correct code, and can help the model understand the bug, thereby improving the success rate of the repair. We expect that during the repair process, the model will generate as many of the fourth-type test cases as possible. To this end, we train the model using RL to jointly optimize test generation and bug repair capabilities. Figures (a)-(d) reflect the simultaneous improvement in test generation and bug repair performance during the model’s (use Qwen2.5-Coder-1.5B-Instruct as an example) training and testing phases.",
                "position": 91
            }
        ]
    },
    {
        "header": "IIBackground and Related Works",
        "images": []
    },
    {
        "header": "IIIApproach",
        "images": [
            {
                "img": "https://arxiv.org/html/2507.22853/x2.png",
                "caption": "Figure 2:The Optimization Process of Repair-R1",
                "position": 150
            },
            {
                "img": "https://arxiv.org/html/2507.22853/x3.png",
                "caption": "Figure 3:The prompt used for optimizing Repair-R1.",
                "position": 156
            }
        ]
    },
    {
        "header": "IVExperimental Setup",
        "images": []
    },
    {
        "header": "VExperiment Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2507.22853/x4.png",
                "caption": "Figure 4:A comparison of test generation and repair correlation before and after RL",
                "position": 681
            },
            {
                "img": "https://arxiv.org/html/2507.22853/x5.png",
                "caption": "(a)",
                "position": 748
            },
            {
                "img": "https://arxiv.org/html/2507.22853/x5.png",
                "caption": "(a)",
                "position": 751
            },
            {
                "img": "https://arxiv.org/html/2507.22853/x6.png",
                "caption": "(b)",
                "position": 757
            },
            {
                "img": "https://arxiv.org/html/2507.22853/x7.png",
                "caption": "(c)",
                "position": 763
            },
            {
                "img": "https://arxiv.org/html/2507.22853/x8.png",
                "caption": "(d)",
                "position": 769
            }
        ]
    },
    {
        "header": "VIConclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    }
]