[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Related Work",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/x1.png",
                "caption": "Figure 1:The ZeroRepo pipeline for repository generation.\n(A) Proposal-level construction translates specifications into a functionality graph.\n(B) Implementation-level construction refines it via (B1) file-structure encoding into a file-augmented graph and (B2) data-flow/function encoding into the final Repository Planning Graph (RPG).\n(C) Graph-guided code generation traverses RPG in topological order to produce a stable repository.",
                "position": 314
            }
        ]
    },
    {
        "header": "3Repository Planning Graph Construction",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/x2.png",
                "caption": "Figure 2:Example of a Repository Planning Graph. Solid black lines show hierarchical containment, black arrows depict inter-module data flows (A→\\toB), and dashed gray arrows represent intra-module file ordering.",
                "position": 331
            }
        ]
    },
    {
        "header": "4Graph-Guided Code Generation",
        "images": []
    },
    {
        "header": "5Experiment Setup",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/x3.png",
                "caption": "Figure 3:Pipeline for Evaluation Task Collection. It comprises test file filtering, hierarchical parsing into test trees, sampling and filtering, and final task generation.",
                "position": 555
            }
        ]
    },
    {
        "header": "6Main Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/x4.png",
                "caption": "Figure 4:Illustration of dependencies in the repository generated by Qwen3-Coder onMLKit-Py, showing (1) the repository skeleton at the folder/file level, (2) inter-module data flows, and (3) class and function dependencies.",
                "position": 758
            }
        ]
    },
    {
        "header": "7Analysis",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/figs/leaf_count.png",
                "caption": "Figure 5:Feature comparison of ZeroRepo (o3-mini) against strong baselines (Codex, Gemini CLI, Claude Code) across iterations.",
                "position": 791
            },
            {
                "img": "https://arxiv.org/html/2509.16198/figs/line_ablation.png",
                "caption": "Figure 6:Scaling behavior of total lines of code across iteration steps on MLKit-Py",
                "position": 799
            }
        ]
    },
    {
        "header": "8Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix AAppendix of Proposal-Level Graph Construction",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/figs/global_distribution.png",
                "caption": "Figure 7:Distribution of feature counts under Level-1 categories in the global feature tree.",
                "position": 1945
            },
            {
                "img": "https://arxiv.org/html/2509.16198/figs/multi_repo_leaf_count_grid.png",
                "caption": "Figure 8:Evolution of Feature Tree Leaf Counts over Iterations Across Repositories, Highlighting the Differences Between qwen3 coder and o3-mini",
                "position": 1953
            },
            {
                "img": "https://arxiv.org/html/2509.16198/appendix/figures/all_repos_feature_distribution-o3-mini.png",
                "caption": "Figure 9:Final distribution of feature counts across subtrees for all repositories undero3-mini. The figure shows how features are reorganized after the iterative construction process, reflecting the model’s preference in balancing breadth and precision.",
                "position": 1956
            },
            {
                "img": "https://arxiv.org/html/2509.16198/appendix/figures/all_repos_feature_distribution-qwen3-coder.png",
                "caption": "Figure 10:Final distribution of feature counts across subtrees for all repositories underqwen3-coder. The figure shows how features are reorganized after the iterative construction process, reflecting the model’s preference in balancing breadth and precision.",
                "position": 1965
            },
            {
                "img": "https://arxiv.org/html/2509.16198/appendix/figures/all_repos_graph_distribution-o3-mini.png",
                "caption": "(a)o3-mini",
                "position": 1974
            },
            {
                "img": "https://arxiv.org/html/2509.16198/appendix/figures/all_repos_graph_distribution-o3-mini.png",
                "caption": "(a)o3-mini",
                "position": 1977
            },
            {
                "img": "https://arxiv.org/html/2509.16198/appendix/figures/all_repos_graph_distribution-qwen3-coder.png",
                "caption": "(b)qwen3-coder",
                "position": 1983
            }
        ]
    },
    {
        "header": "Appendix BAppendix of Implementation-Level Graph Construction",
        "images": []
    },
    {
        "header": "Appendix CAppendix of Graph-Guided Repository Generation",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/appendix/figures/coverage.png",
                "caption": "Figure 12:Test coverage ofo3-minionMLKit-Pyduring generation.\nThe figure shows how the coverage of generated test functions varies as code length increases.",
                "position": 4793
            }
        ]
    },
    {
        "header": "Appendix DDetails about RepoCraft Benchmark",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.16198/figs/loc_actions_all_repos.png",
                "caption": "Figure 13:Aggregated function call frequency distribution across localization steps in all repositories using o3-mini.",
                "position": 6734
            }
        ]
    },
    {
        "header": "Appendix EExperiment Results",
        "images": []
    }
]