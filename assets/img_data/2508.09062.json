[
    {
        "header": "Abstract",
        "images": [
            {
                "img": "https://arxiv.org/html/2508.09062/x1.png",
                "caption": "",
                "position": 101
            }
        ]
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Method",
        "images": [
            {
                "img": "https://arxiv.org/html/2508.09062/x2.png",
                "caption": "Figure 2:Illustration of edge collapse and its inverse operation,i.e. vertex split. During edge collapse, vertexvtv_{t}is collapsed intovsv_{s}, resulting in two degenerate triangles (shaded in yellow), which forms two new edges in the result mesh.",
                "position": 190
            },
            {
                "img": "https://arxiv.org/html/2508.09062/x3.png",
                "caption": "Figure 3:Face count distribution of the coarsest meshℳ0\\mathcal{M}_{0}and original meshℳ\\mathcal{M}. The coarsest meshes (ℳ0\\mathcal{M}_{0}) contain significantly fewer faces than original (ℳ\\mathcal{M}), with an average of 18 and 457 faces, respectively.",
                "position": 285
            },
            {
                "img": "https://arxiv.org/html/2508.09062/x4.png",
                "caption": "Figure 4:Illustration of half-edge data structure and the traversal process to determine the neighbors ofvsv_{s}andvtv_{t}inℳk+1\\mathcal{M}_{k+1}. Starting from half-edgeℋl​s1\\mathcal{H}_{ls}^{1}, we traverse the faces in clockwise direction untilℋs​r2\\mathcal{H}_{sr}^{2}, where we collect the verticesv1v_{1}andv2v_{2}intoNk+1​(vs)N_{k+1}(v_{s}).",
                "position": 329
            },
            {
                "img": "https://arxiv.org/html/2508.09062/x5.png",
                "caption": "Figure 5:Illustration of VertexRegen tokenization. The sequence begins with base meshℳ0\\mathcal{M}_{0}, followed by vertex split subsequences. A special<nil>token indicates eithervlv_{l}orvrv_{r}does not exist.",
                "position": 332
            },
            {
                "img": "https://arxiv.org/html/2508.09062/x6.png",
                "caption": "Figure 6:Generation process for VertexRegen.ℳ0\\mathcal{M}_{0}represents the predicted initial coarsest mesh, followed by subsequent meshes generated through the predicted vertex split sequence.",
                "position": 341
            },
            {
                "img": "https://arxiv.org/html/2508.09062/x7.png",
                "caption": "Figure 7:Unconditional generation under face count constraints. VertexRegen achieves significantly better COV, MMD, and 1-NNA in early stages of generation.",
                "position": 441
            }
        ]
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2508.09062/x8.png",
                "caption": "Figure 8:Qualitative comparison with state-of-the-art methods. VertexRegen is able to generate meshes with comparable quality to other baselines.",
                "position": 466
            },
            {
                "img": "https://arxiv.org/html/2508.09062/x9.png",
                "caption": "Figure 9:Qualitative results on shape-conditioned generation on meshes held out from training. The first column shows the point cloud used as the condition, followed by the generation sequence progressing from the coarsest meshℳ0\\mathcal{M}_{0}to the final output in the last column.",
                "position": 469
            }
        ]
    },
    {
        "header": "5Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    }
]