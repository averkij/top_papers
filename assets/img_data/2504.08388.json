[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Framework",
        "images": [
            {
                "img": "https://arxiv.org/html/2504.08388/x1.png",
                "caption": "Figure 1:Illustrations of MineWorld model architecture. Visual and action tokenizers convert game states and actions into discrete tokens, which are concatenated and fed into a Transformer decoder as the input. The Transformer is then trained with an autoregressive objective.",
                "position": 166
            },
            {
                "img": "https://arxiv.org/html/2504.08388/x2.png",
                "caption": "Figure 2:An illustration of two decoding algorithms. The game state is encoded into12121212tokens. The number in each token represents that in which decoding iteration it is generated. (a) Autoregressive decoding, which follows a raster scanned order and generates each token sequentially. (b) Our proposed parallel decoding. For each generated token, the tokens in the adjacent rows and columns will be generated simutaneously in the next iteration.",
                "position": 254
            }
        ]
    },
    {
        "header": "3Evaluation",
        "images": []
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2504.08388/x3.png",
                "caption": "Figure 3:Case study on MineWorld700700700700M model. The first game state and actions in following steps are provided as input, based on which the model generates consequent game states. For more cases and videos, please visit our project page.",
                "position": 571
            },
            {
                "img": "https://arxiv.org/html/2504.08388/x4.png",
                "caption": "Figure 4:Case study on the controllability of MineWorld. Providing the same initial game state and different actions, the model generates different results correspondingly.",
                "position": 590
            },
            {
                "img": "https://arxiv.org/html/2504.08388/x5.png",
                "caption": "Figure 5:Case study on MineWorld as a gaming playing agent. By providing several initial game states and actionsÂ (splited by the dashed line), MineWorld continues to play the game by itself through generating future game states and actions in an iterative manner.",
                "position": 599
            }
        ]
    },
    {
        "header": "5Conclusion and Limitations",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix AMinecraft Action Space",
        "images": []
    },
    {
        "header": "Appendix BModel Configurations",
        "images": []
    },
    {
        "header": "Appendix CMore Results",
        "images": []
    }
]