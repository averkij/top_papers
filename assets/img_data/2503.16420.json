[
    {
        "header": "Abstract",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/teaser.png",
                "caption": "",
                "position": 142
            }
        ]
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.16420/x1.png",
                "caption": "Figure 2:Overview of SynCity.2D prompting: To generate a new tile, we first render a view of where that tile should be placed, including context from neighbouring tiles.\n3D prompting: We extract the new tile image and construct an image prompt for TRELLIS by adding a wider base under the tile.\n3D blending: The 3D model that TRELLIS outputs is usually not well blended with the rest of the scene.\nTo address that, we render a view of the new tile next to each neighbouring tile, and inpaint the region between the two with an image inpainting model.\nNext, we condition using that well-blended view to refine the region between the two 3D tiles.\nFinally, the new, blended, tile is added to the world.",
                "position": 190
            }
        ]
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Method",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.16420/x2.png",
                "caption": "Figure 3:Left:Progressive generation of world tilesùíØùíØ\\mathcal{T}caligraphic_T.Right:Isometric framing of a tile for image-based prompting.",
                "position": 280
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x3.png",
                "caption": "Figure 4:Left:Generation of the 2D image prompt for the first world tile atx=0ùë•0x=0italic_x = 0andy=0ùë¶0y=0italic_y = 0.\nThe image generatorŒ¶2DsubscriptŒ¶2D\\Phi_{\\text{2D}}roman_Œ¶ start_POSTSUBSCRIPT 2D end_POSTSUBSCRIPTis conditioned onq=p00‚ãÖp‚ãÜùëû‚ãÖsubscriptùëù00subscriptùëù‚ãÜq=p_{00}\\cdot p_{\\star}italic_q = italic_p start_POSTSUBSCRIPT 00 end_POSTSUBSCRIPT ‚ãÖ italic_p start_POSTSUBSCRIPT ‚ãÜ end_POSTSUBSCRIPTand tasked with inpainting the base imageBùêµBitalic_Bin the masked regionMùëÄMitalic_M.Right:If we do not ‚Äòframe‚Äô the image by usingBùêµBitalic_BandMùëÄMitalic_M, the generator produces an image which is not suitable for tiling.",
                "position": 338
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x4.jpg",
                "caption": "Figure 5:Left:Base imageBùêµBitalic_Band inpainting maskMùëÄMitalic_M(white overlay) to prompt the image generatorŒ¶2DsubscriptŒ¶2D\\Phi_{\\text{2D}}roman_Œ¶ start_POSTSUBSCRIPT 2D end_POSTSUBSCRIPTto generate an image for ax>0ùë•0x>0italic_x > 0,y>0ùë¶0y>0italic_y > 0world tile.Right:Result of inpainting.",
                "position": 355
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x5.png",
                "caption": "Figure 6:Trimming tall structures for 2D prompting.",
                "position": 366
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x6.png",
                "caption": "Figure 7:Left:Isolating the image of the new tile fromI‚Å¢(x,y)ùêºùë•ùë¶I(x,y)italic_I ( italic_x , italic_y ).Right:Placing a slightly larger base underneath.",
                "position": 393
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x7.png",
                "caption": "Figure 8:Top:3D reconstruction using a tight base.Bottom:the same, but with a slightly larger base, which helps to contain the tile‚Äôs geometry above ground (see the back of the reconstruction), and creates an easy-to-detect 3D base.",
                "position": 408
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x8.png",
                "caption": "Figure 9:Upsampling sparse latents.We need to resize or upsample sparse latents in order to stitch them. Due to the sparsity of the latents and the behaviour of the latent decoder, naively resampling in latent space leads to artifacts. Our proposed resizing of the sparse latents better preserves textures and fine structures.",
                "position": 492
            }
        ]
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.16420/x9.png",
                "caption": "Figure 10:Left:2√ó\\times√ó2 grid generated with our method, where context is taken into account as described inSec.3.2Right:Generated with our method using the same prompts, butnottaking into account context ‚Äî here, the scale of the buildings is not consistent.",
                "position": 544
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/explore.jpg",
                "caption": "Figure 11:Exploring a 3D world.We show trajectories exploring the 3D worlds we generate. Please see the supplement for videos.",
                "position": 547
            },
            {
                "img": "https://arxiv.org/html/2503.16420/x10.png",
                "caption": "Figure 12:Left:Tiles before applying the 3D blending stepRight:After the 3D blending step. We see that where boundaries between tiles were obvious, they are now well-blended.",
                "position": 683
            }
        ]
    },
    {
        "header": "5Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/3d-verification.jpg",
                "caption": "Figure 14:Tile geometry validation.To check the geometric qualities of a reconstructed tile, we look at the occupancy gridV‚àà{0,1}R√óR√óRùëâsuperscript01ùëÖùëÖùëÖV\\in\\{0,1\\}^{R\\times R\\times R}italic_V ‚àà { 0 , 1 } start_POSTSUPERSCRIPT italic_R √ó italic_R √ó italic_R end_POSTSUPERSCRIPTgenerated by TRELLIS.\nActivated voxels are indicated in orange (‚ñ†‚ñ†\\blacksquare‚ñ†).Left:The extent of an object in an object at heightwùë§witalic_w(slice visualized in 2D).Right:An example of a 3D tile base templateVBsubscriptùëâùêµV_{B}italic_V start_POSTSUBSCRIPT italic_B end_POSTSUBSCRIPT.",
                "position": 1693
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/city-prompting-naive.jpg",
                "caption": "Figure 15:Non-iterative city building.We obtain conditioning images generated by Flux (left) and directly use them to build a large-scale scene with TRELLIS (center). While the generated 3D structures are visually appealing, the level of detail (right) is very limited. The first row used generic prompting for the conditioning image (‚Äúa city scene on top of a base‚Äù), whereas the second row uses a more involved prompt with an explicit layout (e.g., ‚Äúa house in the bottom left corner‚Äù, ‚Äúa pharmacy in the top right corner‚Äù).",
                "position": 1812
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/city-prompting-based.jpg",
                "caption": "Figure 16:Non-iterative city building (with our 2D prompting).We obtain conditioning images generated by Flux (left) and directly use them to build a large-scale scene with TRELLIS (center). Despite the initial visual appeal, the structures lack in detail. The first row used generic prompting for the conditioning image (‚Äúa vibrant city scene‚Äù), whereas the second row uses a more involved prompt with an explicit layout (e.g., ‚Äúa house in the bottom left corner‚Äù, ‚Äúa pharmacy in the top right corner‚Äù).",
                "position": 1818
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/explore-app.jpg",
                "caption": "Figure 17:Exploring a 3D world.We show trajectories exploring the 3D worlds we generate. A sky box has been added for visual effect.",
                "position": 1835
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/scenes1.jpg",
                "caption": "Figure 18:Generated scenes.We show scenes generated with the same prompts, but different seeds in 2D inpainting.",
                "position": 1838
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/scenes2.jpg",
                "caption": "Figure 19:Generated scenes.",
                "position": 1841
            },
            {
                "img": "https://arxiv.org/html/2503.16420/extracted/6296608/images/scenes3.jpg",
                "caption": "Figure 20:Generated scenes.Our method can easily generate large scenes. Further, interesting patterns can be injected thanks to fine-grained control over each tile.Top:The scene transitions in season, from winter to spring to summer to autumn.Bottom:The scenery transitions from a city-like to a rural environment.",
                "position": 1844
            }
        ]
    },
    {
        "header": "Appendix AAppendix",
        "images": []
    }
]