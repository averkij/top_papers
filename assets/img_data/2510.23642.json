[
    {
        "header": "Abstract",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.23642/figure/icon.png",
                "caption": "",
                "position": 175
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x1.png",
                "caption": "Figure 1:Overview of VisCoder2. We present three components: 1)VisCode-Multi-679K:a dataset of 679K executable visualization code pairs with multi-round correction dialogues across 12 programming languages; 2)VisPlotBench: spanning 8 languages with natural language instructions, executable code, and rendered outputs; 3)VisCoder2: a family of visualization coding agents that iteratively execute, render, and self-debug, approaching the performance of proprietary models.",
                "position": 207
            }
        ]
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3VisCode-Multi-679K: An Instruction Tuning Dataset for Visualization Across Twelve Programming Languages",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.23642/x2.png",
                "caption": "Figure 2:Data construction pipeline for VisCode-Multi-679K. We collect code blocks across twelve programming languages from open-source repositories, including large-scale code corpora, synthetic visualization datasets, and domain-specific diagram collections. We validate executability and render outputs through Jupyter-based runtime checks, yielding instructions paired with images. We integrate multi-turn dialogues fromCode-Feedbackto provide iterative correction supervision.",
                "position": 258
            }
        ]
    },
    {
        "header": "4VisPlotBench: Multi-Language Benchmark for Visualization Coding Agents",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.23642/x3.png",
                "caption": "Figure 3:Overview of VisPlotBench. The benchmark covers eight visualization languages and contains 888 diverse visualization tasks, each combining a natural language instruction and a rendered visual. Tasks are annotated with a Visual category and a Subtype, spanning 13 categories in total.",
                "position": 445
            }
        ]
    },
    {
        "header": "5Experiment Setup",
        "images": []
    },
    {
        "header": "6Main Results",
        "images": []
    },
    {
        "header": "7Conclusion",
        "images": []
    },
    {
        "header": "Limitation",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix APrompt Used and Instruct Design",
        "images": []
    },
    {
        "header": "Appendix BTaxonomy of Visual Categories and Subtypes",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.23642/x4.png",
                "caption": "Figure 4:Distribution of fine-grained visualization types in VisPlotBench. Tasks are organized into 13 Visual categories and 116 Subtypes, ensuring broad coverage of both common and underexplored visualization families.[Back to Appendix Contents]",
                "position": 2555
            }
        ]
    },
    {
        "header": "Appendix CBreakdown Main Results",
        "images": []
    },
    {
        "header": "Appendix DBreakdown Self-Debug Results",
        "images": []
    },
    {
        "header": "Appendix EBreakdown Error Type Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2510.23642/x5.png",
                "caption": "Figure 5:Example of a successful generation inPython(ID: 1). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6417
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x6.png",
                "caption": "Figure 6:Example of a failed generation inPython(ID: 69), where the initial code raises aValueErrorand is resolved in thefirstround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6428
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x7.png",
                "caption": "Figure 7:Example of a failed generation inPython(ID: 115), where the initial code raises aAttributeErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6439
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x8.png",
                "caption": "Figure 8:Example of a successful generation inVega-Lite(ID: 18). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6450
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x9.png",
                "caption": "Figure 9:Example of a failed generation inVega-Lite(ID: 14), where the initial code raises aTypeErrorand is resolved in thesecondround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6461
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x10.png",
                "caption": "Figure 10:Example of a failed generation inVega-Lite(ID: 50), where the initial code raises aTypeErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6472
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x11.png",
                "caption": "Figure 11:Example of a successful generation inLilypond(ID: 15). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6483
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x12.png",
                "caption": "Figure 12:Example of a failed generation inLilypond(ID: 13), where the initial code raises aSyntaxErrorand is resolved in thefirstround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6494
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x13.png",
                "caption": "Figure 13:Example of a failed generation inLilypond(ID: 48), where the initial code raises aTypeErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6505
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x14.png",
                "caption": "Figure 14:Example of a successful generation inMermaid(ID: 19). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6516
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x15.png",
                "caption": "Figure 15:Example of a failed generation inMermaid(ID: 88), where the initial code raises aSyntaxErrorand is resolved in thesecondround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6527
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x16.png",
                "caption": "Figure 16:Example of a failed generation inMermaid(ID: 80), where the initial code raises aAttributeErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6538
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x17.png",
                "caption": "Figure 17:Example of a successful generation inSVG(ID: 52). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6549
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x18.png",
                "caption": "Figure 18:Example of a failed generation inSVG(ID: 42), where the initial code raises aExPatErrorand is resolved in thefirstround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6560
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x19.png",
                "caption": "Figure 19:Example of a failed generation inSVG(ID: 12), where the initial code raises aParseErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6571
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x20.png",
                "caption": "Figure 20:Example of a successful generation inLaTeX(ID: 33). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6582
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x21.png",
                "caption": "Figure 21:Example of a failed generation inLaTeX(ID: 37), where the initial code raises aNameErrorand is resolved in thesecondround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6593
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x22.png",
                "caption": "Figure 22:Example of a failed generation inLaTeX(ID: 97), where the initial code raises aNameErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6604
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x23.png",
                "caption": "Figure 23:Example of a successful generation inAsymptote(ID: 31). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6615
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x24.png",
                "caption": "Figure 24:Example of a failed generation inAsymptote(ID: 53), where the initial code raises aNameErrorand is resolved in thethirdround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6626
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x25.png",
                "caption": "Figure 25:Example of a failed generation inAsymptote(ID: 79), where the initial code raises aTypeErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6637
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x26.png",
                "caption": "Figure 26:Example of a successful generation inHTML(ID: 6). The model generates code that executes successfully and produces a plot consistent with the ground truth.[Back to Appendix Contents]",
                "position": 6648
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x27.png",
                "caption": "Figure 27:Example of a failed generation inHTML(ID: 9), where the initial code raises aImportErrorand is resolved in thefirstround of self-debug, resulting in a corrected plot that matches the intended semantics.[Back to Appendix Contents]",
                "position": 6659
            },
            {
                "img": "https://arxiv.org/html/2510.23642/x28.png",
                "caption": "Figure 28:Example of a failed generation inHTML(ID: 85), where the initial code raises aTypeErrorand is still failed after three rounds self-debug.[Back to Appendix Contents]",
                "position": 6670
            }
        ]
    },
    {
        "header": "Appendix FCase Study",
        "images": []
    }
]