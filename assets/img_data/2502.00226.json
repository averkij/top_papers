[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2HackerRank-ASTRA",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure1.png",
                "caption": "Figure 1:Distribution of v1 HackerRank-ASTRA benchmark main skill frequency.",
                "position": 133
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure2.png",
                "caption": "Figure 2:Distribution of v1 HackerRank-ASTRA benchmark sub-skill frequency.",
                "position": 136
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure3.png",
                "caption": "Figure 3:Project structure of a sample RESTful API problem.",
                "position": 283
            }
        ]
    },
    {
        "header": "3Experiment Setup",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure4.png",
                "caption": "Figure 4:Diagram of v1 HackerRank-ASTRA benchmark evaluation pipeline.",
                "position": 304
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure5.png",
                "caption": "Figure 5:XML prompt of v1 HackerRank-ASTRA benchmark.",
                "position": 399
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure6.png",
                "caption": "Figure 6:JSON prompt of v1 HackerRank-ASTRA benchmark.",
                "position": 402
            }
        ]
    },
    {
        "header": "4Results",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure7.png",
                "caption": "Figure 7:Model performance comparison by main skill categories.",
                "position": 520
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure8.png",
                "caption": "Figure 8:Model performance comparison by sub-skill categories (1/3).",
                "position": 595
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure9.png",
                "caption": "Figure 9:Model performance comparison by sub-skill categories (2/3).",
                "position": 598
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure10.png",
                "caption": "Figure 10:Model performance comparison by sub-skill categories (3/3).",
                "position": 601
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure11.png",
                "caption": "Figure 11:Scatter Plot of Average Output vs Average Score vs Input Length.",
                "position": 725
            }
        ]
    },
    {
        "header": "5Related Work",
        "images": []
    },
    {
        "header": "6Conclusions",
        "images": []
    },
    {
        "header": "7Limitations and Future Work",
        "images": []
    },
    {
        "header": "8Acknowledgments",
        "images": []
    },
    {
        "header": "References",
        "images": [
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure12.png",
                "caption": "Figure 12:The routes defined by GPT-4o-0513 for handling products.",
                "position": 890
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure13.png",
                "caption": "Figure 13:The app.js provided by GPT-4o-0513.",
                "position": 893
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure14.png",
                "caption": "Figure 14:Fixes required in app.js.",
                "position": 896
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure15.png",
                "caption": "Figure 15:A form is expected to behave dynamically by providing real-time feedback to users through form validation.",
                "position": 909
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure16.png",
                "caption": "Figure 16:A useEffect hook should be used to re-evaluate the form’s validity whenever any error or input changes.",
                "position": 918
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure17.png",
                "caption": "Figure 17:Render error elements only when there is an actual error message.",
                "position": 921
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure18.png",
                "caption": "Figure 18:The handleChange function should update the error state dynamically based on user input to ensure the UI always reflects the correct validation status.",
                "position": 924
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure19.png",
                "caption": "Figure 19:Length Converter functionality.",
                "position": 934
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure20.png",
                "caption": "Figure 20:This binds the input1 field to the component’s input1 property. Any changes to the input field will trigger the onInput1() method for conversion.",
                "position": 940
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure21.png",
                "caption": "Figure 21:The conversion logic should ensure that the corresponding input field is updated whenever a change occurs.",
                "position": 943
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure22.png",
                "caption": "Figure 22:The ngOnInit() lifecycle hook initializes the component’s state. Initially, the input1 and input2 should be set to null, with the default units being Kilometer and Meter.",
                "position": 946
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure23.png",
                "caption": "Figure 23:Fix: Adding the current_user method to the AuthenticateUser concern to ensure that the method is available for use in the controller actions.",
                "position": 965
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure24.png",
                "caption": "Figure 24:Fix: Adding validations ensured that only valid job entries were created, improving data integrity.",
                "position": 968
            },
            {
                "img": "https://arxiv.org/html/2502.00226/extracted/6170069/figure25.png",
                "caption": "Figure 25:Fix: The response was updated to include details about the associated job and user, making it more comprehensive.",
                "position": 971
            }
        ]
    },
    {
        "header": "A Appendix",
        "images": []
    }
]