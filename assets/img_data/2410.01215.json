[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Related Work",
        "images": []
    },
    {
        "header": "3Methodology",
        "images": [
            {
                "img": "https://arxiv.org/html/2410.01215/x1.png",
                "caption": "Figure 1:Workflow of MGDebugger compared to existing methods. Existing methods debug the function holistically, making it difficult to pinpoint the bugs. To address this issue, MGDebugger decomposes the code into a hierarchical structure, isolating subfunctions for independent bottom-up debugging. In this way, MGDebugger can identify and fix bugs at multiple levels of granularity, from bottom-level syntax errors to high-level algorithmic flaws. For simplicity, we omit the exact code after decomposition here, and provide the full example in AppendixA.",
                "position": 181
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x2.png",
                "caption": "Figure 2:Illustration of the subfunction debugging process. Initially, the LLM generates test cases for the subfunction and collects the results. Subsequently, it simulates the code execution step-by-step, focusing on the change of key variables. This helps the LLM to pinpoint errors accurately and produce a corrected version of the subfunction.",
                "position": 207
            }
        ]
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2410.01215/x3.png",
                "caption": "Figure 3:Repair success rate of different methods when debugging code of different lengths on HumanEvalFix with DeepSeek-Coder.\nMGDebugger consistently outperforms other methods across different code lengths, especially in long codes.",
                "position": 1066
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x3.png",
                "caption": "Figure 3:Repair success rate of different methods when debugging code of different lengths on HumanEvalFix with DeepSeek-Coder.\nMGDebugger consistently outperforms other methods across different code lengths, especially in long codes.",
                "position": 1069
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x4.png",
                "caption": "Figure 4:Impact of the number of debugging attempts on the cumulative repair success rate of MGDebugger and other methods on HumanEvalFix with DeepSeek-Coder. MGDebugger continues to improve with more debug attempts and achieves the highest success rate.",
                "position": 1075
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x5.png",
                "caption": "Figure 5:Examples of code debugging by various methods on HumanEvalFix with DeepSeek-Coder. The three baseline methods fix the original bug but introduce new bugs that will miss the last “1” in the results. By contrast, MGDebugger successfully identifies and corrects the bug after decomposing the code into clear subfunctions for separate debugging.",
                "position": 1102
            }
        ]
    },
    {
        "header": "5Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix ADetailed Hierarchical Decomposition Example",
        "images": [
            {
                "img": "https://arxiv.org/html/2410.01215/x6.png",
                "caption": "Figure 6:Detailed illustration of the hierarchical decomposition process in MGDebugger. The original code is decomposed into multiple sub-functions, each representing a significant step or logical block. The relationships between sub-functions are naturally captured in the hierarchical structure based on the function calls.",
                "position": 2030
            }
        ]
    },
    {
        "header": "Appendix BHumanEvalFix Dataset",
        "images": []
    },
    {
        "header": "Appendix CImplementation Details",
        "images": []
    },
    {
        "header": "Appendix DDebugging code with varying lengths on HumanEval and MBPP",
        "images": [
            {
                "img": "https://arxiv.org/html/2410.01215/x7.png",
                "caption": "Figure 7:Repair success rate of different methods when debugging code of different lengths on HumanEval with DeepSeek-Coder. MGDebugger consistently performs the best across different code lengths.",
                "position": 2102
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x7.png",
                "caption": "Figure 7:Repair success rate of different methods when debugging code of different lengths on HumanEval with DeepSeek-Coder. MGDebugger consistently performs the best across different code lengths.",
                "position": 2105
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x8.png",
                "caption": "Figure 8:Repair success rate of different methods when debugging code of different lengths in MBPP with DeepSeek-Coder.\nMGDebugger consistently performs the best across different code lengths.",
                "position": 2110
            }
        ]
    },
    {
        "header": "Appendix EImpact of Debug Attempts on HumanEval and MBPP",
        "images": [
            {
                "img": "https://arxiv.org/html/2410.01215/x9.png",
                "caption": "Figure 9:Impact of debug attempts on the cumulative repair success rate of MGDebugger and other methods on HumanEval with DeepSeek-Coder. MGDebugger continues to improve with more debug attempts and outperforms other methods from the beginning to the end.",
                "position": 2124
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x9.png",
                "caption": "Figure 9:Impact of debug attempts on the cumulative repair success rate of MGDebugger and other methods on HumanEval with DeepSeek-Coder. MGDebugger continues to improve with more debug attempts and outperforms other methods from the beginning to the end.",
                "position": 2127
            },
            {
                "img": "https://arxiv.org/html/2410.01215/x10.png",
                "caption": "Figure 10:Impact of debug attempts on the cumulative repair success rate of MGDebugger and other methods on MBPP with DeepSeek-Coder. MGDebugger continues to improve with more debug attempts and outperforms other methods from the beginning to the end.",
                "position": 2132
            }
        ]
    },
    {
        "header": "Appendix FExamples",
        "images": []
    },
    {
        "header": "Appendix GPrompt Templates for MGDebugger",
        "images": []
    }
]