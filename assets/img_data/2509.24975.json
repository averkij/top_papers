[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": []
    },
    {
        "header": "2Background and Motivation",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.24975/x1.png",
                "caption": "Figure 1:Repetitive structural and syntactic patterns frequently emerge in unit test cases generated at an intermediate step of dLLM inference before remasking.",
                "position": 243
            }
        ]
    },
    {
        "header": "3DiffTester",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.24975/x2.png",
                "caption": "Figure 2:Overview of our proposedDiffTester.",
                "position": 282
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x3.png",
                "caption": "Figure 3:Extract shared nodes between two ASTs and locate their corresponding tokens in the generated code. Square boxes represent non-leaf nodes, while ellipses indicate leaf nodes. Thecolored tokensin the code at the top of the figure highlight the tokens that can be additionally retained according to the merged AST.",
                "position": 331
            }
        ]
    },
    {
        "header": "4Experiment",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.24975/x4.png",
                "caption": "Figure 4:Comparison of line coverage with and withoutDiffTesterat equal decoding time.",
                "position": 356
            }
        ]
    },
    {
        "header": "5Discussion",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.24975/x5.png",
                "caption": "Figure 5:Case study onDreamillustrating the decoding process with and withoutDiffTester.",
                "position": 783
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x6.png",
                "caption": "Figure 6:Distribution of the number of inference steps after applyingDiffTesteronDiffuCoder. The red dashed line indicates the original fixed step number without acceleration.",
                "position": 799
            }
        ]
    },
    {
        "header": "6Related Work",
        "images": []
    },
    {
        "header": "7Conclusion",
        "images": []
    },
    {
        "header": "8Reproducibility statement",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix ALLM Usage Statement",
        "images": []
    },
    {
        "header": "Appendix BEthics Statement",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.24975/x7.png",
                "caption": "Figure 7:Syntactic correctness of the code generated with different generation speed.",
                "position": 2130
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x8.png",
                "caption": "Figure 8:Coverage vs Time for different thresholds.",
                "position": 2146
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x9.png",
                "caption": "Figure 9:Number of Tokens Accelerated by Our Method for Every Step.",
                "position": 2159
            },
            {
                "img": "https://arxiv.org/html/2509.24975/",
                "caption": "Figure 10:Results of different step sizes.",
                "position": 2165
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x11.png",
                "caption": "Figure 11:Acceleration result of pad acceleration and pattern acceleration.",
                "position": 2178
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x12.png",
                "caption": "Figure 12:Examples of insignificant acceleration.",
                "position": 2287
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x13.png",
                "caption": "Figure 13:Another step-by-step comparison example of acceleration and non-acceleration.",
                "position": 2300
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x14.png",
                "caption": "Figure 14:Example of DiffuCoder on Python.",
                "position": 2306
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x15.png",
                "caption": "Figure 15:Example of DiffuCoder on Java.",
                "position": 2309
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x16.png",
                "caption": "Figure 16:Example of DiffuCoder on C++.",
                "position": 2312
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x17.png",
                "caption": "Figure 17:Example of Dream on Python.",
                "position": 2315
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x18.png",
                "caption": "Figure 18:Example of Dream on Java.",
                "position": 2318
            },
            {
                "img": "https://arxiv.org/html/2509.24975/x19.png",
                "caption": "Figure 19:Example of Dream on C++.",
                "position": 2321
            }
        ]
    },
    {
        "header": "Appendix CAdditional Discussion",
        "images": []
    }
]