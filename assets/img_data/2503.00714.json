[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1.Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.00714/x1.png",
                "caption": "Figure 1.SpeQL’s workflow as the user edits the query. Each node represents aSELECTstatement. SpeQL structures these nodes as a directed acyclic graph (DAG) and schedules their execution. The colored nodes indicate precomputed subqueries, while the result of the user’s highlighted (cursor-placed) query is previewed to the user.",
                "position": 140
            }
        ]
    },
    {
        "header": "2.Example of SpeQL Execution",
        "images": []
    },
    {
        "header": "3.SpeQL design",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.00714/x2.png",
                "caption": "Figure 2.SpeQL proposes a multi-level optimization hierarchy to mitigate varying degrees of misprediction.",
                "position": 240
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x3.png",
                "caption": "Figure 3.SpeQL’s modular architecture.",
                "position": 246
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x4.png",
                "caption": "Figure 4.Running example referenced throughout §3. SpeQL fetches user input, using a speculator to debug (①), autocomplete (②), and over-project (③). The scheduler receives the superset query and constructs a DAG of query commands (④), dispatches the commands to precompute data structures or intermediate results (⑤), and evolves the DAG structure as the new input comes (⑥).",
                "position": 278
            }
        ]
    },
    {
        "header": "4.Implementation",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.00714/x5.png",
                "caption": "Figure 5.SpeQL serves as an intermediary between the user’s editor and the analytical SQL database.",
                "position": 372
            }
        ]
    },
    {
        "header": "5.Evaluation",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.00714/x6.png",
                "caption": "Figure 6.Tree-, mesh-, and linear-like DAGs. Orange vertices represents temporary table creation queries, and blue vertices represents preview queries. The numberirepresents the vertex created when\nthe lastilines of code are revealed. ”0” indicates that the user has completed typing. DAGs of the remaining 100 TPC-DS(tpcds,)queries are in Appendix (Fig.13,14,15).",
                "position": 539
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x7.png",
                "caption": "Figure 7.SpeQL significantly reduces query latency. Literature(liu2014effects,)shows that latency greater than 500ms (vertical dashed lines) significantly degrades user’s performance.",
                "position": 588
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x8.png",
                "caption": "Figure 8.Overhead breakdown for each input.\"#i\"represents the time spent when the lastilines of code are revealed. The database time encompasses both temporary table creation and preview query running time (we measure them during the first run, see §5.1.6). The blue and green curves exclude timeouts, while the blue curve further omits planning/compilation time. The blue and orange horizontal axis lines are the baseline’s.",
                "position": 608
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x9.png",
                "caption": "Figure 9.LLM inference overhead.\"#i\"represents the cumulative time since the lastilines of code are revealed.",
                "position": 611
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x10.png",
                "caption": "Figure 10.SpeQL overlaps query processing and user typing.\"#i\"represents the cumulative time since the lastilines of code are revealed.",
                "position": 614
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x11.png",
                "caption": "Figure 11.Case Study. Blue arrows show dependencies.",
                "position": 665
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x12.png",
                "caption": "Figure 12.Utilily/user study. In (a), the boxes represent SpeQL’s latency while the purple triangles represent the baseline’s. In (b), (c), (d), the boxes in group A are SpeQL’s result while that in group B are the baseline’s.",
                "position": 709
            }
        ]
    },
    {
        "header": "6.Related Work",
        "images": []
    },
    {
        "header": "7.Limitations and Future work",
        "images": []
    },
    {
        "header": "8.Conclusion",
        "images": [
            {
                "img": "https://arxiv.org/html/2503.00714/x13.png",
                "caption": "Figure 13.Tree-like DAGs for TPCDS 100GB.",
                "position": 1301
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x14.png",
                "caption": "Figure 14.Mesh-like DAGs for TPCDS 100GB.",
                "position": 1304
            },
            {
                "img": "https://arxiv.org/html/2503.00714/x15.png",
                "caption": "Figure 15.Linear-like DAGs for TPCDS 100GB.",
                "position": 1307
            }
        ]
    },
    {
        "header": "References",
        "images": []
    }
]