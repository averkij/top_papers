[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.00413/x1.png",
                "caption": "Figure 1:Autoregressive vs Adaptive Parallel Decoding (APD).We visualize a sample from Qwen2.5 7B decoded autoregressively (baseline) and Dream 7B with APD (our method). Contiguous text of the same color indicates tokens sampled in parallel. Here, we show that APD generates the solution much faster than autoregressive sampling, which is sequential and slow.",
                "position": 92
            }
        ]
    },
    {
        "header": "2Background",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/2_k_variation_plot_dream.png",
                "caption": "Figure 2:Naive Parallel Generation.Fixing the number of tokenskùëòkitalic_kto semi-autoregressively generate (left to right) in parallel per iteration, we observe a clear tradeoff between parallelization and generation quality. This tradeoff exists with open source diffusion models: Dream and Llada.",
                "position": 225
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/2_k_variation_plot_llada.png",
                "caption": "",
                "position": 234
            }
        ]
    },
    {
        "header": "3Method",
        "images": []
    },
    {
        "header": "4Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/3_r_variation_plot.png",
                "caption": "Figure 3:Multiplicative Mixture Weight.In Adaptive Parallel Decoding (APD), smallerRùëÖRitalic_Rvalues result in fewer parallel tokens per iteration but maintain high quality. In particular, we achieve a far better tradeoff compared to naively parallelizing semi-autoregressively. Notably, generating over 5 tokens per iteration on average is possible with APD while maintaining‚àºsimilar-to\\sim‚àº80% accuracy on GSM8K. At the expense of some quality, even over 100 tokens per second is possible.",
                "position": 452
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/3_r_variation_plot.png",
                "caption": "",
                "position": 455
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/3_r_acceptance_rate_plot.png",
                "caption": "",
                "position": 459
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/4_m_variation_plot.png",
                "caption": "Figure 4:Maximum Masked Lookahead.We illustrate the trade-off between speed and quality when adjusting the maximum masked lookahead (MùëÄMitalic_M). DecreasingMùëÄMitalic_Mcan significantly increase throughput (speed) but it will also reduce quality by shortening the generation length. Thus, this parameter should not be made excessively small.",
                "position": 509
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/4_m_variation_plot.png",
                "caption": "",
                "position": 512
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/4_generation_length_plot.png",
                "caption": "",
                "position": 516
            },
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/6_pareto_frontier_plot.png",
                "caption": "Figure 5:The Pareto Frontier.Dream 7B configured with ADP achieves substantially higher speeds with negligible impact on performance compared to theK=1ùêæ1K=1italic_K = 1base model. Notably, Dream with ADP surpasses the speed of autoregressive Qwen 7B and even Qwen 0.5B. This establishes Dream with ADP as Pareto-optimal, as no other model configuration is superior in both speed and quality. We show two hyperparameter configurations of APD, showing that we can flexibly tradeoff speed and quality.",
                "position": 582
            }
        ]
    },
    {
        "header": "5Related Work",
        "images": []
    },
    {
        "header": "6Conclusion",
        "images": []
    },
    {
        "header": "7Acknowledgment",
        "images": []
    },
    {
        "header": "References",
        "images": []
    },
    {
        "header": "Appendix ALimitations",
        "images": []
    },
    {
        "header": "Appendix BRecompute KV Tradeoff",
        "images": [
            {
                "img": "https://arxiv.org/html/2506.00413/extracted/6492258/images/5_w_variation_plot.png",
                "caption": "Figure 6:",
                "position": 1160
            }
        ]
    },
    {
        "header": "Appendix CExperimental Details",
        "images": []
    },
    {
        "header": "Appendix DQualitative Examples",
        "images": []
    }
]