[
    {
        "header": "Abstract",
        "images": []
    },
    {
        "header": "1.Introduction",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21317/x1.png",
                "caption": "Figure 1.Comparison between traditional and novel interactive recommendation feeds. (a) Traditional systems rely on constrained and implicit feedback signals (e.g., likes/dislikes), making it difficult to accurately infer usersâ€™ true intentions. (b) Our interactive paradigm enables free-form natural language commands, where RecBot responds and adjusts recommendation policy on-the-fly based on active user commands.",
                "position": 163
            }
        ]
    },
    {
        "header": "2.Problem Setup and Formulation",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21317/x2.png",
                "caption": "Figure 2.Overview of the RecBot framework for interactive recommendation. The framework comprises a Parser Agent that transforms user natural language commandctc_{t}into structured preferencesPt+1P_{t+1}, and a Planner Agent that orchestrates tool chains to dynamically adjust recommendation policies and generate the next feedRt+1R_{t+1}.",
                "position": 225
            }
        ]
    },
    {
        "header": "3.Methodology",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21317/x3.png",
                "caption": "Figure 3.Illustration of theParserfor user intent understanding. TheParserintegrates history preference memoryPtP_{t}, current recommendation feedRtR_{t}, and active user commandctc_{t}to generate new preference representationPt+1P_{t+1}through structured parsing and dynamic memory consolidation.",
                "position": 349
            },
            {
                "img": "https://arxiv.org/html/2509.21317/x4.png",
                "caption": "Figure 4.Illustration of thePlannerfor on-the-fly recommendation policy adaptation. ThePlannerdynamically constructs optimal tool invocation sequences based on parsed user preferencesPt+1P_{t+1}to compute updated item scoressfinals_{\\mathrm{final}}for next recommendation feedRt+1R_{t+1}.",
                "position": 501
            }
        ]
    },
    {
        "header": "4.Experiments",
        "images": [
            {
                "img": "https://arxiv.org/html/2509.21317/x5.png",
                "caption": "Figure 5.Offline ablation study results on Amazon dataset. All numerical values on axes correspond to percentages (percentage notation is omitted for conciseness).",
                "position": 2192
            },
            {
                "img": "https://arxiv.org/html/2509.21317/x6.png",
                "caption": "Figure 6.Online performance curves during the three-month A/B testing period. The comparison shows RecBotvs.the base system with all metrics normalized using min-max scaling.",
                "position": 2218
            },
            {
                "img": "https://arxiv.org/html/2509.21317/x7.png",
                "caption": "Figure 7.Online performance improvements across different user groups split by historical negative feedback frequency.",
                "position": 2252
            },
            {
                "img": "https://arxiv.org/html/2509.21317/x8.png",
                "caption": "Figure 8.Case study of RecBot on production platform.",
                "position": 2299
            }
        ]
    },
    {
        "header": "5.Related Work",
        "images": []
    },
    {
        "header": "6.Conclusion",
        "images": []
    },
    {
        "header": "References",
        "images": []
    }
]